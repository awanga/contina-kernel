/*
 * REGISTERS.h
 */
#ifndef _REGISTERS_H_
#define _REGISTERS_H_

#include "cs_types.h"

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * GLB
 */
  



#define GLOBAL_JTAG_ID                           0xf0000000
#define GLOBAL_JTAG_ID_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 jtag_id              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 jtag_id              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_JTAG_ID_t;





#define GLOBAL_BLOCK_RESET                       0xf0000004
#define GLOBAL_BLOCK_RESET_dft                   0x00600000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reset_ts             :  1 ; /* bits 31:31 */
    cs_uint32 reset_lcd            :  1 ; /* bits 30:30 */
    cs_uint32 reset_phy            :  1 ; /* bits 29:29 */
    cs_uint32 reset_sd             :  1 ; /* bits 28:28 */
    cs_uint32 reset_rram           :  1 ; /* bits 27:27 */
    cs_uint32 reset_rreg           :  1 ; /* bits 26:26 */
    cs_uint32 reset_rniadapt       :  1 ; /* bits 25:25 */
    cs_uint32 reset_rcrypto        :  1 ; /* bits 24:24 */
    cs_uint32 reset_rdma           :  1 ; /* bits 23:23 */
    cs_uint32 reset_rcpu1          :  1 ; /* bits 22:22 */
    cs_uint32 reset_rcpu0          :  1 ; /* bits 21:21 */
    cs_uint32 reset_pwr            :  1 ; /* bits 20:20 */
    cs_uint32 reset_cir            :  1 ; /* bits 19:19 */
    cs_uint32 reset_rtc            :  1 ; /* bits 18:18 */
    cs_uint32 reset_ni_xram        :  1 ; /* bits 17:17 */
    cs_uint32 reset_dma            :  1 ; /* bits 16:16 */
    cs_uint32 reset_per            :  1 ; /* bits 15:15 */
    cs_uint32 reset_flash          :  1 ; /* bits 14:14 */
    cs_uint32 reset_usb            :  1 ; /* bits 13:13 */
    cs_uint32 reset_sata3          :  1 ; /* bits 12:12 */
    cs_uint32 reset_sata2          :  1 ; /* bits 11:11 */
    cs_uint32 reset_sata1          :  1 ; /* bits 10:10 */
    cs_uint32 reset_sata0          :  1 ; /* bits 9:9 */
    cs_uint32 reset_pcie2          :  1 ; /* bits 8:8 */
    cs_uint32 reset_pcie1          :  1 ; /* bits 7:7 */
    cs_uint32 reset_pcie0          :  1 ; /* bits 6:6 */
    cs_uint32 reset_qm             :  1 ; /* bits 5:5 */
    cs_uint32 reset_sdram          :  1 ; /* bits 4:4 */
    cs_uint32 reset_sch            :  1 ; /* bits 3:3 */
    cs_uint32 reset_tm             :  1 ; /* bits 2:2 */
    cs_uint32 reset_fe             :  1 ; /* bits 1:1 */
    cs_uint32 reset_ni             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reset_ni             :  1 ; /* bits 0:0 */
    cs_uint32 reset_fe             :  1 ; /* bits 1:1 */
    cs_uint32 reset_tm             :  1 ; /* bits 2:2 */
    cs_uint32 reset_sch            :  1 ; /* bits 3:3 */
    cs_uint32 reset_sdram          :  1 ; /* bits 4:4 */
    cs_uint32 reset_qm             :  1 ; /* bits 5:5 */
    cs_uint32 reset_pcie0          :  1 ; /* bits 6:6 */
    cs_uint32 reset_pcie1          :  1 ; /* bits 7:7 */
    cs_uint32 reset_pcie2          :  1 ; /* bits 8:8 */
    cs_uint32 reset_sata0          :  1 ; /* bits 9:9 */
    cs_uint32 reset_sata1          :  1 ; /* bits 10:10 */
    cs_uint32 reset_sata2          :  1 ; /* bits 11:11 */
    cs_uint32 reset_sata3          :  1 ; /* bits 12:12 */
    cs_uint32 reset_usb            :  1 ; /* bits 13:13 */
    cs_uint32 reset_flash          :  1 ; /* bits 14:14 */
    cs_uint32 reset_per            :  1 ; /* bits 15:15 */
    cs_uint32 reset_dma            :  1 ; /* bits 16:16 */
    cs_uint32 reset_ni_xram        :  1 ; /* bits 17:17 */
    cs_uint32 reset_rtc            :  1 ; /* bits 18:18 */
    cs_uint32 reset_cir            :  1 ; /* bits 19:19 */
    cs_uint32 reset_pwr            :  1 ; /* bits 20:20 */
    cs_uint32 reset_rcpu0          :  1 ; /* bits 21:21 */
    cs_uint32 reset_rcpu1          :  1 ; /* bits 22:22 */
    cs_uint32 reset_rdma           :  1 ; /* bits 23:23 */
    cs_uint32 reset_rcrypto        :  1 ; /* bits 24:24 */
    cs_uint32 reset_rniadapt       :  1 ; /* bits 25:25 */
    cs_uint32 reset_rreg           :  1 ; /* bits 26:26 */
    cs_uint32 reset_rram           :  1 ; /* bits 27:27 */
    cs_uint32 reset_sd             :  1 ; /* bits 28:28 */
    cs_uint32 reset_phy            :  1 ; /* bits 29:29 */
    cs_uint32 reset_lcd            :  1 ; /* bits 30:30 */
    cs_uint32 reset_ts             :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_BLOCK_RESET_t;





#define GLOBAL_ARM_RESET                         0xf0000008
#define GLOBAL_ARM_RESET_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 reset_ptm            :  1 ; /* bits 25:25 */
    cs_uint32 reset_at             :  1 ; /* bits 24:24 */
    cs_uint32 reset_ctm            :  1 ; /* bits 23:23 */
    cs_uint32 reset_trace          :  1 ; /* bits 22:22 */
    cs_uint32 axireset             :  1 ; /* bits 21:21 */
    cs_uint32 l2reset              :  1 ; /* bits 20:20 */
    cs_uint32 dbg1reset            :  1 ; /* bits 19:19 */
    cs_uint32 dbg0reset            :  1 ; /* bits 18:18 */
    cs_uint32 wd1reset             :  1 ; /* bits 17:17 */
    cs_uint32 wd0reset             :  1 ; /* bits 16:16 */
    cs_uint32 de1reset             :  1 ; /* bits 15:15 */
    cs_uint32 de0reset             :  1 ; /* bits 14:14 */
    cs_uint32 cpu1reset            :  1 ; /* bits 13:13 */
    cs_uint32 cpu0reset            :  1 ; /* bits 12:12 */
    cs_uint32 periphreset          :  1 ; /* bits 11:11 */
    cs_uint32 scureset             :  1 ; /* bits 10:10 */
    cs_uint32 prevent_l2_axi_reset :  1 ; /* bits 9:9 */
    cs_uint32 reset_vector         :  8 ; /* bits 8:1 */
    cs_uint32 restart              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 restart              :  1 ; /* bits 0:0 */
    cs_uint32 reset_vector         :  8 ; /* bits 8:1 */
    cs_uint32 prevent_l2_axi_reset :  1 ; /* bits 9:9 */
    cs_uint32 scureset             :  1 ; /* bits 10:10 */
    cs_uint32 periphreset          :  1 ; /* bits 11:11 */
    cs_uint32 cpu0reset            :  1 ; /* bits 12:12 */
    cs_uint32 cpu1reset            :  1 ; /* bits 13:13 */
    cs_uint32 de0reset             :  1 ; /* bits 14:14 */
    cs_uint32 de1reset             :  1 ; /* bits 15:15 */
    cs_uint32 wd0reset             :  1 ; /* bits 16:16 */
    cs_uint32 wd1reset             :  1 ; /* bits 17:17 */
    cs_uint32 dbg0reset            :  1 ; /* bits 18:18 */
    cs_uint32 dbg1reset            :  1 ; /* bits 19:19 */
    cs_uint32 l2reset              :  1 ; /* bits 20:20 */
    cs_uint32 axireset             :  1 ; /* bits 21:21 */
    cs_uint32 reset_trace          :  1 ; /* bits 22:22 */
    cs_uint32 reset_ctm            :  1 ; /* bits 23:23 */
    cs_uint32 reset_at             :  1 ; /* bits 24:24 */
    cs_uint32 reset_ptm            :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_RESET_t;





#define GLOBAL_STRAP                             0xf000000c
#define GLOBAL_STRAP_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 strap_core           :  1 ; /* bits 31:31 */
    cs_uint32 strap_ssp            :  1 ; /* bits 30:30 */
    cs_uint32 strap_ts             :  1 ; /* bits 29:29 */
    cs_uint32 strap_encr           :  2 ; /* bits 28:27 */
    cs_uint32 strap_package        :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 nand_ecc             :  2 ; /* bits 15:14 */
    cs_uint32 uart_message         :  1 ; /* bits 13:13 */
    cs_uint32 sata_sel             :  2 ; /* bits 12:11 */
    cs_uint32 flash_pin            :  1 ; /* bits 10:10 */
    cs_uint32 flash_width          :  1 ; /* bits 9:9 */
    cs_uint32 flash_size           :  2 ; /* bits 8:7 */
    cs_uint32 flash_type           :  3 ; /* bits 6:4 */
    cs_uint32 speed                :  3 ; /* bits 3:1 */
    cs_uint32 secure_mode          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 secure_mode          :  1 ; /* bits 0:0 */
    cs_uint32 speed                :  3 ; /* bits 3:1 */
    cs_uint32 flash_type           :  3 ; /* bits 6:4 */
    cs_uint32 flash_size           :  2 ; /* bits 8:7 */
    cs_uint32 flash_width          :  1 ; /* bits 9:9 */
    cs_uint32 flash_pin            :  1 ; /* bits 10:10 */
    cs_uint32 sata_sel             :  2 ; /* bits 12:11 */
    cs_uint32 uart_message         :  1 ; /* bits 13:13 */
    cs_uint32 nand_ecc             :  2 ; /* bits 15:14 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 strap_package        :  1 ; /* bits 26:26 */
    cs_uint32 strap_encr           :  2 ; /* bits 28:27 */
    cs_uint32 strap_ts             :  1 ; /* bits 29:29 */
    cs_uint32 strap_ssp            :  1 ; /* bits 30:30 */
    cs_uint32 strap_core           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_STRAP_t;





#define GLOBAL_GLOBAL_CONFIG                     0xf0000010
#define GLOBAL_GLOBAL_CONFIG_dft                 0x0001fc00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 core_pd              :  1 ; /* bits 31:31 */
    cs_uint32 recirc_pd            :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 refclk_25m           :  1 ; /* bits 18:18 */
    cs_uint32 ext_eth_refclk       :  1 ; /* bits 17:17 */
    cs_uint32 use_usb_osc          :  1 ; /* bits 16:16 */
    cs_uint32 cfg_sata_2_clken     :  1 ; /* bits 15:15 */
    cs_uint32 cfg_pcie_2_clken     :  1 ; /* bits 14:14 */
    cs_uint32 cfg_sata_1_clken     :  1 ; /* bits 13:13 */
    cs_uint32 cfg_pcie_1_clken     :  1 ; /* bits 12:12 */
    cs_uint32 cfg_sata_0_clken     :  1 ; /* bits 11:11 */
    cs_uint32 cfg_pcie_0_clken     :  1 ; /* bits 10:10 */
    cs_uint32 axi_reset_disable    :  1 ; /* bits 9:9 */
    cs_uint32 l2_reset_disable     :  1 ; /* bits 8:8 */
    cs_uint32 wd_reset_remap       :  1 ; /* bits 7:7 */
    cs_uint32 wd_reset_all_blocks  :  1 ; /* bits 6:6 */
    cs_uint32 wd1_reset_subsys_enable :  1 ; /* bits 5:5 */
    cs_uint32 wd0_reset_subsys_enable :  1 ; /* bits 4:4 */
    cs_uint32 wd_both_enable       :  1 ; /* bits 3:3 */
    cs_uint32 wd1_enable           :  1 ; /* bits 2:2 */
    cs_uint32 wd0_enable           :  1 ; /* bits 1:1 */
    cs_uint32 disable_remap        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 disable_remap        :  1 ; /* bits 0:0 */
    cs_uint32 wd0_enable           :  1 ; /* bits 1:1 */
    cs_uint32 wd1_enable           :  1 ; /* bits 2:2 */
    cs_uint32 wd_both_enable       :  1 ; /* bits 3:3 */
    cs_uint32 wd0_reset_subsys_enable :  1 ; /* bits 4:4 */
    cs_uint32 wd1_reset_subsys_enable :  1 ; /* bits 5:5 */
    cs_uint32 wd_reset_all_blocks  :  1 ; /* bits 6:6 */
    cs_uint32 wd_reset_remap       :  1 ; /* bits 7:7 */
    cs_uint32 l2_reset_disable     :  1 ; /* bits 8:8 */
    cs_uint32 axi_reset_disable    :  1 ; /* bits 9:9 */
    cs_uint32 cfg_pcie_0_clken     :  1 ; /* bits 10:10 */
    cs_uint32 cfg_sata_0_clken     :  1 ; /* bits 11:11 */
    cs_uint32 cfg_pcie_1_clken     :  1 ; /* bits 12:12 */
    cs_uint32 cfg_sata_1_clken     :  1 ; /* bits 13:13 */
    cs_uint32 cfg_pcie_2_clken     :  1 ; /* bits 14:14 */
    cs_uint32 cfg_sata_2_clken     :  1 ; /* bits 15:15 */
    cs_uint32 use_usb_osc          :  1 ; /* bits 16:16 */
    cs_uint32 ext_eth_refclk       :  1 ; /* bits 17:17 */
    cs_uint32 refclk_25m           :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 recirc_pd            :  1 ; /* bits 30:30 */
    cs_uint32 core_pd              :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_CONFIG_t;





#define GLOBAL_PHY_CONTROL                       0xf0000014
#define GLOBAL_PHY_CONTROL_dft                   0x00003faa




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 phy_3_por_n_i        :  1 ; /* bits 31:31 */
    cs_uint32 phy_3_fast_sim_i     :  1 ; /* bits 30:30 */
    cs_uint32 phy_3_ln0_resetn_i   :  1 ; /* bits 29:29 */
    cs_uint32 phy_3_cmu_resetn_i   :  1 ; /* bits 28:28 */
    cs_uint32 phy_2_por_n_i        :  1 ; /* bits 27:27 */
    cs_uint32 phy_2_fast_sim_i     :  1 ; /* bits 26:26 */
    cs_uint32 phy_2_ln0_resetn_i   :  1 ; /* bits 25:25 */
    cs_uint32 phy_2_cmu_resetn_i   :  1 ; /* bits 24:24 */
    cs_uint32 phy_1_por_n_i        :  1 ; /* bits 23:23 */
    cs_uint32 phy_1_fast_sim_i     :  1 ; /* bits 22:22 */
    cs_uint32 phy_1_ln0_resetn_i   :  1 ; /* bits 21:21 */
    cs_uint32 phy_1_cmu_resetn_i   :  1 ; /* bits 20:20 */
    cs_uint32 phy_0_por_n_i        :  1 ; /* bits 19:19 */
    cs_uint32 phy_0_fast_sim_i     :  1 ; /* bits 18:18 */
    cs_uint32 phy_0_ln0_resetn_i   :  1 ; /* bits 17:17 */
    cs_uint32 phy_0_cmu_resetn_i   :  1 ; /* bits 16:16 */
    cs_uint32 usb_port_reset_1     :  1 ; /* bits 15:15 */
    cs_uint32 usb_port_reset_0     :  1 ; /* bits 14:14 */
    cs_uint32 usb_phy1_por         :  1 ; /* bits 13:13 */
    cs_uint32 usb_phy0_por         :  1 ; /* bits 12:12 */
    cs_uint32 phy_3_pd             :  1 ; /* bits 11:11 */
    cs_uint32 phy_2_pd             :  1 ; /* bits 10:10 */
    cs_uint32 phy_1_pd             :  1 ; /* bits 9:9 */
    cs_uint32 phy_0_pd             :  1 ; /* bits 8:8 */
    cs_uint32 phy_3_refclksel      :  2 ; /* bits 7:6 */
    cs_uint32 phy_2_refclksel      :  2 ; /* bits 5:4 */
    cs_uint32 phy_1_refclksel      :  2 ; /* bits 3:2 */
    cs_uint32 phy_0_refclksel      :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 phy_0_refclksel      :  2 ; /* bits 1:0 */
    cs_uint32 phy_1_refclksel      :  2 ; /* bits 3:2 */
    cs_uint32 phy_2_refclksel      :  2 ; /* bits 5:4 */
    cs_uint32 phy_3_refclksel      :  2 ; /* bits 7:6 */
    cs_uint32 phy_0_pd             :  1 ; /* bits 8:8 */
    cs_uint32 phy_1_pd             :  1 ; /* bits 9:9 */
    cs_uint32 phy_2_pd             :  1 ; /* bits 10:10 */
    cs_uint32 phy_3_pd             :  1 ; /* bits 11:11 */
    cs_uint32 usb_phy0_por         :  1 ; /* bits 12:12 */
    cs_uint32 usb_phy1_por         :  1 ; /* bits 13:13 */
    cs_uint32 usb_port_reset_0     :  1 ; /* bits 14:14 */
    cs_uint32 usb_port_reset_1     :  1 ; /* bits 15:15 */
    cs_uint32 phy_0_cmu_resetn_i   :  1 ; /* bits 16:16 */
    cs_uint32 phy_0_ln0_resetn_i   :  1 ; /* bits 17:17 */
    cs_uint32 phy_0_fast_sim_i     :  1 ; /* bits 18:18 */
    cs_uint32 phy_0_por_n_i        :  1 ; /* bits 19:19 */
    cs_uint32 phy_1_cmu_resetn_i   :  1 ; /* bits 20:20 */
    cs_uint32 phy_1_ln0_resetn_i   :  1 ; /* bits 21:21 */
    cs_uint32 phy_1_fast_sim_i     :  1 ; /* bits 22:22 */
    cs_uint32 phy_1_por_n_i        :  1 ; /* bits 23:23 */
    cs_uint32 phy_2_cmu_resetn_i   :  1 ; /* bits 24:24 */
    cs_uint32 phy_2_ln0_resetn_i   :  1 ; /* bits 25:25 */
    cs_uint32 phy_2_fast_sim_i     :  1 ; /* bits 26:26 */
    cs_uint32 phy_2_por_n_i        :  1 ; /* bits 27:27 */
    cs_uint32 phy_3_cmu_resetn_i   :  1 ; /* bits 28:28 */
    cs_uint32 phy_3_ln0_resetn_i   :  1 ; /* bits 29:29 */
    cs_uint32 phy_3_fast_sim_i     :  1 ; /* bits 30:30 */
    cs_uint32 phy_3_por_n_i        :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_PHY_CONTROL_t;





#define GLOBAL_PIN_MUX                           0xf0000018
#define GLOBAL_PIN_MUX_dft                       0x80000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 flash_mux_sel        :  1 ; /* bits 31:31 */
    cs_uint32 fmro_enable          :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pmux_frac_clk_en_gpio1_16 :  1 ; /* bits 26:26 */
    cs_uint32 pmux_frac_clk_en_gpio1_11 :  1 ; /* bits 25:25 */
    cs_uint32 pmux_frac_clk_en_gpio1_10 :  1 ; /* bits 24:24 */
    cs_uint32 pmux_s2_gpio2_8      :  1 ; /* bits 23:23 */
    cs_uint32 pmux_s3_gpio2_9      :  1 ; /* bits 22:22 */
    cs_uint32 pmux_s2_gpio2_10     :  1 ; /* bits 21:21 */
    cs_uint32 pmux_s3_gpio2_11     :  1 ; /* bits 20:20 */
    cs_uint32 pmux_s0_gpio2_26     :  1 ; /* bits 19:19 */
    cs_uint32 pmux_s1_gpio2_27     :  1 ; /* bits 18:18 */
    cs_uint32 pmux_s2_gpio2_28     :  1 ; /* bits 17:17 */
    cs_uint32 pmux_s3_gpio2_29     :  1 ; /* bits 16:16 */
    cs_uint32 pmux_s1_gpio2_12     :  1 ; /* bits 15:15 */
    cs_uint32 pmux_s0_gpio2_13     :  1 ; /* bits 14:14 */
    cs_uint32 pmux_s0_gpio0_26     :  1 ; /* bits 13:13 */
    cs_uint32 pmux_s1_gpio0_25     :  1 ; /* bits 12:12 */
    cs_uint32 pmux_s1_gpio0_22     :  1 ; /* bits 11:11 */
    cs_uint32 pmux_s0_gpio0_21     :  1 ; /* bits 10:10 */
    cs_uint32 pwm_sf               :  1 ; /* bits 9:9 */
    cs_uint32 pwm_pf               :  1 ; /* bits 8:8 */
    cs_uint32 pwm_nf               :  1 ; /* bits 7:7 */
    cs_uint32 uart_0_hwfc_gpio_enable :  1 ; /* bits 6:6 */
    cs_uint32 uart_0_hwfc_spi_enable :  1 ; /* bits 5:5 */
    cs_uint32 uart_1_hwfc_enable   :  1 ; /* bits 4:4 */
    cs_uint32 uart_0_hwfc_enable   :  1 ; /* bits 3:3 */
    cs_uint32 arm_trace_enable     :  1 ; /* bits 2:2 */
    cs_uint32 pmux_flash           :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pmux_flash           :  2 ; /* bits 1:0 */
    cs_uint32 arm_trace_enable     :  1 ; /* bits 2:2 */
    cs_uint32 uart_0_hwfc_enable   :  1 ; /* bits 3:3 */
    cs_uint32 uart_1_hwfc_enable   :  1 ; /* bits 4:4 */
    cs_uint32 uart_0_hwfc_spi_enable :  1 ; /* bits 5:5 */
    cs_uint32 uart_0_hwfc_gpio_enable :  1 ; /* bits 6:6 */
    cs_uint32 pwm_nf               :  1 ; /* bits 7:7 */
    cs_uint32 pwm_pf               :  1 ; /* bits 8:8 */
    cs_uint32 pwm_sf               :  1 ; /* bits 9:9 */
    cs_uint32 pmux_s0_gpio0_21     :  1 ; /* bits 10:10 */
    cs_uint32 pmux_s1_gpio0_22     :  1 ; /* bits 11:11 */
    cs_uint32 pmux_s1_gpio0_25     :  1 ; /* bits 12:12 */
    cs_uint32 pmux_s0_gpio0_26     :  1 ; /* bits 13:13 */
    cs_uint32 pmux_s0_gpio2_13     :  1 ; /* bits 14:14 */
    cs_uint32 pmux_s1_gpio2_12     :  1 ; /* bits 15:15 */
    cs_uint32 pmux_s3_gpio2_29     :  1 ; /* bits 16:16 */
    cs_uint32 pmux_s2_gpio2_28     :  1 ; /* bits 17:17 */
    cs_uint32 pmux_s1_gpio2_27     :  1 ; /* bits 18:18 */
    cs_uint32 pmux_s0_gpio2_26     :  1 ; /* bits 19:19 */
    cs_uint32 pmux_s3_gpio2_11     :  1 ; /* bits 20:20 */
    cs_uint32 pmux_s2_gpio2_10     :  1 ; /* bits 21:21 */
    cs_uint32 pmux_s3_gpio2_9      :  1 ; /* bits 22:22 */
    cs_uint32 pmux_s2_gpio2_8      :  1 ; /* bits 23:23 */
    cs_uint32 pmux_frac_clk_en_gpio1_10 :  1 ; /* bits 24:24 */
    cs_uint32 pmux_frac_clk_en_gpio1_11 :  1 ; /* bits 25:25 */
    cs_uint32 pmux_frac_clk_en_gpio1_16 :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 fmro_enable          :  1 ; /* bits 30:30 */
    cs_uint32 flash_mux_sel        :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_PIN_MUX_t;





#define GLOBAL_GPIO_MUX_0                        0xf000001c
#define GLOBAL_GPIO_MUX_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpio0en              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpio0en              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GPIO_MUX_0_t;





#define GLOBAL_GPIO_MUX_1                        0xf0000020
#define GLOBAL_GPIO_MUX_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpio1en              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpio1en              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GPIO_MUX_1_t;





#define GLOBAL_GPIO_MUX_2                        0xf0000024
#define GLOBAL_GPIO_MUX_2_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpio2en              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpio2en              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GPIO_MUX_2_t;





#define GLOBAL_GPIO_MUX_3                        0xf0000028
#define GLOBAL_GPIO_MUX_3_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpio3en              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpio3en              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GPIO_MUX_3_t;





#define GLOBAL_GPIO_MUX_4                        0xf000002c
#define GLOBAL_GPIO_MUX_4_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpio4en              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpio4en              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GPIO_MUX_4_t;





#define GLOBAL_DDR_PLL                           0xf0000030
#define GLOBAL_DDR_PLL_dft                       0x00462be9




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 ddr_phy_reset        :  1 ; /* bits 22:22 */
    cs_uint32 p                    :  6 ; /* bits 21:16 */
    cs_uint32 s                    :  3 ; /* bits 15:13 */
    cs_uint32 enable               :  1 ; /* bits 12:12 */
    cs_uint32 vsel                 :  1 ; /* bits 11:11 */
    cs_uint32 m                    : 10 ; /* bits 10:1 */
    cs_uint32 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reset                :  1 ; /* bits 0:0 */
    cs_uint32 m                    : 10 ; /* bits 10:1 */
    cs_uint32 vsel                 :  1 ; /* bits 11:11 */
    cs_uint32 enable               :  1 ; /* bits 12:12 */
    cs_uint32 s                    :  3 ; /* bits 15:13 */
    cs_uint32 p                    :  6 ; /* bits 21:16 */
    cs_uint32 ddr_phy_reset        :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_DDR_PLL_t;





#define GLOBAL_ARM_POWER_CONTROL                 0xf0000034
#define GLOBAL_ARM_POWER_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 eventi               :  1 ; /* bits 1:1 */
    cs_uint32 scupowerdown         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 scupowerdown         :  1 ; /* bits 0:0 */
    cs_uint32 eventi               :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_POWER_CONTROL_t;





#define GLOBAL_ARM_POWER_CONTROL_CPU0            0xf0000038
#define GLOBAL_ARM_POWER_CONTROL_CPU0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 cpuclamp0            :  1 ; /* bits 2:2 */
    cs_uint32 cpupowerdown0        :  1 ; /* bits 1:1 */
    cs_uint32 poweroff             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 poweroff             :  1 ; /* bits 0:0 */
    cs_uint32 cpupowerdown0        :  1 ; /* bits 1:1 */
    cs_uint32 cpuclamp0            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_POWER_CONTROL_CPU0_t;





#define GLOBAL_ARM_POWER_CONTROL_CPU1            0xf000003c
#define GLOBAL_ARM_POWER_CONTROL_CPU1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 cpuclamp1            :  1 ; /* bits 2:2 */
    cs_uint32 cpupowerdown1        :  1 ; /* bits 1:1 */
    cs_uint32 poweroff             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 poweroff             :  1 ; /* bits 0:0 */
    cs_uint32 cpupowerdown1        :  1 ; /* bits 1:1 */
    cs_uint32 cpuclamp1            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_POWER_CONTROL_CPU1_t;





#define GLOBAL_ARM_STATE                         0xf0000040
#define GLOBAL_ARM_STATE_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 cpu1_wd_req          :  1 ; /* bits 22:22 */
    cs_uint32 cpu0_wd_req          :  1 ; /* bits 21:21 */
    cs_uint32 pll3_switch_state    :  1 ; /* bits 20:20 */
    cs_uint32 pll2_switch_state    :  1 ; /* bits 19:19 */
    cs_uint32 pll1_switch_state    :  1 ; /* bits 18:18 */
    cs_uint32 pll0_switch_state    :  1 ; /* bits 17:17 */
    cs_uint32 pll3_lock            :  1 ; /* bits 16:16 */
    cs_uint32 pll2_lock            :  1 ; /* bits 15:15 */
    cs_uint32 pll1_lock            :  1 ; /* bits 14:14 */
    cs_uint32 pll0_lock            :  1 ; /* bits 13:13 */
    cs_uint32 l2_clkstopped        :  1 ; /* bits 12:12 */
    cs_uint32 l2_idle              :  1 ; /* bits 11:11 */
    cs_uint32 standbywfe1          :  1 ; /* bits 10:10 */
    cs_uint32 standbywfe0          :  1 ; /* bits 9:9 */
    cs_uint32 standbywfi1          :  1 ; /* bits 8:8 */
    cs_uint32 standbywfi0          :  1 ; /* bits 7:7 */
    cs_uint32 pwrctlo1             :  2 ; /* bits 6:5 */
    cs_uint32 pwrctlo0             :  2 ; /* bits 4:3 */
    cs_uint32 snpnamp1             :  1 ; /* bits 2:2 */
    cs_uint32 snpnamp0             :  1 ; /* bits 1:1 */
    cs_uint32 evento               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 evento               :  1 ; /* bits 0:0 */
    cs_uint32 snpnamp0             :  1 ; /* bits 1:1 */
    cs_uint32 snpnamp1             :  1 ; /* bits 2:2 */
    cs_uint32 pwrctlo0             :  2 ; /* bits 4:3 */
    cs_uint32 pwrctlo1             :  2 ; /* bits 6:5 */
    cs_uint32 standbywfi0          :  1 ; /* bits 7:7 */
    cs_uint32 standbywfi1          :  1 ; /* bits 8:8 */
    cs_uint32 standbywfe0          :  1 ; /* bits 9:9 */
    cs_uint32 standbywfe1          :  1 ; /* bits 10:10 */
    cs_uint32 l2_idle              :  1 ; /* bits 11:11 */
    cs_uint32 l2_clkstopped        :  1 ; /* bits 12:12 */
    cs_uint32 pll0_lock            :  1 ; /* bits 13:13 */
    cs_uint32 pll1_lock            :  1 ; /* bits 14:14 */
    cs_uint32 pll2_lock            :  1 ; /* bits 15:15 */
    cs_uint32 pll3_lock            :  1 ; /* bits 16:16 */
    cs_uint32 pll0_switch_state    :  1 ; /* bits 17:17 */
    cs_uint32 pll1_switch_state    :  1 ; /* bits 18:18 */
    cs_uint32 pll2_switch_state    :  1 ; /* bits 19:19 */
    cs_uint32 pll3_switch_state    :  1 ; /* bits 20:20 */
    cs_uint32 cpu0_wd_req          :  1 ; /* bits 21:21 */
    cs_uint32 cpu1_wd_req          :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_STATE_t;





#define GLOBAL_ARM_CONFIG_A                      0xf0000044
#define GLOBAL_ARM_CONFIG_A_dft                  0x30000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 arm_clk_off          :  1 ; /* bits 31:31 */
    cs_uint32 arm_per_clk_off      :  1 ; /* bits 30:30 */
    cs_uint32 dbgswenable          :  2 ; /* bits 29:28 */
    cs_uint32 filterstart          : 12 ; /* bits 27:16 */
    cs_uint32 filteren             :  1 ; /* bits 15:15 */
    cs_uint32 declockoff1          :  1 ; /* bits 14:14 */
    cs_uint32 declockoff0          :  1 ; /* bits 13:13 */
    cs_uint32 cp15sdisable1        :  1 ; /* bits 12:12 */
    cs_uint32 cp15sdisable0        :  1 ; /* bits 11:11 */
    cs_uint32 cpuclockoff1         :  1 ; /* bits 10:10 */
    cs_uint32 cpuclockoff0         :  1 ; /* bits 9:9 */
    cs_uint32 clusterid            :  4 ; /* bits 8:5 */
    cs_uint32 cfgsdisable          :  1 ; /* bits 4:4 */
    cs_uint32 cfgnmfi1             :  1 ; /* bits 3:3 */
    cs_uint32 cfgnmfi0             :  1 ; /* bits 2:2 */
    cs_uint32 cfgend1              :  1 ; /* bits 1:1 */
    cs_uint32 cfgend0              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfgend0              :  1 ; /* bits 0:0 */
    cs_uint32 cfgend1              :  1 ; /* bits 1:1 */
    cs_uint32 cfgnmfi0             :  1 ; /* bits 2:2 */
    cs_uint32 cfgnmfi1             :  1 ; /* bits 3:3 */
    cs_uint32 cfgsdisable          :  1 ; /* bits 4:4 */
    cs_uint32 clusterid            :  4 ; /* bits 8:5 */
    cs_uint32 cpuclockoff0         :  1 ; /* bits 9:9 */
    cs_uint32 cpuclockoff1         :  1 ; /* bits 10:10 */
    cs_uint32 cp15sdisable0        :  1 ; /* bits 11:11 */
    cs_uint32 cp15sdisable1        :  1 ; /* bits 12:12 */
    cs_uint32 declockoff0          :  1 ; /* bits 13:13 */
    cs_uint32 declockoff1          :  1 ; /* bits 14:14 */
    cs_uint32 filteren             :  1 ; /* bits 15:15 */
    cs_uint32 filterstart          : 12 ; /* bits 27:16 */
    cs_uint32 dbgswenable          :  2 ; /* bits 29:28 */
    cs_uint32 arm_per_clk_off      :  1 ; /* bits 30:30 */
    cs_uint32 arm_clk_off          :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_CONFIG_A_t;





#define GLOBAL_ARM_CONFIG_B                      0xf0000048
#define GLOBAL_ARM_CONFIG_B_dft                  0x00004000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 pwrctrli1            :  2 ; /* bits 22:21 */
    cs_uint32 pwrctrli0            :  2 ; /* bits 20:19 */
    cs_uint32 vinithi1             :  1 ; /* bits 18:18 */
    cs_uint32 vinithi0             :  1 ; /* bits 17:17 */
    cs_uint32 teinit1              :  1 ; /* bits 16:16 */
    cs_uint32 teinit0              :  1 ; /* bits 15:15 */
    cs_uint32 maxclklatency        :  3 ; /* bits 14:12 */
    cs_uint32 filterend            : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 filterend            : 12 ; /* bits 11:0 */
    cs_uint32 maxclklatency        :  3 ; /* bits 14:12 */
    cs_uint32 teinit0              :  1 ; /* bits 15:15 */
    cs_uint32 teinit1              :  1 ; /* bits 16:16 */
    cs_uint32 vinithi0             :  1 ; /* bits 17:17 */
    cs_uint32 vinithi1             :  1 ; /* bits 18:18 */
    cs_uint32 pwrctrli0            :  2 ; /* bits 20:19 */
    cs_uint32 pwrctrli1            :  2 ; /* bits 22:21 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_CONFIG_B_t;





#define GLOBAL_ARM_CONFIG_C                      0xf000004c
#define GLOBAL_ARM_CONFIG_C_dft                  0x0007c000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 trace_clk_sel        :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 periphbase           : 19 ; /* bits 18:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 periphbase           : 19 ; /* bits 18:0 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 trace_clk_sel        :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_CONFIG_C_t;





#define GLOBAL_ARM_CONFIG_D                      0xf0000050
#define GLOBAL_ARM_CONFIG_D_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 recirc1_user         :  5 ; /* bits 26:22 */
    cs_uint32 recirc0_user         :  5 ; /* bits 21:17 */
    cs_uint32 periph_user          :  5 ; /* bits 16:12 */
    cs_uint32 recirc1_cache        :  4 ; /* bits 11:8 */
    cs_uint32 recirc0_cache        :  4 ; /* bits 7:4 */
    cs_uint32 periph_cache         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 periph_cache         :  4 ; /* bits 3:0 */
    cs_uint32 recirc0_cache        :  4 ; /* bits 7:4 */
    cs_uint32 recirc1_cache        :  4 ; /* bits 11:8 */
    cs_uint32 periph_user          :  5 ; /* bits 16:12 */
    cs_uint32 recirc0_user         :  5 ; /* bits 21:17 */
    cs_uint32 recirc1_user         :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_CONFIG_D_t;





#define GLOBAL_ARM_CONFIG_E                      0xf0000054
#define GLOBAL_ARM_CONFIG_E_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 qmacp_user           :  5 ; /* bits 8:4 */
    cs_uint32 qmacp_cache          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qmacp_cache          :  4 ; /* bits 3:0 */
    cs_uint32 qmacp_user           :  5 ; /* bits 8:4 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_CONFIG_E_t;





#define GLOBAL_L2_CONFIG_A                       0xf0000058
#define GLOBAL_L2_CONFIG_A_dft                   0x1ff80440




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 cfgaddrfiltend       : 12 ; /* bits 30:19 */
    cs_uint32 cfgaddrfiltstart     : 12 ; /* bits 18:7 */
    cs_uint32 cfgaddrfilten        :  1 ; /* bits 6:6 */
    cs_uint32 cacheid              :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cacheid              :  6 ; /* bits 5:0 */
    cs_uint32 cfgaddrfilten        :  1 ; /* bits 6:6 */
    cs_uint32 cfgaddrfiltstart     : 12 ; /* bits 18:7 */
    cs_uint32 cfgaddrfiltend       : 12 ; /* bits 30:19 */
    cs_uint32 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_L2_CONFIG_A_t;





#define GLOBAL_L2_CONFIG_B                       0xf000005c
#define GLOBAL_L2_CONFIG_B_dft                   0x005ea020




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 waysize              :  3 ; /* bits 23:21 */
    cs_uint32 regfilebase          : 20 ; /* bits 20:1 */
    cs_uint32 cfgbigend            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfgbigend            :  1 ; /* bits 0:0 */
    cs_uint32 regfilebase          : 20 ; /* bits 20:1 */
    cs_uint32 waysize              :  3 ; /* bits 23:21 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_L2_CONFIG_B_t;





#define GLOBAL_ARM_PARITY_INTERRUPT              0xf0000060
#define GLOBAL_ARM_PARITY_INTERRUPT_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 PARITYFAIL17i        :  1 ; /* bits 17:17 */
    cs_uint32 PARITYFAIL16i        :  1 ; /* bits 16:16 */
    cs_uint32 PARITYFAIL15i        :  1 ; /* bits 15:15 */
    cs_uint32 PARITYFAIL14i        :  1 ; /* bits 14:14 */
    cs_uint32 PARITYFAIL13i        :  1 ; /* bits 13:13 */
    cs_uint32 PARITYFAIL12i        :  1 ; /* bits 12:12 */
    cs_uint32 PARITYFAIL11i        :  1 ; /* bits 11:11 */
    cs_uint32 PARITYFAIL10i        :  1 ; /* bits 10:10 */
    cs_uint32 PARITYFAIL07i        :  1 ; /* bits 9:9 */
    cs_uint32 PARITYFAIL06i        :  1 ; /* bits 8:8 */
    cs_uint32 PARITYFAIL05i        :  1 ; /* bits 7:7 */
    cs_uint32 PARITYFAIL04i        :  1 ; /* bits 6:6 */
    cs_uint32 PARITYFAIL03i        :  1 ; /* bits 5:5 */
    cs_uint32 PARITYFAIL02i        :  1 ; /* bits 4:4 */
    cs_uint32 PARITYFAIL01i        :  1 ; /* bits 3:3 */
    cs_uint32 PARITYFAIL00i        :  1 ; /* bits 2:2 */
    cs_uint32 PARITYSCU1i          :  1 ; /* bits 1:1 */
    cs_uint32 PARITYSCU0i          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PARITYSCU0i          :  1 ; /* bits 0:0 */
    cs_uint32 PARITYSCU1i          :  1 ; /* bits 1:1 */
    cs_uint32 PARITYFAIL00i        :  1 ; /* bits 2:2 */
    cs_uint32 PARITYFAIL01i        :  1 ; /* bits 3:3 */
    cs_uint32 PARITYFAIL02i        :  1 ; /* bits 4:4 */
    cs_uint32 PARITYFAIL03i        :  1 ; /* bits 5:5 */
    cs_uint32 PARITYFAIL04i        :  1 ; /* bits 6:6 */
    cs_uint32 PARITYFAIL05i        :  1 ; /* bits 7:7 */
    cs_uint32 PARITYFAIL06i        :  1 ; /* bits 8:8 */
    cs_uint32 PARITYFAIL07i        :  1 ; /* bits 9:9 */
    cs_uint32 PARITYFAIL10i        :  1 ; /* bits 10:10 */
    cs_uint32 PARITYFAIL11i        :  1 ; /* bits 11:11 */
    cs_uint32 PARITYFAIL12i        :  1 ; /* bits 12:12 */
    cs_uint32 PARITYFAIL13i        :  1 ; /* bits 13:13 */
    cs_uint32 PARITYFAIL14i        :  1 ; /* bits 14:14 */
    cs_uint32 PARITYFAIL15i        :  1 ; /* bits 15:15 */
    cs_uint32 PARITYFAIL16i        :  1 ; /* bits 16:16 */
    cs_uint32 PARITYFAIL17i        :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_PARITY_INTERRUPT_t;





#define GLOBAL_ARM_PARITY_INTENABLE              0xf0000064
#define GLOBAL_ARM_PARITY_INTENABLE_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 PARITYFAIL17e        :  1 ; /* bits 17:17 */
    cs_uint32 PARITYFAIL16e        :  1 ; /* bits 16:16 */
    cs_uint32 PARITYFAIL15e        :  1 ; /* bits 15:15 */
    cs_uint32 PARITYFAIL14e        :  1 ; /* bits 14:14 */
    cs_uint32 PARITYFAIL13e        :  1 ; /* bits 13:13 */
    cs_uint32 PARITYFAIL12e        :  1 ; /* bits 12:12 */
    cs_uint32 PARITYFAIL11e        :  1 ; /* bits 11:11 */
    cs_uint32 PARITYFAIL10e        :  1 ; /* bits 10:10 */
    cs_uint32 PARITYFAIL07e        :  1 ; /* bits 9:9 */
    cs_uint32 PARITYFAIL06e        :  1 ; /* bits 8:8 */
    cs_uint32 PARITYFAIL05e        :  1 ; /* bits 7:7 */
    cs_uint32 PARITYFAIL04e        :  1 ; /* bits 6:6 */
    cs_uint32 PARITYFAIL03e        :  1 ; /* bits 5:5 */
    cs_uint32 PARITYFAIL02e        :  1 ; /* bits 4:4 */
    cs_uint32 PARITYFAIL01e        :  1 ; /* bits 3:3 */
    cs_uint32 PARITYFAIL00e        :  1 ; /* bits 2:2 */
    cs_uint32 PARITYSCU1e          :  1 ; /* bits 1:1 */
    cs_uint32 PARITYSCU0e          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PARITYSCU0e          :  1 ; /* bits 0:0 */
    cs_uint32 PARITYSCU1e          :  1 ; /* bits 1:1 */
    cs_uint32 PARITYFAIL00e        :  1 ; /* bits 2:2 */
    cs_uint32 PARITYFAIL01e        :  1 ; /* bits 3:3 */
    cs_uint32 PARITYFAIL02e        :  1 ; /* bits 4:4 */
    cs_uint32 PARITYFAIL03e        :  1 ; /* bits 5:5 */
    cs_uint32 PARITYFAIL04e        :  1 ; /* bits 6:6 */
    cs_uint32 PARITYFAIL05e        :  1 ; /* bits 7:7 */
    cs_uint32 PARITYFAIL06e        :  1 ; /* bits 8:8 */
    cs_uint32 PARITYFAIL07e        :  1 ; /* bits 9:9 */
    cs_uint32 PARITYFAIL10e        :  1 ; /* bits 10:10 */
    cs_uint32 PARITYFAIL11e        :  1 ; /* bits 11:11 */
    cs_uint32 PARITYFAIL12e        :  1 ; /* bits 12:12 */
    cs_uint32 PARITYFAIL13e        :  1 ; /* bits 13:13 */
    cs_uint32 PARITYFAIL14e        :  1 ; /* bits 14:14 */
    cs_uint32 PARITYFAIL15e        :  1 ; /* bits 15:15 */
    cs_uint32 PARITYFAIL16e        :  1 ; /* bits 16:16 */
    cs_uint32 PARITYFAIL17e        :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_PARITY_INTENABLE_t;





#define GLOBAL_SYSTEM_INTERRUPT                  0xf0000068
#define GLOBAL_SYSTEM_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 CPU1_WD_REQi         :  1 ; /* bits 5:5 */
    cs_uint32 CPU0_WD_REQi         :  1 ; /* bits 4:4 */
    cs_uint32 PLL3_LOCKi           :  1 ; /* bits 3:3 */
    cs_uint32 PLL2_LOCKi           :  1 ; /* bits 2:2 */
    cs_uint32 PLL1_LOCKi           :  1 ; /* bits 1:1 */
    cs_uint32 PLL0_LOCKi           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PLL0_LOCKi           :  1 ; /* bits 0:0 */
    cs_uint32 PLL1_LOCKi           :  1 ; /* bits 1:1 */
    cs_uint32 PLL2_LOCKi           :  1 ; /* bits 2:2 */
    cs_uint32 PLL3_LOCKi           :  1 ; /* bits 3:3 */
    cs_uint32 CPU0_WD_REQi         :  1 ; /* bits 4:4 */
    cs_uint32 CPU1_WD_REQi         :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SYSTEM_INTERRUPT_t;





#define GLOBAL_SYSTEM_INTENABLE                  0xf000006c
#define GLOBAL_SYSTEM_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 CPU1_WD_REQe         :  1 ; /* bits 5:5 */
    cs_uint32 CPU0_WD_REQe         :  1 ; /* bits 4:4 */
    cs_uint32 PLL3_LOCKe           :  1 ; /* bits 3:3 */
    cs_uint32 PLL2_LOCKe           :  1 ; /* bits 2:2 */
    cs_uint32 PLL1_LOCKe           :  1 ; /* bits 1:1 */
    cs_uint32 PLL0_LOCKe           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PLL0_LOCKe           :  1 ; /* bits 0:0 */
    cs_uint32 PLL1_LOCKe           :  1 ; /* bits 1:1 */
    cs_uint32 PLL2_LOCKe           :  1 ; /* bits 2:2 */
    cs_uint32 PLL3_LOCKe           :  1 ; /* bits 3:3 */
    cs_uint32 CPU0_WD_REQe         :  1 ; /* bits 4:4 */
    cs_uint32 CPU1_WD_REQe         :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SYSTEM_INTENABLE_t;





#define GLOBAL_NETWORK_ENGINE_INTERRUPT_0        0xf0000070
#define GLOBAL_NETWORK_ENGINE_INTERRUPT_0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 25 ;
    cs_uint32 SCHi                 :  1 ; /* bits 6:6 */
    cs_uint32 QMi                  :  1 ; /* bits 5:5 */
    cs_uint32 TMi                  :  1 ; /* bits 4:4 */
    cs_uint32 FEi                  :  1 ; /* bits 3:3 */
    cs_uint32 NIi                  :  1 ; /* bits 2:2 */
    cs_uint32 NI_XRAM_TXi          :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 NI_XRAM_TXi          :  1 ; /* bits 1:1 */
    cs_uint32 NIi                  :  1 ; /* bits 2:2 */
    cs_uint32 FEi                  :  1 ; /* bits 3:3 */
    cs_uint32 TMi                  :  1 ; /* bits 4:4 */
    cs_uint32 QMi                  :  1 ; /* bits 5:5 */
    cs_uint32 SCHi                 :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_NETWORK_ENGINE_INTERRUPT_0_t;





#define GLOBAL_NETWORK_ENGINE_INTENABLE_0        0xf0000074
#define GLOBAL_NETWORK_ENGINE_INTENABLE_0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 25 ;
    cs_uint32 SCHe                 :  1 ; /* bits 6:6 */
    cs_uint32 QMe                  :  1 ; /* bits 5:5 */
    cs_uint32 TMe                  :  1 ; /* bits 4:4 */
    cs_uint32 FEe                  :  1 ; /* bits 3:3 */
    cs_uint32 NIe                  :  1 ; /* bits 2:2 */
    cs_uint32 NI_XRAM_TXe          :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 NI_XRAM_TXe          :  1 ; /* bits 1:1 */
    cs_uint32 NIe                  :  1 ; /* bits 2:2 */
    cs_uint32 FEe                  :  1 ; /* bits 3:3 */
    cs_uint32 TMe                  :  1 ; /* bits 4:4 */
    cs_uint32 QMe                  :  1 ; /* bits 5:5 */
    cs_uint32 SCHe                 :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_NETWORK_ENGINE_INTENABLE_0_t;





#define GLOBAL_NETWORK_ENGINE_INTERRUPT_1        0xf0000078
#define GLOBAL_NETWORK_ENGINE_INTERRUPT_1_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 25 ;
    cs_uint32 SCHi                 :  1 ; /* bits 6:6 */
    cs_uint32 QMi                  :  1 ; /* bits 5:5 */
    cs_uint32 TMi                  :  1 ; /* bits 4:4 */
    cs_uint32 FEi                  :  1 ; /* bits 3:3 */
    cs_uint32 NIi                  :  1 ; /* bits 2:2 */
    cs_uint32 NI_XRAM_TXi          :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 NI_XRAM_TXi          :  1 ; /* bits 1:1 */
    cs_uint32 NIi                  :  1 ; /* bits 2:2 */
    cs_uint32 FEi                  :  1 ; /* bits 3:3 */
    cs_uint32 TMi                  :  1 ; /* bits 4:4 */
    cs_uint32 QMi                  :  1 ; /* bits 5:5 */
    cs_uint32 SCHi                 :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_NETWORK_ENGINE_INTERRUPT_1_t;





#define GLOBAL_NETWORK_ENGINE_INTENABLE_1        0xf000007c
#define GLOBAL_NETWORK_ENGINE_INTENABLE_1_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 25 ;
    cs_uint32 SCHe                 :  1 ; /* bits 6:6 */
    cs_uint32 QMe                  :  1 ; /* bits 5:5 */
    cs_uint32 TMe                  :  1 ; /* bits 4:4 */
    cs_uint32 FEe                  :  1 ; /* bits 3:3 */
    cs_uint32 NIe                  :  1 ; /* bits 2:2 */
    cs_uint32 NI_XRAM_TXe          :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 NI_XRAM_TXe          :  1 ; /* bits 1:1 */
    cs_uint32 NIe                  :  1 ; /* bits 2:2 */
    cs_uint32 FEe                  :  1 ; /* bits 3:3 */
    cs_uint32 TMe                  :  1 ; /* bits 4:4 */
    cs_uint32 QMe                  :  1 ; /* bits 5:5 */
    cs_uint32 SCHe                 :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_NETWORK_ENGINE_INTENABLE_1_t;





#define GLOBAL_JTAG_TAP_CONTROL                  0xf0000080
#define GLOBAL_JTAG_TAP_CONTROL_dft              0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 enable_recirc_1      :  1 ; /* bits 2:2 */
    cs_uint32 enable_recirc_0      :  1 ; /* bits 1:1 */
    cs_uint32 enable_arm           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 enable_arm           :  1 ; /* bits 0:0 */
    cs_uint32 enable_recirc_0      :  1 ; /* bits 1:1 */
    cs_uint32 enable_recirc_1      :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_JTAG_TAP_CONTROL_t;





#define GLOBAL_RECIRC_CPU_CTL                    0xf0000084
#define GLOBAL_RECIRC_CPU_CTL_dft                0x00000021




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 rcpu1_OCDHaltOnReset :  1 ; /* bits 9:9 */
    cs_uint32 rcpu1_RunStall       :  1 ; /* bits 8:8 */
    cs_uint32 rcpu1_StatVectorSel  :  1 ; /* bits 7:7 */
    cs_uint32 rcpu1_TDebugInterrupt :  1 ; /* bits 6:6 */
    cs_uint32 rcpu1_clk_en         :  1 ; /* bits 5:5 */
    cs_uint32 rcpu0_OCDHaltOnReset :  1 ; /* bits 4:4 */
    cs_uint32 rcpu0_RunStall       :  1 ; /* bits 3:3 */
    cs_uint32 rcpu0_StatVectorSel  :  1 ; /* bits 2:2 */
    cs_uint32 rcpu0_TDebugInterrupt :  1 ; /* bits 1:1 */
    cs_uint32 rcpu0_clk_en         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_clk_en         :  1 ; /* bits 0:0 */
    cs_uint32 rcpu0_TDebugInterrupt :  1 ; /* bits 1:1 */
    cs_uint32 rcpu0_StatVectorSel  :  1 ; /* bits 2:2 */
    cs_uint32 rcpu0_RunStall       :  1 ; /* bits 3:3 */
    cs_uint32 rcpu0_OCDHaltOnReset :  1 ; /* bits 4:4 */
    cs_uint32 rcpu1_clk_en         :  1 ; /* bits 5:5 */
    cs_uint32 rcpu1_TDebugInterrupt :  1 ; /* bits 6:6 */
    cs_uint32 rcpu1_StatVectorSel  :  1 ; /* bits 7:7 */
    cs_uint32 rcpu1_RunStall       :  1 ; /* bits 8:8 */
    cs_uint32 rcpu1_OCDHaltOnReset :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_RECIRC_CPU_CTL_t;





#define GLOBAL_RECIRC_CPU_STAT                   0xf0000088
#define GLOBAL_RECIRC_CPU_STAT_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rcpu1_PWaitMode      :  1 ; /* bits 5:5 */
    cs_uint32 rcpu1_XOCDMode       :  1 ; /* bits 4:4 */
    cs_uint32 rcpu1_XOCDModePulse  :  1 ; /* bits 3:3 */
    cs_uint32 rcpu0_PWaitMode      :  1 ; /* bits 2:2 */
    cs_uint32 rcpu0_XOCDMode       :  1 ; /* bits 1:1 */
    cs_uint32 rcpu0_XOCDModePulse  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_XOCDModePulse  :  1 ; /* bits 0:0 */
    cs_uint32 rcpu0_XOCDMode       :  1 ; /* bits 1:1 */
    cs_uint32 rcpu0_PWaitMode      :  1 ; /* bits 2:2 */
    cs_uint32 rcpu1_XOCDModePulse  :  1 ; /* bits 3:3 */
    cs_uint32 rcpu1_XOCDMode       :  1 ; /* bits 4:4 */
    cs_uint32 rcpu1_PWaitMode      :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_RECIRC_CPU_STAT_t;





#define GLOBAL_GLOBAL_USB_REG0                   0xf000008c
#define GLOBAL_GLOBAL_USB_REG0_dft               0x30104100




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 software_override_sysopmode_en :  1 ; /* bits 31:31 */
    cs_uint32 software_override_sysopmode :  1 ; /* bits 30:30 */
    cs_uint32 Hst_ctrl_perport_reset :  2 ; /* bits 29:28 */
    cs_uint32 Hst_ss_ena_incr16    :  1 ; /* bits 27:27 */
    cs_uint32 Hst_ss_ena_incr8     :  1 ; /* bits 26:26 */
    cs_uint32 Hst_ss_ena_incr4     :  1 ; /* bits 25:25 */
    cs_uint32 Hst_ss_ena_incrx_align :  1 ; /* bits 24:24 */
    cs_uint32 Hst_ohci_cntsel_n    :  1 ; /* bits 23:23 */
    cs_uint32 Hst_ss_simulation_mode_i :  1 ; /* bits 22:22 */
    cs_uint32 Hst_ss_autoppd_on_overcur_en :  1 ; /* bits 21:21 */
    cs_uint32 Hst_ss_fladj_val_host :  6 ; /* bits 20:15 */
    cs_uint32 Hst_ss_fladj_val_port0 :  6 ; /* bits 14:9 */
    cs_uint32 Hst_ss_fladj_val_port1 :  6 ; /* bits 8:3 */
    cs_uint32 Hst_sys_interrupt    :  1 ; /* bits 2:2 */
    cs_uint32 Hst_app_start_clk    :  1 ; /* bits 1:1 */
    cs_uint32 Hst_ohci_susp_lgcy   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 Hst_ohci_susp_lgcy   :  1 ; /* bits 0:0 */
    cs_uint32 Hst_app_start_clk    :  1 ; /* bits 1:1 */
    cs_uint32 Hst_sys_interrupt    :  1 ; /* bits 2:2 */
    cs_uint32 Hst_ss_fladj_val_port1 :  6 ; /* bits 8:3 */
    cs_uint32 Hst_ss_fladj_val_port0 :  6 ; /* bits 14:9 */
    cs_uint32 Hst_ss_fladj_val_host :  6 ; /* bits 20:15 */
    cs_uint32 Hst_ss_autoppd_on_overcur_en :  1 ; /* bits 21:21 */
    cs_uint32 Hst_ss_simulation_mode_i :  1 ; /* bits 22:22 */
    cs_uint32 Hst_ohci_cntsel_n    :  1 ; /* bits 23:23 */
    cs_uint32 Hst_ss_ena_incrx_align :  1 ; /* bits 24:24 */
    cs_uint32 Hst_ss_ena_incr4     :  1 ; /* bits 25:25 */
    cs_uint32 Hst_ss_ena_incr8     :  1 ; /* bits 26:26 */
    cs_uint32 Hst_ss_ena_incr16    :  1 ; /* bits 27:27 */
    cs_uint32 Hst_ctrl_perport_reset :  2 ; /* bits 29:28 */
    cs_uint32 software_override_sysopmode :  1 ; /* bits 30:30 */
    cs_uint32 software_override_sysopmode_en :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USB_REG0_t;





#define GLOBAL_GLOBAL_USB_REG1                   0xf0000090
#define GLOBAL_GLOBAL_USB_REG1_dft               0x20000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 Dev_ss_scaledown_mode :  2 ; /* bits 31:30 */
    cs_uint32 usb_por              :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 29 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 usb_por              :  1 ; /* bits 29:29 */
    cs_uint32 Dev_ss_scaledown_mode :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USB_REG1_t;





#define GLOBAL_USB_GLOBAL_REG0                   0xf0000094
#define GLOBAL_USB_GLOBAL_REG0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 Usb_sys_Otg_miniAB   :  1 ; /* bits 31:31 */
    cs_uint32 Hst_ehci_prt_pwr_port0 :  1 ; /* bits 30:30 */
    cs_uint32 Hst_ehci_prt_pwr_port1 :  1 ; /* bits 29:29 */
    cs_uint32 Hst_ehci_xfer_cnt    : 11 ; /* bits 28:18 */
    cs_uint32 Hst_ehci_xfer_prdc   :  1 ; /* bits 17:17 */
    cs_uint32 Hst_ehci_bufacc      :  1 ; /* bits 16:16 */
    cs_uint32 Hst_ehci_usbstatus   :  6 ; /* bits 15:10 */
    cs_uint32 Hst_ehci_lpsmc_status :  4 ; /* bits 9:6 */
    cs_uint32 Hst_ohci_global_suspend :  1 ; /* bits 5:5 */
    cs_uint32 Hst_ohci_rwe         :  1 ; /* bits 4:4 */
    cs_uint32 Hst_ohci_rmtwkp      :  1 ; /* bits 3:3 */
    cs_uint32 Hst_ohci_drwe        :  1 ; /* bits 2:2 */
    cs_uint32 Hst_ohci_ccs         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 Hst_ohci_ccs         :  2 ; /* bits 1:0 */
    cs_uint32 Hst_ohci_drwe        :  1 ; /* bits 2:2 */
    cs_uint32 Hst_ohci_rmtwkp      :  1 ; /* bits 3:3 */
    cs_uint32 Hst_ohci_rwe         :  1 ; /* bits 4:4 */
    cs_uint32 Hst_ohci_global_suspend :  1 ; /* bits 5:5 */
    cs_uint32 Hst_ehci_lpsmc_status :  4 ; /* bits 9:6 */
    cs_uint32 Hst_ehci_usbstatus   :  6 ; /* bits 15:10 */
    cs_uint32 Hst_ehci_bufacc      :  1 ; /* bits 16:16 */
    cs_uint32 Hst_ehci_xfer_prdc   :  1 ; /* bits 17:17 */
    cs_uint32 Hst_ehci_xfer_cnt    : 11 ; /* bits 28:18 */
    cs_uint32 Hst_ehci_prt_pwr_port1 :  1 ; /* bits 29:29 */
    cs_uint32 Hst_ehci_prt_pwr_port0 :  1 ; /* bits 30:30 */
    cs_uint32 Usb_sys_Otg_miniAB   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_USB_GLOBAL_REG0_t;





#define GLOBAL_USB_GLOBAL_REG1                   0xf0000098
#define GLOBAL_USB_GLOBAL_REG1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 Hst_ohci_sof         :  1 ; /* bits 31:31 */
    cs_uint32 Hst_ohci_bufacc      :  1 ; /* bits 30:30 */
    cs_uint32 Dev_internal_probe   : 12 ; /* bits 29:18 */
    cs_uint32 Dev_internal_probe_p : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 Dev_internal_probe_p : 18 ; /* bits 17:0 */
    cs_uint32 Dev_internal_probe   : 12 ; /* bits 29:18 */
    cs_uint32 Hst_ohci_bufacc      :  1 ; /* bits 30:30 */
    cs_uint32 Hst_ohci_sof         :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_USB_GLOBAL_REG1_t;





#define GLOBAL_USB_GLOBAL_REG2                   0xf000009c
#define GLOBAL_USB_GLOBAL_REG2_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 Dev_internal_probe_p : 17 ; /* bits 31:15 */
    cs_uint32 Dev_sof_toggle       :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 14 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 Dev_sof_toggle       :  1 ; /* bits 14:14 */
    cs_uint32 Dev_internal_probe_p : 17 ; /* bits 31:15 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_USB_GLOBAL_REG2_t;





#define GLOBAL_GLOBAL_USBPHY0_REG0               0xf00000a0
#define GLOBAL_GLOBAL_USBPHY0_REG0_dft           0x91991cc0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 COMPDISTUN           :  3 ; /* bits 31:29 */
    cs_uint32 OTGTUNE              :  3 ; /* bits 28:26 */
    cs_uint32 SQRXTUNE             :  3 ; /* bits 25:23 */
    cs_uint32 TXFSLSTUNE           :  4 ; /* bits 22:19 */
    cs_uint32 TXPREEMPHASISTUNE    :  1 ; /* bits 18:18 */
    cs_uint32 TXRISETUNE           :  1 ; /* bits 17:17 */
    cs_uint32 TXVREFTUNE           :  4 ; /* bits 16:13 */
    cs_uint32 TXHSXVTUNE           :  2 ; /* bits 12:11 */
    cs_uint32 REFCLKSEL            :  2 ; /* bits 10:9 */
    cs_uint32 REFCLKDIV            :  2 ; /* bits 8:7 */
    cs_uint32 COMMONONN            :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  6 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 COMMONONN            :  1 ; /* bits 6:6 */
    cs_uint32 REFCLKDIV            :  2 ; /* bits 8:7 */
    cs_uint32 REFCLKSEL            :  2 ; /* bits 10:9 */
    cs_uint32 TXHSXVTUNE           :  2 ; /* bits 12:11 */
    cs_uint32 TXVREFTUNE           :  4 ; /* bits 16:13 */
    cs_uint32 TXRISETUNE           :  1 ; /* bits 17:17 */
    cs_uint32 TXPREEMPHASISTUNE    :  1 ; /* bits 18:18 */
    cs_uint32 TXFSLSTUNE           :  4 ; /* bits 22:19 */
    cs_uint32 SQRXTUNE             :  3 ; /* bits 25:23 */
    cs_uint32 OTGTUNE              :  3 ; /* bits 28:26 */
    cs_uint32 COMPDISTUN           :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USBPHY0_REG0_t;





#define GLOBAL_GLOBAL_USBPHY1_REG0               0xf00000a4
#define GLOBAL_GLOBAL_USBPHY1_REG0_dft           0x91991cc0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 COMPDISTUN           :  3 ; /* bits 31:29 */
    cs_uint32 OTGTUNE              :  3 ; /* bits 28:26 */
    cs_uint32 SQRXTUNE             :  3 ; /* bits 25:23 */
    cs_uint32 TXFSLSTUNE           :  4 ; /* bits 22:19 */
    cs_uint32 TXPREEMPHASISTUNE    :  1 ; /* bits 18:18 */
    cs_uint32 TXRISETUNE           :  1 ; /* bits 17:17 */
    cs_uint32 TXVREFTUNE           :  4 ; /* bits 16:13 */
    cs_uint32 TXHSXVTUNE           :  2 ; /* bits 12:11 */
    cs_uint32 REFCLKSEL            :  2 ; /* bits 10:9 */
    cs_uint32 REFCLKDIV            :  2 ; /* bits 8:7 */
    cs_uint32 COMMONONN            :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  6 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 COMMONONN            :  1 ; /* bits 6:6 */
    cs_uint32 REFCLKDIV            :  2 ; /* bits 8:7 */
    cs_uint32 REFCLKSEL            :  2 ; /* bits 10:9 */
    cs_uint32 TXHSXVTUNE           :  2 ; /* bits 12:11 */
    cs_uint32 TXVREFTUNE           :  4 ; /* bits 16:13 */
    cs_uint32 TXRISETUNE           :  1 ; /* bits 17:17 */
    cs_uint32 TXPREEMPHASISTUNE    :  1 ; /* bits 18:18 */
    cs_uint32 TXFSLSTUNE           :  4 ; /* bits 22:19 */
    cs_uint32 SQRXTUNE             :  3 ; /* bits 25:23 */
    cs_uint32 OTGTUNE              :  3 ; /* bits 28:26 */
    cs_uint32 COMPDISTUN           :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USBPHY1_REG0_t;





#define GLOBAL_GLOBAL_USBPHY0_REG1               0xf00000a8
#define GLOBAL_GLOBAL_USBPHY0_REG1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 TESTCLK_PRT0         :  1 ; /* bits 16:16 */
    cs_uint32 TESTDATAIN_PRT0      :  8 ; /* bits 15:8 */
    cs_uint32 TESTADDR_PRT0        :  4 ; /* bits 7:4 */
    cs_uint32 TESTDATAOUTSEL_PRT0  :  1 ; /* bits 3:3 */
    cs_uint32 SIDDQ_PRT0           :  1 ; /* bits 2:2 */
    cs_uint32 VATESTENB_PRT0       :  1 ; /* bits 1:1 */
    cs_uint32 LOOPBACKENB_PRT0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 LOOPBACKENB_PRT0     :  1 ; /* bits 0:0 */
    cs_uint32 VATESTENB_PRT0       :  1 ; /* bits 1:1 */
    cs_uint32 SIDDQ_PRT0           :  1 ; /* bits 2:2 */
    cs_uint32 TESTDATAOUTSEL_PRT0  :  1 ; /* bits 3:3 */
    cs_uint32 TESTADDR_PRT0        :  4 ; /* bits 7:4 */
    cs_uint32 TESTDATAIN_PRT0      :  8 ; /* bits 15:8 */
    cs_uint32 TESTCLK_PRT0         :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USBPHY0_REG1_t;





#define GLOBAL_GLOBAL_USBPHY1_REG1               0xf00000ac
#define GLOBAL_GLOBAL_USBPHY1_REG1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 TESTCLK_PRT1         :  1 ; /* bits 16:16 */
    cs_uint32 TESTDATAIN_PRT1      :  8 ; /* bits 15:8 */
    cs_uint32 TESTADDR_PRT1        :  4 ; /* bits 7:4 */
    cs_uint32 TESTDATAOUTSEL_PRT1  :  1 ; /* bits 3:3 */
    cs_uint32 SIDDQ_PRT1           :  1 ; /* bits 2:2 */
    cs_uint32 VATESTENB_PRT1       :  1 ; /* bits 1:1 */
    cs_uint32 LOOPBACKENB_PRT1     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 LOOPBACKENB_PRT1     :  1 ; /* bits 0:0 */
    cs_uint32 VATESTENB_PRT1       :  1 ; /* bits 1:1 */
    cs_uint32 SIDDQ_PRT1           :  1 ; /* bits 2:2 */
    cs_uint32 TESTDATAOUTSEL_PRT1  :  1 ; /* bits 3:3 */
    cs_uint32 TESTADDR_PRT1        :  4 ; /* bits 7:4 */
    cs_uint32 TESTDATAIN_PRT1      :  8 ; /* bits 15:8 */
    cs_uint32 TESTCLK_PRT1         :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_GLOBAL_USBPHY1_REG1_t;





#define GLOBAL_USBPHY_GLOBAL                     0xf00000b0
#define GLOBAL_USBPHY_GLOBAL_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 TESTDATAOUT_PRT0     :  4 ; /* bits 7:4 */
    cs_uint32 TESTDATAOUT_PRT1     :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TESTDATAOUT_PRT1     :  4 ; /* bits 3:0 */
    cs_uint32 TESTDATAOUT_PRT0     :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_USBPHY_GLOBAL_t;





#define GLOBAL_IO_DRIVE_STRENGTH                 0xf00000b4
#define GLOBAL_IO_DRIVE_STRENGTH_dft             0x00000aaa




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 misc_ds              :  2 ; /* bits 11:10 */
    cs_uint32 lcd_ds               :  2 ; /* bits 9:8 */
    cs_uint32 gpio2_ds             :  2 ; /* bits 7:6 */
    cs_uint32 gpio1_ds             :  2 ; /* bits 5:4 */
    cs_uint32 gpio0_ds             :  2 ; /* bits 3:2 */
    cs_uint32 gmac_ds              :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gmac_ds              :  2 ; /* bits 1:0 */
    cs_uint32 gpio0_ds             :  2 ; /* bits 3:2 */
    cs_uint32 gpio1_ds             :  2 ; /* bits 5:4 */
    cs_uint32 gpio2_ds             :  2 ; /* bits 7:6 */
    cs_uint32 lcd_ds               :  2 ; /* bits 9:8 */
    cs_uint32 misc_ds              :  2 ; /* bits 11:10 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_IO_DRIVE_STRENGTH_t;





#define GLOBAL_SOFTWARE                          0xf00000b8
#define GLOBAL_SOFTWARE_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 val                  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 val                  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SOFTWARE_t;





#define GLOBAL_SOFTWARE2                         0xf00000bc
#define GLOBAL_SOFTWARE2_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 val                  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 val                  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SOFTWARE2_t;





#define GLOBAL_SCRATCH                           0xf00000c0
#define GLOBAL_SCRATCH_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 scratch              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 scratch              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SCRATCH_t;





#define GLOBAL_FMRO                              0xf00000c4
#define GLOBAL_FMRO_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 blk_sel              :  4 ; /* bits 23:20 */
    cs_uint32 clk_sel              :  4 ; /* bits 19:16 */
    cs_uint32 fmro_sel             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 fmro_sel             : 16 ; /* bits 15:0 */
    cs_uint32 clk_sel              :  4 ; /* bits 19:16 */
    cs_uint32 blk_sel              :  4 ; /* bits 23:20 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_FMRO_t;





#define GLOBAL_SPEED_OVERRIDE                    0xf00000c8
#define GLOBAL_SPEED_OVERRIDE_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ov_enable            : 29 ; /* bits 31:3 */
    cs_uint32 speed                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 speed                :  3 ; /* bits 2:0 */
    cs_uint32 ov_enable            : 29 ; /* bits 31:3 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SPEED_OVERRIDE_t;





#define GLOBAL_SECURE_MODE_OVERRIDE              0xf00000cc
#define GLOBAL_SECURE_MODE_OVERRIDE_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ov_enable            : 31 ; /* bits 31:1 */
    cs_uint32 secure_mode          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 secure_mode          :  1 ; /* bits 0:0 */
    cs_uint32 ov_enable            : 31 ; /* bits 31:1 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_SECURE_MODE_OVERRIDE_t;





#define GLOBAL_ARM_DEBUG                         0xf00000d0
#define GLOBAL_ARM_DEBUG_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 l2_spniden           :  1 ; /* bits 8:8 */
    cs_uint32 cpu1_dbgen           :  1 ; /* bits 7:7 */
    cs_uint32 cpu0_dbgen           :  1 ; /* bits 6:6 */
    cs_uint32 cpu1_niden           :  1 ; /* bits 5:5 */
    cs_uint32 cpu0_niden           :  1 ; /* bits 4:4 */
    cs_uint32 cpu1_spinden         :  1 ; /* bits 3:3 */
    cs_uint32 cpu0_spinden         :  1 ; /* bits 2:2 */
    cs_uint32 cpu1_spiden          :  1 ; /* bits 1:1 */
    cs_uint32 cpu0_spiden          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu0_spiden          :  1 ; /* bits 0:0 */
    cs_uint32 cpu1_spiden          :  1 ; /* bits 1:1 */
    cs_uint32 cpu0_spinden         :  1 ; /* bits 2:2 */
    cs_uint32 cpu1_spinden         :  1 ; /* bits 3:3 */
    cs_uint32 cpu0_niden           :  1 ; /* bits 4:4 */
    cs_uint32 cpu1_niden           :  1 ; /* bits 5:5 */
    cs_uint32 cpu0_dbgen           :  1 ; /* bits 6:6 */
    cs_uint32 cpu1_dbgen           :  1 ; /* bits 7:7 */
    cs_uint32 l2_spniden           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_DEBUG_t;





#define GLOBAL_ARM_DEBUG_ENABLE_A                0xf00000d4
#define GLOBAL_ARM_DEBUG_ENABLE_A_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 code                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 code                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_DEBUG_ENABLE_A_t;





#define GLOBAL_ARM_DEBUG_ENABLE_B                0xf00000d8
#define GLOBAL_ARM_DEBUG_ENABLE_B_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 code                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 code                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_ARM_DEBUG_ENABLE_B_t;





#define GLOBAL_L2_EMA                            0xf00000dc
#define GLOBAL_L2_EMA_dft                        0x00000002




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 ema                  :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ema                  :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_L2_EMA_t;





#define GLOBAL_AXI_MUX_TEST                      0xf00000e0
#define GLOBAL_AXI_MUX_TEST_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 test_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 test_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_AXI_MUX_TEST_t;





#define GLOBAL_AXI_MUX_TEST_STATUS               0xf00000e4
#define GLOBAL_AXI_MUX_TEST_STATUS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 result               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 result               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_AXI_MUX_TEST_STATUS_t;





#define GLOBAL_FPGAC_ID                          0xf00000e8
#define GLOBAL_FPGAC_ID_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_FPGAC_ID_t;





#define GLOBAL_EAXICTL0                          0xf00000ec
#define GLOBAL_EAXICTL0_dft                      0x14a00241




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx2tx                :  1 ; /* bits 31:31 */
    cs_uint32 tx2rx                :  1 ; /* bits 30:30 */
    cs_uint32 txclkdiv             :  4 ; /* bits 29:26 */
    cs_uint32 txclkdivlo           :  4 ; /* bits 25:22 */
    cs_uint32 softreset            :  1 ; /* bits 21:21 */
    cs_uint32 enable               :  1 ; /* bits 20:20 */
    cs_uint32 slavecam             :  1 ; /* bits 19:19 */
    cs_uint32 mastercam            :  1 ; /* bits 18:18 */
    cs_uint32 rxthresh             :  6 ; /* bits 17:12 */
    cs_uint32 chmingap             :  3 ; /* bits 11:9 */
    cs_uint32 mingap               :  3 ; /* bits 8:6 */
    cs_uint32 txqos                :  5 ; /* bits 5:1 */
    cs_uint32 invert               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 invert               :  1 ; /* bits 0:0 */
    cs_uint32 txqos                :  5 ; /* bits 5:1 */
    cs_uint32 mingap               :  3 ; /* bits 8:6 */
    cs_uint32 chmingap             :  3 ; /* bits 11:9 */
    cs_uint32 rxthresh             :  6 ; /* bits 17:12 */
    cs_uint32 mastercam            :  1 ; /* bits 18:18 */
    cs_uint32 slavecam             :  1 ; /* bits 19:19 */
    cs_uint32 enable               :  1 ; /* bits 20:20 */
    cs_uint32 softreset            :  1 ; /* bits 21:21 */
    cs_uint32 txclkdivlo           :  4 ; /* bits 25:22 */
    cs_uint32 txclkdiv             :  4 ; /* bits 29:26 */
    cs_uint32 tx2rx                :  1 ; /* bits 30:30 */
    cs_uint32 rx2tx                :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_EAXICTL0_t;





#define GLOBAL_EAXI_REMAP0                       0xf00000f0
#define GLOBAL_EAXI_REMAP0_STRIDE                4
#define GLOBAL_EAXI_REMAP0_COUNT                 16
#define GLOBAL_EAXI_REMAP0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 value                : 16 ; /* bits 31:16 */
    cs_uint32 range                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 range                : 16 ; /* bits 15:0 */
    cs_uint32 value                : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} GLOBAL_EAXI_REMAP0_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* GLB */

typedef struct {
  GLOBAL_JTAG_ID_t                         JTAG_ID;                       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  GLOBAL_BLOCK_RESET_t                     BLOCK_RESET;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  GLOBAL_ARM_RESET_t                       ARM_RESET;                     /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  GLOBAL_STRAP_t                           STRAP;                         /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  GLOBAL_GLOBAL_CONFIG_t                   GLOBAL_CONFIG;                 /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  GLOBAL_PHY_CONTROL_t                     PHY_CONTROL;                   /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  GLOBAL_PIN_MUX_t                         PIN_MUX;                       /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  GLOBAL_GPIO_MUX_0_t                      GPIO_MUX_0;                    /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  GLOBAL_GPIO_MUX_1_t                      GPIO_MUX_1;                    /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  GLOBAL_GPIO_MUX_2_t                      GPIO_MUX_2;                    /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  GLOBAL_GPIO_MUX_3_t                      GPIO_MUX_3;                    /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  GLOBAL_GPIO_MUX_4_t                      GPIO_MUX_4;                    /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  GLOBAL_DDR_PLL_t                         DDR_PLL;                       /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  GLOBAL_ARM_POWER_CONTROL_t               ARM_POWER_CONTROL;             /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  GLOBAL_ARM_POWER_CONTROL_CPU0_t          ARM_POWER_CONTROL_CPU0;        /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  GLOBAL_ARM_POWER_CONTROL_CPU1_t          ARM_POWER_CONTROL_CPU1;        /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  GLOBAL_ARM_STATE_t                       ARM_STATE;                     /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  GLOBAL_ARM_CONFIG_A_t                    ARM_CONFIG_A;                  /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  GLOBAL_ARM_CONFIG_B_t                    ARM_CONFIG_B;                  /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  GLOBAL_ARM_CONFIG_C_t                    ARM_CONFIG_C;                  /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  GLOBAL_ARM_CONFIG_D_t                    ARM_CONFIG_D;                  /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  GLOBAL_ARM_CONFIG_E_t                    ARM_CONFIG_E;                  /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  GLOBAL_L2_CONFIG_A_t                     L2_CONFIG_A;                   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  GLOBAL_L2_CONFIG_B_t                     L2_CONFIG_B;                   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  GLOBAL_ARM_PARITY_INTERRUPT_t            ARM_PARITY_INTERRUPT;          /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  GLOBAL_ARM_PARITY_INTENABLE_t            ARM_PARITY_INTENABLE;          /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  GLOBAL_SYSTEM_INTERRUPT_t                SYSTEM_INTERRUPT;              /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  GLOBAL_SYSTEM_INTENABLE_t                SYSTEM_INTENABLE;              /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  GLOBAL_NETWORK_ENGINE_INTERRUPT_0_t      NETWORK_ENGINE_INTERRUPT_0;    /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  GLOBAL_NETWORK_ENGINE_INTENABLE_0_t      NETWORK_ENGINE_INTENABLE_0;    /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  GLOBAL_NETWORK_ENGINE_INTERRUPT_1_t      NETWORK_ENGINE_INTERRUPT_1;    /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  GLOBAL_NETWORK_ENGINE_INTENABLE_1_t      NETWORK_ENGINE_INTENABLE_1;    /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  GLOBAL_JTAG_TAP_CONTROL_t                JTAG_TAP_CONTROL;              /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  GLOBAL_RECIRC_CPU_CTL_t                  RECIRC_CPU_CTL;                /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  GLOBAL_RECIRC_CPU_STAT_t                 RECIRC_CPU_STAT;               /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  GLOBAL_GLOBAL_USB_REG0_t                 GLOBAL_USB_REG0;               /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  GLOBAL_GLOBAL_USB_REG1_t                 GLOBAL_USB_REG1;               /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  GLOBAL_USB_GLOBAL_REG0_t                 USB_GLOBAL_REG0;               /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  GLOBAL_USB_GLOBAL_REG1_t                 USB_GLOBAL_REG1;               /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  GLOBAL_USB_GLOBAL_REG2_t                 USB_GLOBAL_REG2;               /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  GLOBAL_GLOBAL_USBPHY0_REG0_t             GLOBAL_USBPHY0_REG0;           /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  GLOBAL_GLOBAL_USBPHY1_REG0_t             GLOBAL_USBPHY1_REG0;           /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  GLOBAL_GLOBAL_USBPHY0_REG1_t             GLOBAL_USBPHY0_REG1;           /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  GLOBAL_GLOBAL_USBPHY1_REG1_t             GLOBAL_USBPHY1_REG1;           /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  GLOBAL_USBPHY_GLOBAL_t                   USBPHY_GLOBAL;                 /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  GLOBAL_IO_DRIVE_STRENGTH_t               IO_DRIVE_STRENGTH;             /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  GLOBAL_SOFTWARE_t                        SOFTWARE;                      /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  GLOBAL_SOFTWARE2_t                       SOFTWARE2;                     /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  GLOBAL_SCRATCH_t                         SCRATCH;                       /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  GLOBAL_FMRO_t                            FMRO;                          /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  GLOBAL_SPEED_OVERRIDE_t                  SPEED_OVERRIDE;                /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  GLOBAL_SECURE_MODE_OVERRIDE_t            SECURE_MODE_OVERRIDE;          /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  GLOBAL_ARM_DEBUG_t                       ARM_DEBUG;                     /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  GLOBAL_ARM_DEBUG_ENABLE_A_t              ARM_DEBUG_ENABLE_A;            /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  GLOBAL_ARM_DEBUG_ENABLE_B_t              ARM_DEBUG_ENABLE_B;            /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  GLOBAL_L2_EMA_t                          L2_EMA;                        /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  GLOBAL_AXI_MUX_TEST_t                    AXI_MUX_TEST;                  /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  GLOBAL_AXI_MUX_TEST_STATUS_t             AXI_MUX_TEST_STATUS;           /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  GLOBAL_FPGAC_ID_t                        FPGAC_ID;                      /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  GLOBAL_EAXICTL0_t                        EAXICTL0;                      /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  GLOBAL_EAXI_REMAP0_t                     EAXI_REMAP0;                   /* addr: 0x000000f0 */ 
} GLB_t;

  

/*
 * NI_TOP
 */
  



#define NI_TOP_NI_INTF_RST_CONFIG                0xf0010000
#define NI_TOP_NI_INTF_RST_CONFIG_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 intf_rst_ge2         :  1 ; /* bits 2:2 */
    cs_uint32 intf_rst_ge1         :  1 ; /* bits 1:1 */
    cs_uint32 intf_rst_ge0         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intf_rst_ge0         :  1 ; /* bits 0:0 */
    cs_uint32 intf_rst_ge1         :  1 ; /* bits 1:1 */
    cs_uint32 intf_rst_ge2         :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INTF_RST_CONFIG_t;





#define NI_TOP_NI_ETH_INT_CONFIG1                0xf0010004
#define NI_TOP_NI_ETH_INT_CONFIG1_dft            0x00424242




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  8 ;
    cs_uint32 inv_clk_out_ge2      :  1 ; /* bits 23:23 */
    cs_uint32 tx_use_gefifo_ge2    :  1 ; /* bits 22:22 */
    cs_uint32 rmii_clksrc_ge2      :  1 ; /* bits 21:21 */
    cs_uint32 phy_mode_ge2         :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 int_cfg_ge2          :  3 ; /* bits 18:16 */
    cs_uint32 inv_clk_out_ge1      :  1 ; /* bits 15:15 */
    cs_uint32 tx_use_gefifo_ge1    :  1 ; /* bits 14:14 */
    cs_uint32 rmii_clksrc_ge1      :  1 ; /* bits 13:13 */
    cs_uint32 phy_mode_ge1         :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 int_cfg_ge1          :  3 ; /* bits 10:8 */
    cs_uint32 inv_clk_out_ge0      :  1 ; /* bits 7:7 */
    cs_uint32 tx_use_gefifo_ge0    :  1 ; /* bits 6:6 */
    cs_uint32 rmii_clksrc_ge0      :  1 ; /* bits 5:5 */
    cs_uint32 phy_mode_ge0         :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 int_cfg_ge0          :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_cfg_ge0          :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 phy_mode_ge0         :  1 ; /* bits 4:4 */
    cs_uint32 rmii_clksrc_ge0      :  1 ; /* bits 5:5 */
    cs_uint32 tx_use_gefifo_ge0    :  1 ; /* bits 6:6 */
    cs_uint32 inv_clk_out_ge0      :  1 ; /* bits 7:7 */
    cs_uint32 int_cfg_ge1          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 phy_mode_ge1         :  1 ; /* bits 12:12 */
    cs_uint32 rmii_clksrc_ge1      :  1 ; /* bits 13:13 */
    cs_uint32 tx_use_gefifo_ge1    :  1 ; /* bits 14:14 */
    cs_uint32 inv_clk_out_ge1      :  1 ; /* bits 15:15 */
    cs_uint32 int_cfg_ge2          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 phy_mode_ge2         :  1 ; /* bits 20:20 */
    cs_uint32 rmii_clksrc_ge2      :  1 ; /* bits 21:21 */
    cs_uint32 tx_use_gefifo_ge2    :  1 ; /* bits 22:22 */
    cs_uint32 inv_clk_out_ge2      :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd4               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_INT_CONFIG1_t;





#define NI_TOP_NI_ETH_INT_CONFIG2                0xf0010008
#define NI_TOP_NI_ETH_INT_CONFIG2_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 10 ;
    cs_uint32 tx_intf_lp_time_ge2  :  1 ; /* bits 21:21 */
    cs_uint32 power_dwn_tx_ge2     :  1 ; /* bits 20:20 */
    cs_uint32 power_dwn_rx_ge2     :  1 ; /* bits 19:19 */
    cs_uint32 inv_rxclk_out_ge2    :  1 ; /* bits 18:18 */
    cs_uint32 inv_clk_in_ge2       :  1 ; /* bits 17:17 */
    cs_uint32 smii_tx_stat_ge2     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 tx_intf_lp_time_ge1  :  1 ; /* bits 13:13 */
    cs_uint32 power_dwn_tx_ge1     :  1 ; /* bits 12:12 */
    cs_uint32 power_dwn_rx_ge1     :  1 ; /* bits 11:11 */
    cs_uint32 inv_rxclk_out_ge1    :  1 ; /* bits 10:10 */
    cs_uint32 inv_clk_in_ge1       :  1 ; /* bits 9:9 */
    cs_uint32 smii_tx_stat_ge1     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 tx_intf_lp_time_ge0  :  1 ; /* bits 5:5 */
    cs_uint32 power_dwn_tx_ge0     :  1 ; /* bits 4:4 */
    cs_uint32 power_dwn_rx_ge0     :  1 ; /* bits 3:3 */
    cs_uint32 inv_rxclk_out_ge0    :  1 ; /* bits 2:2 */
    cs_uint32 inv_clk_in_ge0       :  1 ; /* bits 1:1 */
    cs_uint32 smii_tx_stat_ge0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 smii_tx_stat_ge0     :  1 ; /* bits 0:0 */
    cs_uint32 inv_clk_in_ge0       :  1 ; /* bits 1:1 */
    cs_uint32 inv_rxclk_out_ge0    :  1 ; /* bits 2:2 */
    cs_uint32 power_dwn_rx_ge0     :  1 ; /* bits 3:3 */
    cs_uint32 power_dwn_tx_ge0     :  1 ; /* bits 4:4 */
    cs_uint32 tx_intf_lp_time_ge0  :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 smii_tx_stat_ge1     :  1 ; /* bits 8:8 */
    cs_uint32 inv_clk_in_ge1       :  1 ; /* bits 9:9 */
    cs_uint32 inv_rxclk_out_ge1    :  1 ; /* bits 10:10 */
    cs_uint32 power_dwn_rx_ge1     :  1 ; /* bits 11:11 */
    cs_uint32 power_dwn_tx_ge1     :  1 ; /* bits 12:12 */
    cs_uint32 tx_intf_lp_time_ge1  :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 smii_tx_stat_ge2     :  1 ; /* bits 16:16 */
    cs_uint32 inv_clk_in_ge2       :  1 ; /* bits 17:17 */
    cs_uint32 inv_rxclk_out_ge2    :  1 ; /* bits 18:18 */
    cs_uint32 power_dwn_rx_ge2     :  1 ; /* bits 19:19 */
    cs_uint32 power_dwn_tx_ge2     :  1 ; /* bits 20:20 */
    cs_uint32 tx_intf_lp_time_ge2  :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd3               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_INT_CONFIG2_t;





#define NI_TOP_NI_ETH_MGMT_PT_CONFIG             0xf001000c
#define NI_TOP_NI_ETH_MGMT_PT_CONFIG_dft         0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 mgmt_pt_to_fe_also   :  1 ; /* bits 2:2 */
    cs_uint32 port_to_cpu          :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 port_to_cpu          :  2 ; /* bits 1:0 */
    cs_uint32 mgmt_pt_to_fe_also   :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_MGMT_PT_CONFIG_t;





#define NI_TOP_NI_ETH_MAC_CONFIG0_0              0xf0010010
#define NI_TOP_NI_ETH_MAC_CONFIG0_0_STRIDE       12
#define NI_TOP_NI_ETH_MAC_CONFIG0_0_COUNT        3
#define NI_TOP_NI_ETH_MAC_CONFIG0_0_dft          0x0010080c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mac_tx_rst           :  1 ; /* bits 31:31 */
    cs_uint32 mac_rx_rst           :  1 ; /* bits 30:30 */
    cs_uint32 send_pg_data         :  1 ; /* bits 29:29 */
    cs_uint32 pass_thru_hdre       :  1 ; /* bits 28:28 */
    cs_uint32 tx_fifo_reset        :  1 ; /* bits 27:27 */
    cs_uint32 tx_auto_xon          :  1 ; /* bits 26:26 */
    cs_uint32 txfifo_thrshld       :  9 ; /* bits 25:17 */
    cs_uint32 txfifo_mode          :  1 ; /* bits 16:16 */
    cs_uint32 lpbk_mode            :  2 ; /* bits 15:14 */
    cs_uint32 tx_drain             :  1 ; /* bits 13:13 */
    cs_uint32 tx_flow_disable      :  1 ; /* bits 12:12 */
    cs_uint32 tx_ipg_sel           :  3 ; /* bits 11:9 */
    cs_uint32 rx_flow_disable      :  1 ; /* bits 8:8 */
    cs_uint32 link_active_mask     :  1 ; /* bits 7:7 */
    cs_uint32 link_stat_mask       :  1 ; /* bits 6:6 */
    cs_uint32 link_status          :  1 ; /* bits 5:5 */
    cs_uint32 crs_polarity         :  1 ; /* bits 4:4 */
    cs_uint32 tx_en                :  1 ; /* bits 3:3 */
    cs_uint32 rx_en                :  1 ; /* bits 2:2 */
    cs_uint32 duplex               :  1 ; /* bits 1:1 */
    cs_uint32 speed                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 speed                :  1 ; /* bits 0:0 */
    cs_uint32 duplex               :  1 ; /* bits 1:1 */
    cs_uint32 rx_en                :  1 ; /* bits 2:2 */
    cs_uint32 tx_en                :  1 ; /* bits 3:3 */
    cs_uint32 crs_polarity         :  1 ; /* bits 4:4 */
    cs_uint32 link_status          :  1 ; /* bits 5:5 */
    cs_uint32 link_stat_mask       :  1 ; /* bits 6:6 */
    cs_uint32 link_active_mask     :  1 ; /* bits 7:7 */
    cs_uint32 rx_flow_disable      :  1 ; /* bits 8:8 */
    cs_uint32 tx_ipg_sel           :  3 ; /* bits 11:9 */
    cs_uint32 tx_flow_disable      :  1 ; /* bits 12:12 */
    cs_uint32 tx_drain             :  1 ; /* bits 13:13 */
    cs_uint32 lpbk_mode            :  2 ; /* bits 15:14 */
    cs_uint32 txfifo_mode          :  1 ; /* bits 16:16 */
    cs_uint32 txfifo_thrshld       :  9 ; /* bits 25:17 */
    cs_uint32 tx_auto_xon          :  1 ; /* bits 26:26 */
    cs_uint32 tx_fifo_reset        :  1 ; /* bits 27:27 */
    cs_uint32 pass_thru_hdre       :  1 ; /* bits 28:28 */
    cs_uint32 send_pg_data         :  1 ; /* bits 29:29 */
    cs_uint32 mac_rx_rst           :  1 ; /* bits 30:30 */
    cs_uint32 mac_tx_rst           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_MAC_CONFIG0_0_t;





#define NI_TOP_NI_ETH_MAC_CONFIG1_0              0xf0010014
#define NI_TOP_NI_ETH_MAC_CONFIG1_0_STRIDE       12
#define NI_TOP_NI_ETH_MAC_CONFIG1_0_COUNT        3
#define NI_TOP_NI_ETH_MAC_CONFIG1_0_dft          0x00000f00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 wol_passwd6          :  8 ; /* bits 23:16 */
    cs_uint32 ts_add_dis           :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 wol_mac_adr_cnt      :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 wol_passwd_cnt       :  1 ; /* bits 5:5 */
    cs_uint32 wol_secure_on        :  1 ; /* bits 4:4 */
    cs_uint32 wol_ign_err          :  1 ; /* bits 3:3 */
    cs_uint32 wol_chk_da           :  2 ; /* bits 2:1 */
    cs_uint32 wol_pkt_det_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wol_pkt_det_en       :  1 ; /* bits 0:0 */
    cs_uint32 wol_chk_da           :  2 ; /* bits 2:1 */
    cs_uint32 wol_ign_err          :  1 ; /* bits 3:3 */
    cs_uint32 wol_secure_on        :  1 ; /* bits 4:4 */
    cs_uint32 wol_passwd_cnt       :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 wol_mac_adr_cnt      :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ts_add_dis           :  1 ; /* bits 15:15 */
    cs_uint32 wol_passwd6          :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_MAC_CONFIG1_0_t;





#define NI_TOP_NI_ETH_MAC_CONFIG2_0              0xf0010018
#define NI_TOP_NI_ETH_MAC_CONFIG2_0_STRIDE       12
#define NI_TOP_NI_ETH_MAC_CONFIG2_0_COUNT        3
#define NI_TOP_NI_ETH_MAC_CONFIG2_0_dft          0x00ff0000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pause_time           : 16 ; /* bits 31:16 */
    cs_uint32 sup_tx_to_rx_lpbk_data :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 mac_cfg_spare        :  1 ; /* bits 8:8 */
    cs_uint32 mac_addr6            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mac_addr6            :  8 ; /* bits 7:0 */
    cs_uint32 mac_cfg_spare        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sup_tx_to_rx_lpbk_data :  1 ; /* bits 15:15 */
    cs_uint32 pause_time           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_MAC_CONFIG2_0_t;


    
    
    
    
    
    



#define NI_TOP_NI_ETH_RCV_STAT_0                 0xf0010034
#define NI_TOP_NI_ETH_RCV_STAT_0_STRIDE          4
#define NI_TOP_NI_ETH_RCV_STAT_0_COUNT           3
#define NI_TOP_NI_ETH_RCV_STAT_0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rcv_lnk_stat         :  1 ; /* bits 3:3 */
    cs_uint32 rcv_duplex           :  1 ; /* bits 2:2 */
    cs_uint32 rcv_speed            :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcv_speed            :  2 ; /* bits 1:0 */
    cs_uint32 rcv_duplex           :  1 ; /* bits 2:2 */
    cs_uint32 rcv_lnk_stat         :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_ETH_RCV_STAT_0_t;


    
    



#define NI_TOP_NI_MAC_ADDR0                      0xf0010040
#define NI_TOP_NI_MAC_ADDR0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mac_addr0            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mac_addr0            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MAC_ADDR0_t;





#define NI_TOP_NI_MAC_ADDR1                      0xf0010044
#define NI_TOP_NI_MAC_ADDR1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 mac_addr1            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mac_addr1            :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MAC_ADDR1_t;





#define NI_TOP_NI_WOL_PASSWD_0                   0xf0010048
#define NI_TOP_NI_WOL_PASSWD_0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 wol_passwd0          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wol_passwd0          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_PASSWD_0_t;





#define NI_TOP_NI_WOL_PASSWD_1                   0xf001004c
#define NI_TOP_NI_WOL_PASSWD_1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 wol_passwd1          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wol_passwd1          :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_PASSWD_1_t;





#define NI_TOP_NI_PKT_LEN_CONFIG                 0xf0010050
#define NI_TOP_NI_PKT_LEN_CONFIG_dft             0x00400600




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 min_pkt_size         : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 max_pkt_size         : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 max_pkt_size         : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 min_pkt_size         : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PKT_LEN_CONFIG_t;





#define NI_TOP_NI_PKT_STOR_LEN_CONFIG            0xf0010054
#define NI_TOP_NI_PKT_STOR_LEN_CONFIG_dft        0x00002454




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 max_stor_pkt_len     : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 max_stor_pkt_len     : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PKT_STOR_LEN_CONFIG_t;





#define NI_TOP_NI_RX_CNTRL_CONFIG0_0             0xf0010058
#define NI_TOP_NI_RX_CNTRL_CONFIG0_0_STRIDE      8
#define NI_TOP_NI_RX_CNTRL_CONFIG0_0_COUNT       8
#define NI_TOP_NI_RX_CNTRL_CONFIG0_0_dft         0x00400400




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rxctrl_cfg_spare     :  2 ; /* bits 31:30 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 buff_use_thrshld     : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 linkstat_drop_dis    :  1 ; /* bits 10:10 */
    cs_uint32 oam_drop_dis         :  1 ; /* bits 9:9 */
    cs_uint32 ukopcode_drop_dis    :  1 ; /* bits 8:8 */
    cs_uint32 flow_drop_dis        :  1 ; /* bits 7:7 */
    cs_uint32 runt_drop_dis        :  1 ; /* bits 6:6 */
    cs_uint32 ovr_drop_dis         :  1 ; /* bits 5:5 */
    cs_uint32 crc_drop_dis         :  1 ; /* bits 4:4 */
    cs_uint32 shrtfrm_mode         :  1 ; /* bits 3:3 */
    cs_uint32 ff_overrun_drop_dis  :  1 ; /* bits 2:2 */
    cs_uint32 rc_fifo_reset        :  1 ; /* bits 1:1 */
    cs_uint32 rxctrl_dis           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxctrl_dis           :  1 ; /* bits 0:0 */
    cs_uint32 rc_fifo_reset        :  1 ; /* bits 1:1 */
    cs_uint32 ff_overrun_drop_dis  :  1 ; /* bits 2:2 */
    cs_uint32 shrtfrm_mode         :  1 ; /* bits 3:3 */
    cs_uint32 crc_drop_dis         :  1 ; /* bits 4:4 */
    cs_uint32 ovr_drop_dis         :  1 ; /* bits 5:5 */
    cs_uint32 runt_drop_dis        :  1 ; /* bits 6:6 */
    cs_uint32 flow_drop_dis        :  1 ; /* bits 7:7 */
    cs_uint32 ukopcode_drop_dis    :  1 ; /* bits 8:8 */
    cs_uint32 oam_drop_dis         :  1 ; /* bits 9:9 */
    cs_uint32 linkstat_drop_dis    :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 buff_use_thrshld     : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 rxctrl_cfg_spare     :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_CNTRL_CONFIG0_0_t;





#define NI_TOP_NI_RX_CNTRL_CONFIG1_0             0xf001005c
#define NI_TOP_NI_RX_CNTRL_CONFIG1_0_STRIDE      8
#define NI_TOP_NI_RX_CNTRL_CONFIG1_0_COUNT       8
#define NI_TOP_NI_RX_CNTRL_CONFIG1_0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 rxctrl_byp_voq       :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxctrl_byp_cpuptp    :  1 ; /* bits 6:6 */
    cs_uint32 rxctrl_byp_nocrc     :  1 ; /* bits 5:5 */
    cs_uint32 rxctrl_byp_nostuff   :  1 ; /* bits 4:4 */
    cs_uint32 rxctrl_byp_cos       :  3 ; /* bits 3:1 */
    cs_uint32 rxctrl_byp_en        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxctrl_byp_en        :  1 ; /* bits 0:0 */
    cs_uint32 rxctrl_byp_cos       :  3 ; /* bits 3:1 */
    cs_uint32 rxctrl_byp_nostuff   :  1 ; /* bits 4:4 */
    cs_uint32 rxctrl_byp_nocrc     :  1 ; /* bits 5:5 */
    cs_uint32 rxctrl_byp_cpuptp    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxctrl_byp_voq       :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_CNTRL_CONFIG1_0_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_RX_AGG_CONFIG                  0xf0010098
#define NI_TOP_NI_RX_AGG_CONFIG_dft              0x02880029




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  2 ;
    cs_uint32 rxagg_cfg_spare      :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rx_fifo_full_unset_th :  5 ; /* bits 26:22 */
    cs_uint32 rx_fifo_full_set_th  :  5 ; /* bits 21:17 */
    cs_uint32 rx_fifo_non_correct_err_vlden :  1 ; /* bits 16:16 */
    cs_uint32 rx_fifo_suppkt_less18 :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 rx_fifo_srst         :  1 ; /* bits 8:8 */
    cs_uint32 rx_frm_space         :  6 ; /* bits 7:2 */
    cs_uint32 rx_fifo_dis          :  1 ; /* bits 1:1 */
    cs_uint32 rx_port_cal_dis      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_port_cal_dis      :  1 ; /* bits 0:0 */
    cs_uint32 rx_fifo_dis          :  1 ; /* bits 1:1 */
    cs_uint32 rx_frm_space         :  6 ; /* bits 7:2 */
    cs_uint32 rx_fifo_srst         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 rx_fifo_suppkt_less18 :  1 ; /* bits 15:15 */
    cs_uint32 rx_fifo_non_correct_err_vlden :  1 ; /* bits 16:16 */
    cs_uint32 rx_fifo_full_set_th  :  5 ; /* bits 21:17 */
    cs_uint32 rx_fifo_full_unset_th :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxagg_cfg_spare      :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd3               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_AGG_CONFIG_t;





#define NI_TOP_NI_RX_AGGPC_CONFIG                0xf001009c
#define NI_TOP_NI_RX_AGGPC_CONFIG_dft            0x00005f5f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 17 ;
    cs_uint32 pc_ts_wrap_cnt_pg1   :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pc_ts_wrap_cnt_pg0   :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_ts_wrap_cnt_pg0   :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pc_ts_wrap_cnt_pg1   :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd2               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_AGGPC_CONFIG_t;





#define NI_TOP_NI_RX_FIFO_CG_TH                  0xf00100a0
#define NI_TOP_NI_RX_FIFO_CG_TH_dft              0x80c8812c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fifo_cg_pkt_en    :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rx_fifo_cg_pkt_th    : 10 ; /* bits 25:16 */
    cs_uint32 rx_fifo_cg_free_en   :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_fifo_cg_free_th   : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_cg_free_th   : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_fifo_cg_free_en   :  1 ; /* bits 15:15 */
    cs_uint32 rx_fifo_cg_pkt_th    : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rx_fifo_cg_pkt_en    :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_FIFO_CG_TH_t;





#define NI_TOP_NI_RX_FIFO_NOCG_TH                0xf00100a4
#define NI_TOP_NI_RX_FIFO_NOCG_TH_dft            0x80328190




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fifo_nocg_pkt_en  :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rx_fifo_nocg_pkt_th  : 10 ; /* bits 25:16 */
    cs_uint32 rx_fifo_nocg_free_en :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_fifo_nocg_free_th : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_nocg_free_th : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_fifo_nocg_free_en :  1 ; /* bits 15:15 */
    cs_uint32 rx_fifo_nocg_pkt_th  : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rx_fifo_nocg_pkt_en  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_FIFO_NOCG_TH_t;





#define NI_TOP_NI_RX_FIFO_STAT                   0xf00100a8
#define NI_TOP_NI_RX_FIFO_STAT_dft               0x00040000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rxpc_current_pg      :  1 ; /* bits 31:31 */
    cs_uint32 rxfifo_init_done     :  1 ; /* bits 30:30 */
    cs_uint32 rxfifo_voq_cnt       : 11 ; /* bits 29:19 */
    cs_uint32 rxfifo_fb_cnt        : 11 ; /* bits 18:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 rx_fifo_congestion   :  1 ; /* bits 4:4 */
    cs_uint32 rx_rtn_buff_err      :  1 ; /* bits 3:3 */
    cs_uint32 voq_full             :  1 ; /* bits 2:2 */
    cs_uint32 rxfifo_full          :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_non_correct_err_state :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_non_correct_err_state :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_full          :  1 ; /* bits 1:1 */
    cs_uint32 voq_full             :  1 ; /* bits 2:2 */
    cs_uint32 rx_rtn_buff_err      :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_congestion   :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 rxfifo_fb_cnt        : 11 ; /* bits 18:8 */
    cs_uint32 rxfifo_voq_cnt       : 11 ; /* bits 29:19 */
    cs_uint32 rxfifo_init_done     :  1 ; /* bits 30:30 */
    cs_uint32 rxpc_current_pg      :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_FIFO_STAT_t;





#define NI_TOP_NI_RX_PORT_CAL_ACCESS             0xf00100ac
#define NI_TOP_NI_RX_PORT_CAL_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 rxpc_page            :  1 ; /* bits 17:17 */
    cs_uint32 cpu_page             :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 address              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 cpu_page             :  1 ; /* bits 16:16 */
    cs_uint32 rxpc_page            :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_PORT_CAL_ACCESS_t;





#define NI_TOP_NI_RX_PORT_CAL_DATA               0xf00100b0
#define NI_TOP_NI_RX_PORT_CAL_DATA_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 pspid_ts             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pspid_ts             :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RX_PORT_CAL_DATA_t;





#define NI_TOP_NI_RXFIFO_DBG_ACCESS              0xf00100b4
#define NI_TOP_NI_RXFIFO_DBG_ACCESS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 debug_mode           :  1 ; /* bits 29:29 */
    cs_uint32 mem_sel              :  2 ; /* bits 28:27 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 address              : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 mem_sel              :  2 ; /* bits 28:27 */
    cs_uint32 debug_mode           :  1 ; /* bits 29:29 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_DBG_ACCESS_t;





#define NI_TOP_NI_RXFIFO_DBG_DATA                0xf00100b8
#define NI_TOP_NI_RXFIFO_DBG_DATA_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_rdata            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_rdata            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_DBG_DATA_t;





#define NI_TOP_NI_RXFIFO_DBG1                    0xf00100bc
#define NI_TOP_NI_RXFIFO_DBG1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rxfifo_voqm_eccmask  :  7 ; /* bits 7:1 */
    cs_uint32 rxfifo_voqm_dbg      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxfifo_voqm_dbg      :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_voqm_eccmask  :  7 ; /* bits 7:1 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_DBG1_t;





#define NI_TOP_NI_SCH_BP_THLD_ETH                0xf00100c0
#define NI_TOP_NI_SCH_BP_THLD_ETH_dft            0x082a00f8




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 rdy_low_thld_fe      :  5 ; /* bits 27:23 */
    cs_uint32 rdy_high_thld_fe     :  5 ; /* bits 22:18 */
    cs_uint32 rdy_low_thld_ge      :  9 ; /* bits 17:9 */
    cs_uint32 rdy_high_thld_ge     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rdy_high_thld_ge     :  9 ; /* bits 8:0 */
    cs_uint32 rdy_low_thld_ge      :  9 ; /* bits 17:9 */
    cs_uint32 rdy_high_thld_fe     :  5 ; /* bits 22:18 */
    cs_uint32 rdy_low_thld_fe      :  5 ; /* bits 27:23 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_SCH_BP_THLD_ETH_t;





#define NI_TOP_NI_SCH_BP_THLD_MC                 0xf00100c4
#define NI_TOP_NI_SCH_BP_THLD_MC_dft             0x047f0472




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rdy_low_thld_mc      : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rdy_high_thld_mc     : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rdy_high_thld_mc     : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rdy_low_thld_mc      : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_SCH_BP_THLD_MC_t;





#define NI_TOP_NI_MISC_CONFIG                    0xf00100c8
#define NI_TOP_NI_MISC_CONFIG_dft                0x00001050




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 txmib_mode           :  1 ; /* bits 17:17 */
    cs_uint32 rxmib_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 mc_accept_all        :  1 ; /* bits 14:14 */
    cs_uint32 ptp_cpu_cache_cnt    :  5 ; /* bits 13:9 */
    cs_uint32 ptp_hw_cnt_rst       :  1 ; /* bits 8:8 */
    cs_uint32 mr_fe_bp_en          :  1 ; /* bits 7:7 */
    cs_uint32 mr_lspid_inst_cp     :  1 ; /* bits 6:6 */
    cs_uint32 mc_source_filter_on  :  1 ; /* bits 5:5 */
    cs_uint32 mc_lspid_inst_cp     :  1 ; /* bits 4:4 */
    cs_uint32 mc_source_filter_on_hdrvec :  1 ; /* bits 3:3 */
    cs_uint32 eth_sch_rdy_pkt      :  1 ; /* bits 2:2 */
    cs_uint32 mc_pkt_rm_crcerr     :  1 ; /* bits 1:1 */
    cs_uint32 tx_em_crc_inv        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_em_crc_inv        :  1 ; /* bits 0:0 */
    cs_uint32 mc_pkt_rm_crcerr     :  1 ; /* bits 1:1 */
    cs_uint32 eth_sch_rdy_pkt      :  1 ; /* bits 2:2 */
    cs_uint32 mc_source_filter_on_hdrvec :  1 ; /* bits 3:3 */
    cs_uint32 mc_lspid_inst_cp     :  1 ; /* bits 4:4 */
    cs_uint32 mc_source_filter_on  :  1 ; /* bits 5:5 */
    cs_uint32 mr_lspid_inst_cp     :  1 ; /* bits 6:6 */
    cs_uint32 mr_fe_bp_en          :  1 ; /* bits 7:7 */
    cs_uint32 ptp_hw_cnt_rst       :  1 ; /* bits 8:8 */
    cs_uint32 ptp_cpu_cache_cnt    :  5 ; /* bits 13:9 */
    cs_uint32 mc_accept_all        :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxmib_mode           :  1 ; /* bits 16:16 */
    cs_uint32 txmib_mode           :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MISC_CONFIG_t;





#define NI_TOP_NI_TX_VOQ_LKUP_ACCESS             0xf00100cc
#define NI_TOP_NI_TX_VOQ_LKUP_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 err_parity           :  1 ; /* bits 17:17 */
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 address              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 err_parity           :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TX_VOQ_LKUP_ACCESS_t;





#define NI_TOP_NI_TX_VOQ_LKUP_DATA1              0xf00100d0
#define NI_TOP_NI_TX_VOQ_LKUP_DATA1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 txem_crcstate        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_crcstate        :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TX_VOQ_LKUP_DATA1_t;





#define NI_TOP_NI_TX_VOQ_LKUP_DATA0              0xf00100d4
#define NI_TOP_NI_TX_VOQ_LKUP_DATA0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 txem_crcstate        : 27 ; /* bits 31:5 */
    cs_uint32 txem_discrc          :  1 ; /* bits 4:4 */
    cs_uint32 txem_voq_did         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_voq_did         :  4 ; /* bits 3:0 */
    cs_uint32 txem_discrc          :  1 ; /* bits 4:4 */
    cs_uint32 txem_crcstate        : 27 ; /* bits 31:5 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TX_VOQ_LKUP_DATA0_t;





#define NI_TOP_NI_MC_INDX_LKUP_ACCESS            0xf00100d8
#define NI_TOP_NI_MC_INDX_LKUP_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 err_parity           :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 address              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_parity           :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MC_INDX_LKUP_ACCESS_t;





#define NI_TOP_NI_MC_INDX_LKUP_DATA              0xf00100dc
#define NI_TOP_NI_MC_INDX_LKUP_DATA_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 mc_vec               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mc_vec               : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MC_INDX_LKUP_DATA_t;





#define NI_TOP_NI_PG_DA1                         0xf00100e0
#define NI_TOP_NI_PG_DA1_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_da1               :  8 ; /* bits 31:24 */
    cs_uint32 pg_da2               :  8 ; /* bits 23:16 */
    cs_uint32 pg_da3               :  8 ; /* bits 15:8 */
    cs_uint32 pg_da4               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_da4               :  8 ; /* bits 7:0 */
    cs_uint32 pg_da3               :  8 ; /* bits 15:8 */
    cs_uint32 pg_da2               :  8 ; /* bits 23:16 */
    cs_uint32 pg_da1               :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_DA1_t;





#define NI_TOP_NI_PG_DA2                         0xf00100e4
#define NI_TOP_NI_PG_DA2_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pg_da5               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_da5               :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_DA2_t;





#define NI_TOP_NI_PG_SA1                         0xf00100e8
#define NI_TOP_NI_PG_SA1_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_sa1               :  8 ; /* bits 31:24 */
    cs_uint32 pg_sa2               :  8 ; /* bits 23:16 */
    cs_uint32 pg_sa3               :  8 ; /* bits 15:8 */
    cs_uint32 pg_sa4               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_sa4               :  8 ; /* bits 7:0 */
    cs_uint32 pg_sa3               :  8 ; /* bits 15:8 */
    cs_uint32 pg_sa2               :  8 ; /* bits 23:16 */
    cs_uint32 pg_sa1               :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_SA1_t;





#define NI_TOP_NI_PG_SA2                         0xf00100ec
#define NI_TOP_NI_PG_SA2_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pg_sa5               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_sa5               :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_SA2_t;





#define NI_TOP_NI_PG_CFG0                        0xf00100f0
#define NI_TOP_NI_PG_CFG0_dft                    0x00648064




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_frm_cnt           : 16 ; /* bits 31:16 */
    cs_uint32 pg_len_data          :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 pg_len               : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_len               : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 pg_len_data          :  1 ; /* bits 15:15 */
    cs_uint32 pg_frm_cnt           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_CFG0_t;





#define NI_TOP_NI_PG_CFG1                        0xf00100f4
#define NI_TOP_NI_PG_CFG1_dft                    0x81008100




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_vlan2_tpid        : 16 ; /* bits 31:16 */
    cs_uint32 pg_vlan1_tpid        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_vlan1_tpid        : 16 ; /* bits 15:0 */
    cs_uint32 pg_vlan2_tpid        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_CFG1_t;





#define NI_TOP_NI_PG_FXPT                        0xf00100f8
#define NI_TOP_NI_PG_FXPT_dft                    0xaaaa5555




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_fxpat             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_fxpat             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG_FXPT_t;





#define NI_TOP_NI_PG0_CFG1                       0xf00100fc
#define NI_TOP_NI_PG0_CFG1_STRIDE                12
#define NI_TOP_NI_PG0_CFG1_COUNT                 3
#define NI_TOP_NI_PG0_CFG1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_type              : 16 ; /* bits 31:16 */
    cs_uint32 pg_sa6               :  8 ; /* bits 15:8 */
    cs_uint32 pg_da6               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_da6               :  8 ; /* bits 7:0 */
    cs_uint32 pg_sa6               :  8 ; /* bits 15:8 */
    cs_uint32 pg_type              : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG0_CFG1_t;





#define NI_TOP_NI_PG0_CFG2                       0xf0010100
#define NI_TOP_NI_PG0_CFG2_STRIDE                12
#define NI_TOP_NI_PG0_CFG2_COUNT                 3
#define NI_TOP_NI_PG0_CFG2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pg_vlan2             : 16 ; /* bits 31:16 */
    cs_uint32 pg_vlan1             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_vlan1             : 16 ; /* bits 15:0 */
    cs_uint32 pg_vlan2             : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG0_CFG2_t;





#define NI_TOP_NI_PG0_CNTRL                      0xf0010104
#define NI_TOP_NI_PG0_CNTRL_STRIDE               12
#define NI_TOP_NI_PG0_CNTRL_COUNT                3
#define NI_TOP_NI_PG0_CNTRL_dft                  0x00080000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 pg_ipg               :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 pg_insfixpattern     :  1 ; /* bits 10:10 */
    cs_uint32 pg_invpat            :  1 ; /* bits 9:9 */
    cs_uint32 pg_insseqnum         :  1 ; /* bits 8:8 */
    cs_uint32 pg_instype           :  1 ; /* bits 7:7 */
    cs_uint32 pg_insvlan1          :  1 ; /* bits 6:6 */
    cs_uint32 pg_insvlan2          :  1 ; /* bits 5:5 */
    cs_uint32 pg_fixedlen          :  1 ; /* bits 4:4 */
    cs_uint32 pg_linerate          :  2 ; /* bits 3:2 */
    cs_uint32 pg_fixedcount        :  1 ; /* bits 1:1 */
    cs_uint32 pg_en                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pg_en                :  1 ; /* bits 0:0 */
    cs_uint32 pg_fixedcount        :  1 ; /* bits 1:1 */
    cs_uint32 pg_linerate          :  2 ; /* bits 3:2 */
    cs_uint32 pg_fixedlen          :  1 ; /* bits 4:4 */
    cs_uint32 pg_insvlan2          :  1 ; /* bits 5:5 */
    cs_uint32 pg_insvlan1          :  1 ; /* bits 6:6 */
    cs_uint32 pg_instype           :  1 ; /* bits 7:7 */
    cs_uint32 pg_insseqnum         :  1 ; /* bits 8:8 */
    cs_uint32 pg_invpat            :  1 ; /* bits 9:9 */
    cs_uint32 pg_insfixpattern     :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 pg_ipg               :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PG0_CNTRL_t;


    
    
    
    
    
    



#define NI_TOP_NI_PC_DA1                         0xf0010120
#define NI_TOP_NI_PC_DA1_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_da1               :  8 ; /* bits 31:24 */
    cs_uint32 pc_da2               :  8 ; /* bits 23:16 */
    cs_uint32 pc_da3               :  8 ; /* bits 15:8 */
    cs_uint32 pc_da4               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_da4               :  8 ; /* bits 7:0 */
    cs_uint32 pc_da3               :  8 ; /* bits 15:8 */
    cs_uint32 pc_da2               :  8 ; /* bits 23:16 */
    cs_uint32 pc_da1               :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_DA1_t;





#define NI_TOP_NI_PC_DA2                         0xf0010124
#define NI_TOP_NI_PC_DA2_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pc_da5               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_da5               :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_DA2_t;





#define NI_TOP_NI_PC_SA1                         0xf0010128
#define NI_TOP_NI_PC_SA1_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_sa1               :  8 ; /* bits 31:24 */
    cs_uint32 pc_sa2               :  8 ; /* bits 23:16 */
    cs_uint32 pc_sa3               :  8 ; /* bits 15:8 */
    cs_uint32 pc_sa4               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_sa4               :  8 ; /* bits 7:0 */
    cs_uint32 pc_sa3               :  8 ; /* bits 15:8 */
    cs_uint32 pc_sa2               :  8 ; /* bits 23:16 */
    cs_uint32 pc_sa1               :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_SA1_t;





#define NI_TOP_NI_PC_SA2                         0xf001012c
#define NI_TOP_NI_PC_SA2_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pc_sa5               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_sa5               :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_SA2_t;





#define NI_TOP_NI_PC_CFG0                        0xf0010130
#define NI_TOP_NI_PC_CFG0_dft                    0x00000064




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 pc_len               : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_len               : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_CFG0_t;





#define NI_TOP_NI_PC_CFG1                        0xf0010134
#define NI_TOP_NI_PC_CFG1_dft                    0x81008100




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_vlan2_tpid        : 16 ; /* bits 31:16 */
    cs_uint32 pc_vlan1_tpid        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_vlan1_tpid        : 16 ; /* bits 15:0 */
    cs_uint32 pc_vlan2_tpid        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_CFG1_t;





#define NI_TOP_NI_PC_FXPT                        0xf0010138
#define NI_TOP_NI_PC_FXPT_dft                    0xaaaa5555




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_fxpat             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_fxpat             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC_FXPT_t;





#define NI_TOP_NI_PC0_CFG1                       0xf001013c
#define NI_TOP_NI_PC0_CFG1_STRIDE                16
#define NI_TOP_NI_PC0_CFG1_COUNT                 3
#define NI_TOP_NI_PC0_CFG1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_type              : 16 ; /* bits 31:16 */
    cs_uint32 pc_sa6               :  8 ; /* bits 15:8 */
    cs_uint32 pc_da6               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_da6               :  8 ; /* bits 7:0 */
    cs_uint32 pc_sa6               :  8 ; /* bits 15:8 */
    cs_uint32 pc_type              : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_CFG1_t;





#define NI_TOP_NI_PC0_CFG2                       0xf0010140
#define NI_TOP_NI_PC0_CFG2_STRIDE                16
#define NI_TOP_NI_PC0_CFG2_COUNT                 3
#define NI_TOP_NI_PC0_CFG2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pc_vlan2             : 16 ; /* bits 31:16 */
    cs_uint32 pc_vlan1             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_vlan1             : 16 ; /* bits 15:0 */
    cs_uint32 pc_vlan2             : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_CFG2_t;





#define NI_TOP_NI_PC0_CNTRL                      0xf0010144
#define NI_TOP_NI_PC0_CNTRL_STRIDE               16
#define NI_TOP_NI_PC0_CNTRL_COUNT                3
#define NI_TOP_NI_PC0_CNTRL_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 21 ;
    cs_uint32 pc_expfixpattern     :  1 ; /* bits 10:10 */
    cs_uint32 pc_invpat            :  1 ; /* bits 9:9 */
    cs_uint32 pc_expseqnum         :  1 ; /* bits 8:8 */
    cs_uint32 pc_exptype           :  1 ; /* bits 7:7 */
    cs_uint32 pc_expvlan1          :  1 ; /* bits 6:6 */
    cs_uint32 pc_expvlan2          :  1 ; /* bits 5:5 */
    cs_uint32 pc_fixedlen          :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pc_en                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_en                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pc_fixedlen          :  1 ; /* bits 4:4 */
    cs_uint32 pc_expvlan2          :  1 ; /* bits 5:5 */
    cs_uint32 pc_expvlan1          :  1 ; /* bits 6:6 */
    cs_uint32 pc_exptype           :  1 ; /* bits 7:7 */
    cs_uint32 pc_expseqnum         :  1 ; /* bits 8:8 */
    cs_uint32 pc_invpat            :  1 ; /* bits 9:9 */
    cs_uint32 pc_expfixpattern     :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd2               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_CNTRL_t;





#define NI_TOP_NI_PC0_STAT                       0xf0010148
#define NI_TOP_NI_PC0_STAT_STRIDE                16
#define NI_TOP_NI_PC0_STAT_COUNT                 3
#define NI_TOP_NI_PC0_STAT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 pc_dchkstatus        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pc_dchkstatus        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_STAT_t;


    
    
    
    
    
    
    
    



#define NI_TOP_NI_RM_CFG                         0xf001016c
#define NI_TOP_NI_RM_CFG_dft                     0x05000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rm_tbinc             :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 debug_mode           :  1 ; /* bits 11:11 */
    cs_uint32 rm_clrtb             :  1 ; /* bits 10:10 */
    cs_uint32 rm_clrcnt            :  1 ; /* bits 9:9 */
    cs_uint32 rm_cntpkts           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 rm_pid               :  4 ; /* bits 4:1 */
    cs_uint32 rm_en                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rm_en                :  1 ; /* bits 0:0 */
    cs_uint32 rm_pid               :  4 ; /* bits 4:1 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 rm_cntpkts           :  1 ; /* bits 8:8 */
    cs_uint32 rm_clrcnt            :  1 ; /* bits 9:9 */
    cs_uint32 rm_clrtb             :  1 ; /* bits 10:10 */
    cs_uint32 debug_mode           :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 rm_tbinc             :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RM_CFG_t;





#define NI_TOP_NI_RM_TBMAX                       0xf0010170
#define NI_TOP_NI_RM_TBMAX_dft                   0x00ffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rm_tbmax             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rm_tbmax             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RM_TBMAX_t;





#define NI_TOP_NI_RM_CNTR                        0xf0010174
#define NI_TOP_NI_RM_CNTR_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rm_cnt               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rm_cnt               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RM_CNTR_t;





#define NI_TOP_NI_RM_LASTCNTR                    0xf0010178
#define NI_TOP_NI_RM_LASTCNTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rm_lastcnt           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rm_lastcnt           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RM_LASTCNTR_t;





#define NI_TOP_NI_PPS_TRIG_HW_TS                 0xf001017c
#define NI_TOP_NI_PPS_TRIG_HW_TS_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pps_trigger_hw_ts    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pps_trigger_hw_ts    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PPS_TRIG_HW_TS_t;





#define NI_TOP_NI_INIT_DONE                      0xf0010180
#define NI_TOP_NI_INIT_DONE_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 ni_init_done         :  1 ; /* bits 1:1 */
    cs_uint32 ni_mib_init_done     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_mib_init_done     :  1 ; /* bits 0:0 */
    cs_uint32 ni_init_done         :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INIT_DONE_t;





#define NI_TOP_NI_RXMIB_ACCESS                   0xf0010184
#define NI_TOP_NI_RXMIB_ACCESS_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 port_id              :  3 ; /* bits 7:5 */
    cs_uint32 counter_id           :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter_id           :  5 ; /* bits 4:0 */
    cs_uint32 port_id              :  3 ; /* bits 7:5 */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXMIB_ACCESS_t;

#define     counter_id_RxUCPktCnt                         0x0
#define     counter_id_RxMCFrmCnt                         0x1
#define     counter_id_RxBCFrmCnt                         0x2
#define     counter_id_RxOAMFrmCnt                        0x3
#define     counter_id_RxJumboFrmCnt                      0x4
#define     counter_id_RxPauseFrmCnt                      0x5
#define     counter_id_RxUnKnownOCFrmCnt                  0x6
#define     counter_id_RxCrcErrFrmCnt                     0x7
#define     counter_id_RxUndersizeFrmCnt                  0x8
#define     counter_id_RxRuntFrmCnt                       0x9
#define     counter_id_RxOvSizeFrmCnt                     0xa
#define     counter_id_RxJabberFrmCnt                     0xb
#define     counter_id_RxInvalidFrmCnt                    0xc
#define     counter_id_RxStatsFrm64Oct                    0xd
#define     counter_id_RxStatsFrm65to127Oct               0xe
#define     counter_id_RxStatsFrm128to255Oct              0xf
#define     counter_id_RxStatsFrm256to511Oct              0x10
#define     counter_id_RxStatsFrm512to1023Oct             0x11
#define     counter_id_RxStatsFrm1024to1518Oct            0x12
#define     counter_id_RxStatsFrm1519to2100Oct            0x13
#define     counter_id_RxStatsFrm2101to9200Oct            0x14
#define     counter_id_RxStatsFrm9201toMaxOct             0x15
#define     counter_id_RxByteCount_Lo                     0x16
#define     counter_id_RxByteCount_Hi                     0x17




#define NI_TOP_NI_RXMIB_DATA1                    0xf0010188
#define NI_TOP_NI_RXMIB_DATA1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cnt_val_hi           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cnt_val_hi           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXMIB_DATA1_t;





#define NI_TOP_NI_RXMIB_DATA0                    0xf001018c
#define NI_TOP_NI_RXMIB_DATA0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cnt_val_lo           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cnt_val_lo           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXMIB_DATA0_t;





#define NI_TOP_NI_TXMIB_ACCESS                   0xf0010190
#define NI_TOP_NI_TXMIB_ACCESS_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 port_id              :  2 ; /* bits 6:5 */
    cs_uint32 counter_id           :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter_id           :  5 ; /* bits 4:0 */
    cs_uint32 port_id              :  2 ; /* bits 6:5 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXMIB_ACCESS_t;

#define     counter_id_TxUCPktCnt                         0x0
#define     counter_id_TxMCFrmCnt                         0x1
#define     counter_id_TxBCFrmCnt                         0x2
#define     counter_id_TxOAMFrmCnt                        0x3
#define     counter_id_TxJumboFrmCnt                      0x4
#define     counter_id_TxPauseFrmCnt                      0x5
#define     counter_id_TxCrcErrFrmCnt                     0x6
#define     counter_id_TxOvSizeFrmCnt                     0x7
#define     counter_id_TxSingleColFrm                     0x8
#define     counter_id_TxMultiColFrm                      0x9
#define     counter_id_TxLateColFrm                       0xa
#define     counter_id_TxExessColFrm                      0xb
#define     counter_id_TxStatsFrm64Oct                    0xd
#define     counter_id_TxStatsFrm65to127Oct               0xe
#define     counter_id_TxStatsFrm128to255Oct              0xf
#define     counter_id_TxStatsFrm256to511Oct              0x10
#define     counter_id_TxStatsFrm512to1023Oct             0x11
#define     counter_id_TxStatsFrm1024to1518Oct            0x12
#define     counter_id_TxStatsFrm1519to2100Oct            0x13
#define     counter_id_TxStatsFrm2101to9200Oct            0x14
#define     counter_id_TxStatsFrm9201toMaxOct             0x15
#define     counter_id_TxByteCount_Lo                     0x16
#define     counter_id_TxByteCount_Hi                     0x17




#define NI_TOP_NI_TXMIB_DATA1                    0xf0010194
#define NI_TOP_NI_TXMIB_DATA1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cnt_val_hi           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cnt_val_hi           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXMIB_DATA1_t;





#define NI_TOP_NI_TXMIB_DATA0                    0xf0010198
#define NI_TOP_NI_TXMIB_DATA0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cnt_val_lo           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cnt_val_lo           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXMIB_DATA0_t;





#define NI_TOP_NI_TXEM_CRCERR_ACCESS             0xf001019c
#define NI_TOP_NI_TXEM_CRCERR_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 port_id              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 port_id              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_CRCERR_ACCESS_t;





#define NI_TOP_NI_TXEM_CRCERR_DATA               0xf00101a0
#define NI_TOP_NI_TXEM_CRCERR_DATA_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 txem_crcerrcnt       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_crcerrcnt       : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_CRCERR_DATA_t;





#define NI_TOP_NI_MAL_PKT_DROPCNT                0xf00101a4
#define NI_TOP_NI_MAL_PKT_DROPCNT_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mal_packets_dropped  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mal_packets_dropped  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MAL_PKT_DROPCNT_t;





#define NI_TOP_NI_MAL_PKT_DROPCNT_CFG            0xf00101a8
#define NI_TOP_NI_MAL_PKT_DROPCNT_CFG_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  2 ;
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 16 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 debug_mode           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 op_code              :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd3               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_MAL_PKT_DROPCNT_CFG_t;





#define NI_TOP_NI_CPUXRAM_ADRCFG_RX_0            0xf00101ac
#define NI_TOP_NI_CPUXRAM_ADRCFG_RX_0_STRIDE     4
#define NI_TOP_NI_CPUXRAM_ADRCFG_RX_0_COUNT      9
#define NI_TOP_NI_CPUXRAM_ADRCFG_RX_0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 rx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_base_addr         : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_base_addr         : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 rx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ADRCFG_RX_0_t;


    
    
    
    
    
    
    
    



#define NI_TOP_NI_CPUXRAM_ADRCFG_TX_0            0xf00101d0
#define NI_TOP_NI_CPUXRAM_ADRCFG_TX_0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 tx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 tx_base_addr         : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_base_addr         : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 tx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ADRCFG_TX_0_t;





#define NI_TOP_NI_CPUXRAM_ADRCFG_TX_1            0xf00101d4
#define NI_TOP_NI_CPUXRAM_ADRCFG_TX_1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 tx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 tx_base_addr         : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_base_addr         : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 tx_top_addr          : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ADRCFG_TX_1_t;





#define NI_TOP_NI_CPUXRAM_CFG                    0xf00101d8
#define NI_TOP_NI_CPUXRAM_CFG_dft                0x8a00c5ff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 xram_arb_auto_prior  :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 xram_pc_wrapcnt      :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_dma_fifo_srst   :  1 ; /* bits 22:22 */
    cs_uint32 xram_rx_mgmtfifo_srst :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_pcachefifo_srst :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_qmfifo_srst  :  1 ; /* bits 19:19 */
    cs_uint32 xram_cntr_op_code    :  2 ; /* bits 18:17 */
    cs_uint32 xram_cntr_debug_mode :  1 ; /* bits 16:16 */
    cs_uint32 xram_mgmt_promisc_mode :  2 ; /* bits 15:14 */
    cs_uint32 xram_mgmt_term_large_pkt :  1 ; /* bits 13:13 */
    cs_uint32 xram_mgmt_dis_drop_ovsz_pkt :  1 ; /* bits 12:12 */
    cs_uint32 rx_x_drop_err_pkt    :  1 ; /* bits 11:11 */
    cs_uint32 tx_1_cpu_pkt_dis     :  1 ; /* bits 10:10 */
    cs_uint32 tx_0_cpu_pkt_dis     :  1 ; /* bits 9:9 */
    cs_uint32 rx_8_cpu_pkt_dis     :  1 ; /* bits 8:8 */
    cs_uint32 rx_7_cpu_pkt_dis     :  1 ; /* bits 7:7 */
    cs_uint32 rx_6_cpu_pkt_dis     :  1 ; /* bits 6:6 */
    cs_uint32 rx_5_cpu_pkt_dis     :  1 ; /* bits 5:5 */
    cs_uint32 rx_4_cpu_pkt_dis     :  1 ; /* bits 4:4 */
    cs_uint32 rx_3_cpu_pkt_dis     :  1 ; /* bits 3:3 */
    cs_uint32 rx_2_cpu_pkt_dis     :  1 ; /* bits 2:2 */
    cs_uint32 rx_1_cpu_pkt_dis     :  1 ; /* bits 1:1 */
    cs_uint32 rx_0_cpu_pkt_dis     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_0_cpu_pkt_dis     :  1 ; /* bits 0:0 */
    cs_uint32 rx_1_cpu_pkt_dis     :  1 ; /* bits 1:1 */
    cs_uint32 rx_2_cpu_pkt_dis     :  1 ; /* bits 2:2 */
    cs_uint32 rx_3_cpu_pkt_dis     :  1 ; /* bits 3:3 */
    cs_uint32 rx_4_cpu_pkt_dis     :  1 ; /* bits 4:4 */
    cs_uint32 rx_5_cpu_pkt_dis     :  1 ; /* bits 5:5 */
    cs_uint32 rx_6_cpu_pkt_dis     :  1 ; /* bits 6:6 */
    cs_uint32 rx_7_cpu_pkt_dis     :  1 ; /* bits 7:7 */
    cs_uint32 rx_8_cpu_pkt_dis     :  1 ; /* bits 8:8 */
    cs_uint32 tx_0_cpu_pkt_dis     :  1 ; /* bits 9:9 */
    cs_uint32 tx_1_cpu_pkt_dis     :  1 ; /* bits 10:10 */
    cs_uint32 rx_x_drop_err_pkt    :  1 ; /* bits 11:11 */
    cs_uint32 xram_mgmt_dis_drop_ovsz_pkt :  1 ; /* bits 12:12 */
    cs_uint32 xram_mgmt_term_large_pkt :  1 ; /* bits 13:13 */
    cs_uint32 xram_mgmt_promisc_mode :  2 ; /* bits 15:14 */
    cs_uint32 xram_cntr_debug_mode :  1 ; /* bits 16:16 */
    cs_uint32 xram_cntr_op_code    :  2 ; /* bits 18:17 */
    cs_uint32 xram_rx_qmfifo_srst  :  1 ; /* bits 19:19 */
    cs_uint32 xram_rx_pcachefifo_srst :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_mgmtfifo_srst :  1 ; /* bits 21:21 */
    cs_uint32 xram_dma_fifo_srst   :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_pc_wrapcnt      :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 xram_arb_auto_prior  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CFG_t;





#define NI_TOP_NI_CPUXRAM_PTCAL0                 0xf00101dc
#define NI_TOP_NI_CPUXRAM_PTCAL0_dft             0x21043210




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 xram_pc_ts7          :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 xram_pc_ts6          :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 xram_pc_ts5          :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 xram_pc_ts4          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 xram_pc_ts3          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 xram_pc_ts2          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_pc_ts1          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_pc_ts0          :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_pc_ts0          :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_pc_ts1          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_pc_ts2          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 xram_pc_ts3          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 xram_pc_ts4          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 xram_pc_ts5          :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 xram_pc_ts6          :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 xram_pc_ts7          :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PTCAL0_t;





#define NI_TOP_NI_CPUXRAM_PTCAL1                 0xf00101e0
#define NI_TOP_NI_CPUXRAM_PTCAL1_dft             0x00000043




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 xram_pc_ts15         :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 xram_pc_ts14         :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 xram_pc_ts13         :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 xram_pc_ts12         :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 xram_pc_ts11         :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 xram_pc_ts10         :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_pc_ts9          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_pc_ts8          :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_pc_ts8          :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_pc_ts9          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_pc_ts10         :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 xram_pc_ts11         :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 xram_pc_ts12         :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 xram_pc_ts13         :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 xram_pc_ts14         :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 xram_pc_ts15         :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PTCAL1_t;





#define NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0           0xf00101e4
#define NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0_STRIDE    4
#define NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0_COUNT     8
#define NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0_dft       0x000000b4




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 xram_sch_rdy_mode    :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 xram_sch_rdy_free_thld : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_sch_rdy_free_thld : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 xram_sch_rdy_mode    :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0_t;


    
    
    
    
    
    
    



#define NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0           0xf0010204
#define NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0_STRIDE    24
#define NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0_COUNT     9
#define NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 pkt_rd_ptr           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_rd_ptr           : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0_t;





#define NI_TOP_NI_CPUXRAM_CPU_STA_RX_0           0xf0010208
#define NI_TOP_NI_CPUXRAM_CPU_STA_RX_0_STRIDE    24
#define NI_TOP_NI_CPUXRAM_CPU_STA_RX_0_COUNT     9
#define NI_TOP_NI_CPUXRAM_CPU_STA_RX_0_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 int_colsc_thresh_reached :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 pkt_wr_ptr           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_wr_ptr           : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 int_colsc_thresh_reached :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CPU_STA_RX_0_t;





#define NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0        0xf001020c
#define NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0_STRIDE 24
#define NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0_COUNT  9
#define NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 int_colsc_en         :  1 ; /* bits 31:31 */
    cs_uint32 int_colsc_first_en   :  1 ; /* bits 30:30 */
    cs_uint32 int_colsc_pkt        : 10 ; /* bits 29:20 */
    cs_uint32 int_colsc_dly_time   : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_colsc_dly_time   : 20 ; /* bits 19:0 */
    cs_uint32 int_colsc_pkt        : 10 ; /* bits 29:20 */
    cs_uint32 int_colsc_first_en   :  1 ; /* bits 30:30 */
    cs_uint32 int_colsc_en         :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0_t;





#define NI_TOP_NI_CPUXRAM_PKT_CNT_0              0xf0010210
#define NI_TOP_NI_CPUXRAM_PKT_CNT_0_STRIDE       24
#define NI_TOP_NI_CPUXRAM_PKT_CNT_0_COUNT        9
#define NI_TOP_NI_CPUXRAM_PKT_CNT_0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 pkt_to_xram          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_to_xram          : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PKT_CNT_0_t;





#define NI_TOP_NI_CPUXRAM_BYT_CNT_0              0xf0010214
#define NI_TOP_NI_CPUXRAM_BYT_CNT_0_STRIDE       24
#define NI_TOP_NI_CPUXRAM_BYT_CNT_0_COUNT        9
#define NI_TOP_NI_CPUXRAM_BYT_CNT_0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 byt_to_xram          : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 byt_to_xram          : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_BYT_CNT_0_t;





#define NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0          0xf0010218
#define NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0_STRIDE   24
#define NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0_COUNT    9
#define NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 pkt_drop_err         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_err         : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_PTP       0xf00102dc
#define NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_PTP_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 pkt_drop_ovrun_ptp   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_ovrun_ptp   : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_PTP_t;





#define NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_MGMT      0xf00102e0
#define NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_MGMT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 pkt_drop_ovrun_mgmt  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_ovrun_mgmt  : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_MGMT_t;





#define NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0           0xf00102e4
#define NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0_STRIDE    8
#define NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0_COUNT     2
#define NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 pkt_wr_ptr           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_wr_ptr           : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0_t;





#define NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0          0xf00102e8
#define NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0_STRIDE   8
#define NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0_COUNT    2
#define NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 pkt_rd_ptr           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_rd_ptr           : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0_t;


    
    



#define NI_TOP_NI_DMA_PKT_CNT                    0xf00102f4
#define NI_TOP_NI_DMA_PKT_CNT_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 dma_pkt_to_cpu       : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_pkt_to_cpu       : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_DMA_PKT_CNT_t;





#define NI_TOP_NI_DMA_BYTE_CNT                   0xf00102f8
#define NI_TOP_NI_DMA_BYTE_CNT_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_byte_to_cpu      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_byte_to_cpu      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_DMA_BYTE_CNT_t;





#define NI_TOP_NI_HW_TS_CNTR                     0xf00102fc
#define NI_TOP_NI_HW_TS_CNTR_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ptp_hw_ts            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ptp_hw_ts            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_HW_TS_CNTR_t;





#define NI_TOP_NI_PTP_SWCFG_ACCESS               0xf0010300
#define NI_TOP_NI_PTP_SWCFG_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PTP_SWCFG_ACCESS_t;

#define     address_PTP_ASYM_CFG_0                        0x0
#define     address_PTP_ASYM_CFG_1                        0x1
#define     address_PTP_ASYM_CFG_2                        0x2
#define     address_PTP_ASYM_CFG_3                        0x3
#define     address_PTP_SWCOR_CFG                         0x4




#define NI_TOP_NI_PTP_SWCFG_DATA1                0xf0010304
#define NI_TOP_NI_PTP_SWCFG_DATA1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cfg_hi               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_hi               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PTP_SWCFG_DATA1_t;





#define NI_TOP_NI_PTP_SWCFG_DATA0                0xf0010308
#define NI_TOP_NI_PTP_SWCFG_DATA0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cfg_lo               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_lo               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PTP_SWCFG_DATA0_t;





#define NI_TOP_NI_DEBUG_1                        0xf001030c
#define NI_TOP_NI_DEBUG_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ptp_hw_cnt_dbg       :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 hd_backoff_dbg       :  1 ; /* bits 10:10 */
    cs_uint32 hd_backoff_cnt       : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hd_backoff_cnt       : 10 ; /* bits 9:0 */
    cs_uint32 hd_backoff_dbg       :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ptp_hw_cnt_dbg       :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_DEBUG_1_t;





#define NI_TOP_NI_DEBUG_2                        0xf0010310
#define NI_TOP_NI_DEBUG_2_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_ptp_hw_cnt       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_ptp_hw_cnt       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_DEBUG_2_t;





#define NI_TOP_NI_SPARE                          0xf0010314
#define NI_TOP_NI_SPARE_dft                      0x0000ff00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 VALUE                : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_SPARE_t;





#define NI_TOP_NI_SPARESAMPLE                    0xf0010318
#define NI_TOP_NI_SPARESAMPLE_dft                0x0000ff00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 VALUE                : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_SPARESAMPLE_t;





#define NI_TOP_NI_FPGAA_ID                       0xf001031c
#define NI_TOP_NI_FPGAA_ID_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FPGAA_ID             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FPGAA_ID             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_FPGAA_ID_t;





#define NI_TOP_NI_PORT_0_INTERRUPT_0             0xf0010320
#define NI_TOP_NI_PORT_0_INTERRUPT_0_STRIDE      8
#define NI_TOP_NI_PORT_0_INTERRUPT_0_COUNT       8
#define NI_TOP_NI_PORT_0_INTERRUPT_0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rxcntrl_rd_idleI     :  1 ; /* bits 8:8 */
    cs_uint32 txem_crcerr_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 txmib_cntmsb_setI    :  1 ; /* bits 6:6 */
    cs_uint32 rxmib_cntmsb_setI    :  1 ; /* bits 5:5 */
    cs_uint32 rxcntrl_usage_exceedI :  1 ; /* bits 4:4 */
    cs_uint32 rxcntrl_overrunI     :  1 ; /* bits 3:3 */
    cs_uint32 txfifo_overrunI      :  1 ; /* bits 2:2 */
    cs_uint32 txfifo_underrunI     :  1 ; /* bits 1:1 */
    cs_uint32 link_stat_chgI       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 link_stat_chgI       :  1 ; /* bits 0:0 */
    cs_uint32 txfifo_underrunI     :  1 ; /* bits 1:1 */
    cs_uint32 txfifo_overrunI      :  1 ; /* bits 2:2 */
    cs_uint32 rxcntrl_overrunI     :  1 ; /* bits 3:3 */
    cs_uint32 rxcntrl_usage_exceedI :  1 ; /* bits 4:4 */
    cs_uint32 rxmib_cntmsb_setI    :  1 ; /* bits 5:5 */
    cs_uint32 txmib_cntmsb_setI    :  1 ; /* bits 6:6 */
    cs_uint32 txem_crcerr_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 rxcntrl_rd_idleI     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PORT_0_INTERRUPT_0_t;





#define NI_TOP_NI_PORT_0_INTENABLE_0             0xf0010324
#define NI_TOP_NI_PORT_0_INTENABLE_0_STRIDE      8
#define NI_TOP_NI_PORT_0_INTENABLE_0_COUNT       8
#define NI_TOP_NI_PORT_0_INTENABLE_0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rxcntrl_rd_idleIE    :  1 ; /* bits 8:8 */
    cs_uint32 txem_crcerr_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 txmib_cntmsb_setIE   :  1 ; /* bits 6:6 */
    cs_uint32 rxmib_cntmsb_setIE   :  1 ; /* bits 5:5 */
    cs_uint32 rxcntrl_usage_exceedIE :  1 ; /* bits 4:4 */
    cs_uint32 rxcntrl_overrunIE    :  1 ; /* bits 3:3 */
    cs_uint32 txfifo_overrunIE     :  1 ; /* bits 2:2 */
    cs_uint32 txfifo_underrunIE    :  1 ; /* bits 1:1 */
    cs_uint32 link_stat_chgIE      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 link_stat_chgIE      :  1 ; /* bits 0:0 */
    cs_uint32 txfifo_underrunIE    :  1 ; /* bits 1:1 */
    cs_uint32 txfifo_overrunIE     :  1 ; /* bits 2:2 */
    cs_uint32 rxcntrl_overrunIE    :  1 ; /* bits 3:3 */
    cs_uint32 rxcntrl_usage_exceedIE :  1 ; /* bits 4:4 */
    cs_uint32 rxmib_cntmsb_setIE   :  1 ; /* bits 5:5 */
    cs_uint32 txmib_cntmsb_setIE   :  1 ; /* bits 6:6 */
    cs_uint32 txem_crcerr_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 rxcntrl_rd_idleIE    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PORT_0_INTENABLE_0_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_RXFIFO_INTERRUPT_0             0xf0010360
#define NI_TOP_NI_RXFIFO_INTERRUPT_0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rx_fifo_voq_ecc_corr_errI :  1 ; /* bits 13:13 */
    cs_uint32 rx_fifo_voq_ecc_errI :  1 ; /* bits 12:12 */
    cs_uint32 mcal_pkt_dropI       :  1 ; /* bits 11:11 */
    cs_uint32 mal_drop_pkt_cnt_msb_setI :  1 ; /* bits 10:10 */
    cs_uint32 rx_fifo_ll_ecc_corr_errI :  1 ; /* bits 9:9 */
    cs_uint32 rx_fifo_ll_ecc_errI  :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_eop_bf_flI   :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_noeop_af_flI :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_nosopI       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeopI       :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_congI        :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_voq_fullI    :  1 ; /* bits 2:2 */
    cs_uint32 rxfifo_overrunI      :  1 ; /* bits 1:1 */
    cs_uint32 rxfifo_fullI         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxfifo_fullI         :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_overrunI      :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_voq_fullI    :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_congI        :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_noeopI       :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_nosopI       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeop_af_flI :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_eop_bf_flI   :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_ll_ecc_errI  :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_ll_ecc_corr_errI :  1 ; /* bits 9:9 */
    cs_uint32 mal_drop_pkt_cnt_msb_setI :  1 ; /* bits 10:10 */
    cs_uint32 mcal_pkt_dropI       :  1 ; /* bits 11:11 */
    cs_uint32 rx_fifo_voq_ecc_errI :  1 ; /* bits 12:12 */
    cs_uint32 rx_fifo_voq_ecc_corr_errI :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_INTERRUPT_0_t;





#define NI_TOP_NI_RXFIFO_INTENABLE_0             0xf0010364
#define NI_TOP_NI_RXFIFO_INTENABLE_0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rx_fifo_voq_ecc_corr_errIE :  1 ; /* bits 13:13 */
    cs_uint32 rx_fifo_voq_ecc_errIE :  1 ; /* bits 12:12 */
    cs_uint32 mcal_pkt_dropIE      :  1 ; /* bits 11:11 */
    cs_uint32 mal_drop_pkt_cnt_msb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 rx_fifo_ll_ecc_corr_errIE :  1 ; /* bits 9:9 */
    cs_uint32 rx_fifo_ll_errIE     :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_eop_bf_flIE  :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_noeop_af_flIE :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_nosopIE      :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeopIE      :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_congIE       :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_voq_fullIE   :  1 ; /* bits 2:2 */
    cs_uint32 rxfifo_overrunIE     :  1 ; /* bits 1:1 */
    cs_uint32 rxfifo_fullIE        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxfifo_fullIE        :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_overrunIE     :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_voq_fullIE   :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_congIE       :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_noeopIE      :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_nosopIE      :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeop_af_flIE :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_eop_bf_flIE  :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_ll_errIE     :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_ll_ecc_corr_errIE :  1 ; /* bits 9:9 */
    cs_uint32 mal_drop_pkt_cnt_msb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 mcal_pkt_dropIE      :  1 ; /* bits 11:11 */
    cs_uint32 rx_fifo_voq_ecc_errIE :  1 ; /* bits 12:12 */
    cs_uint32 rx_fifo_voq_ecc_corr_errIE :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_INTENABLE_0_t;





#define NI_TOP_NI_TXEM_INTERRUPT_0               0xf0010368
#define NI_TOP_NI_TXEM_INTERRUPT_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 txem_ptp_v6csum0_errI :  1 ; /* bits 9:9 */
    cs_uint32 mc_indx_lkup_mem_perrI :  1 ; /* bits 8:8 */
    cs_uint32 tx_voq_lkup_mem_perrI :  1 ; /* bits 7:7 */
    cs_uint32 txem_ptp_cachevoq_errI :  1 ; /* bits 6:6 */
    cs_uint32 txem_ptp_voqchg_errI :  1 ; /* bits 5:5 */
    cs_uint32 rxmib_fifo_ovfI      :  1 ; /* bits 4:4 */
    cs_uint32 txmib_fifo_ovfI      :  1 ; /* bits 3:3 */
    cs_uint32 txrm_cntovfI         :  1 ; /* bits 2:2 */
    cs_uint32 txem_crc_errI        :  1 ; /* bits 1:1 */
    cs_uint32 txem_ififo_ovfI      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_ififo_ovfI      :  1 ; /* bits 0:0 */
    cs_uint32 txem_crc_errI        :  1 ; /* bits 1:1 */
    cs_uint32 txrm_cntovfI         :  1 ; /* bits 2:2 */
    cs_uint32 txmib_fifo_ovfI      :  1 ; /* bits 3:3 */
    cs_uint32 rxmib_fifo_ovfI      :  1 ; /* bits 4:4 */
    cs_uint32 txem_ptp_voqchg_errI :  1 ; /* bits 5:5 */
    cs_uint32 txem_ptp_cachevoq_errI :  1 ; /* bits 6:6 */
    cs_uint32 tx_voq_lkup_mem_perrI :  1 ; /* bits 7:7 */
    cs_uint32 mc_indx_lkup_mem_perrI :  1 ; /* bits 8:8 */
    cs_uint32 txem_ptp_v6csum0_errI :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_INTERRUPT_0_t;





#define NI_TOP_NI_TXEM_INTENABLE_0               0xf001036c
#define NI_TOP_NI_TXEM_INTENABLE_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 txem_ptp_v6csum0_errIE :  1 ; /* bits 9:9 */
    cs_uint32 mc_indx_lkup_mem_perrIE :  1 ; /* bits 8:8 */
    cs_uint32 tx_voq_lkup_mem_perrIE :  1 ; /* bits 7:7 */
    cs_uint32 txem_ptp_cachevoq_errIE :  1 ; /* bits 6:6 */
    cs_uint32 txem_ptp_voqchg_errIE :  1 ; /* bits 5:5 */
    cs_uint32 rxmib_fifo_ovfIE     :  1 ; /* bits 4:4 */
    cs_uint32 txmib_fifo_ovfIE     :  1 ; /* bits 3:3 */
    cs_uint32 txrm_cntovfIE        :  1 ; /* bits 2:2 */
    cs_uint32 txem_crc_errIE       :  1 ; /* bits 1:1 */
    cs_uint32 txem_ififo_ovfIE     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_ififo_ovfIE     :  1 ; /* bits 0:0 */
    cs_uint32 txem_crc_errIE       :  1 ; /* bits 1:1 */
    cs_uint32 txrm_cntovfIE        :  1 ; /* bits 2:2 */
    cs_uint32 txmib_fifo_ovfIE     :  1 ; /* bits 3:3 */
    cs_uint32 rxmib_fifo_ovfIE     :  1 ; /* bits 4:4 */
    cs_uint32 txem_ptp_voqchg_errIE :  1 ; /* bits 5:5 */
    cs_uint32 txem_ptp_cachevoq_errIE :  1 ; /* bits 6:6 */
    cs_uint32 tx_voq_lkup_mem_perrIE :  1 ; /* bits 7:7 */
    cs_uint32 mc_indx_lkup_mem_perrIE :  1 ; /* bits 8:8 */
    cs_uint32 txem_ptp_v6csum0_errIE :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_INTENABLE_0_t;





#define NI_TOP_NI_PC0_INTERRUPT_0                0xf0010370
#define NI_TOP_NI_PC0_INTERRUPT_0_STRIDE         8
#define NI_TOP_NI_PC0_INTERRUPT_0_COUNT          3
#define NI_TOP_NI_PC0_INTERRUPT_0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 framelenmismatchI    :  1 ; /* bits 8:8 */
    cs_uint32 datamismatchI        :  1 ; /* bits 7:7 */
    cs_uint32 seqnummismatchI      :  1 ; /* bits 6:6 */
    cs_uint32 typefieldmismatchI   :  1 ; /* bits 5:5 */
    cs_uint32 vlan2fieldmismatchI  :  1 ; /* bits 4:4 */
    cs_uint32 vlan1fieldmismatchI  :  1 ; /* bits 3:3 */
    cs_uint32 srcaddrmismatchI     :  1 ; /* bits 2:2 */
    cs_uint32 dstaddrmismatchI     :  1 ; /* bits 1:1 */
    cs_uint32 dchkoutofsyncI       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dchkoutofsyncI       :  1 ; /* bits 0:0 */
    cs_uint32 dstaddrmismatchI     :  1 ; /* bits 1:1 */
    cs_uint32 srcaddrmismatchI     :  1 ; /* bits 2:2 */
    cs_uint32 vlan1fieldmismatchI  :  1 ; /* bits 3:3 */
    cs_uint32 vlan2fieldmismatchI  :  1 ; /* bits 4:4 */
    cs_uint32 typefieldmismatchI   :  1 ; /* bits 5:5 */
    cs_uint32 seqnummismatchI      :  1 ; /* bits 6:6 */
    cs_uint32 datamismatchI        :  1 ; /* bits 7:7 */
    cs_uint32 framelenmismatchI    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_INTERRUPT_0_t;





#define NI_TOP_NI_PC0_INTENABLE_0                0xf0010374
#define NI_TOP_NI_PC0_INTENABLE_0_STRIDE         8
#define NI_TOP_NI_PC0_INTENABLE_0_COUNT          3
#define NI_TOP_NI_PC0_INTENABLE_0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 framelenmismatchE    :  1 ; /* bits 8:8 */
    cs_uint32 datamismatchE        :  1 ; /* bits 7:7 */
    cs_uint32 seqnummismatchE      :  1 ; /* bits 6:6 */
    cs_uint32 typefieldmismatchE   :  1 ; /* bits 5:5 */
    cs_uint32 vlan2fieldmismatchE  :  1 ; /* bits 4:4 */
    cs_uint32 vlan1fieldmismatchE  :  1 ; /* bits 3:3 */
    cs_uint32 srcaddrmismatchE     :  1 ; /* bits 2:2 */
    cs_uint32 dstaddrmismatchE     :  1 ; /* bits 1:1 */
    cs_uint32 dchkoutofsyncE       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dchkoutofsyncE       :  1 ; /* bits 0:0 */
    cs_uint32 dstaddrmismatchE     :  1 ; /* bits 1:1 */
    cs_uint32 srcaddrmismatchE     :  1 ; /* bits 2:2 */
    cs_uint32 vlan1fieldmismatchE  :  1 ; /* bits 3:3 */
    cs_uint32 vlan2fieldmismatchE  :  1 ; /* bits 4:4 */
    cs_uint32 typefieldmismatchE   :  1 ; /* bits 5:5 */
    cs_uint32 seqnummismatchE      :  1 ; /* bits 6:6 */
    cs_uint32 datamismatchE        :  1 ; /* bits 7:7 */
    cs_uint32 framelenmismatchE    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_INTENABLE_0_t;


    
    
    
    



#define NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_0       0xf0010388
#define NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setI :  1 ; /* bits 31:31 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setI :  1 ; /* bits 30:30 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setI :  1 ; /* bits 29:29 */
    cs_uint32 byt_to_xram_8_cntmsb_setI :  1 ; /* bits 28:28 */
    cs_uint32 byt_to_xram_7_cntmsb_setI :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_6_cntmsb_setI :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_5_cntmsb_setI :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_4_cntmsb_setI :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_3_cntmsb_setI :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_2_cntmsb_setI :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_1_cntmsb_setI :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_0_cntmsb_setI :  1 ; /* bits 20:20 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setI :  1 ; /* bits 19:19 */
    cs_uint32 pkt_to_xram_8_cntmsb_setI :  1 ; /* bits 18:18 */
    cs_uint32 pkt_to_xram_7_cntmsb_setI :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_6_cntmsb_setI :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_5_cntmsb_setI :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_4_cntmsb_setI :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_3_cntmsb_setI :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_2_cntmsb_setI :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_1_cntmsb_setI :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_0_cntmsb_setI :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_drop_err_8_cntmsb_setI :  1 ; /* bits 8:8 */
    cs_uint32 pkt_drop_err_7_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_6_cntmsb_setI :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_5_cntmsb_setI :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_4_cntmsb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_3_cntmsb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_2_cntmsb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_1_cntmsb_setI :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_0_cntmsb_setI :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_err_0_cntmsb_setI :  1 ; /* bits 0:0 */
    cs_uint32 pkt_drop_err_1_cntmsb_setI :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_2_cntmsb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_3_cntmsb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_4_cntmsb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_5_cntmsb_setI :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_6_cntmsb_setI :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_7_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_8_cntmsb_setI :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_to_xram_0_cntmsb_setI :  1 ; /* bits 10:10 */
    cs_uint32 pkt_to_xram_1_cntmsb_setI :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_2_cntmsb_setI :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_3_cntmsb_setI :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_4_cntmsb_setI :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_5_cntmsb_setI :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_6_cntmsb_setI :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_7_cntmsb_setI :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_8_cntmsb_setI :  1 ; /* bits 18:18 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setI :  1 ; /* bits 19:19 */
    cs_uint32 byt_to_xram_0_cntmsb_setI :  1 ; /* bits 20:20 */
    cs_uint32 byt_to_xram_1_cntmsb_setI :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_2_cntmsb_setI :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_3_cntmsb_setI :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_4_cntmsb_setI :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_5_cntmsb_setI :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_6_cntmsb_setI :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_7_cntmsb_setI :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_8_cntmsb_setI :  1 ; /* bits 28:28 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setI :  1 ; /* bits 29:29 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setI :  1 ; /* bits 30:30 */
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setI :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_0_t;





#define NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_0       0xf001038c
#define NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setIE :  1 ; /* bits 31:31 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setIE :  1 ; /* bits 30:30 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setIE :  1 ; /* bits 29:29 */
    cs_uint32 byt_to_xram_8_cntmsb_setIE :  1 ; /* bits 28:28 */
    cs_uint32 byt_to_xram_7_cntmsb_setIE :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_6_cntmsb_setIE :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_5_cntmsb_setIE :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_4_cntmsb_setIE :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_3_cntmsb_setIE :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_2_cntmsb_setIE :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_1_cntmsb_setIE :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_0_cntmsb_setIE :  1 ; /* bits 20:20 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setIE :  1 ; /* bits 19:19 */
    cs_uint32 pkt_to_xram_8_cntmsb_setIE :  1 ; /* bits 18:18 */
    cs_uint32 pkt_to_xram_7_cntmsb_setIE :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_6_cntmsb_setIE :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_5_cntmsb_setIE :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_4_cntmsb_setIE :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_3_cntmsb_setIE :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_2_cntmsb_setIE :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_1_cntmsb_setIE :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_0_cntmsb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_drop_err_8_cntmsb_setIE :  1 ; /* bits 8:8 */
    cs_uint32 pkt_drop_err_7_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_6_cntmsb_setIE :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_5_cntmsb_setIE :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_4_cntmsb_setIE :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_3_cntmsb_setIE :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_2_cntmsb_setIE :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_1_cntmsb_setIE :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_0_cntmsb_setIE :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_err_0_cntmsb_setIE :  1 ; /* bits 0:0 */
    cs_uint32 pkt_drop_err_1_cntmsb_setIE :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_2_cntmsb_setIE :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_3_cntmsb_setIE :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_4_cntmsb_setIE :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_5_cntmsb_setIE :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_6_cntmsb_setIE :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_7_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_8_cntmsb_setIE :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_to_xram_0_cntmsb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 pkt_to_xram_1_cntmsb_setIE :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_2_cntmsb_setIE :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_3_cntmsb_setIE :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_4_cntmsb_setIE :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_5_cntmsb_setIE :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_6_cntmsb_setIE :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_7_cntmsb_setIE :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_8_cntmsb_setIE :  1 ; /* bits 18:18 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setIE :  1 ; /* bits 19:19 */
    cs_uint32 byt_to_xram_0_cntmsb_setIE :  1 ; /* bits 20:20 */
    cs_uint32 byt_to_xram_1_cntmsb_setIE :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_2_cntmsb_setIE :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_3_cntmsb_setIE :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_4_cntmsb_setIE :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_5_cntmsb_setIE :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_6_cntmsb_setIE :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_7_cntmsb_setIE :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_8_cntmsb_setIE :  1 ; /* bits 28:28 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setIE :  1 ; /* bits 29:29 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setIE :  1 ; /* bits 30:30 */
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setIE :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_0_t;





#define NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_0        0xf0010390
#define NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 dma_fifo_overrunI    :  1 ; /* bits 23:23 */
    cs_uint32 xram_rx_mgmtfifo_overrunI :  1 ; /* bits 22:22 */
    cs_uint32 xram_rx_ptpfifo_overrunI :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_qmfifo_overrunI :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_8_dis_pktI   :  1 ; /* bits 18:18 */
    cs_uint32 xram_rx_7_dis_pktI   :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_6_dis_pktI   :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_5_dis_pktI   :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_4_dis_pktI   :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_3_dis_pktI   :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_2_dis_pktI   :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_1_dis_pktI   :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_0_dis_pktI   :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_8_ptrbkupI   :  1 ; /* bits 8:8 */
    cs_uint32 xram_rx_7_ptrbkupI   :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_6_ptrbkupI   :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_5_ptrbkupI   :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_4_ptrbkupI   :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_3_ptrbkupI   :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_2_ptrbkupI   :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_1_ptrbkupI   :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_0_ptrbkupI   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_0_ptrbkupI   :  1 ; /* bits 0:0 */
    cs_uint32 xram_rx_1_ptrbkupI   :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_2_ptrbkupI   :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_3_ptrbkupI   :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_4_ptrbkupI   :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_5_ptrbkupI   :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_6_ptrbkupI   :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_7_ptrbkupI   :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_8_ptrbkupI   :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_0_dis_pktI   :  1 ; /* bits 10:10 */
    cs_uint32 xram_rx_1_dis_pktI   :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_2_dis_pktI   :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_3_dis_pktI   :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_4_dis_pktI   :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_5_dis_pktI   :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_6_dis_pktI   :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_7_dis_pktI   :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_8_dis_pktI   :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_qmfifo_overrunI :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_ptpfifo_overrunI :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_mgmtfifo_overrunI :  1 ; /* bits 22:22 */
    cs_uint32 dma_fifo_overrunI    :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_0_t;





#define NI_TOP_NI_CPUXRAM_ERR_INTENABLE_0        0xf0010394
#define NI_TOP_NI_CPUXRAM_ERR_INTENABLE_0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 dma_fifo_overrunIE   :  1 ; /* bits 23:23 */
    cs_uint32 xram_rx_mgmtfifo_overrunIE :  1 ; /* bits 22:22 */
    cs_uint32 xram_rx_ptpfifo_overrunIE :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_qmfifo_overrunIE :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_8_dis_pktIE  :  1 ; /* bits 18:18 */
    cs_uint32 xram_rx_7_dis_pktIE  :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_6_dis_pktIE  :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_5_dis_pktIE  :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_4_dis_pktIE  :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_3_dis_pktIE  :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_2_dis_pktIE  :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_1_dis_pktIE  :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_0_dis_pktIE  :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_8_ptrbkupIE  :  1 ; /* bits 8:8 */
    cs_uint32 xram_rx_7_ptrbkupIE  :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_6_ptrbkupIE  :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_5_ptrbkupIE  :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_4_ptrbkupIE  :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_3_ptrbkupIE  :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_2_ptrbkupIE  :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_1_ptrbkupIE  :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_0_ptrbkupIE  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_0_ptrbkupIE  :  1 ; /* bits 0:0 */
    cs_uint32 xram_rx_1_ptrbkupIE  :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_2_ptrbkupIE  :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_3_ptrbkupIE  :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_4_ptrbkupIE  :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_5_ptrbkupIE  :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_6_ptrbkupIE  :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_7_ptrbkupIE  :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_8_ptrbkupIE  :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_0_dis_pktIE  :  1 ; /* bits 10:10 */
    cs_uint32 xram_rx_1_dis_pktIE  :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_2_dis_pktIE  :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_3_dis_pktIE  :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_4_dis_pktIE  :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_5_dis_pktIE  :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_6_dis_pktIE  :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_7_dis_pktIE  :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_8_dis_pktIE  :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_qmfifo_overrunIE :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_ptpfifo_overrunIE :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_mgmtfifo_overrunIE :  1 ; /* bits 22:22 */
    cs_uint32 dma_fifo_overrunIE   :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ERR_INTENABLE_0_t;





#define NI_TOP_NI_INTERRUPT_0                    0xf0010398
#define NI_TOP_NI_INTERRUPT_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 cpuxram_int_stat_err :  1 ; /* bits 14:14 */
    cs_uint32 cpuxram_int_stat_cntr :  1 ; /* bits 13:13 */
    cs_uint32 int_stat_pc2         :  1 ; /* bits 12:12 */
    cs_uint32 int_stat_pc1         :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc0         :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_txem        :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_rxfifo      :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_pspid_7     :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_pspid_6     :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_5     :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_4     :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_3     :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_2     :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_1     :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_stat_pspid_0     :  1 ; /* bits 0:0 */
    cs_uint32 int_stat_pspid_1     :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_2     :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_3     :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_4     :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_5     :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_6     :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_7     :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_rxfifo      :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_txem        :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_pc0         :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_pc1         :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc2         :  1 ; /* bits 12:12 */
    cs_uint32 cpuxram_int_stat_cntr :  1 ; /* bits 13:13 */
    cs_uint32 cpuxram_int_stat_err :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INTERRUPT_0_t;





#define NI_TOP_NI_INTENABLE_0                    0xf001039c
#define NI_TOP_NI_INTENABLE_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 cpuxram_int_stat_err_en :  1 ; /* bits 14:14 */
    cs_uint32 cpuxram_int_stat_cntr_en :  1 ; /* bits 13:13 */
    cs_uint32 int_stat_pc2_en      :  1 ; /* bits 12:12 */
    cs_uint32 int_stat_pc1_en      :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc0_en      :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_txem_en     :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_rxfifo_en   :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_pspid_7_en  :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_pspid_6_en  :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_5_en  :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_4_en  :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_3_en  :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_2_en  :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_1_en  :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_0_en  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_stat_pspid_0_en  :  1 ; /* bits 0:0 */
    cs_uint32 int_stat_pspid_1_en  :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_2_en  :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_3_en  :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_4_en  :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_5_en  :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_6_en  :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_7_en  :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_rxfifo_en   :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_txem_en     :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_pc0_en      :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_pc1_en      :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc2_en      :  1 ; /* bits 12:12 */
    cs_uint32 cpuxram_int_stat_cntr_en :  1 ; /* bits 13:13 */
    cs_uint32 cpuxram_int_stat_err_en :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INTENABLE_0_t;





#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0    0xf00103a0
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0_STRIDE 8
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0_COUNT 9
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 xram_rx_doneI        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_doneI        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0_t;





#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0    0xf00103a4
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0_STRIDE 8
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0_COUNT 9
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 xram_rx_doneIE       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_doneIE       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_0      0xf00103e8
#define NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_0_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 xram_tx_1_doneI      :  1 ; /* bits 1:1 */
    cs_uint32 xram_tx_0_doneI      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_tx_0_doneI      :  1 ; /* bits 0:0 */
    cs_uint32 xram_tx_1_doneI      :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_0_t;





#define NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_0      0xf00103ec
#define NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_0_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 xram_tx_1_doneIE     :  1 ; /* bits 1:1 */
    cs_uint32 xram_tx_0_doneIE     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_tx_0_doneIE     :  1 ; /* bits 0:0 */
    cs_uint32 xram_tx_1_doneIE     :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_0_t;





#define NI_TOP_NI_WOL_STAT_0_INT_0               0xf00103f0
#define NI_TOP_NI_WOL_STAT_0_INT_0_STRIDE        8
#define NI_TOP_NI_WOL_STAT_0_INT_0_COUNT         3
#define NI_TOP_NI_WOL_STAT_0_INT_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_wol_int           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_wol_int           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_STAT_0_INT_0_t;





#define NI_TOP_NI_WOL_STAT_0_INTENABLE_0         0xf00103f4
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_0_STRIDE  8
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_0_COUNT   3
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_0_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_wol_intIE         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_wol_intIE         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_STAT_0_INTENABLE_0_t;


    
    
    
    



#define NI_TOP_NI_PORT_0_INTERRUPT_1             0xf0010408
#define NI_TOP_NI_PORT_0_INTERRUPT_1_STRIDE      8
#define NI_TOP_NI_PORT_0_INTERRUPT_1_COUNT       8
#define NI_TOP_NI_PORT_0_INTERRUPT_1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rxcntrl_rd_idleI     :  1 ; /* bits 8:8 */
    cs_uint32 txem_crcerr_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 txmib_cntmsb_setI    :  1 ; /* bits 6:6 */
    cs_uint32 rxmib_cntmsb_setI    :  1 ; /* bits 5:5 */
    cs_uint32 rxcntrl_usage_exceedI :  1 ; /* bits 4:4 */
    cs_uint32 rxcntrl_overrunI     :  1 ; /* bits 3:3 */
    cs_uint32 txfifo_overrunI      :  1 ; /* bits 2:2 */
    cs_uint32 txfifo_underrunI     :  1 ; /* bits 1:1 */
    cs_uint32 link_stat_chgI       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 link_stat_chgI       :  1 ; /* bits 0:0 */
    cs_uint32 txfifo_underrunI     :  1 ; /* bits 1:1 */
    cs_uint32 txfifo_overrunI      :  1 ; /* bits 2:2 */
    cs_uint32 rxcntrl_overrunI     :  1 ; /* bits 3:3 */
    cs_uint32 rxcntrl_usage_exceedI :  1 ; /* bits 4:4 */
    cs_uint32 rxmib_cntmsb_setI    :  1 ; /* bits 5:5 */
    cs_uint32 txmib_cntmsb_setI    :  1 ; /* bits 6:6 */
    cs_uint32 txem_crcerr_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 rxcntrl_rd_idleI     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PORT_0_INTERRUPT_1_t;





#define NI_TOP_NI_PORT_0_INTENABLE_1             0xf001040c
#define NI_TOP_NI_PORT_0_INTENABLE_1_STRIDE      8
#define NI_TOP_NI_PORT_0_INTENABLE_1_COUNT       8
#define NI_TOP_NI_PORT_0_INTENABLE_1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rxcntrl_rd_idleIE    :  1 ; /* bits 8:8 */
    cs_uint32 txem_crcerr_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 txmib_cntmsb_setIE   :  1 ; /* bits 6:6 */
    cs_uint32 rxmib_cntmsb_setIE   :  1 ; /* bits 5:5 */
    cs_uint32 rxcntrl_usage_exceedIE :  1 ; /* bits 4:4 */
    cs_uint32 rxcntrl_overrunIE    :  1 ; /* bits 3:3 */
    cs_uint32 txfifo_overrunIE     :  1 ; /* bits 2:2 */
    cs_uint32 txfifo_underrunIE    :  1 ; /* bits 1:1 */
    cs_uint32 link_stat_chgIE      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 link_stat_chgIE      :  1 ; /* bits 0:0 */
    cs_uint32 txfifo_underrunIE    :  1 ; /* bits 1:1 */
    cs_uint32 txfifo_overrunIE     :  1 ; /* bits 2:2 */
    cs_uint32 rxcntrl_overrunIE    :  1 ; /* bits 3:3 */
    cs_uint32 rxcntrl_usage_exceedIE :  1 ; /* bits 4:4 */
    cs_uint32 rxmib_cntmsb_setIE   :  1 ; /* bits 5:5 */
    cs_uint32 txmib_cntmsb_setIE   :  1 ; /* bits 6:6 */
    cs_uint32 txem_crcerr_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 rxcntrl_rd_idleIE    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PORT_0_INTENABLE_1_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_RXFIFO_INTERRUPT_1             0xf0010448
#define NI_TOP_NI_RXFIFO_INTERRUPT_1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rx_fifo_voq_ecc_corr_errI :  1 ; /* bits 13:13 */
    cs_uint32 rx_fifo_voq_ecc_errI :  1 ; /* bits 12:12 */
    cs_uint32 mcal_pkt_dropI       :  1 ; /* bits 11:11 */
    cs_uint32 mal_drop_pkt_cnt_msb_setI :  1 ; /* bits 10:10 */
    cs_uint32 rx_fifo_ll_ecc_corr_errI :  1 ; /* bits 9:9 */
    cs_uint32 rx_fifo_ll_ecc_errI  :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_eop_bf_flI   :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_noeop_af_flI :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_nosopI       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeopI       :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_congI        :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_voq_fullI    :  1 ; /* bits 2:2 */
    cs_uint32 rxfifo_overrunI      :  1 ; /* bits 1:1 */
    cs_uint32 rxfifo_fullI         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxfifo_fullI         :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_overrunI      :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_voq_fullI    :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_congI        :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_noeopI       :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_nosopI       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeop_af_flI :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_eop_bf_flI   :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_ll_ecc_errI  :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_ll_ecc_corr_errI :  1 ; /* bits 9:9 */
    cs_uint32 mal_drop_pkt_cnt_msb_setI :  1 ; /* bits 10:10 */
    cs_uint32 mcal_pkt_dropI       :  1 ; /* bits 11:11 */
    cs_uint32 rx_fifo_voq_ecc_errI :  1 ; /* bits 12:12 */
    cs_uint32 rx_fifo_voq_ecc_corr_errI :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_INTERRUPT_1_t;





#define NI_TOP_NI_RXFIFO_INTENABLE_1             0xf001044c
#define NI_TOP_NI_RXFIFO_INTENABLE_1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rx_fifo_voq_ecc_corr_errIE :  1 ; /* bits 13:13 */
    cs_uint32 rx_fifo_voq_ecc_errIE :  1 ; /* bits 12:12 */
    cs_uint32 mcal_pkt_dropIE      :  1 ; /* bits 11:11 */
    cs_uint32 mal_drop_pkt_cnt_msb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 rx_fifo_ll_ecc_corr_errIE :  1 ; /* bits 9:9 */
    cs_uint32 rx_fifo_ll_errIE     :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_eop_bf_flIE  :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_noeop_af_flIE :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_nosopIE      :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeopIE      :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_congIE       :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_voq_fullIE   :  1 ; /* bits 2:2 */
    cs_uint32 rxfifo_overrunIE     :  1 ; /* bits 1:1 */
    cs_uint32 rxfifo_fullIE        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxfifo_fullIE        :  1 ; /* bits 0:0 */
    cs_uint32 rxfifo_overrunIE     :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_voq_fullIE   :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_congIE       :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_noeopIE      :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_nosopIE      :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_noeop_af_flIE :  1 ; /* bits 6:6 */
    cs_uint32 rx_fifo_eop_bf_flIE  :  1 ; /* bits 7:7 */
    cs_uint32 rx_fifo_ll_errIE     :  1 ; /* bits 8:8 */
    cs_uint32 rx_fifo_ll_ecc_corr_errIE :  1 ; /* bits 9:9 */
    cs_uint32 mal_drop_pkt_cnt_msb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 mcal_pkt_dropIE      :  1 ; /* bits 11:11 */
    cs_uint32 rx_fifo_voq_ecc_errIE :  1 ; /* bits 12:12 */
    cs_uint32 rx_fifo_voq_ecc_corr_errIE :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_RXFIFO_INTENABLE_1_t;





#define NI_TOP_NI_TXEM_INTERRUPT_1               0xf0010450
#define NI_TOP_NI_TXEM_INTERRUPT_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 txem_ptp_v6csum0_errI :  1 ; /* bits 9:9 */
    cs_uint32 mc_indx_lkup_mem_perrI :  1 ; /* bits 8:8 */
    cs_uint32 tx_voq_lkup_mem_perrI :  1 ; /* bits 7:7 */
    cs_uint32 txem_ptp_cachevoq_errI :  1 ; /* bits 6:6 */
    cs_uint32 txem_ptp_voqchg_errI :  1 ; /* bits 5:5 */
    cs_uint32 rxmib_fifo_ovfI      :  1 ; /* bits 4:4 */
    cs_uint32 txmib_fifo_ovfI      :  1 ; /* bits 3:3 */
    cs_uint32 txrm_cntovfI         :  1 ; /* bits 2:2 */
    cs_uint32 txem_crc_errI        :  1 ; /* bits 1:1 */
    cs_uint32 txem_ififo_ovfI      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_ififo_ovfI      :  1 ; /* bits 0:0 */
    cs_uint32 txem_crc_errI        :  1 ; /* bits 1:1 */
    cs_uint32 txrm_cntovfI         :  1 ; /* bits 2:2 */
    cs_uint32 txmib_fifo_ovfI      :  1 ; /* bits 3:3 */
    cs_uint32 rxmib_fifo_ovfI      :  1 ; /* bits 4:4 */
    cs_uint32 txem_ptp_voqchg_errI :  1 ; /* bits 5:5 */
    cs_uint32 txem_ptp_cachevoq_errI :  1 ; /* bits 6:6 */
    cs_uint32 tx_voq_lkup_mem_perrI :  1 ; /* bits 7:7 */
    cs_uint32 mc_indx_lkup_mem_perrI :  1 ; /* bits 8:8 */
    cs_uint32 txem_ptp_v6csum0_errI :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_INTERRUPT_1_t;





#define NI_TOP_NI_TXEM_INTENABLE_1               0xf0010454
#define NI_TOP_NI_TXEM_INTENABLE_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 txem_ptp_v6csum0_errIE :  1 ; /* bits 9:9 */
    cs_uint32 mc_indx_lkup_mem_perrIE :  1 ; /* bits 8:8 */
    cs_uint32 tx_voq_lkup_mem_perrIE :  1 ; /* bits 7:7 */
    cs_uint32 txem_ptp_cachevoq_errIE :  1 ; /* bits 6:6 */
    cs_uint32 txem_ptp_voqchg_errIE :  1 ; /* bits 5:5 */
    cs_uint32 rxmib_fifo_ovfIE     :  1 ; /* bits 4:4 */
    cs_uint32 txmib_fifo_ovfIE     :  1 ; /* bits 3:3 */
    cs_uint32 txrm_cntovfIE        :  1 ; /* bits 2:2 */
    cs_uint32 txem_crc_errIE       :  1 ; /* bits 1:1 */
    cs_uint32 txem_ififo_ovfIE     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txem_ififo_ovfIE     :  1 ; /* bits 0:0 */
    cs_uint32 txem_crc_errIE       :  1 ; /* bits 1:1 */
    cs_uint32 txrm_cntovfIE        :  1 ; /* bits 2:2 */
    cs_uint32 txmib_fifo_ovfIE     :  1 ; /* bits 3:3 */
    cs_uint32 rxmib_fifo_ovfIE     :  1 ; /* bits 4:4 */
    cs_uint32 txem_ptp_voqchg_errIE :  1 ; /* bits 5:5 */
    cs_uint32 txem_ptp_cachevoq_errIE :  1 ; /* bits 6:6 */
    cs_uint32 tx_voq_lkup_mem_perrIE :  1 ; /* bits 7:7 */
    cs_uint32 mc_indx_lkup_mem_perrIE :  1 ; /* bits 8:8 */
    cs_uint32 txem_ptp_v6csum0_errIE :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_TXEM_INTENABLE_1_t;





#define NI_TOP_NI_PC0_INTERRUPT_1                0xf0010458
#define NI_TOP_NI_PC0_INTERRUPT_1_STRIDE         8
#define NI_TOP_NI_PC0_INTERRUPT_1_COUNT          3
#define NI_TOP_NI_PC0_INTERRUPT_1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 framelenmismatchI    :  1 ; /* bits 8:8 */
    cs_uint32 datamismatchI        :  1 ; /* bits 7:7 */
    cs_uint32 seqnummismatchI      :  1 ; /* bits 6:6 */
    cs_uint32 typefieldmismatchI   :  1 ; /* bits 5:5 */
    cs_uint32 vlan2fieldmismatchI  :  1 ; /* bits 4:4 */
    cs_uint32 vlan1fieldmismatchI  :  1 ; /* bits 3:3 */
    cs_uint32 srcaddrmismatchI     :  1 ; /* bits 2:2 */
    cs_uint32 dstaddrmismatchI     :  1 ; /* bits 1:1 */
    cs_uint32 dchkoutofsyncI       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dchkoutofsyncI       :  1 ; /* bits 0:0 */
    cs_uint32 dstaddrmismatchI     :  1 ; /* bits 1:1 */
    cs_uint32 srcaddrmismatchI     :  1 ; /* bits 2:2 */
    cs_uint32 vlan1fieldmismatchI  :  1 ; /* bits 3:3 */
    cs_uint32 vlan2fieldmismatchI  :  1 ; /* bits 4:4 */
    cs_uint32 typefieldmismatchI   :  1 ; /* bits 5:5 */
    cs_uint32 seqnummismatchI      :  1 ; /* bits 6:6 */
    cs_uint32 datamismatchI        :  1 ; /* bits 7:7 */
    cs_uint32 framelenmismatchI    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_INTERRUPT_1_t;





#define NI_TOP_NI_PC0_INTENABLE_1                0xf001045c
#define NI_TOP_NI_PC0_INTENABLE_1_STRIDE         8
#define NI_TOP_NI_PC0_INTENABLE_1_COUNT          3
#define NI_TOP_NI_PC0_INTENABLE_1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 framelenmismatchE    :  1 ; /* bits 8:8 */
    cs_uint32 datamismatchE        :  1 ; /* bits 7:7 */
    cs_uint32 seqnummismatchE      :  1 ; /* bits 6:6 */
    cs_uint32 typefieldmismatchE   :  1 ; /* bits 5:5 */
    cs_uint32 vlan2fieldmismatchE  :  1 ; /* bits 4:4 */
    cs_uint32 vlan1fieldmismatchE  :  1 ; /* bits 3:3 */
    cs_uint32 srcaddrmismatchE     :  1 ; /* bits 2:2 */
    cs_uint32 dstaddrmismatchE     :  1 ; /* bits 1:1 */
    cs_uint32 dchkoutofsyncE       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dchkoutofsyncE       :  1 ; /* bits 0:0 */
    cs_uint32 dstaddrmismatchE     :  1 ; /* bits 1:1 */
    cs_uint32 srcaddrmismatchE     :  1 ; /* bits 2:2 */
    cs_uint32 vlan1fieldmismatchE  :  1 ; /* bits 3:3 */
    cs_uint32 vlan2fieldmismatchE  :  1 ; /* bits 4:4 */
    cs_uint32 typefieldmismatchE   :  1 ; /* bits 5:5 */
    cs_uint32 seqnummismatchE      :  1 ; /* bits 6:6 */
    cs_uint32 datamismatchE        :  1 ; /* bits 7:7 */
    cs_uint32 framelenmismatchE    :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_PC0_INTENABLE_1_t;


    
    
    
    



#define NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_1       0xf0010470
#define NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setI :  1 ; /* bits 31:31 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setI :  1 ; /* bits 30:30 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setI :  1 ; /* bits 29:29 */
    cs_uint32 byt_to_xram_8_cntmsb_setI :  1 ; /* bits 28:28 */
    cs_uint32 byt_to_xram_7_cntmsb_setI :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_6_cntmsb_setI :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_5_cntmsb_setI :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_4_cntmsb_setI :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_3_cntmsb_setI :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_2_cntmsb_setI :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_1_cntmsb_setI :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_0_cntmsb_setI :  1 ; /* bits 20:20 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setI :  1 ; /* bits 19:19 */
    cs_uint32 pkt_to_xram_8_cntmsb_setI :  1 ; /* bits 18:18 */
    cs_uint32 pkt_to_xram_7_cntmsb_setI :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_6_cntmsb_setI :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_5_cntmsb_setI :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_4_cntmsb_setI :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_3_cntmsb_setI :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_2_cntmsb_setI :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_1_cntmsb_setI :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_0_cntmsb_setI :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_drop_err_8_cntmsb_setI :  1 ; /* bits 8:8 */
    cs_uint32 pkt_drop_err_7_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_6_cntmsb_setI :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_5_cntmsb_setI :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_4_cntmsb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_3_cntmsb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_2_cntmsb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_1_cntmsb_setI :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_0_cntmsb_setI :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_err_0_cntmsb_setI :  1 ; /* bits 0:0 */
    cs_uint32 pkt_drop_err_1_cntmsb_setI :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_2_cntmsb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_3_cntmsb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_4_cntmsb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_5_cntmsb_setI :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_6_cntmsb_setI :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_7_cntmsb_setI :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_8_cntmsb_setI :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_to_xram_0_cntmsb_setI :  1 ; /* bits 10:10 */
    cs_uint32 pkt_to_xram_1_cntmsb_setI :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_2_cntmsb_setI :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_3_cntmsb_setI :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_4_cntmsb_setI :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_5_cntmsb_setI :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_6_cntmsb_setI :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_7_cntmsb_setI :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_8_cntmsb_setI :  1 ; /* bits 18:18 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setI :  1 ; /* bits 19:19 */
    cs_uint32 byt_to_xram_0_cntmsb_setI :  1 ; /* bits 20:20 */
    cs_uint32 byt_to_xram_1_cntmsb_setI :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_2_cntmsb_setI :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_3_cntmsb_setI :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_4_cntmsb_setI :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_5_cntmsb_setI :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_6_cntmsb_setI :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_7_cntmsb_setI :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_8_cntmsb_setI :  1 ; /* bits 28:28 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setI :  1 ; /* bits 29:29 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setI :  1 ; /* bits 30:30 */
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setI :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_1_t;





#define NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_1       0xf0010474
#define NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setIE :  1 ; /* bits 31:31 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setIE :  1 ; /* bits 30:30 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setIE :  1 ; /* bits 29:29 */
    cs_uint32 byt_to_xram_8_cntmsb_setIE :  1 ; /* bits 28:28 */
    cs_uint32 byt_to_xram_7_cntmsb_setIE :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_6_cntmsb_setIE :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_5_cntmsb_setIE :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_4_cntmsb_setIE :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_3_cntmsb_setIE :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_2_cntmsb_setIE :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_1_cntmsb_setIE :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_0_cntmsb_setIE :  1 ; /* bits 20:20 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setIE :  1 ; /* bits 19:19 */
    cs_uint32 pkt_to_xram_8_cntmsb_setIE :  1 ; /* bits 18:18 */
    cs_uint32 pkt_to_xram_7_cntmsb_setIE :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_6_cntmsb_setIE :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_5_cntmsb_setIE :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_4_cntmsb_setIE :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_3_cntmsb_setIE :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_2_cntmsb_setIE :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_1_cntmsb_setIE :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_0_cntmsb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_drop_err_8_cntmsb_setIE :  1 ; /* bits 8:8 */
    cs_uint32 pkt_drop_err_7_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_6_cntmsb_setIE :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_5_cntmsb_setIE :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_4_cntmsb_setIE :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_3_cntmsb_setIE :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_2_cntmsb_setIE :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_1_cntmsb_setIE :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_0_cntmsb_setIE :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_drop_err_0_cntmsb_setIE :  1 ; /* bits 0:0 */
    cs_uint32 pkt_drop_err_1_cntmsb_setIE :  1 ; /* bits 1:1 */
    cs_uint32 pkt_drop_err_2_cntmsb_setIE :  1 ; /* bits 2:2 */
    cs_uint32 pkt_drop_err_3_cntmsb_setIE :  1 ; /* bits 3:3 */
    cs_uint32 pkt_drop_err_4_cntmsb_setIE :  1 ; /* bits 4:4 */
    cs_uint32 pkt_drop_err_5_cntmsb_setIE :  1 ; /* bits 5:5 */
    cs_uint32 pkt_drop_err_6_cntmsb_setIE :  1 ; /* bits 6:6 */
    cs_uint32 pkt_drop_err_7_cntmsb_setIE :  1 ; /* bits 7:7 */
    cs_uint32 pkt_drop_err_8_cntmsb_setIE :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_to_xram_0_cntmsb_setIE :  1 ; /* bits 10:10 */
    cs_uint32 pkt_to_xram_1_cntmsb_setIE :  1 ; /* bits 11:11 */
    cs_uint32 pkt_to_xram_2_cntmsb_setIE :  1 ; /* bits 12:12 */
    cs_uint32 pkt_to_xram_3_cntmsb_setIE :  1 ; /* bits 13:13 */
    cs_uint32 pkt_to_xram_4_cntmsb_setIE :  1 ; /* bits 14:14 */
    cs_uint32 pkt_to_xram_5_cntmsb_setIE :  1 ; /* bits 15:15 */
    cs_uint32 pkt_to_xram_6_cntmsb_setIE :  1 ; /* bits 16:16 */
    cs_uint32 pkt_to_xram_7_cntmsb_setIE :  1 ; /* bits 17:17 */
    cs_uint32 pkt_to_xram_8_cntmsb_setIE :  1 ; /* bits 18:18 */
    cs_uint32 pkt_drop_ovrun_ptp_cntmsb_setIE :  1 ; /* bits 19:19 */
    cs_uint32 byt_to_xram_0_cntmsb_setIE :  1 ; /* bits 20:20 */
    cs_uint32 byt_to_xram_1_cntmsb_setIE :  1 ; /* bits 21:21 */
    cs_uint32 byt_to_xram_2_cntmsb_setIE :  1 ; /* bits 22:22 */
    cs_uint32 byt_to_xram_3_cntmsb_setIE :  1 ; /* bits 23:23 */
    cs_uint32 byt_to_xram_4_cntmsb_setIE :  1 ; /* bits 24:24 */
    cs_uint32 byt_to_xram_5_cntmsb_setIE :  1 ; /* bits 25:25 */
    cs_uint32 byt_to_xram_6_cntmsb_setIE :  1 ; /* bits 26:26 */
    cs_uint32 byt_to_xram_7_cntmsb_setIE :  1 ; /* bits 27:27 */
    cs_uint32 byt_to_xram_8_cntmsb_setIE :  1 ; /* bits 28:28 */
    cs_uint32 dma_pkt_to_cpu_cntmsb_setIE :  1 ; /* bits 29:29 */
    cs_uint32 dma_byte_to_cpu_cntmsb_setIE :  1 ; /* bits 30:30 */
    cs_uint32 pkt_drop_ovrun_mgmt_cntmsb_setIE :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_1_t;





#define NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_1        0xf0010478
#define NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_1_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 dma_fifo_overrunI    :  1 ; /* bits 23:23 */
    cs_uint32 xram_rx_mgmtfifo_overrunI :  1 ; /* bits 22:22 */
    cs_uint32 xram_rx_ptpfifo_overrunI :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_qmfifo_overrunI :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_8_dis_pktI   :  1 ; /* bits 18:18 */
    cs_uint32 xram_rx_7_dis_pktI   :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_6_dis_pktI   :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_5_dis_pktI   :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_4_dis_pktI   :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_3_dis_pktI   :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_2_dis_pktI   :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_1_dis_pktI   :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_0_dis_pktI   :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_8_ptrbkupI   :  1 ; /* bits 8:8 */
    cs_uint32 xram_rx_7_ptrbkupI   :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_6_ptrbkupI   :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_5_ptrbkupI   :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_4_ptrbkupI   :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_3_ptrbkupI   :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_2_ptrbkupI   :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_1_ptrbkupI   :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_0_ptrbkupI   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_0_ptrbkupI   :  1 ; /* bits 0:0 */
    cs_uint32 xram_rx_1_ptrbkupI   :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_2_ptrbkupI   :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_3_ptrbkupI   :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_4_ptrbkupI   :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_5_ptrbkupI   :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_6_ptrbkupI   :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_7_ptrbkupI   :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_8_ptrbkupI   :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_0_dis_pktI   :  1 ; /* bits 10:10 */
    cs_uint32 xram_rx_1_dis_pktI   :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_2_dis_pktI   :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_3_dis_pktI   :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_4_dis_pktI   :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_5_dis_pktI   :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_6_dis_pktI   :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_7_dis_pktI   :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_8_dis_pktI   :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_qmfifo_overrunI :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_ptpfifo_overrunI :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_mgmtfifo_overrunI :  1 ; /* bits 22:22 */
    cs_uint32 dma_fifo_overrunI    :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_1_t;





#define NI_TOP_NI_CPUXRAM_ERR_INTENABLE_1        0xf001047c
#define NI_TOP_NI_CPUXRAM_ERR_INTENABLE_1_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 dma_fifo_overrunIE   :  1 ; /* bits 23:23 */
    cs_uint32 xram_rx_mgmtfifo_overrunIE :  1 ; /* bits 22:22 */
    cs_uint32 xram_rx_ptpfifo_overrunIE :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_qmfifo_overrunIE :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_8_dis_pktIE  :  1 ; /* bits 18:18 */
    cs_uint32 xram_rx_7_dis_pktIE  :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_6_dis_pktIE  :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_5_dis_pktIE  :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_4_dis_pktIE  :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_3_dis_pktIE  :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_2_dis_pktIE  :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_1_dis_pktIE  :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_0_dis_pktIE  :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_8_ptrbkupIE  :  1 ; /* bits 8:8 */
    cs_uint32 xram_rx_7_ptrbkupIE  :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_6_ptrbkupIE  :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_5_ptrbkupIE  :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_4_ptrbkupIE  :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_3_ptrbkupIE  :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_2_ptrbkupIE  :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_1_ptrbkupIE  :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_0_ptrbkupIE  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_0_ptrbkupIE  :  1 ; /* bits 0:0 */
    cs_uint32 xram_rx_1_ptrbkupIE  :  1 ; /* bits 1:1 */
    cs_uint32 xram_rx_2_ptrbkupIE  :  1 ; /* bits 2:2 */
    cs_uint32 xram_rx_3_ptrbkupIE  :  1 ; /* bits 3:3 */
    cs_uint32 xram_rx_4_ptrbkupIE  :  1 ; /* bits 4:4 */
    cs_uint32 xram_rx_5_ptrbkupIE  :  1 ; /* bits 5:5 */
    cs_uint32 xram_rx_6_ptrbkupIE  :  1 ; /* bits 6:6 */
    cs_uint32 xram_rx_7_ptrbkupIE  :  1 ; /* bits 7:7 */
    cs_uint32 xram_rx_8_ptrbkupIE  :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 xram_rx_0_dis_pktIE  :  1 ; /* bits 10:10 */
    cs_uint32 xram_rx_1_dis_pktIE  :  1 ; /* bits 11:11 */
    cs_uint32 xram_rx_2_dis_pktIE  :  1 ; /* bits 12:12 */
    cs_uint32 xram_rx_3_dis_pktIE  :  1 ; /* bits 13:13 */
    cs_uint32 xram_rx_4_dis_pktIE  :  1 ; /* bits 14:14 */
    cs_uint32 xram_rx_5_dis_pktIE  :  1 ; /* bits 15:15 */
    cs_uint32 xram_rx_6_dis_pktIE  :  1 ; /* bits 16:16 */
    cs_uint32 xram_rx_7_dis_pktIE  :  1 ; /* bits 17:17 */
    cs_uint32 xram_rx_8_dis_pktIE  :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 xram_rx_qmfifo_overrunIE :  1 ; /* bits 20:20 */
    cs_uint32 xram_rx_ptpfifo_overrunIE :  1 ; /* bits 21:21 */
    cs_uint32 xram_rx_mgmtfifo_overrunIE :  1 ; /* bits 22:22 */
    cs_uint32 dma_fifo_overrunIE   :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_ERR_INTENABLE_1_t;





#define NI_TOP_NI_INTERRUPT_1                    0xf0010480
#define NI_TOP_NI_INTERRUPT_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 cpuxram_int_stat_err :  1 ; /* bits 14:14 */
    cs_uint32 cpuxram_int_stat_cntr :  1 ; /* bits 13:13 */
    cs_uint32 int_stat_pc2         :  1 ; /* bits 12:12 */
    cs_uint32 int_stat_pc1         :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc0         :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_txem        :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_rxfifo      :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_pspid_7     :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_pspid_6     :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_5     :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_4     :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_3     :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_2     :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_1     :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_stat_pspid_0     :  1 ; /* bits 0:0 */
    cs_uint32 int_stat_pspid_1     :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_2     :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_3     :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_4     :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_5     :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_6     :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_7     :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_rxfifo      :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_txem        :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_pc0         :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_pc1         :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc2         :  1 ; /* bits 12:12 */
    cs_uint32 cpuxram_int_stat_cntr :  1 ; /* bits 13:13 */
    cs_uint32 cpuxram_int_stat_err :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INTERRUPT_1_t;





#define NI_TOP_NI_INTENABLE_1                    0xf0010484
#define NI_TOP_NI_INTENABLE_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 cpuxram_int_stat_err_en :  1 ; /* bits 14:14 */
    cs_uint32 cpuxram_int_stat_cntr_en :  1 ; /* bits 13:13 */
    cs_uint32 int_stat_pc2_en      :  1 ; /* bits 12:12 */
    cs_uint32 int_stat_pc1_en      :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc0_en      :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_txem_en     :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_rxfifo_en   :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_pspid_7_en  :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_pspid_6_en  :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_5_en  :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_4_en  :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_3_en  :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_2_en  :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_1_en  :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_0_en  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_stat_pspid_0_en  :  1 ; /* bits 0:0 */
    cs_uint32 int_stat_pspid_1_en  :  1 ; /* bits 1:1 */
    cs_uint32 int_stat_pspid_2_en  :  1 ; /* bits 2:2 */
    cs_uint32 int_stat_pspid_3_en  :  1 ; /* bits 3:3 */
    cs_uint32 int_stat_pspid_4_en  :  1 ; /* bits 4:4 */
    cs_uint32 int_stat_pspid_5_en  :  1 ; /* bits 5:5 */
    cs_uint32 int_stat_pspid_6_en  :  1 ; /* bits 6:6 */
    cs_uint32 int_stat_pspid_7_en  :  1 ; /* bits 7:7 */
    cs_uint32 int_stat_rxfifo_en   :  1 ; /* bits 8:8 */
    cs_uint32 int_stat_txem_en     :  1 ; /* bits 9:9 */
    cs_uint32 int_stat_pc0_en      :  1 ; /* bits 10:10 */
    cs_uint32 int_stat_pc1_en      :  1 ; /* bits 11:11 */
    cs_uint32 int_stat_pc2_en      :  1 ; /* bits 12:12 */
    cs_uint32 cpuxram_int_stat_cntr_en :  1 ; /* bits 13:13 */
    cs_uint32 cpuxram_int_stat_err_en :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_INTENABLE_1_t;





#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1    0xf0010488
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1_STRIDE 8
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1_COUNT 9
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 xram_rx_doneI        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_doneI        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1_t;





#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1    0xf001048c
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1_STRIDE 8
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1_COUNT 9
#define NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 xram_rx_doneIE       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_rx_doneIE       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1_t;


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



#define NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_1      0xf00104d0
#define NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_1_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 xram_tx_1_doneI      :  1 ; /* bits 1:1 */
    cs_uint32 xram_tx_0_doneI      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_tx_0_doneI      :  1 ; /* bits 0:0 */
    cs_uint32 xram_tx_1_doneI      :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_1_t;





#define NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_1      0xf00104d4
#define NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_1_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 xram_tx_1_doneIE     :  1 ; /* bits 1:1 */
    cs_uint32 xram_tx_0_doneIE     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xram_tx_0_doneIE     :  1 ; /* bits 0:0 */
    cs_uint32 xram_tx_1_doneIE     :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_1_t;





#define NI_TOP_NI_WOL_STAT_0_INT_1               0xf00104d8
#define NI_TOP_NI_WOL_STAT_0_INT_1_STRIDE        8
#define NI_TOP_NI_WOL_STAT_0_INT_1_COUNT         3
#define NI_TOP_NI_WOL_STAT_0_INT_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_wol_int           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_wol_int           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_STAT_0_INT_1_t;





#define NI_TOP_NI_WOL_STAT_0_INTENABLE_1         0xf00104dc
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_1_STRIDE  8
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_1_COUNT   3
#define NI_TOP_NI_WOL_STAT_0_INTENABLE_1_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_wol_intIE         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_wol_intIE         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} NI_TOP_NI_WOL_STAT_0_INTENABLE_1_t;


    
    
    
    

    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* NI_TOP */

typedef struct {
  NI_TOP_NI_INTF_RST_CONFIG_t              INTF_RST_CONFIG;               /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  NI_TOP_NI_ETH_INT_CONFIG1_t              ETH_INT_CONFIG1;               /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  NI_TOP_NI_ETH_INT_CONFIG2_t              ETH_INT_CONFIG2;               /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  NI_TOP_NI_ETH_MGMT_PT_CONFIG_t           ETH_MGMT_PT_CONFIG;            /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  NI_TOP_NI_ETH_MAC_CONFIG0_0_t            ETH_MAC_CONFIG0_0;             /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  NI_TOP_NI_ETH_MAC_CONFIG1_0_t            ETH_MAC_CONFIG1_0;             /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  NI_TOP_NI_ETH_MAC_CONFIG2_0_t            ETH_MAC_CONFIG2_0;             /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[27];                   
  NI_TOP_NI_ETH_RCV_STAT_0_t               ETH_RCV_STAT_0;                /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd8[11];                   
  NI_TOP_NI_MAC_ADDR0_t                    MAC_ADDR0;                     /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd9[3];                    
  NI_TOP_NI_MAC_ADDR1_t                    MAC_ADDR1;                     /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd10[3];                   
  NI_TOP_NI_WOL_PASSWD_0_t                 WOL_PASSWD_0;                  /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd11[3];                   
  NI_TOP_NI_WOL_PASSWD_1_t                 WOL_PASSWD_1;                  /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd12[3];                   
  NI_TOP_NI_PKT_LEN_CONFIG_t               PKT_LEN_CONFIG;                /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd13[3];                   
  NI_TOP_NI_PKT_STOR_LEN_CONFIG_t          PKT_STOR_LEN_CONFIG;           /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd14[3];                   
  NI_TOP_NI_RX_CNTRL_CONFIG0_0_t           RX_CNTRL_CONFIG0_0;            /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd15[3];                   
  NI_TOP_NI_RX_CNTRL_CONFIG1_0_t           RX_CNTRL_CONFIG1_0;            /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd16[59];                  
  NI_TOP_NI_RX_AGG_CONFIG_t                RX_AGG_CONFIG;                 /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd17[3];                   
  NI_TOP_NI_RX_AGGPC_CONFIG_t              RX_AGGPC_CONFIG;               /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd18[3];                   
  NI_TOP_NI_RX_FIFO_CG_TH_t                RX_FIFO_CG_TH;                 /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd19[3];                   
  NI_TOP_NI_RX_FIFO_NOCG_TH_t              RX_FIFO_NOCG_TH;               /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd20[3];                   
  NI_TOP_NI_RX_FIFO_STAT_t                 RX_FIFO_STAT;                  /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd21[3];                   
  NI_TOP_NI_RX_PORT_CAL_ACCESS_t           RX_PORT_CAL_ACCESS;            /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd22[3];                   
  NI_TOP_NI_RX_PORT_CAL_DATA_t             RX_PORT_CAL_DATA;              /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd23[3];                   
  NI_TOP_NI_RXFIFO_DBG_ACCESS_t            RXFIFO_DBG_ACCESS;             /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd24[3];                   
  NI_TOP_NI_RXFIFO_DBG_DATA_t              RXFIFO_DBG_DATA;               /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd25[3];                   
  NI_TOP_NI_RXFIFO_DBG1_t                  RXFIFO_DBG1;                   /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd26[3];                   
  NI_TOP_NI_SCH_BP_THLD_ETH_t              SCH_BP_THLD_ETH;               /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd27[3];                   
  NI_TOP_NI_SCH_BP_THLD_MC_t               SCH_BP_THLD_MC;                /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd28[3];                   
  NI_TOP_NI_MISC_CONFIG_t                  MISC_CONFIG;                   /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd29[3];                   
  NI_TOP_NI_TX_VOQ_LKUP_ACCESS_t           TX_VOQ_LKUP_ACCESS;            /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd30[3];                   
  NI_TOP_NI_TX_VOQ_LKUP_DATA1_t            TX_VOQ_LKUP_DATA1;             /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd31[3];                   
  NI_TOP_NI_TX_VOQ_LKUP_DATA0_t            TX_VOQ_LKUP_DATA0;             /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd32[3];                   
  NI_TOP_NI_MC_INDX_LKUP_ACCESS_t          MC_INDX_LKUP_ACCESS;           /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd33[3];                   
  NI_TOP_NI_MC_INDX_LKUP_DATA_t            MC_INDX_LKUP_DATA;             /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd34[3];                   
  NI_TOP_NI_PG_DA1_t                       PG_DA1;                        /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd35[3];                   
  NI_TOP_NI_PG_DA2_t                       PG_DA2;                        /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd36[3];                   
  NI_TOP_NI_PG_SA1_t                       PG_SA1;                        /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd37[3];                   
  NI_TOP_NI_PG_SA2_t                       PG_SA2;                        /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd38[3];                   
  NI_TOP_NI_PG_CFG0_t                      PG_CFG0;                       /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd39[3];                   
  NI_TOP_NI_PG_CFG1_t                      PG_CFG1;                       /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd40[3];                   
  NI_TOP_NI_PG_FXPT_t                      PG_FXPT;                       /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd41[3];                   
  NI_TOP_NI_PG0_CFG1_t                     PG0_CFG1;                      /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd42[3];                   
  NI_TOP_NI_PG0_CFG2_t                     PG0_CFG2;                      /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd43[3];                   
  NI_TOP_NI_PG0_CNTRL_t                    PG0_CNTRL;                     /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd44[27];                  
  NI_TOP_NI_PC_DA1_t                       PC_DA1;                        /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd45[3];                   
  NI_TOP_NI_PC_DA2_t                       PC_DA2;                        /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd46[3];                   
  NI_TOP_NI_PC_SA1_t                       PC_SA1;                        /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd47[3];                   
  NI_TOP_NI_PC_SA2_t                       PC_SA2;                        /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd48[3];                   
  NI_TOP_NI_PC_CFG0_t                      PC_CFG0;                       /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd49[3];                   
  NI_TOP_NI_PC_CFG1_t                      PC_CFG1;                       /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd50[3];                   
  NI_TOP_NI_PC_FXPT_t                      PC_FXPT;                       /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd51[3];                   
  NI_TOP_NI_PC0_CFG1_t                     PC0_CFG1;                      /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd52[3];                   
  NI_TOP_NI_PC0_CFG2_t                     PC0_CFG2;                      /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd53[3];                   
  NI_TOP_NI_PC0_CNTRL_t                    PC0_CNTRL;                     /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd54[3];                   
  NI_TOP_NI_PC0_STAT_t                     PC0_STAT;                      /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd55[35];                  
  NI_TOP_NI_RM_CFG_t                       RM_CFG;                        /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd56[3];                   
  NI_TOP_NI_RM_TBMAX_t                     RM_TBMAX;                      /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd57[3];                   
  NI_TOP_NI_RM_CNTR_t                      RM_CNTR;                       /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd58[3];                   
  NI_TOP_NI_RM_LASTCNTR_t                  RM_LASTCNTR;                   /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd59[3];                   
  NI_TOP_NI_PPS_TRIG_HW_TS_t               PPS_TRIG_HW_TS;                /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd60[3];                   
  NI_TOP_NI_INIT_DONE_t                    INIT_DONE;                     /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd61[3];                   
  NI_TOP_NI_RXMIB_ACCESS_t                 RXMIB_ACCESS;                  /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd62[3];                   
  NI_TOP_NI_RXMIB_DATA1_t                  RXMIB_DATA1;                   /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd63[3];                   
  NI_TOP_NI_RXMIB_DATA0_t                  RXMIB_DATA0;                   /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd64[3];                   
  NI_TOP_NI_TXMIB_ACCESS_t                 TXMIB_ACCESS;                  /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd65[3];                   
  NI_TOP_NI_TXMIB_DATA1_t                  TXMIB_DATA1;                   /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd66[3];                   
  NI_TOP_NI_TXMIB_DATA0_t                  TXMIB_DATA0;                   /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd67[3];                   
  NI_TOP_NI_TXEM_CRCERR_ACCESS_t           TXEM_CRCERR_ACCESS;            /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd68[3];                   
  NI_TOP_NI_TXEM_CRCERR_DATA_t             TXEM_CRCERR_DATA;              /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd69[3];                   
  NI_TOP_NI_MAL_PKT_DROPCNT_t              MAL_PKT_DROPCNT;               /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd70[3];                   
  NI_TOP_NI_MAL_PKT_DROPCNT_CFG_t          MAL_PKT_DROPCNT_CFG;           /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd71[3];                   
  NI_TOP_NI_CPUXRAM_ADRCFG_RX_0_t          CPUXRAM_ADRCFG_RX_0;           /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd72[35];                  
  NI_TOP_NI_CPUXRAM_ADRCFG_TX_0_t          CPUXRAM_ADRCFG_TX_0;           /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd73[3];                   
  NI_TOP_NI_CPUXRAM_ADRCFG_TX_1_t          CPUXRAM_ADRCFG_TX_1;           /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd74[3];                   
  NI_TOP_NI_CPUXRAM_CFG_t                  CPUXRAM_CFG;                   /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd75[3];                   
  NI_TOP_NI_CPUXRAM_PTCAL0_t               CPUXRAM_PTCAL0;                /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd76[3];                   
  NI_TOP_NI_CPUXRAM_PTCAL1_t               CPUXRAM_PTCAL1;                /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd77[3];                   
  NI_TOP_NI_CPUXRAM_SCH_BP_CFG_0_t         CPUXRAM_SCH_BP_CFG_0;          /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd78[31];                  
  NI_TOP_NI_CPUXRAM_CPU_CFG_RX_0_t         CPUXRAM_CPU_CFG_RX_0;          /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd79[3];                   
  NI_TOP_NI_CPUXRAM_CPU_STA_RX_0_t         CPUXRAM_CPU_STA_RX_0;          /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd80[3];                   
  NI_TOP_NI_CPUXRAM_INT_COLSC_CFG_0_t      CPUXRAM_INT_COLSC_CFG_0;       /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd81[3];                   
  NI_TOP_NI_CPUXRAM_PKT_CNT_0_t            CPUXRAM_PKT_CNT_0;             /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd82[3];                   
  NI_TOP_NI_CPUXRAM_BYT_CNT_0_t            CPUXRAM_BYT_CNT_0;             /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd83[3];                   
  NI_TOP_NI_CPUXRAM_PKT_ERR_DRP_0_t        CPUXRAM_PKT_ERR_DRP_0;         /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd84[195];                 
  NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_PTP_t     CPUXRAM_PKT_OVRN_DRP_PTP;      /* addr: 0x000002dc */ 
  cs_uint32                                rsrvd85[3];                   
  NI_TOP_NI_CPUXRAM_PKT_OVRN_DRP_MGMT_t    CPUXRAM_PKT_OVRN_DRP_MGMT;     /* addr: 0x000002e0 */ 
  cs_uint32                                rsrvd86[3];                   
  NI_TOP_NI_CPUXRAM_CPU_CFG_TX_0_t         CPUXRAM_CPU_CFG_TX_0;          /* addr: 0x000002e4 */ 
  cs_uint32                                rsrvd87[3];                   
  NI_TOP_NI_CPUXRAM_CPU_STAT_TX_0_t        CPUXRAM_CPU_STAT_TX_0;         /* addr: 0x000002e8 */ 
  cs_uint32                                rsrvd88[11];                  
  NI_TOP_NI_DMA_PKT_CNT_t                  DMA_PKT_CNT;                   /* addr: 0x000002f4 */ 
  cs_uint32                                rsrvd89[3];                   
  NI_TOP_NI_DMA_BYTE_CNT_t                 DMA_BYTE_CNT;                  /* addr: 0x000002f8 */ 
  cs_uint32                                rsrvd90[3];                   
  NI_TOP_NI_HW_TS_CNTR_t                   HW_TS_CNTR;                    /* addr: 0x000002fc */ 
  cs_uint32                                rsrvd91[3];                   
  NI_TOP_NI_PTP_SWCFG_ACCESS_t             PTP_SWCFG_ACCESS;              /* addr: 0x00000300 */ 
  cs_uint32                                rsrvd92[3];                   
  NI_TOP_NI_PTP_SWCFG_DATA1_t              PTP_SWCFG_DATA1;               /* addr: 0x00000304 */ 
  cs_uint32                                rsrvd93[3];                   
  NI_TOP_NI_PTP_SWCFG_DATA0_t              PTP_SWCFG_DATA0;               /* addr: 0x00000308 */ 
  cs_uint32                                rsrvd94[3];                   
  NI_TOP_NI_DEBUG_1_t                      DEBUG_1;                       /* addr: 0x0000030c */ 
  cs_uint32                                rsrvd95[3];                   
  NI_TOP_NI_DEBUG_2_t                      DEBUG_2;                       /* addr: 0x00000310 */ 
  cs_uint32                                rsrvd96[3];                   
  NI_TOP_NI_SPARE_t                        SPARE;                         /* addr: 0x00000314 */ 
  cs_uint32                                rsrvd97[3];                   
  NI_TOP_NI_SPARESAMPLE_t                  SPARESAMPLE;                   /* addr: 0x00000318 */ 
  cs_uint32                                rsrvd98[3];                   
  NI_TOP_NI_FPGAA_ID_t                     FPGAA_ID;                      /* addr: 0x0000031c */ 
  cs_uint32                                rsrvd99[3];                   
  NI_TOP_NI_PORT_0_INTERRUPT_0_t           PORT_0_INTERRUPT_0;            /* addr: 0x00000320 */ 
  cs_uint32                                rsrvd100[3];                  
  NI_TOP_NI_PORT_0_INTENABLE_0_t           PORT_0_INTENABLE_0;            /* addr: 0x00000324 */ 
  cs_uint32                                rsrvd101[59];                 
  NI_TOP_NI_RXFIFO_INTERRUPT_0_t           RXFIFO_INTERRUPT_0;            /* addr: 0x00000360 */ 
  cs_uint32                                rsrvd102[3];                  
  NI_TOP_NI_RXFIFO_INTENABLE_0_t           RXFIFO_INTENABLE_0;            /* addr: 0x00000364 */ 
  cs_uint32                                rsrvd103[3];                  
  NI_TOP_NI_TXEM_INTERRUPT_0_t             TXEM_INTERRUPT_0;              /* addr: 0x00000368 */ 
  cs_uint32                                rsrvd104[3];                  
  NI_TOP_NI_TXEM_INTENABLE_0_t             TXEM_INTENABLE_0;              /* addr: 0x0000036c */ 
  cs_uint32                                rsrvd105[3];                  
  NI_TOP_NI_PC0_INTERRUPT_0_t              PC0_INTERRUPT_0;               /* addr: 0x00000370 */ 
  cs_uint32                                rsrvd106[3];                  
  NI_TOP_NI_PC0_INTENABLE_0_t              PC0_INTENABLE_0;               /* addr: 0x00000374 */ 
  cs_uint32                                rsrvd107[19];                 
  NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_0_t     CPUXRAM_CNTR_INTERRUPT_0;      /* addr: 0x00000388 */ 
  cs_uint32                                rsrvd108[3];                  
  NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_0_t     CPUXRAM_CNTR_INTENABLE_0;      /* addr: 0x0000038c */ 
  cs_uint32                                rsrvd109[3];                  
  NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_0_t      CPUXRAM_ERR_INTERRUPT_0;       /* addr: 0x00000390 */ 
  cs_uint32                                rsrvd110[3];                  
  NI_TOP_NI_CPUXRAM_ERR_INTENABLE_0_t      CPUXRAM_ERR_INTENABLE_0;       /* addr: 0x00000394 */ 
  cs_uint32                                rsrvd111[3];                  
  NI_TOP_NI_INTERRUPT_0_t                  INTERRUPT_0;                   /* addr: 0x00000398 */ 
  cs_uint32                                rsrvd112[3];                  
  NI_TOP_NI_INTENABLE_0_t                  INTENABLE_0;                   /* addr: 0x0000039c */ 
  cs_uint32                                rsrvd113[3];                  
  NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_0_t  CPUXRAM_RXPKT_0_INTERRUPT_0;   /* addr: 0x000003a0 */ 
  cs_uint32                                rsrvd114[3];                  
  NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_0_t  CPUXRAM_RXPKT_0_INTENABLE_0;   /* addr: 0x000003a4 */ 
  cs_uint32                                rsrvd115[67];                 
  NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_0_t    CPUXRAM_TXPKT_INTERRUPT_0;     /* addr: 0x000003e8 */ 
  cs_uint32                                rsrvd116[3];                  
  NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_0_t    CPUXRAM_TXPKT_INTENABLE_0;     /* addr: 0x000003ec */ 
  cs_uint32                                rsrvd117[3];                  
  NI_TOP_NI_WOL_STAT_0_INT_0_t             WOL_STAT_0_INT_0;              /* addr: 0x000003f0 */ 
  cs_uint32                                rsrvd118[3];                  
  NI_TOP_NI_WOL_STAT_0_INTENABLE_0_t       WOL_STAT_0_INTENABLE_0;        /* addr: 0x000003f4 */ 
  cs_uint32                                rsrvd119[19];                 
  NI_TOP_NI_PORT_0_INTERRUPT_1_t           PORT_0_INTERRUPT_1;            /* addr: 0x00000408 */ 
  cs_uint32                                rsrvd120[3];                  
  NI_TOP_NI_PORT_0_INTENABLE_1_t           PORT_0_INTENABLE_1;            /* addr: 0x0000040c */ 
  cs_uint32                                rsrvd121[59];                 
  NI_TOP_NI_RXFIFO_INTERRUPT_1_t           RXFIFO_INTERRUPT_1;            /* addr: 0x00000448 */ 
  cs_uint32                                rsrvd122[3];                  
  NI_TOP_NI_RXFIFO_INTENABLE_1_t           RXFIFO_INTENABLE_1;            /* addr: 0x0000044c */ 
  cs_uint32                                rsrvd123[3];                  
  NI_TOP_NI_TXEM_INTERRUPT_1_t             TXEM_INTERRUPT_1;              /* addr: 0x00000450 */ 
  cs_uint32                                rsrvd124[3];                  
  NI_TOP_NI_TXEM_INTENABLE_1_t             TXEM_INTENABLE_1;              /* addr: 0x00000454 */ 
  cs_uint32                                rsrvd125[3];                  
  NI_TOP_NI_PC0_INTERRUPT_1_t              PC0_INTERRUPT_1;               /* addr: 0x00000458 */ 
  cs_uint32                                rsrvd126[3];                  
  NI_TOP_NI_PC0_INTENABLE_1_t              PC0_INTENABLE_1;               /* addr: 0x0000045c */ 
  cs_uint32                                rsrvd127[19];                 
  NI_TOP_NI_CPUXRAM_CNTR_INTERRUPT_1_t     CPUXRAM_CNTR_INTERRUPT_1;      /* addr: 0x00000470 */ 
  cs_uint32                                rsrvd128[3];                  
  NI_TOP_NI_CPUXRAM_CNTR_INTENABLE_1_t     CPUXRAM_CNTR_INTENABLE_1;      /* addr: 0x00000474 */ 
  cs_uint32                                rsrvd129[3];                  
  NI_TOP_NI_CPUXRAM_ERR_INTERRUPT_1_t      CPUXRAM_ERR_INTERRUPT_1;       /* addr: 0x00000478 */ 
  cs_uint32                                rsrvd130[3];                  
  NI_TOP_NI_CPUXRAM_ERR_INTENABLE_1_t      CPUXRAM_ERR_INTENABLE_1;       /* addr: 0x0000047c */ 
  cs_uint32                                rsrvd131[3];                  
  NI_TOP_NI_INTERRUPT_1_t                  INTERRUPT_1;                   /* addr: 0x00000480 */ 
  cs_uint32                                rsrvd132[3];                  
  NI_TOP_NI_INTENABLE_1_t                  INTENABLE_1;                   /* addr: 0x00000484 */ 
  cs_uint32                                rsrvd133[3];                  
  NI_TOP_NI_CPUXRAM_RXPKT_0_INTERRUPT_1_t  CPUXRAM_RXPKT_0_INTERRUPT_1;   /* addr: 0x00000488 */ 
  cs_uint32                                rsrvd134[3];                  
  NI_TOP_NI_CPUXRAM_RXPKT_0_INTENABLE_1_t  CPUXRAM_RXPKT_0_INTENABLE_1;   /* addr: 0x0000048c */ 
  cs_uint32                                rsrvd135[67];                 
  NI_TOP_NI_CPUXRAM_TXPKT_INTERRUPT_1_t    CPUXRAM_TXPKT_INTERRUPT_1;     /* addr: 0x000004d0 */ 
  cs_uint32                                rsrvd136[3];                  
  NI_TOP_NI_CPUXRAM_TXPKT_INTENABLE_1_t    CPUXRAM_TXPKT_INTENABLE_1;     /* addr: 0x000004d4 */ 
  cs_uint32                                rsrvd137[3];                  
  NI_TOP_NI_WOL_STAT_0_INT_1_t             WOL_STAT_0_INT_1;              /* addr: 0x000004d8 */ 
  cs_uint32                                rsrvd138[3];                  
  NI_TOP_NI_WOL_STAT_0_INTENABLE_1_t       WOL_STAT_0_INTENABLE_1;        /* addr: 0x000004dc */ 
} NI_TOP_t;

  

/*
 * FETOP
 */
  
  
/*
 * FE
 */
  



#define FETOP_FE_SCRATCH                         0xf0020000
#define FETOP_FE_SCRATCH_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 scratch              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 scratch              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SCRATCH_t;





#define FETOP_FE_AN_BNG_MAC_ACCESS               0xf0020004
#define FETOP_FE_AN_BNG_MAC_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 ADDR                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_AN_BNG_MAC_ACCESS_t;





#define FETOP_FE_AN_BNG_MAC_DATA1                0xf0020008
#define FETOP_FE_AN_BNG_MAC_DATA1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 valid                :  1 ; /* bits 22:22 */
    cs_uint32 pspid_mask           :  1 ; /* bits 21:21 */
    cs_uint32 pspid                :  4 ; /* bits 20:17 */
    cs_uint32 sa_da                :  1 ; /* bits 16:16 */
    cs_uint32 mac_addr             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mac_addr             : 16 ; /* bits 15:0 */
    cs_uint32 sa_da                :  1 ; /* bits 16:16 */
    cs_uint32 pspid                :  4 ; /* bits 20:17 */
    cs_uint32 pspid_mask           :  1 ; /* bits 21:21 */
    cs_uint32 valid                :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_AN_BNG_MAC_DATA1_t;





#define FETOP_FE_AN_BNG_MAC_DATA0                0xf002000c
#define FETOP_FE_AN_BNG_MAC_DATA0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mac_addr             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mac_addr             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_AN_BNG_MAC_DATA0_t;





#define FETOP_FE_L4_PORT_RNGS_ACCESS             0xf0020010
#define FETOP_FE_L4_PORT_RNGS_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 ADDR                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L4_PORT_RNGS_ACCESS_t;





#define FETOP_FE_L4_PORT_RNGS_DATA1              0xf0020014
#define FETOP_FE_L4_PORT_RNGS_DATA1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 valid                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 valid                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L4_PORT_RNGS_DATA1_t;





#define FETOP_FE_L4_PORT_RNGS_DATA0              0xf0020018
#define FETOP_FE_L4_PORT_RNGS_DATA0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sp_dp_low            : 16 ; /* bits 31:16 */
    cs_uint32 sp_dp_high           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sp_dp_high           : 16 ; /* bits 15:0 */
    cs_uint32 sp_dp_low            : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L4_PORT_RNGS_DATA0_t;





#define FETOP_FE_ETYPE_ACCESS                    0xf002001c
#define FETOP_FE_ETYPE_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ETYPE_ACCESS_t;





#define FETOP_FE_ETYPE_DATA                      0xf0020020
#define FETOP_FE_ETYPE_DATA_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 valid                :  1 ; /* bits 16:16 */
    cs_uint32 ethertype            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ethertype            : 16 ; /* bits 15:0 */
    cs_uint32 valid                :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ETYPE_DATA_t;





#define FETOP_FE_LLC_HDR_ACCESS                  0xf0020024
#define FETOP_FE_LLC_HDR_ACCESS_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 ADDR                 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LLC_HDR_ACCESS_t;





#define FETOP_FE_LLC_HDR_DATA                    0xf0020028
#define FETOP_FE_LLC_HDR_DATA_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 valid                :  1 ; /* bits 24:24 */
    cs_uint32 llc_hdr              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 llc_hdr              : 24 ; /* bits 23:0 */
    cs_uint32 valid                :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LLC_HDR_DATA_t;





#define FETOP_FE_LLC_OTHER_A                     0xf002002c
#define FETOP_FE_LLC_OTHER_A_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 llc_other_a_mask     :  3 ; /* bits 26:24 */
    cs_uint32 llc_other_a          : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 llc_other_a          : 24 ; /* bits 23:0 */
    cs_uint32 llc_other_a_mask     :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LLC_OTHER_A_t;





#define FETOP_FE_LLC_OTHER_B                     0xf0020030
#define FETOP_FE_LLC_OTHER_B_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 llc_other_b_mask     :  3 ; /* bits 26:24 */
    cs_uint32 llc_other_b          : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 llc_other_b          : 24 ; /* bits 23:0 */
    cs_uint32 llc_other_b_mask     :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LLC_OTHER_B_t;





#define FETOP_FE_CFG_TPID1                       0xf0020034
#define FETOP_FE_CFG_TPID1_dft                   0x920088a8




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tpid1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tpid1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CFG_TPID1_t;





#define FETOP_FE_CFG_TPID0                       0xf0020038
#define FETOP_FE_CFG_TPID0_dft                   0x91008100




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tpid0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tpid0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CFG_TPID0_t;





#define FETOP_FE_PRSR_CFG_0                      0xf002003c
#define FETOP_FE_PRSR_CFG_0_dft                  0x60000380




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 parse_limit          :  5 ; /* bits 31:27 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 l4_chksum_rh_chk_disable :  1 ; /* bits 9:9 */
    cs_uint32 l4_chksum_chk_enable :  1 ; /* bits 8:8 */
    cs_uint32 ipv4_chksum_chk_enable :  1 ; /* bits 7:7 */
    cs_uint32 cfg_prog_offset      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_prog_offset      :  7 ; /* bits 6:0 */
    cs_uint32 ipv4_chksum_chk_enable :  1 ; /* bits 7:7 */
    cs_uint32 l4_chksum_chk_enable :  1 ; /* bits 8:8 */
    cs_uint32 l4_chksum_rh_chk_disable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 parse_limit          :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PRSR_CFG_0_t;





#define FETOP_FE_CFG_GLBL                        0xf0020040
#define FETOP_FE_CFG_GLBL_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CFG_GLBL_t;





#define FETOP_FE_STS_GLBL                        0xf0020044
#define FETOP_FE_STS_GLBL_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 mem_init_done        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mem_init_done        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_STS_GLBL_t;





#define FETOP_FE_PROC_CFG_0                      0xf0020048
#define FETOP_FE_PROC_CFG_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 drop_l4_chksum_err   :  1 ; /* bits 4:4 */
    cs_uint32 drop_l3_chksum_err   :  1 ; /* bits 3:3 */
    cs_uint32 keep_ts_for_cpu_voq  :  1 ; /* bits 2:2 */
    cs_uint32 drop_l4_chksum_err_bypass :  1 ; /* bits 1:1 */
    cs_uint32 drop_l3_chksum_err_bypass :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_l3_chksum_err_bypass :  1 ; /* bits 0:0 */
    cs_uint32 drop_l4_chksum_err_bypass :  1 ; /* bits 1:1 */
    cs_uint32 keep_ts_for_cpu_voq  :  1 ; /* bits 2:2 */
    cs_uint32 drop_l3_chksum_err   :  1 ; /* bits 3:3 */
    cs_uint32 drop_l4_chksum_err   :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PROC_CFG_0_t;





#define FETOP_FE_LPB_ACCESS                      0xf002004c
#define FETOP_FE_LPB_ACCESS_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 ADDR                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LPB_ACCESS_t;





#define FETOP_FE_LPB_DATA                        0xf0020050
#define FETOP_FE_LPB_DATA_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 FE_LPB_MEM_PARITY    :  1 ; /* bits 24:24 */
    cs_uint32 FE_LPB_OLSPID_PRESERVE_EN :  1 ; /* bits 23:23 */
    cs_uint32 FE_LPB_OLSPID        :  4 ; /* bits 22:19 */
    cs_uint32 FE_LPB_OLSPID_EN     :  1 ; /* bits 18:18 */
    cs_uint32 FE_LPB_PVID_TPID_ENC :  2 ; /* bits 17:16 */
    cs_uint32 FE_LPB_PVID          : 12 ; /* bits 15:4 */
    cs_uint32 FE_LPB_LSPID         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_LPB_LSPID         :  4 ; /* bits 3:0 */
    cs_uint32 FE_LPB_PVID          : 12 ; /* bits 15:4 */
    cs_uint32 FE_LPB_PVID_TPID_ENC :  2 ; /* bits 17:16 */
    cs_uint32 FE_LPB_OLSPID_EN     :  1 ; /* bits 18:18 */
    cs_uint32 FE_LPB_OLSPID        :  4 ; /* bits 22:19 */
    cs_uint32 FE_LPB_OLSPID_PRESERVE_EN :  1 ; /* bits 23:23 */
    cs_uint32 FE_LPB_MEM_PARITY    :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_LPB_DATA_t;





#define FETOP_FE_CLASS_ACCESS                    0xf0020054
#define FETOP_FE_CLASS_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_ACCESS_t;





#define FETOP_FE_CLASS_DATA19                    0xf0020058
#define FETOP_FE_CLASS_DATA19_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 FE_CLASS_MEM_PARITY  :  1 ; /* bits 21:21 */
    cs_uint32 FE_CLASS_ENTRY_VLD   :  1 ; /* bits 20:20 */
    cs_uint32 FE_CLASS_RULE_PRI    :  6 ; /* bits 19:14 */
    cs_uint32 FE_CLASS_RSVD_621_606 : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_RSVD_621_606 : 14 ; /* bits 13:0 */
    cs_uint32 FE_CLASS_RULE_PRI    :  6 ; /* bits 19:14 */
    cs_uint32 FE_CLASS_ENTRY_VLD   :  1 ; /* bits 20:20 */
    cs_uint32 FE_CLASS_MEM_PARITY  :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA19_t;





#define FETOP_FE_CLASS_DATA18                    0xf002005c
#define FETOP_FE_CLASS_DATA18_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_RSVD_621_606 :  2 ; /* bits 31:30 */
    cs_uint32 FE_CLASS_MCGID_MASK  :  9 ; /* bits 29:21 */
    cs_uint32 FE_CLASS_MCGID       :  9 ; /* bits 20:12 */
    cs_uint32 FE_CLASS_SPI_MASK    :  1 ; /* bits 11:11 */
    cs_uint32 FE_CLASS_SPI         : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_SPI         : 11 ; /* bits 10:0 */
    cs_uint32 FE_CLASS_SPI_MASK    :  1 ; /* bits 11:11 */
    cs_uint32 FE_CLASS_MCGID       :  9 ; /* bits 20:12 */
    cs_uint32 FE_CLASS_MCGID_MASK  :  9 ; /* bits 29:21 */
    cs_uint32 FE_CLASS_RSVD_621_606 :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA18_t;





#define FETOP_FE_CLASS_DATA17                    0xf0020060
#define FETOP_FE_CLASS_DATA17_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_SPI         : 21 ; /* bits 31:11 */
    cs_uint32 FE_CLASS_SPI_VLD_MASK :  1 ; /* bits 10:10 */
    cs_uint32 FE_CLASS_SPI_VLD     :  1 ; /* bits 9:9 */
    cs_uint32 FE_CLASS_NOT_HDR_A_FLAGS_STSVLD_MASK :  1 ; /* bits 8:8 */
    cs_uint32 FE_CLASS_L4_CHKSUM_ERR_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_CLASS_L3_CHKSUM_ERR_MASK :  1 ; /* bits 6:6 */
    cs_uint32 FE_CLASS_HDR_A_FLAGS_CRCERR_MASK :  1 ; /* bits 5:5 */
    cs_uint32 FE_CLASS_LEN_ENCODED_MASK :  1 ; /* bits 4:4 */
    cs_uint32 FE_CLASS_BC_DA_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 FE_CLASS_MC_DA_MASK  :  1 ; /* bits 2:2 */
    cs_uint32 FE_CLASS_L4_VLD_MASK :  1 ; /* bits 1:1 */
    cs_uint32 FE_CLASS_IP_FRAGMENT_MASK :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_FRAGMENT_MASK :  1 ; /* bits 0:0 */
    cs_uint32 FE_CLASS_L4_VLD_MASK :  1 ; /* bits 1:1 */
    cs_uint32 FE_CLASS_MC_DA_MASK  :  1 ; /* bits 2:2 */
    cs_uint32 FE_CLASS_BC_DA_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 FE_CLASS_LEN_ENCODED_MASK :  1 ; /* bits 4:4 */
    cs_uint32 FE_CLASS_HDR_A_FLAGS_CRCERR_MASK :  1 ; /* bits 5:5 */
    cs_uint32 FE_CLASS_L3_CHKSUM_ERR_MASK :  1 ; /* bits 6:6 */
    cs_uint32 FE_CLASS_L4_CHKSUM_ERR_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_CLASS_NOT_HDR_A_FLAGS_STSVLD_MASK :  1 ; /* bits 8:8 */
    cs_uint32 FE_CLASS_SPI_VLD     :  1 ; /* bits 9:9 */
    cs_uint32 FE_CLASS_SPI_VLD_MASK :  1 ; /* bits 10:10 */
    cs_uint32 FE_CLASS_SPI         : 21 ; /* bits 31:11 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA17_t;





#define FETOP_FE_CLASS_DATA16                    0xf0020064
#define FETOP_FE_CLASS_DATA16_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_VER_MASK :  1 ; /* bits 31:31 */
    cs_uint32 FE_CLASS_IP_VLD_MASK :  1 ; /* bits 30:30 */
    cs_uint32 FE_CLASS_IP_SA_MASK  :  9 ; /* bits 29:21 */
    cs_uint32 FE_CLASS_IP_DA_MASK  :  9 ; /* bits 20:12 */
    cs_uint32 FE_CLASS_SA_MASK     :  6 ; /* bits 11:6 */
    cs_uint32 FE_CLASS_DA_MASK     :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_DA_MASK     :  6 ; /* bits 5:0 */
    cs_uint32 FE_CLASS_SA_MASK     :  6 ; /* bits 11:6 */
    cs_uint32 FE_CLASS_IP_DA_MASK  :  9 ; /* bits 20:12 */
    cs_uint32 FE_CLASS_IP_SA_MASK  :  9 ; /* bits 29:21 */
    cs_uint32 FE_CLASS_IP_VLD_MASK :  1 ; /* bits 30:30 */
    cs_uint32 FE_CLASS_IP_VER_MASK :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA16_t;





#define FETOP_FE_CLASS_DATA15                    0xf0020068
#define FETOP_FE_CLASS_DATA15_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_L4_PORT_MASK :  2 ; /* bits 31:30 */
    cs_uint32 FE_CLASS_IP_PROT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 FE_CLASS_ETHERTYPE_ENC_MASK :  1 ; /* bits 28:28 */
    cs_uint32 FE_CLASS_ECN_MASK    :  2 ; /* bits 27:26 */
    cs_uint32 FE_CLASS_DSCP_MASK   :  6 ; /* bits 25:20 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 19:19 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 18:18 */
    cs_uint32 FE_CLASS_DA_AN_MAC_HIT_MASK :  1 ; /* bits 17:17 */
    cs_uint32 FE_CLASS_DA_AN_MAC_SEL_MASK :  1 ; /* bits 16:16 */
    cs_uint32 FE_CLASS_8021P_2_MASK :  1 ; /* bits 15:15 */
    cs_uint32 FE_CLASS_VID_2_MASK  :  1 ; /* bits 14:14 */
    cs_uint32 FE_CLASS_TPID_ENC_2_LSB_MASK :  1 ; /* bits 13:13 */
    cs_uint32 FE_CLASS_TPID_ENC_2_MSB_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_CLASS_8021P_1_MASK :  1 ; /* bits 11:11 */
    cs_uint32 FE_CLASS_VID_1_MASK  :  2 ; /* bits 10:9 */
    cs_uint32 FE_CLASS_TPID_ENC_1_LSB_MASK :  1 ; /* bits 8:8 */
    cs_uint32 FE_CLASS_TPID_ENC_1_MSB_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_CLASS_FWDTYPE_MASK :  4 ; /* bits 6:3 */
    cs_uint32 FE_CLASS_HDR_A_ORIG_LSPID_MASK :  1 ; /* bits 2:2 */
    cs_uint32 FE_CLASS_LSPID_MASK  :  1 ; /* bits 1:1 */
    cs_uint32 FE_CLASS_NOT_HDR_A_FLAGS_STSVLD :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_NOT_HDR_A_FLAGS_STSVLD :  1 ; /* bits 0:0 */
    cs_uint32 FE_CLASS_LSPID_MASK  :  1 ; /* bits 1:1 */
    cs_uint32 FE_CLASS_HDR_A_ORIG_LSPID_MASK :  1 ; /* bits 2:2 */
    cs_uint32 FE_CLASS_FWDTYPE_MASK :  4 ; /* bits 6:3 */
    cs_uint32 FE_CLASS_TPID_ENC_1_MSB_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_CLASS_TPID_ENC_1_LSB_MASK :  1 ; /* bits 8:8 */
    cs_uint32 FE_CLASS_VID_1_MASK  :  2 ; /* bits 10:9 */
    cs_uint32 FE_CLASS_8021P_1_MASK :  1 ; /* bits 11:11 */
    cs_uint32 FE_CLASS_TPID_ENC_2_MSB_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_CLASS_TPID_ENC_2_LSB_MASK :  1 ; /* bits 13:13 */
    cs_uint32 FE_CLASS_VID_2_MASK  :  1 ; /* bits 14:14 */
    cs_uint32 FE_CLASS_8021P_2_MASK :  1 ; /* bits 15:15 */
    cs_uint32 FE_CLASS_DA_AN_MAC_SEL_MASK :  1 ; /* bits 16:16 */
    cs_uint32 FE_CLASS_DA_AN_MAC_HIT_MASK :  1 ; /* bits 17:17 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 18:18 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 19:19 */
    cs_uint32 FE_CLASS_DSCP_MASK   :  6 ; /* bits 25:20 */
    cs_uint32 FE_CLASS_ECN_MASK    :  2 ; /* bits 27:26 */
    cs_uint32 FE_CLASS_ETHERTYPE_ENC_MASK :  1 ; /* bits 28:28 */
    cs_uint32 FE_CLASS_IP_PROT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 FE_CLASS_L4_PORT_MASK :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA15_t;





#define FETOP_FE_CLASS_DATA14                    0xf002006c
#define FETOP_FE_CLASS_DATA14_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_L4_CHKSUM_ERR :  1 ; /* bits 31:31 */
    cs_uint32 FE_CLASS_L3_CHKSUM_ERR :  1 ; /* bits 30:30 */
    cs_uint32 FE_CLASS_HDR_A_FLAGS_CRCERR :  1 ; /* bits 29:29 */
    cs_uint32 FE_CLASS_LEN_ENCODED :  1 ; /* bits 28:28 */
    cs_uint32 FE_CLASS_BC_DA       :  1 ; /* bits 27:27 */
    cs_uint32 FE_CLASS_MC_DA       :  1 ; /* bits 26:26 */
    cs_uint32 FE_CLASS_L4_VLD      :  1 ; /* bits 25:25 */
    cs_uint32 FE_CLASS_IP_FRAGMENT :  1 ; /* bits 24:24 */
    cs_uint32 FE_CLASS_IP_VER      :  1 ; /* bits 23:23 */
    cs_uint32 FE_CLASS_IP_VLD      :  1 ; /* bits 22:22 */
    cs_uint32 FE_CLASS_IP_SA       : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_SA       : 22 ; /* bits 21:0 */
    cs_uint32 FE_CLASS_IP_VLD      :  1 ; /* bits 22:22 */
    cs_uint32 FE_CLASS_IP_VER      :  1 ; /* bits 23:23 */
    cs_uint32 FE_CLASS_IP_FRAGMENT :  1 ; /* bits 24:24 */
    cs_uint32 FE_CLASS_L4_VLD      :  1 ; /* bits 25:25 */
    cs_uint32 FE_CLASS_MC_DA       :  1 ; /* bits 26:26 */
    cs_uint32 FE_CLASS_BC_DA       :  1 ; /* bits 27:27 */
    cs_uint32 FE_CLASS_LEN_ENCODED :  1 ; /* bits 28:28 */
    cs_uint32 FE_CLASS_HDR_A_FLAGS_CRCERR :  1 ; /* bits 29:29 */
    cs_uint32 FE_CLASS_L3_CHKSUM_ERR :  1 ; /* bits 30:30 */
    cs_uint32 FE_CLASS_L4_CHKSUM_ERR :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA14_t;





#define FETOP_FE_CLASS_DATA13                    0xf0020070
#define FETOP_FE_CLASS_DATA13_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA13_t;





#define FETOP_FE_CLASS_DATA12                    0xf0020074
#define FETOP_FE_CLASS_DATA12_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA12_t;





#define FETOP_FE_CLASS_DATA11                    0xf0020078
#define FETOP_FE_CLASS_DATA11_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA11_t;





#define FETOP_FE_CLASS_DATA10                    0xf002007c
#define FETOP_FE_CLASS_DATA10_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_SA       : 10 ; /* bits 31:22 */
    cs_uint32 FE_CLASS_IP_DA       : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_DA       : 22 ; /* bits 21:0 */
    cs_uint32 FE_CLASS_IP_SA       : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA10_t;





#define FETOP_FE_CLASS_DATA9                     0xf0020080
#define FETOP_FE_CLASS_DATA9_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA9_t;





#define FETOP_FE_CLASS_DATA8                     0xf0020084
#define FETOP_FE_CLASS_DATA8_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA8_t;





#define FETOP_FE_CLASS_DATA7                     0xf0020088
#define FETOP_FE_CLASS_DATA7_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA7_t;





#define FETOP_FE_CLASS_DATA6                     0xf002008c
#define FETOP_FE_CLASS_DATA6_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_IP_DA       : 10 ; /* bits 31:22 */
    cs_uint32 FE_CLASS_SA          : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_SA          : 22 ; /* bits 21:0 */
    cs_uint32 FE_CLASS_IP_DA       : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA6_t;





#define FETOP_FE_CLASS_DATA5                     0xf0020090
#define FETOP_FE_CLASS_DATA5_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_SA          : 26 ; /* bits 31:6 */
    cs_uint32 FE_CLASS_DA          :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_DA          :  6 ; /* bits 5:0 */
    cs_uint32 FE_CLASS_SA          : 26 ; /* bits 31:6 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA5_t;





#define FETOP_FE_CLASS_DATA4                     0xf0020094
#define FETOP_FE_CLASS_DATA4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_DA          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_DA          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA4_t;





#define FETOP_FE_CLASS_DATA3                     0xf0020098
#define FETOP_FE_CLASS_DATA3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_DA          : 10 ; /* bits 31:22 */
    cs_uint32 FE_CLASS_L4_DP       : 16 ; /* bits 21:6 */
    cs_uint32 FE_CLASS_L4_SP       :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_L4_SP       :  6 ; /* bits 5:0 */
    cs_uint32 FE_CLASS_L4_DP       : 16 ; /* bits 21:6 */
    cs_uint32 FE_CLASS_DA          : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA3_t;





#define FETOP_FE_CLASS_DATA2                     0xf002009c
#define FETOP_FE_CLASS_DATA2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_L4_SP       : 10 ; /* bits 31:22 */
    cs_uint32 FE_CLASS_IP_PROT     :  8 ; /* bits 21:14 */
    cs_uint32 FE_CLASS_ETHERTYPE_ENC :  6 ; /* bits 13:8 */
    cs_uint32 FE_CLASS_ECN         :  2 ; /* bits 7:6 */
    cs_uint32 FE_CLASS_DSCP        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_DSCP        :  6 ; /* bits 5:0 */
    cs_uint32 FE_CLASS_ECN         :  2 ; /* bits 7:6 */
    cs_uint32 FE_CLASS_ETHERTYPE_ENC :  6 ; /* bits 13:8 */
    cs_uint32 FE_CLASS_IP_PROT     :  8 ; /* bits 21:14 */
    cs_uint32 FE_CLASS_L4_SP       : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA2_t;





#define FETOP_FE_CLASS_DATA1                     0xf00200a0
#define FETOP_FE_CLASS_DATA1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_SA_BNG_MAC_HIT :  1 ; /* bits 31:31 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_SEL :  4 ; /* bits 30:27 */
    cs_uint32 FE_CLASS_DA_AN_MAC_HIT :  1 ; /* bits 26:26 */
    cs_uint32 FE_CLASS_DA_AN_MAC_SEL :  4 ; /* bits 25:22 */
    cs_uint32 FE_CLASS_8021P_2     :  3 ; /* bits 21:19 */
    cs_uint32 FE_CLASS_VID_2       : 12 ; /* bits 18:7 */
    cs_uint32 FE_CLASS_TPID_ENC_2  :  3 ; /* bits 6:4 */
    cs_uint32 FE_CLASS_8021P_1     :  3 ; /* bits 3:1 */
    cs_uint32 FE_CLASS_VID_1       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_VID_1       :  1 ; /* bits 0:0 */
    cs_uint32 FE_CLASS_8021P_1     :  3 ; /* bits 3:1 */
    cs_uint32 FE_CLASS_TPID_ENC_2  :  3 ; /* bits 6:4 */
    cs_uint32 FE_CLASS_VID_2       : 12 ; /* bits 18:7 */
    cs_uint32 FE_CLASS_8021P_2     :  3 ; /* bits 21:19 */
    cs_uint32 FE_CLASS_DA_AN_MAC_SEL :  4 ; /* bits 25:22 */
    cs_uint32 FE_CLASS_DA_AN_MAC_HIT :  1 ; /* bits 26:26 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_SEL :  4 ; /* bits 30:27 */
    cs_uint32 FE_CLASS_SA_BNG_MAC_HIT :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA1_t;





#define FETOP_FE_CLASS_DATA0                     0xf00200a4
#define FETOP_FE_CLASS_DATA0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_CLASS_VID_1       : 11 ; /* bits 31:21 */
    cs_uint32 FE_CLASS_TPID_ENC_1  :  3 ; /* bits 20:18 */
    cs_uint32 FE_CLASS_FWDTYPE     :  4 ; /* bits 17:14 */
    cs_uint32 FE_CLASS_HDR_A_ORIG_LSPID :  4 ; /* bits 13:10 */
    cs_uint32 FE_CLASS_LSPID       :  4 ; /* bits 9:6 */
    cs_uint32 FE_CLASS_SVIDX       :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_CLASS_SVIDX       :  6 ; /* bits 5:0 */
    cs_uint32 FE_CLASS_LSPID       :  4 ; /* bits 9:6 */
    cs_uint32 FE_CLASS_HDR_A_ORIG_LSPID :  4 ; /* bits 13:10 */
    cs_uint32 FE_CLASS_FWDTYPE     :  4 ; /* bits 17:14 */
    cs_uint32 FE_CLASS_TPID_ENC_1  :  3 ; /* bits 20:18 */
    cs_uint32 FE_CLASS_VID_1       : 11 ; /* bits 31:21 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_CLASS_DATA0_t;





#define FETOP_FE_SDB_ACCESS                      0xf00200a8
#define FETOP_FE_SDB_ACCESS_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_ACCESS_t;





#define FETOP_FE_SDB_DATA6                       0xf00200ac
#define FETOP_FE_SDB_DATA6_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 FE_SDB_MEM_PARITY    :  1 ; /* bits 14:14 */
    cs_uint32 FE_SDB_ACL_DISABLE   :  1 ; /* bits 13:13 */
    cs_uint32 FE_SDB_EGRVLN_INGR_MBRSHP_EN :  1 ; /* bits 12:12 */
    cs_uint32 FE_SDB_DROP          :  1 ; /* bits 11:11 */
    cs_uint32 FE_SDB_RSVD_202      :  1 ; /* bits 10:10 */
    cs_uint32 FE_SDB_UM_FLOWIDX    : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_UM_FLOWIDX    : 10 ; /* bits 9:0 */
    cs_uint32 FE_SDB_RSVD_202      :  1 ; /* bits 10:10 */
    cs_uint32 FE_SDB_DROP          :  1 ; /* bits 11:11 */
    cs_uint32 FE_SDB_EGRVLN_INGR_MBRSHP_EN :  1 ; /* bits 12:12 */
    cs_uint32 FE_SDB_ACL_DISABLE   :  1 ; /* bits 13:13 */
    cs_uint32 FE_SDB_MEM_PARITY    :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA6_t;





#define FETOP_FE_SDB_DATA5                       0xf00200b0
#define FETOP_FE_SDB_DATA5_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_UM_FLOWIDX    :  3 ; /* bits 31:29 */
    cs_uint32 FE_SDB_BC_FLOWIDX    : 13 ; /* bits 28:16 */
    cs_uint32 FE_SDB_HTPL_STSUPDT_CNTL :  2 ; /* bits 15:14 */
    cs_uint32 FE_SDB_UU_FLOWIDX    : 13 ; /* bits 13:1 */
    cs_uint32 FE_SDB_KEYRULE       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_KEYRULE       :  1 ; /* bits 0:0 */
    cs_uint32 FE_SDB_UU_FLOWIDX    : 13 ; /* bits 13:1 */
    cs_uint32 FE_SDB_HTPL_STSUPDT_CNTL :  2 ; /* bits 15:14 */
    cs_uint32 FE_SDB_BC_FLOWIDX    : 13 ; /* bits 28:16 */
    cs_uint32 FE_SDB_UM_FLOWIDX    :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA5_t;





#define FETOP_FE_SDB_DATA4                       0xf00200b4
#define FETOP_FE_SDB_DATA4_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_KEYRULE       :  5 ; /* bits 31:27 */
    cs_uint32 FE_SDB_TTL_HOPLIMIT_ZERO_DISCARD_EN :  1 ; /* bits 26:26 */
    cs_uint32 FE_SDB_USE_EGRLEN_FLOW_POLICER :  1 ; /* bits 25:25 */
    cs_uint32 FE_SDB_USE_EGRLEN_SRC_POLICER :  1 ; /* bits 24:24 */
    cs_uint32 FE_SDB_USE_EGRLEN_PKTTYPE_POLICER :  1 ; /* bits 23:23 */
    cs_uint32 FE_SDB_VLAN_EGRUNTAG_CHK_EN :  1 ; /* bits 22:22 */
    cs_uint32 FE_SDB_VLAN_EGR_MBRSHP_EN :  1 ; /* bits 21:21 */
    cs_uint32 FE_SDB_VLAN_INGR_MBRSHP_EN :  1 ; /* bits 20:20 */
    cs_uint32 FE_SDB_PVID_EN       :  1 ; /* bits 19:19 */
    cs_uint32 FE_SDB_PVID_TPID_ENC :  2 ; /* bits 18:17 */
    cs_uint32 FE_SDB_PVID          : 12 ; /* bits 16:5 */
    cs_uint32 FE_SDB_LPM_IPV6_PTR1_EN :  1 ; /* bits 4:4 */
    cs_uint32 FE_SDB_LPM_IPV6_PTR0_EN :  1 ; /* bits 3:3 */
    cs_uint32 FE_SDB_LPM_IPV4_PTR1_EN :  1 ; /* bits 2:2 */
    cs_uint32 FE_SDB_LPM_IPV4_PTR0_EN :  1 ; /* bits 1:1 */
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR1 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR1 :  1 ; /* bits 0:0 */
    cs_uint32 FE_SDB_LPM_IPV4_PTR0_EN :  1 ; /* bits 1:1 */
    cs_uint32 FE_SDB_LPM_IPV4_PTR1_EN :  1 ; /* bits 2:2 */
    cs_uint32 FE_SDB_LPM_IPV6_PTR0_EN :  1 ; /* bits 3:3 */
    cs_uint32 FE_SDB_LPM_IPV6_PTR1_EN :  1 ; /* bits 4:4 */
    cs_uint32 FE_SDB_PVID          : 12 ; /* bits 16:5 */
    cs_uint32 FE_SDB_PVID_TPID_ENC :  2 ; /* bits 18:17 */
    cs_uint32 FE_SDB_PVID_EN       :  1 ; /* bits 19:19 */
    cs_uint32 FE_SDB_VLAN_INGR_MBRSHP_EN :  1 ; /* bits 20:20 */
    cs_uint32 FE_SDB_VLAN_EGR_MBRSHP_EN :  1 ; /* bits 21:21 */
    cs_uint32 FE_SDB_VLAN_EGRUNTAG_CHK_EN :  1 ; /* bits 22:22 */
    cs_uint32 FE_SDB_USE_EGRLEN_PKTTYPE_POLICER :  1 ; /* bits 23:23 */
    cs_uint32 FE_SDB_USE_EGRLEN_SRC_POLICER :  1 ; /* bits 24:24 */
    cs_uint32 FE_SDB_USE_EGRLEN_FLOW_POLICER :  1 ; /* bits 25:25 */
    cs_uint32 FE_SDB_TTL_HOPLIMIT_ZERO_DISCARD_EN :  1 ; /* bits 26:26 */
    cs_uint32 FE_SDB_KEYRULE       :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA4_t;





#define FETOP_FE_SDB_DATA3                       0xf00200b8
#define FETOP_FE_SDB_DATA3_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR1 :  3 ; /* bits 31:29 */
    cs_uint32 FE_SDB_LPM_IPV6_START_PTR1 :  4 ; /* bits 28:25 */
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR0 :  4 ; /* bits 24:21 */
    cs_uint32 FE_SDB_LPM_IPV6_START_PTR0 :  4 ; /* bits 20:17 */
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR1 :  6 ; /* bits 16:11 */
    cs_uint32 FE_SDB_LPM_IPV4_START_PTR1 :  6 ; /* bits 10:5 */
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR0 :  5 ; /* bits 4:0 */
    cs_uint32 FE_SDB_LPM_IPV4_START_PTR1 :  6 ; /* bits 10:5 */
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR1 :  6 ; /* bits 16:11 */
    cs_uint32 FE_SDB_LPM_IPV6_START_PTR0 :  4 ; /* bits 20:17 */
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR0 :  4 ; /* bits 24:21 */
    cs_uint32 FE_SDB_LPM_IPV6_START_PTR1 :  4 ; /* bits 28:25 */
    cs_uint32 FE_SDB_LPM_IPV6_END_PTR1 :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA3_t;





#define FETOP_FE_SDB_DATA2                       0xf00200bc
#define FETOP_FE_SDB_DATA2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR0 :  1 ; /* bits 31:31 */
    cs_uint32 FE_SDB_LPM_IPV4_START_PTR0 :  6 ; /* bits 30:25 */
    cs_uint32 FE_SDB_LPM_EN        :  1 ; /* bits 24:24 */
    cs_uint32 FE_SDB_HTUPL_PRI_7   :  4 ; /* bits 23:20 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_7 :  6 ; /* bits 19:14 */
    cs_uint32 FE_SDB_HTUPL_EN_7    :  1 ; /* bits 13:13 */
    cs_uint32 FE_SDB_HTUPL_PRI_6   :  4 ; /* bits 12:9 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_6 :  6 ; /* bits 8:3 */
    cs_uint32 FE_SDB_HTUPL_EN_6    :  1 ; /* bits 2:2 */
    cs_uint32 FE_SDB_HTUPL_PRI_5   :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_HTUPL_PRI_5   :  2 ; /* bits 1:0 */
    cs_uint32 FE_SDB_HTUPL_EN_6    :  1 ; /* bits 2:2 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_6 :  6 ; /* bits 8:3 */
    cs_uint32 FE_SDB_HTUPL_PRI_6   :  4 ; /* bits 12:9 */
    cs_uint32 FE_SDB_HTUPL_EN_7    :  1 ; /* bits 13:13 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_7 :  6 ; /* bits 19:14 */
    cs_uint32 FE_SDB_HTUPL_PRI_7   :  4 ; /* bits 23:20 */
    cs_uint32 FE_SDB_LPM_EN        :  1 ; /* bits 24:24 */
    cs_uint32 FE_SDB_LPM_IPV4_START_PTR0 :  6 ; /* bits 30:25 */
    cs_uint32 FE_SDB_LPM_IPV4_END_PTR0 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA2_t;





#define FETOP_FE_SDB_DATA1                       0xf00200c0
#define FETOP_FE_SDB_DATA1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_HTUPL_PRI_5   :  2 ; /* bits 31:30 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_5 :  6 ; /* bits 29:24 */
    cs_uint32 FE_SDB_HTUPL_EN_5    :  1 ; /* bits 23:23 */
    cs_uint32 FE_SDB_HTUPL_PRI_4   :  4 ; /* bits 22:19 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_4 :  6 ; /* bits 18:13 */
    cs_uint32 FE_SDB_HTUPL_EN_4    :  1 ; /* bits 12:12 */
    cs_uint32 FE_SDB_HTUPL_PRI_3   :  4 ; /* bits 11:8 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_3 :  6 ; /* bits 7:2 */
    cs_uint32 FE_SDB_HTUPL_EN_3    :  1 ; /* bits 1:1 */
    cs_uint32 FE_SDB_HTUPL_PRI_2   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_HTUPL_PRI_2   :  1 ; /* bits 0:0 */
    cs_uint32 FE_SDB_HTUPL_EN_3    :  1 ; /* bits 1:1 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_3 :  6 ; /* bits 7:2 */
    cs_uint32 FE_SDB_HTUPL_PRI_3   :  4 ; /* bits 11:8 */
    cs_uint32 FE_SDB_HTUPL_EN_4    :  1 ; /* bits 12:12 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_4 :  6 ; /* bits 18:13 */
    cs_uint32 FE_SDB_HTUPL_PRI_4   :  4 ; /* bits 22:19 */
    cs_uint32 FE_SDB_HTUPL_EN_5    :  1 ; /* bits 23:23 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_5 :  6 ; /* bits 29:24 */
    cs_uint32 FE_SDB_HTUPL_PRI_5   :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA1_t;





#define FETOP_FE_SDB_DATA0                       0xf00200c4
#define FETOP_FE_SDB_DATA0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_SDB_HTUPL_PRI_2   :  3 ; /* bits 31:29 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_2 :  6 ; /* bits 28:23 */
    cs_uint32 FE_SDB_HTUPL_EN_2    :  1 ; /* bits 22:22 */
    cs_uint32 FE_SDB_HTUPL_PRI_1   :  4 ; /* bits 21:18 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_1 :  6 ; /* bits 17:12 */
    cs_uint32 FE_SDB_HTUPL_EN_1    :  1 ; /* bits 11:11 */
    cs_uint32 FE_SDB_HTUPL_PRI_0   :  4 ; /* bits 10:7 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_0 :  6 ; /* bits 6:1 */
    cs_uint32 FE_SDB_HTUPL_EN_0    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_SDB_HTUPL_EN_0    :  1 ; /* bits 0:0 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_0 :  6 ; /* bits 6:1 */
    cs_uint32 FE_SDB_HTUPL_PRI_0   :  4 ; /* bits 10:7 */
    cs_uint32 FE_SDB_HTUPL_EN_1    :  1 ; /* bits 11:11 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_1 :  6 ; /* bits 17:12 */
    cs_uint32 FE_SDB_HTUPL_PRI_1   :  4 ; /* bits 21:18 */
    cs_uint32 FE_SDB_HTUPL_EN_2    :  1 ; /* bits 22:22 */
    cs_uint32 FE_SDB_HTUPL_MASK_PTR_2 :  6 ; /* bits 28:23 */
    cs_uint32 FE_SDB_HTUPL_PRI_2   :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_SDB_DATA0_t;





#define FETOP_FE_VLN_ACCESS                      0xf00200c8
#define FETOP_FE_VLN_ACCESS_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 ADDR                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VLN_ACCESS_t;





#define FETOP_FE_VLN_DATA1                       0xf00200cc
#define FETOP_FE_VLN_DATA1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_VLN_MEM_PARITY    :  1 ; /* bits 31:31 */
    cs_uint32 FE_VLN_MCGID         :  9 ; /* bits 30:22 */
    cs_uint32 FE_VLN_SECOND_TPID_ENC :  2 ; /* bits 21:20 */
    cs_uint32 FE_VLN_SECOND_VID    : 12 ; /* bits 19:8 */
    cs_uint32 FE_VLN_SECOND_VLAN_CMD :  5 ; /* bits 7:3 */
    cs_uint32 FE_VLN_FIRST_TPID_ENC :  2 ; /* bits 2:1 */
    cs_uint32 FE_VLN_FIRST_VID     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_VLN_FIRST_VID     :  1 ; /* bits 0:0 */
    cs_uint32 FE_VLN_FIRST_TPID_ENC :  2 ; /* bits 2:1 */
    cs_uint32 FE_VLN_SECOND_VLAN_CMD :  5 ; /* bits 7:3 */
    cs_uint32 FE_VLN_SECOND_VID    : 12 ; /* bits 19:8 */
    cs_uint32 FE_VLN_SECOND_TPID_ENC :  2 ; /* bits 21:20 */
    cs_uint32 FE_VLN_MCGID         :  9 ; /* bits 30:22 */
    cs_uint32 FE_VLN_MEM_PARITY    :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VLN_DATA1_t;





#define FETOP_FE_VLN_DATA0                       0xf00200d0
#define FETOP_FE_VLN_DATA0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_VLN_FIRST_VID     : 11 ; /* bits 31:21 */
    cs_uint32 FE_VLN_FIRST_VLAN_CMD :  5 ; /* bits 20:16 */
    cs_uint32 FE_VLN_FID           :  4 ; /* bits 15:12 */
    cs_uint32 FE_VLN_EGR_UNTAGGED  :  6 ; /* bits 11:6 */
    cs_uint32 FE_VLN_MEMBER        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_VLN_MEMBER        :  6 ; /* bits 5:0 */
    cs_uint32 FE_VLN_EGR_UNTAGGED  :  6 ; /* bits 11:6 */
    cs_uint32 FE_VLN_FID           :  4 ; /* bits 15:12 */
    cs_uint32 FE_VLN_FIRST_VLAN_CMD :  5 ; /* bits 20:16 */
    cs_uint32 FE_VLN_FIRST_VID     : 11 ; /* bits 31:21 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VLN_DATA0_t;





#define FETOP_FE_FWDRSLT_ACCESS                  0xf00200d4
#define FETOP_FE_FWDRSLT_ACCESS_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 ADDR                 : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWDRSLT_ACCESS_t;





#define FETOP_FE_FWDRSLT_DATA3                   0xf00200d8
#define FETOP_FE_FWDRSLT_DATA3_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 FWD_MEM_PARITY       :  1 ; /* bits 17:17 */
    cs_uint32 FWD_PPPOE_DECAP_EN   :  1 ; /* bits 16:16 */
    cs_uint32 FWD_PPPOE_ENCAP_EN   :  1 ; /* bits 15:15 */
    cs_uint32 FWD_DROP             :  1 ; /* bits 14:14 */
    cs_uint32 FWD_FLOW_VLANTBL_IDX :  9 ; /* bits 13:5 */
    cs_uint32 FWD_FLOW_VLAN_OP_EN  :  1 ; /* bits 4:4 */
    cs_uint32 FWD_DECR_TTL_HOPLIMIT :  1 ; /* bits 3:3 */
    cs_uint32 FWD_FWDTYPE          :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_FWDTYPE          :  3 ; /* bits 2:0 */
    cs_uint32 FWD_DECR_TTL_HOPLIMIT :  1 ; /* bits 3:3 */
    cs_uint32 FWD_FLOW_VLAN_OP_EN  :  1 ; /* bits 4:4 */
    cs_uint32 FWD_FLOW_VLANTBL_IDX :  9 ; /* bits 13:5 */
    cs_uint32 FWD_DROP             :  1 ; /* bits 14:14 */
    cs_uint32 FWD_PPPOE_ENCAP_EN   :  1 ; /* bits 15:15 */
    cs_uint32 FWD_PPPOE_DECAP_EN   :  1 ; /* bits 16:16 */
    cs_uint32 FWD_MEM_PARITY       :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWDRSLT_DATA3_t;





#define FETOP_FE_FWDRSLT_DATA2                   0xf00200dc
#define FETOP_FE_FWDRSLT_DATA2_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_FWDTYPE          :  1 ; /* bits 31:31 */
    cs_uint32 FWD_FWDTYPE_VLD      :  1 ; /* bits 30:30 */
    cs_uint32 FWD_ACL_DISABLE      :  1 ; /* bits 29:29 */
    cs_uint32 FWD_MCGID_VLD        :  1 ; /* bits 28:28 */
    cs_uint32 FWD_MCGID            :  9 ; /* bits 27:19 */
    cs_uint32 FWD_L2_IDX           :  9 ; /* bits 18:10 */
    cs_uint32 FWD_MAC_DA_REPLACE_EN :  1 ; /* bits 9:9 */
    cs_uint32 FWD_MAC_SA_REPLACE_EN :  1 ; /* bits 8:8 */
    cs_uint32 FWD_L4_DP            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L4_DP            :  8 ; /* bits 7:0 */
    cs_uint32 FWD_MAC_SA_REPLACE_EN :  1 ; /* bits 8:8 */
    cs_uint32 FWD_MAC_DA_REPLACE_EN :  1 ; /* bits 9:9 */
    cs_uint32 FWD_L2_IDX           :  9 ; /* bits 18:10 */
    cs_uint32 FWD_MCGID            :  9 ; /* bits 27:19 */
    cs_uint32 FWD_MCGID_VLD        :  1 ; /* bits 28:28 */
    cs_uint32 FWD_ACL_DISABLE      :  1 ; /* bits 29:29 */
    cs_uint32 FWD_FWDTYPE_VLD      :  1 ; /* bits 30:30 */
    cs_uint32 FWD_FWDTYPE          :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWDRSLT_DATA2_t;





#define FETOP_FE_FWDRSLT_DATA1                   0xf00200e0
#define FETOP_FE_FWDRSLT_DATA1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L4_DP            :  8 ; /* bits 31:24 */
    cs_uint32 FWD_L4_DP_REPLACE_EN :  1 ; /* bits 23:23 */
    cs_uint32 FWD_L4_SP            : 16 ; /* bits 22:7 */
    cs_uint32 FWD_L4_SP_REPLACE_EN :  1 ; /* bits 6:6 */
    cs_uint32 FWD_IP_DA_IDX        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_IP_DA_IDX        :  6 ; /* bits 5:0 */
    cs_uint32 FWD_L4_SP_REPLACE_EN :  1 ; /* bits 6:6 */
    cs_uint32 FWD_L4_SP            : 16 ; /* bits 22:7 */
    cs_uint32 FWD_L4_DP_REPLACE_EN :  1 ; /* bits 23:23 */
    cs_uint32 FWD_L4_DP            :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWDRSLT_DATA1_t;





#define FETOP_FE_FWDRSLT_DATA0                   0xf00200e4
#define FETOP_FE_FWDRSLT_DATA0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_IP_DA_IDX        :  6 ; /* bits 31:26 */
    cs_uint32 FWD_IP_DA_REPLACE_EN :  1 ; /* bits 25:25 */
    cs_uint32 FWD_IP_SA_IDX        : 12 ; /* bits 24:13 */
    cs_uint32 FWD_IP_SA_REPLACE_EN :  1 ; /* bits 12:12 */
    cs_uint32 FWD_VOQ_POL_TBL_IDX  :  9 ; /* bits 11:3 */
    cs_uint32 FWD_POL_POLICY       :  2 ; /* bits 2:1 */
    cs_uint32 FWD_VOQ_POLICY       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_VOQ_POLICY       :  1 ; /* bits 0:0 */
    cs_uint32 FWD_POL_POLICY       :  2 ; /* bits 2:1 */
    cs_uint32 FWD_VOQ_POL_TBL_IDX  :  9 ; /* bits 11:3 */
    cs_uint32 FWD_IP_SA_REPLACE_EN :  1 ; /* bits 12:12 */
    cs_uint32 FWD_IP_SA_IDX        : 12 ; /* bits 24:13 */
    cs_uint32 FWD_IP_DA_REPLACE_EN :  1 ; /* bits 25:25 */
    cs_uint32 FWD_IP_DA_IDX        :  6 ; /* bits 31:26 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWDRSLT_DATA0_t;





#define FETOP_FE_QOSRSLT_ACCESS                  0xf00200e8
#define FETOP_FE_QOSRSLT_ACCESS_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 ADDR                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_QOSRSLT_ACCESS_t;





#define FETOP_FE_QOSRSLT_DATA1                   0xf00200ec
#define FETOP_FE_QOSRSLT_DATA1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 FWD_QOS_MEM_PARITY   :  1 ; /* bits 15:15 */
    cs_uint32 FWD_QOS_CHANGE_DEI_2_EN :  1 ; /* bits 14:14 */
    cs_uint32 FWD_QOS_CHANGE_8021P_2_EN :  1 ; /* bits 13:13 */
    cs_uint32 FWD_QOS_CHANGE_DEI_1_EN :  1 ; /* bits 12:12 */
    cs_uint32 FWD_QOS_CHANGE_8021P_1_EN :  1 ; /* bits 11:11 */
    cs_uint32 FWD_QOS_MARKED_DOWN_INNER_DEI :  1 ; /* bits 10:10 */
    cs_uint32 FWD_QOS_INNER_DEI    :  1 ; /* bits 9:9 */
    cs_uint32 FWD_QOS_INNER_8021P_MARKDOWN_EN :  1 ; /* bits 8:8 */
    cs_uint32 FWD_QOS_MARKED_DOWN_INNER_802_1P :  3 ; /* bits 7:5 */
    cs_uint32 FWD_QOS_INNER_802_1P :  3 ; /* bits 4:2 */
    cs_uint32 FWD_QOS_MARKED_DOWN_TOP_DEI :  1 ; /* bits 1:1 */
    cs_uint32 FWD_QOS_TOP_DEI      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_QOS_TOP_DEI      :  1 ; /* bits 0:0 */
    cs_uint32 FWD_QOS_MARKED_DOWN_TOP_DEI :  1 ; /* bits 1:1 */
    cs_uint32 FWD_QOS_INNER_802_1P :  3 ; /* bits 4:2 */
    cs_uint32 FWD_QOS_MARKED_DOWN_INNER_802_1P :  3 ; /* bits 7:5 */
    cs_uint32 FWD_QOS_INNER_8021P_MARKDOWN_EN :  1 ; /* bits 8:8 */
    cs_uint32 FWD_QOS_INNER_DEI    :  1 ; /* bits 9:9 */
    cs_uint32 FWD_QOS_MARKED_DOWN_INNER_DEI :  1 ; /* bits 10:10 */
    cs_uint32 FWD_QOS_CHANGE_8021P_1_EN :  1 ; /* bits 11:11 */
    cs_uint32 FWD_QOS_CHANGE_DEI_1_EN :  1 ; /* bits 12:12 */
    cs_uint32 FWD_QOS_CHANGE_8021P_2_EN :  1 ; /* bits 13:13 */
    cs_uint32 FWD_QOS_CHANGE_DEI_2_EN :  1 ; /* bits 14:14 */
    cs_uint32 FWD_QOS_MEM_PARITY   :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_QOSRSLT_DATA1_t;





#define FETOP_FE_QOSRSLT_DATA0                   0xf00200f0
#define FETOP_FE_QOSRSLT_DATA0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_QOS_TOP_8021P_MARKDOWN_EN :  1 ; /* bits 31:31 */
    cs_uint32 FWD_QOS_MARKED_DOWN_TOP_802_1P :  3 ; /* bits 30:28 */
    cs_uint32 FWD_QOS_TOP_802_1P   :  3 ; /* bits 27:25 */
    cs_uint32 FWD_QOS_ECN_ENABLE   :  1 ; /* bits 24:24 */
    cs_uint32 FWD_QOS_MARKED_DOWN_DSCP :  6 ; /* bits 23:18 */
    cs_uint32 FWD_QOS_DSCP_MARKDOWN_EN :  1 ; /* bits 17:17 */
    cs_uint32 FWD_QOS_DSCP         :  6 ; /* bits 16:11 */
    cs_uint32 FWD_QOS_CHANGE_DSCP_EN :  1 ; /* bits 10:10 */
    cs_uint32 FWD_QOS_PREMARK      :  1 ; /* bits 9:9 */
    cs_uint32 FWD_QOS_POL_COS      :  3 ; /* bits 8:6 */
    cs_uint32 FWD_QOS_VOQ_COS      :  3 ; /* bits 5:3 */
    cs_uint32 FWD_QOS_WRED_COS     :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_QOS_WRED_COS     :  3 ; /* bits 2:0 */
    cs_uint32 FWD_QOS_VOQ_COS      :  3 ; /* bits 5:3 */
    cs_uint32 FWD_QOS_POL_COS      :  3 ; /* bits 8:6 */
    cs_uint32 FWD_QOS_PREMARK      :  1 ; /* bits 9:9 */
    cs_uint32 FWD_QOS_CHANGE_DSCP_EN :  1 ; /* bits 10:10 */
    cs_uint32 FWD_QOS_DSCP         :  6 ; /* bits 16:11 */
    cs_uint32 FWD_QOS_DSCP_MARKDOWN_EN :  1 ; /* bits 17:17 */
    cs_uint32 FWD_QOS_MARKED_DOWN_DSCP :  6 ; /* bits 23:18 */
    cs_uint32 FWD_QOS_ECN_ENABLE   :  1 ; /* bits 24:24 */
    cs_uint32 FWD_QOS_TOP_802_1P   :  3 ; /* bits 27:25 */
    cs_uint32 FWD_QOS_MARKED_DOWN_TOP_802_1P :  3 ; /* bits 30:28 */
    cs_uint32 FWD_QOS_TOP_8021P_MARKDOWN_EN :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_QOSRSLT_DATA0_t;





#define FETOP_FE_VOQPOL_ACCESS                   0xf00200f4
#define FETOP_FE_VOQPOL_ACCESS_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VOQPOL_ACCESS_t;





#define FETOP_FE_VOQPOL_DATA1                    0xf00200f8
#define FETOP_FE_VOQPOL_DATA1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 FWD_VOQPOL_MEM_PARITY :  1 ; /* bits 8:8 */
    cs_uint32 FWD_VOQPOL_COS_NOP   :  1 ; /* bits 7:7 */
    cs_uint32 FWD_VOQPOL_PPPOE_SESSION_ID :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_VOQPOL_PPPOE_SESSION_ID :  7 ; /* bits 6:0 */
    cs_uint32 FWD_VOQPOL_COS_NOP   :  1 ; /* bits 7:7 */
    cs_uint32 FWD_VOQPOL_MEM_PARITY :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VOQPOL_DATA1_t;





#define FETOP_FE_VOQPOL_DATA0                    0xf00200fc
#define FETOP_FE_VOQPOL_DATA0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_VOQPOL_PPPOE_SESSION_ID :  9 ; /* bits 31:23 */
    cs_uint32 FWD_VOQPOL_LDPID     :  4 ; /* bits 22:19 */
    cs_uint32 FWD_VOQPOL_CPUPID    :  3 ; /* bits 18:16 */
    cs_uint32 FWD_VOQPOL_POL_BASE  :  8 ; /* bits 15:8 */
    cs_uint32 FWD_VOQPOL_VOQ_BASE  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_VOQPOL_VOQ_BASE  :  8 ; /* bits 7:0 */
    cs_uint32 FWD_VOQPOL_POL_BASE  :  8 ; /* bits 15:8 */
    cs_uint32 FWD_VOQPOL_CPUPID    :  3 ; /* bits 18:16 */
    cs_uint32 FWD_VOQPOL_LDPID     :  4 ; /* bits 22:19 */
    cs_uint32 FWD_VOQPOL_PPPOE_SESSION_ID :  9 ; /* bits 31:23 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_VOQPOL_DATA0_t;





#define FETOP_FE_FVLAN_ACCESS                    0xf0020100
#define FETOP_FE_FVLAN_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FVLAN_ACCESS_t;





#define FETOP_FE_FVLAN_DATA1                     0xf0020104
#define FETOP_FE_FVLAN_DATA1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 FWD_FVLAN_MEM_PARITY :  1 ; /* bits 6:6 */
    cs_uint32 FWD_FVLAN_SECOND_TPID_ENC :  2 ; /* bits 5:4 */
    cs_uint32 FWD_FVLAN_SECOND_VID :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_FVLAN_SECOND_VID :  4 ; /* bits 3:0 */
    cs_uint32 FWD_FVLAN_SECOND_TPID_ENC :  2 ; /* bits 5:4 */
    cs_uint32 FWD_FVLAN_MEM_PARITY :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FVLAN_DATA1_t;





#define FETOP_FE_FVLAN_DATA0                     0xf0020108
#define FETOP_FE_FVLAN_DATA0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_FVLAN_SECOND_VID :  8 ; /* bits 31:24 */
    cs_uint32 FWD_FVLAN_SECOND_VLAN_CMD :  5 ; /* bits 23:19 */
    cs_uint32 FWD_FVLAN_FIRST_TPID_ENC :  2 ; /* bits 18:17 */
    cs_uint32 FWD_FVLAN_FIRST_VID  : 12 ; /* bits 16:5 */
    cs_uint32 FWD_FVLAN_FIRST_VLAN_CMD :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_FVLAN_FIRST_VLAN_CMD :  5 ; /* bits 4:0 */
    cs_uint32 FWD_FVLAN_FIRST_VID  : 12 ; /* bits 16:5 */
    cs_uint32 FWD_FVLAN_FIRST_TPID_ENC :  2 ; /* bits 18:17 */
    cs_uint32 FWD_FVLAN_SECOND_VLAN_CMD :  5 ; /* bits 23:19 */
    cs_uint32 FWD_FVLAN_SECOND_VID :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FVLAN_DATA0_t;





#define FETOP_FE_L3TBL_ACCESS                    0xf002010c
#define FETOP_FE_L3TBL_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ADDR                 : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_ACCESS_t;





#define FETOP_FE_L3TBL_DATA4                     0xf0020110
#define FETOP_FE_L3TBL_DATA4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 FWD_L3_MEM_PARITY    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L3_MEM_PARITY    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_DATA4_t;





#define FETOP_FE_L3TBL_DATA3                     0xf0020114
#define FETOP_FE_L3TBL_DATA3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_DATA3_t;





#define FETOP_FE_L3TBL_DATA2                     0xf0020118
#define FETOP_FE_L3TBL_DATA2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_DATA2_t;





#define FETOP_FE_L3TBL_DATA1                     0xf002011c
#define FETOP_FE_L3TBL_DATA1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_DATA1_t;





#define FETOP_FE_L3TBL_DATA0                     0xf0020120
#define FETOP_FE_L3TBL_DATA0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L3_ADDR          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L3TBL_DATA0_t;





#define FETOP_FE_L2TBL_ACCESS                    0xf0020124
#define FETOP_FE_L2TBL_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L2TBL_ACCESS_t;





#define FETOP_FE_L2TBL_DATA3                     0xf0020128
#define FETOP_FE_L2TBL_DATA3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 FWD_L2_MEM_PARITY    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L2_MEM_PARITY    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L2TBL_DATA3_t;





#define FETOP_FE_L2TBL_DATA2                     0xf002012c
#define FETOP_FE_L2TBL_DATA2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L2_MAC_DA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L2_MAC_DA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L2TBL_DATA2_t;





#define FETOP_FE_L2TBL_DATA1                     0xf0020130
#define FETOP_FE_L2TBL_DATA1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L2_MAC_DA        : 16 ; /* bits 31:16 */
    cs_uint32 FWD_L2_MAC_SA        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L2_MAC_SA        : 16 ; /* bits 15:0 */
    cs_uint32 FWD_L2_MAC_DA        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L2TBL_DATA1_t;





#define FETOP_FE_L2TBL_DATA0                     0xf0020134
#define FETOP_FE_L2TBL_DATA0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FWD_L2_MAC_SA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_L2_MAC_SA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_L2TBL_DATA0_t;





#define FETOP_FE_ACLRULE_ACCESS                  0xf0020138
#define FETOP_FE_ACLRULE_ACCESS_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_ACCESS_t;





#define FETOP_FE_ACLRULE_DATA27                  0xf002013c
#define FETOP_FE_ACLRULE_DATA27_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 ACL_RULE_MEM_PARITY  :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_VLD         :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_RSVD_879_878 :  2 ; /* bits 15:14 */
    cs_uint32 ACL_RULE_PKTLEN_RNG_MATCH_VECTOR_MASK :  4 ; /* bits 13:10 */
    cs_uint32 ACL_RULE_PKTLEN_RNG_MATCH_VECTOR :  4 ; /* bits 9:6 */
    cs_uint32 ACL_RULE_IPV6_DOH_MASK :  1 ; /* bits 5:5 */
    cs_uint32 ACL_RULE_IPV6_DOH    :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_IPV6_RH_MASK :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_IPV6_RH     :  1 ; /* bits 2:2 */
    cs_uint32 ACL_RULE_IPV6_HBH_MASK :  1 ; /* bits 1:1 */
    cs_uint32 ACL_RULE_IPV6_HBH    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IPV6_HBH    :  1 ; /* bits 0:0 */
    cs_uint32 ACL_RULE_IPV6_HBH_MASK :  1 ; /* bits 1:1 */
    cs_uint32 ACL_RULE_IPV6_RH     :  1 ; /* bits 2:2 */
    cs_uint32 ACL_RULE_IPV6_RH_MASK :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_IPV6_DOH    :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_IPV6_DOH_MASK :  1 ; /* bits 5:5 */
    cs_uint32 ACL_RULE_PKTLEN_RNG_MATCH_VECTOR :  4 ; /* bits 9:6 */
    cs_uint32 ACL_RULE_PKTLEN_RNG_MATCH_VECTOR_MASK :  4 ; /* bits 13:10 */
    cs_uint32 ACL_RULE_RSVD_879_878 :  2 ; /* bits 15:14 */
    cs_uint32 ACL_RULE_VLD         :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_MEM_PARITY  :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA27_t;





#define FETOP_FE_ACLRULE_DATA26                  0xf0020140
#define FETOP_FE_ACLRULE_DATA26_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IPV6_NDP_MASK :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_IPV6_NDP    :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL : 16 ; /* bits 28:13 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_VLD_MASK :  1 ; /* bits 12:12 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_VLD :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_SPI_MASK    :  1 ; /* bits 10:10 */
    cs_uint32 ACL_RULE_SPI         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_SPI         : 10 ; /* bits 9:0 */
    cs_uint32 ACL_RULE_SPI_MASK    :  1 ; /* bits 10:10 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_VLD :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_VLD_MASK :  1 ; /* bits 12:12 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL : 16 ; /* bits 28:13 */
    cs_uint32 ACL_RULE_PPP_PROTOCOL_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_IPV6_NDP    :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_IPV6_NDP_MASK :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA26_t;





#define FETOP_FE_ACLRULE_DATA25                  0xf0020144
#define FETOP_FE_ACLRULE_DATA25_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_SPI         : 22 ; /* bits 31:10 */
    cs_uint32 ACL_RULE_SPI_VLD_MASK :  1 ; /* bits 9:9 */
    cs_uint32 ACL_RULE_SPI_VLD     :  1 ; /* bits 8:8 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_MASK :  1 ; /* bits 7:7 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID :  7 ; /* bits 6:0 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_MASK :  1 ; /* bits 7:7 */
    cs_uint32 ACL_RULE_SPI_VLD     :  1 ; /* bits 8:8 */
    cs_uint32 ACL_RULE_SPI_VLD_MASK :  1 ; /* bits 9:9 */
    cs_uint32 ACL_RULE_SPI         : 22 ; /* bits 31:10 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA25_t;





#define FETOP_FE_ACLRULE_DATA24                  0xf0020148
#define FETOP_FE_ACLRULE_DATA24_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID :  9 ; /* bits 31:23 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_VLD_MASK :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_VLD :  1 ; /* bits 21:21 */
    cs_uint32 ACL_RULE_FWD_DROP_MASK :  1 ; /* bits 20:20 */
    cs_uint32 ACL_RULE_FWD_DROP    :  1 ; /* bits 19:19 */
    cs_uint32 ACL_RULE_SDB_DROP_MASK :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_SDB_DROP    :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_MCIDX_MASK  :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_MCIDX       :  5 ; /* bits 15:11 */
    cs_uint32 ACL_RULE_NE_VEC      : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_NE_VEC      : 11 ; /* bits 10:0 */
    cs_uint32 ACL_RULE_MCIDX       :  5 ; /* bits 15:11 */
    cs_uint32 ACL_RULE_MCIDX_MASK  :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_SDB_DROP    :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_SDB_DROP_MASK :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_FWD_DROP    :  1 ; /* bits 19:19 */
    cs_uint32 ACL_RULE_FWD_DROP_MASK :  1 ; /* bits 20:20 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_VLD :  1 ; /* bits 21:21 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID_VLD_MASK :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_PPPOE_SESSION_ID :  9 ; /* bits 31:23 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA24_t;





#define FETOP_FE_ACLRULE_DATA23                  0xf002014c
#define FETOP_FE_ACLRULE_DATA23_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_NE_VEC      :  5 ; /* bits 31:27 */
    cs_uint32 ACL_RULE_RECIRX_IDX_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_RECIRC_IDX  : 10 ; /* bits 25:16 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC_OR :  1 ; /* bits 15:15 */
    cs_uint32 ACL_RULE_FLAGS_VEC_OR :  1 ; /* bits 14:14 */
    cs_uint32 ACL_RULE_FLAGS_VEC_MASK : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_FLAGS_VEC_MASK : 14 ; /* bits 13:0 */
    cs_uint32 ACL_RULE_FLAGS_VEC_OR :  1 ; /* bits 14:14 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC_OR :  1 ; /* bits 15:15 */
    cs_uint32 ACL_RULE_RECIRC_IDX  : 10 ; /* bits 25:16 */
    cs_uint32 ACL_RULE_RECIRX_IDX_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_NE_VEC      :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA23_t;





#define FETOP_FE_ACLRULE_DATA22                  0xf0020150
#define FETOP_FE_ACLRULE_DATA22_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_FLAGS_VEC_MASK :  2 ; /* bits 31:30 */
    cs_uint32 ACL_RULE_FLAGS_VEC   : 16 ; /* bits 29:14 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 13:13 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_HIT :  1 ; /* bits 12:12 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_SEL :  4 ; /* bits 10:7 */
    cs_uint32 ACL_RULE_DA_AN_MAC_SEL_MASK :  1 ; /* bits 6:6 */
    cs_uint32 ACL_RULE_DA_AN_MAC_SEL :  4 ; /* bits 5:2 */
    cs_uint32 ACL_RULE_L7_FIELD_MASK :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L7_FIELD_MASK :  2 ; /* bits 1:0 */
    cs_uint32 ACL_RULE_DA_AN_MAC_SEL :  4 ; /* bits 5:2 */
    cs_uint32 ACL_RULE_DA_AN_MAC_SEL_MASK :  1 ; /* bits 6:6 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_SEL :  4 ; /* bits 10:7 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_HIT :  1 ; /* bits 12:12 */
    cs_uint32 ACL_RULE_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 13:13 */
    cs_uint32 ACL_RULE_FLAGS_VEC   : 16 ; /* bits 29:14 */
    cs_uint32 ACL_RULE_FLAGS_VEC_MASK :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA22_t;





#define FETOP_FE_ACLRULE_DATA21                  0xf0020154
#define FETOP_FE_ACLRULE_DATA21_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L7_FIELD_MASK :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_HASH_HIT_IDX_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_HASH_HIT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_LPM_HIT_IDX_MASK :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_LPM_HIT_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_CLASS_SVIDX_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_CLASS_HIT_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC_MASK : 16 ; /* bits 24:9 */
    cs_uint32 ACL_RULE_FWDTYPE_MASK :  4 ; /* bits 8:5 */
    cs_uint32 ACL_RULE_ORIG_LSPID_MASK :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_LSPID_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_L4_MASK     :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L4_MASK     :  3 ; /* bits 2:0 */
    cs_uint32 ACL_RULE_LSPID_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_ORIG_LSPID_MASK :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_FWDTYPE_MASK :  4 ; /* bits 8:5 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC_MASK : 16 ; /* bits 24:9 */
    cs_uint32 ACL_RULE_CLASS_HIT_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_CLASS_SVIDX_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_LPM_HIT_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_LPM_HIT_IDX_MASK :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_HASH_HIT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_HASH_HIT_IDX_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_L7_FIELD_MASK :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA21_t;





#define FETOP_FE_ACLRULE_DATA20                  0xf0020158
#define FETOP_FE_ACLRULE_DATA20_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L4_MASK     :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_L4_VLD_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_TTL_HOPLMT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_IPV6_FLOW_LBL_MASK :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_IP_OPTIONS_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_IP_FRAGMENT_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_IP_PROT_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_ECN_MASK    :  2 ; /* bits 24:23 */
    cs_uint32 ACL_RULE_DSCP_MASK   :  6 ; /* bits 22:17 */
    cs_uint32 ACL_RULE_IP_SA_MASK  :  9 ; /* bits 16:8 */
    cs_uint32 ACL_RULE_IP_DA_MASK  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_DA_MASK  :  8 ; /* bits 7:0 */
    cs_uint32 ACL_RULE_IP_SA_MASK  :  9 ; /* bits 16:8 */
    cs_uint32 ACL_RULE_DSCP_MASK   :  6 ; /* bits 22:17 */
    cs_uint32 ACL_RULE_ECN_MASK    :  2 ; /* bits 24:23 */
    cs_uint32 ACL_RULE_IP_PROT_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_IP_FRAGMENT_MASK :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_IP_OPTIONS_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_IPV6_FLOW_LBL_MASK :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_TTL_HOPLMT_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_L4_VLD_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_L4_MASK     :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA20_t;





#define FETOP_FE_ACLRULE_DATA19                  0xf002015c
#define FETOP_FE_ACLRULE_DATA19_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_DA_MASK  :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_IP_VER_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_IP_VLD_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_DEI_2_MASK  :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_8021P_2_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_VID_2_MASK  :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_TPID_ENC_2_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_TPID_2_VLD_MASK :  1 ; /* bits 24:24 */
    cs_uint32 ACL_RULE_DEI_1_MASK  :  1 ; /* bits 23:23 */
    cs_uint32 ACL_RULE_8021P_1_MASK :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_VID_1_MASK  :  1 ; /* bits 21:21 */
    cs_uint32 ACL_RULE_TPID_ENC_1_MASK :  1 ; /* bits 20:20 */
    cs_uint32 ACL_RULE_TPID_1_VLD_MASK :  1 ; /* bits 19:19 */
    cs_uint32 ACL_RULE_LEN_ENCODED_MASK :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_ETHERTYPE_MASK :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_L2_MAC_SA_MASK :  6 ; /* bits 16:11 */
    cs_uint32 ACL_RULE_L2_MAC_DA_MASK :  6 ; /* bits 10:5 */
    cs_uint32 ACL_RULE_L7_FIELD    :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L7_FIELD    :  5 ; /* bits 4:0 */
    cs_uint32 ACL_RULE_L2_MAC_DA_MASK :  6 ; /* bits 10:5 */
    cs_uint32 ACL_RULE_L2_MAC_SA_MASK :  6 ; /* bits 16:11 */
    cs_uint32 ACL_RULE_ETHERTYPE_MASK :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_LEN_ENCODED_MASK :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_TPID_1_VLD_MASK :  1 ; /* bits 19:19 */
    cs_uint32 ACL_RULE_TPID_ENC_1_MASK :  1 ; /* bits 20:20 */
    cs_uint32 ACL_RULE_VID_1_MASK  :  1 ; /* bits 21:21 */
    cs_uint32 ACL_RULE_8021P_1_MASK :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_DEI_1_MASK  :  1 ; /* bits 23:23 */
    cs_uint32 ACL_RULE_TPID_2_VLD_MASK :  1 ; /* bits 24:24 */
    cs_uint32 ACL_RULE_TPID_ENC_2_MASK :  1 ; /* bits 25:25 */
    cs_uint32 ACL_RULE_VID_2_MASK  :  1 ; /* bits 26:26 */
    cs_uint32 ACL_RULE_8021P_2_MASK :  1 ; /* bits 27:27 */
    cs_uint32 ACL_RULE_DEI_2_MASK  :  1 ; /* bits 28:28 */
    cs_uint32 ACL_RULE_IP_VLD_MASK :  1 ; /* bits 29:29 */
    cs_uint32 ACL_RULE_IP_VER_MASK :  1 ; /* bits 30:30 */
    cs_uint32 ACL_RULE_IP_DA_MASK  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA19_t;





#define FETOP_FE_ACLRULE_DATA18                  0xf0020160
#define FETOP_FE_ACLRULE_DATA18_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L7_FIELD    : 27 ; /* bits 31:5 */
    cs_uint32 ACL_RULE_DA_AN_MAC_HIT_MASK :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_DA_AN_MAC_HIT :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_HASH_HIT_IDX :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_HASH_HIT_IDX :  3 ; /* bits 2:0 */
    cs_uint32 ACL_RULE_DA_AN_MAC_HIT :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_DA_AN_MAC_HIT_MASK :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_L7_FIELD    : 27 ; /* bits 31:5 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA18_t;





#define FETOP_FE_ACLRULE_DATA17                  0xf0020164
#define FETOP_FE_ACLRULE_DATA17_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_HASH_HIT_IDX : 13 ; /* bits 31:19 */
    cs_uint32 ACL_RULE_HASH_HIT    :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_LPM_HIT_IDX :  6 ; /* bits 17:12 */
    cs_uint32 ACL_RULE_LPM_HIT     :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_CLASS_SVIDX :  6 ; /* bits 10:5 */
    cs_uint32 ACL_RULE_CLASS_HIT   :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_SPL_PKT_VEC :  4 ; /* bits 3:0 */
    cs_uint32 ACL_RULE_CLASS_HIT   :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_CLASS_SVIDX :  6 ; /* bits 10:5 */
    cs_uint32 ACL_RULE_LPM_HIT     :  1 ; /* bits 11:11 */
    cs_uint32 ACL_RULE_LPM_HIT_IDX :  6 ; /* bits 17:12 */
    cs_uint32 ACL_RULE_HASH_HIT    :  1 ; /* bits 18:18 */
    cs_uint32 ACL_RULE_HASH_HIT_IDX : 13 ; /* bits 31:19 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA17_t;





#define FETOP_FE_ACLRULE_DATA16                  0xf0020168
#define FETOP_FE_ACLRULE_DATA16_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_SPL_PKT_VEC : 12 ; /* bits 31:20 */
    cs_uint32 ACL_RULE_FWDTYPE     :  4 ; /* bits 19:16 */
    cs_uint32 ACL_RULE_ORIG_LSPID  :  4 ; /* bits 15:12 */
    cs_uint32 ACL_RULE_LSPID       :  4 ; /* bits 11:8 */
    cs_uint32 ACL_RULE_L4_SPHI     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L4_SPHI     :  8 ; /* bits 7:0 */
    cs_uint32 ACL_RULE_LSPID       :  4 ; /* bits 11:8 */
    cs_uint32 ACL_RULE_ORIG_LSPID  :  4 ; /* bits 15:12 */
    cs_uint32 ACL_RULE_FWDTYPE     :  4 ; /* bits 19:16 */
    cs_uint32 ACL_RULE_SPL_PKT_VEC : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA16_t;





#define FETOP_FE_ACLRULE_DATA15                  0xf002016c
#define FETOP_FE_ACLRULE_DATA15_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L4_SPHI     :  8 ; /* bits 31:24 */
    cs_uint32 ACL_RULE_L4_SPLO     : 16 ; /* bits 23:8 */
    cs_uint32 ACL_RULE_L4_DPHI     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L4_DPHI     :  8 ; /* bits 7:0 */
    cs_uint32 ACL_RULE_L4_SPLO     : 16 ; /* bits 23:8 */
    cs_uint32 ACL_RULE_L4_SPHI     :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA15_t;





#define FETOP_FE_ACLRULE_DATA14                  0xf0020170
#define FETOP_FE_ACLRULE_DATA14_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L4_DPHI     :  8 ; /* bits 31:24 */
    cs_uint32 ACL_RULE_L4_DPLO     : 16 ; /* bits 23:8 */
    cs_uint32 ACL_RULE_L4_VLD      :  1 ; /* bits 7:7 */
    cs_uint32 ACL_RULE_TTL_HOPLMT  :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_TTL_HOPLMT  :  7 ; /* bits 6:0 */
    cs_uint32 ACL_RULE_L4_VLD      :  1 ; /* bits 7:7 */
    cs_uint32 ACL_RULE_L4_DPLO     : 16 ; /* bits 23:8 */
    cs_uint32 ACL_RULE_L4_DPHI     :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA14_t;





#define FETOP_FE_ACLRULE_DATA13                  0xf0020174
#define FETOP_FE_ACLRULE_DATA13_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_TTL_HOPLMT  :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_IPV6_FLOW_LBL : 20 ; /* bits 30:11 */
    cs_uint32 ACL_RULE_IP_OPTIONS  :  1 ; /* bits 10:10 */
    cs_uint32 ACL_RULE_IP_FRAGMENT :  1 ; /* bits 9:9 */
    cs_uint32 ACL_RULE_IP_PROT     :  8 ; /* bits 8:1 */
    cs_uint32 ACL_RULE_ECN         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_ECN         :  1 ; /* bits 0:0 */
    cs_uint32 ACL_RULE_IP_PROT     :  8 ; /* bits 8:1 */
    cs_uint32 ACL_RULE_IP_FRAGMENT :  1 ; /* bits 9:9 */
    cs_uint32 ACL_RULE_IP_OPTIONS  :  1 ; /* bits 10:10 */
    cs_uint32 ACL_RULE_IPV6_FLOW_LBL : 20 ; /* bits 30:11 */
    cs_uint32 ACL_RULE_TTL_HOPLMT  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA13_t;





#define FETOP_FE_ACLRULE_DATA12                  0xf0020178
#define FETOP_FE_ACLRULE_DATA12_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_ECN         :  1 ; /* bits 31:31 */
    cs_uint32 ACL_RULE_DSCP        :  6 ; /* bits 30:25 */
    cs_uint32 ACL_RULE_IP_SA       : 25 ; /* bits 24:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_SA       : 25 ; /* bits 24:0 */
    cs_uint32 ACL_RULE_DSCP        :  6 ; /* bits 30:25 */
    cs_uint32 ACL_RULE_ECN         :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA12_t;





#define FETOP_FE_ACLRULE_DATA11                  0xf002017c
#define FETOP_FE_ACLRULE_DATA11_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA11_t;





#define FETOP_FE_ACLRULE_DATA10                  0xf0020180
#define FETOP_FE_ACLRULE_DATA10_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA10_t;





#define FETOP_FE_ACLRULE_DATA9                   0xf0020184
#define FETOP_FE_ACLRULE_DATA9_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_SA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA9_t;





#define FETOP_FE_ACLRULE_DATA8                   0xf0020188
#define FETOP_FE_ACLRULE_DATA8_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_SA       :  7 ; /* bits 31:25 */
    cs_uint32 ACL_RULE_IP_DA       : 25 ; /* bits 24:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_DA       : 25 ; /* bits 24:0 */
    cs_uint32 ACL_RULE_IP_SA       :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA8_t;





#define FETOP_FE_ACLRULE_DATA7                   0xf002018c
#define FETOP_FE_ACLRULE_DATA7_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA7_t;





#define FETOP_FE_ACLRULE_DATA6                   0xf0020190
#define FETOP_FE_ACLRULE_DATA6_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA6_t;





#define FETOP_FE_ACLRULE_DATA5                   0xf0020194
#define FETOP_FE_ACLRULE_DATA5_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_IP_DA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA5_t;





#define FETOP_FE_ACLRULE_DATA4                   0xf0020198
#define FETOP_FE_ACLRULE_DATA4_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_IP_DA       :  7 ; /* bits 31:25 */
    cs_uint32 ACL_RULE_IP_VER      :  1 ; /* bits 24:24 */
    cs_uint32 ACL_RULE_IP_VLD      :  1 ; /* bits 23:23 */
    cs_uint32 ACL_RULE_DEI_2       :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_8021P_2     :  3 ; /* bits 21:19 */
    cs_uint32 ACL_RULE_VID_2       : 12 ; /* bits 18:7 */
    cs_uint32 ACL_RULE_TPID_ENC_2  :  2 ; /* bits 6:5 */
    cs_uint32 ACL_RULE_TPID_2_VLD  :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_DEI_1       :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_8021P_1     :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_8021P_1     :  3 ; /* bits 2:0 */
    cs_uint32 ACL_RULE_DEI_1       :  1 ; /* bits 3:3 */
    cs_uint32 ACL_RULE_TPID_2_VLD  :  1 ; /* bits 4:4 */
    cs_uint32 ACL_RULE_TPID_ENC_2  :  2 ; /* bits 6:5 */
    cs_uint32 ACL_RULE_VID_2       : 12 ; /* bits 18:7 */
    cs_uint32 ACL_RULE_8021P_2     :  3 ; /* bits 21:19 */
    cs_uint32 ACL_RULE_DEI_2       :  1 ; /* bits 22:22 */
    cs_uint32 ACL_RULE_IP_VLD      :  1 ; /* bits 23:23 */
    cs_uint32 ACL_RULE_IP_VER      :  1 ; /* bits 24:24 */
    cs_uint32 ACL_RULE_IP_DA       :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA4_t;





#define FETOP_FE_ACLRULE_DATA3                   0xf002019c
#define FETOP_FE_ACLRULE_DATA3_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_VID_1       : 12 ; /* bits 31:20 */
    cs_uint32 ACL_RULE_TPID_ENC_1  :  2 ; /* bits 19:18 */
    cs_uint32 ACL_RULE_TPID_1_VLD  :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_LEN_ENCODED :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_ETHERTYPE   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_ETHERTYPE   : 16 ; /* bits 15:0 */
    cs_uint32 ACL_RULE_LEN_ENCODED :  1 ; /* bits 16:16 */
    cs_uint32 ACL_RULE_TPID_1_VLD  :  1 ; /* bits 17:17 */
    cs_uint32 ACL_RULE_TPID_ENC_1  :  2 ; /* bits 19:18 */
    cs_uint32 ACL_RULE_VID_1       : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA3_t;





#define FETOP_FE_ACLRULE_DATA2                   0xf00201a0
#define FETOP_FE_ACLRULE_DATA2_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L2_MAC_SA   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L2_MAC_SA   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA2_t;





#define FETOP_FE_ACLRULE_DATA1                   0xf00201a4
#define FETOP_FE_ACLRULE_DATA1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L2_MAC_SA   : 16 ; /* bits 31:16 */
    cs_uint32 ACL_RULE_L2_MAC_DA   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L2_MAC_DA   : 16 ; /* bits 15:0 */
    cs_uint32 ACL_RULE_L2_MAC_SA   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA1_t;





#define FETOP_FE_ACLRULE_DATA0                   0xf00201a8
#define FETOP_FE_ACLRULE_DATA0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_RULE_L2_MAC_DA   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_RULE_L2_MAC_DA   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLRULE_DATA0_t;





#define FETOP_FE_ACLACTION_ACCESS                0xf00201ac
#define FETOP_FE_ACLACTION_ACCESS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_ACCESS_t;





#define FETOP_FE_ACLACTION_DATA9                 0xf00201b0
#define FETOP_FE_ACLACTION_DATA9_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 ACL_ACTION_MEM_PARITY :  1 ; /* bits 17:17 */
    cs_uint32 ACL_ACTION_CHANGE_DEI_2_EN :  1 ; /* bits 16:16 */
    cs_uint32 ACL_ACTION_CHANGE_8021P_2_EN :  1 ; /* bits 15:15 */
    cs_uint32 ACL_ACTION_CHANGE_DEI_1_EN :  1 ; /* bits 14:14 */
    cs_uint32 ACL_ACTION_CHANGE_8021P_1_EN :  1 ; /* bits 13:13 */
    cs_uint32 ACL_ACTION_CPUCOPY_CPUPID :  3 ; /* bits 12:10 */
    cs_uint32 ACL_ACTION_VOQ_CPUPID :  3 ; /* bits 9:7 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT_PRI :  4 ; /* bits 6:3 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT :  1 ; /* bits 2:2 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT_VLD :  1 ; /* bits 1:1 */
    cs_uint32 ACL_ACTION_CHANGE_DSCP_EN :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_CHANGE_DSCP_EN :  1 ; /* bits 0:0 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT_VLD :  1 ; /* bits 1:1 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT :  1 ; /* bits 2:2 */
    cs_uint32 ACL_ACTION_DECR_TTL_HOPLIMIT_PRI :  4 ; /* bits 6:3 */
    cs_uint32 ACL_ACTION_VOQ_CPUPID :  3 ; /* bits 9:7 */
    cs_uint32 ACL_ACTION_CPUCOPY_CPUPID :  3 ; /* bits 12:10 */
    cs_uint32 ACL_ACTION_CHANGE_8021P_1_EN :  1 ; /* bits 13:13 */
    cs_uint32 ACL_ACTION_CHANGE_DEI_1_EN :  1 ; /* bits 14:14 */
    cs_uint32 ACL_ACTION_CHANGE_8021P_2_EN :  1 ; /* bits 15:15 */
    cs_uint32 ACL_ACTION_CHANGE_DEI_2_EN :  1 ; /* bits 16:16 */
    cs_uint32 ACL_ACTION_MEM_PARITY :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA9_t;





#define FETOP_FE_ACLACTION_DATA8                 0xf00201b4
#define FETOP_FE_ACLACTION_DATA8_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_L2_IDX    :  9 ; /* bits 31:23 */
    cs_uint32 ACL_ACTION_MAC_DA_SA_REPLACE_EN_PRI :  4 ; /* bits 22:19 */
    cs_uint32 ACL_ACTION_MAC_SA_REPLACE_EN :  1 ; /* bits 18:18 */
    cs_uint32 ACL_ACTION_MAC_DA_REPLACE_EN :  1 ; /* bits 17:17 */
    cs_uint32 ACL_ACTION_MAC_DA_SA_REPLACE_EN_VLD :  1 ; /* bits 16:16 */
    cs_uint32 ACL_ACTION_IP_DA_IDX : 12 ; /* bits 15:4 */
    cs_uint32 ACL_ACTION_IP_SA_IDX :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_IP_SA_IDX :  4 ; /* bits 3:0 */
    cs_uint32 ACL_ACTION_IP_DA_IDX : 12 ; /* bits 15:4 */
    cs_uint32 ACL_ACTION_MAC_DA_SA_REPLACE_EN_VLD :  1 ; /* bits 16:16 */
    cs_uint32 ACL_ACTION_MAC_DA_REPLACE_EN :  1 ; /* bits 17:17 */
    cs_uint32 ACL_ACTION_MAC_SA_REPLACE_EN :  1 ; /* bits 18:18 */
    cs_uint32 ACL_ACTION_MAC_DA_SA_REPLACE_EN_PRI :  4 ; /* bits 22:19 */
    cs_uint32 ACL_ACTION_L2_IDX    :  9 ; /* bits 31:23 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA8_t;





#define FETOP_FE_ACLACTION_DATA7                 0xf00201b8
#define FETOP_FE_ACLACTION_DATA7_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_IP_SA_IDX :  8 ; /* bits 31:24 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN_PRI :  4 ; /* bits 23:20 */
    cs_uint32 ACL_ACTION_L4_DP     : 16 ; /* bits 19:4 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN_VLD :  1 ; /* bits 2:2 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_PRI :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_PRI :  2 ; /* bits 1:0 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN_VLD :  1 ; /* bits 2:2 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_L4_DP     : 16 ; /* bits 19:4 */
    cs_uint32 ACL_ACTION_L4_DP_REPLACE_EN_PRI :  4 ; /* bits 23:20 */
    cs_uint32 ACL_ACTION_IP_SA_IDX :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA7_t;





#define FETOP_FE_ACLACTION_DATA6                 0xf00201bc
#define FETOP_FE_ACLACTION_DATA6_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_PRI :  2 ; /* bits 31:30 */
    cs_uint32 ACL_ACTION_L4_SP     : 16 ; /* bits 29:14 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN :  1 ; /* bits 13:13 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_VLD :  1 ; /* bits 12:12 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN_PRI :  4 ; /* bits 11:8 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN :  1 ; /* bits 7:7 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN_VLD :  1 ; /* bits 6:6 */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN_PRI :  4 ; /* bits 5:2 */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN :  1 ; /* bits 1:1 */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN_VLD :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN_VLD :  1 ; /* bits 0:0 */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN :  1 ; /* bits 1:1 */
    cs_uint32 ACL_ACTION_IP_SA_REPLACE_EN_PRI :  4 ; /* bits 5:2 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN_VLD :  1 ; /* bits 6:6 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN :  1 ; /* bits 7:7 */
    cs_uint32 ACL_ACTION_IP_DA_REPLACE_EN_PRI :  4 ; /* bits 11:8 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_VLD :  1 ; /* bits 12:12 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN :  1 ; /* bits 13:13 */
    cs_uint32 ACL_ACTION_L4_SP     : 16 ; /* bits 29:14 */
    cs_uint32 ACL_ACTION_L4_SP_REPLACE_EN_PRI :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA6_t;





#define FETOP_FE_ACLACTION_DATA5                 0xf00201c0
#define FETOP_FE_ACLACTION_DATA5_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_KEEP_TS_PRI :  4 ; /* bits 31:28 */
    cs_uint32 ACL_ACTION_KEEP_TS   :  1 ; /* bits 27:27 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD_PRI :  4 ; /* bits 26:23 */
    cs_uint32 ACL_ACTION_SECOND_TPID_ENC :  2 ; /* bits 22:21 */
    cs_uint32 ACL_ACTION_SECOND_VID : 12 ; /* bits 20:9 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD :  5 ; /* bits 8:4 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD_VLD :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_PRI :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_PRI :  3 ; /* bits 2:0 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD_VLD :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD :  5 ; /* bits 8:4 */
    cs_uint32 ACL_ACTION_SECOND_VID : 12 ; /* bits 20:9 */
    cs_uint32 ACL_ACTION_SECOND_TPID_ENC :  2 ; /* bits 22:21 */
    cs_uint32 ACL_ACTION_SECOND_VLAN_CMD_PRI :  4 ; /* bits 26:23 */
    cs_uint32 ACL_ACTION_KEEP_TS   :  1 ; /* bits 27:27 */
    cs_uint32 ACL_ACTION_KEEP_TS_PRI :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA5_t;





#define FETOP_FE_ACLACTION_DATA4                 0xf00201c4
#define FETOP_FE_ACLACTION_DATA4_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_PRI :  1 ; /* bits 31:31 */
    cs_uint32 ACL_ACTION_FIRST_TPID_ENC :  2 ; /* bits 30:29 */
    cs_uint32 ACL_ACTION_FIRST_VID : 12 ; /* bits 28:17 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD :  5 ; /* bits 16:12 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_VLD :  1 ; /* bits 11:11 */
    cs_uint32 ACL_ACTION_MCGID_PRI :  4 ; /* bits 10:7 */
    cs_uint32 ACL_ACTION_MCGID     :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_MCGID     :  7 ; /* bits 6:0 */
    cs_uint32 ACL_ACTION_MCGID_PRI :  4 ; /* bits 10:7 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_VLD :  1 ; /* bits 11:11 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD :  5 ; /* bits 16:12 */
    cs_uint32 ACL_ACTION_FIRST_VID : 12 ; /* bits 28:17 */
    cs_uint32 ACL_ACTION_FIRST_TPID_ENC :  2 ; /* bits 30:29 */
    cs_uint32 ACL_ACTION_FIRST_VLAN_CMD_PRI :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA4_t;





#define FETOP_FE_ACLACTION_DATA3                 0xf00201c8
#define FETOP_FE_ACLACTION_DATA3_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_MCGID     :  2 ; /* bits 31:30 */
    cs_uint32 ACL_ACTION_MCGID_VLD :  1 ; /* bits 29:29 */
    cs_uint32 ACL_ACTION_FWDTYPE_PRI :  4 ; /* bits 28:25 */
    cs_uint32 ACL_ACTION_FWDTYPE   :  4 ; /* bits 24:21 */
    cs_uint32 ACL_ACTION_FWDTYPE_VLD :  1 ; /* bits 20:20 */
    cs_uint32 ACL_ACTION_DSCP_PRI  :  4 ; /* bits 19:16 */
    cs_uint32 ACL_ACTION_DSCP      :  6 ; /* bits 15:10 */
    cs_uint32 ACL_ACTION_DSCP_VLD  :  1 ; /* bits 9:9 */
    cs_uint32 ACL_ACTION_DEI_2_PRI :  4 ; /* bits 8:5 */
    cs_uint32 ACL_ACTION_DEI_2     :  1 ; /* bits 4:4 */
    cs_uint32 ACL_ACTION_DEI_2_VLD :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_8021P_2_PRI :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_8021P_2_PRI :  3 ; /* bits 2:0 */
    cs_uint32 ACL_ACTION_DEI_2_VLD :  1 ; /* bits 3:3 */
    cs_uint32 ACL_ACTION_DEI_2     :  1 ; /* bits 4:4 */
    cs_uint32 ACL_ACTION_DEI_2_PRI :  4 ; /* bits 8:5 */
    cs_uint32 ACL_ACTION_DSCP_VLD  :  1 ; /* bits 9:9 */
    cs_uint32 ACL_ACTION_DSCP      :  6 ; /* bits 15:10 */
    cs_uint32 ACL_ACTION_DSCP_PRI  :  4 ; /* bits 19:16 */
    cs_uint32 ACL_ACTION_FWDTYPE_VLD :  1 ; /* bits 20:20 */
    cs_uint32 ACL_ACTION_FWDTYPE   :  4 ; /* bits 24:21 */
    cs_uint32 ACL_ACTION_FWDTYPE_PRI :  4 ; /* bits 28:25 */
    cs_uint32 ACL_ACTION_MCGID_VLD :  1 ; /* bits 29:29 */
    cs_uint32 ACL_ACTION_MCGID     :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA3_t;





#define FETOP_FE_ACLACTION_DATA2                 0xf00201cc
#define FETOP_FE_ACLACTION_DATA2_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_8021P_2_PRI :  1 ; /* bits 31:31 */
    cs_uint32 ACL_ACTION_KEEP_TS_VLD :  1 ; /* bits 30:30 */
    cs_uint32 ACL_ACTION_8021P_2   :  3 ; /* bits 29:27 */
    cs_uint32 ACL_ACTION_8021P_2_VLD :  1 ; /* bits 26:26 */
    cs_uint32 ACL_ACTION_DEI_1_PRI :  4 ; /* bits 25:22 */
    cs_uint32 ACL_ACTION_DEI_1     :  1 ; /* bits 21:21 */
    cs_uint32 ACL_ACTION_DEI_1_VLD :  1 ; /* bits 20:20 */
    cs_uint32 ACL_ACTION_8021P_1_PRI :  4 ; /* bits 19:16 */
    cs_uint32 ACL_ACTION_8021P_1   :  3 ; /* bits 15:13 */
    cs_uint32 ACL_ACTION_8021P_1_VLD :  1 ; /* bits 12:12 */
    cs_uint32 ACL_ACTION_DROP_PERMIT_PRI :  4 ; /* bits 11:8 */
    cs_uint32 ACL_ACTION_PERMIT    :  1 ; /* bits 7:7 */
    cs_uint32 ACL_ACTION_DROP      :  1 ; /* bits 6:6 */
    cs_uint32 ACL_ACTION_DROP_PERMIT_VLD :  1 ; /* bits 5:5 */
    cs_uint32 ACL_ACTION_POLICER_ID_PRI :  4 ; /* bits 4:1 */
    cs_uint32 ACL_ACTION_POLICER_ID :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_POLICER_ID :  1 ; /* bits 0:0 */
    cs_uint32 ACL_ACTION_POLICER_ID_PRI :  4 ; /* bits 4:1 */
    cs_uint32 ACL_ACTION_DROP_PERMIT_VLD :  1 ; /* bits 5:5 */
    cs_uint32 ACL_ACTION_DROP      :  1 ; /* bits 6:6 */
    cs_uint32 ACL_ACTION_PERMIT    :  1 ; /* bits 7:7 */
    cs_uint32 ACL_ACTION_DROP_PERMIT_PRI :  4 ; /* bits 11:8 */
    cs_uint32 ACL_ACTION_8021P_1_VLD :  1 ; /* bits 12:12 */
    cs_uint32 ACL_ACTION_8021P_1   :  3 ; /* bits 15:13 */
    cs_uint32 ACL_ACTION_8021P_1_PRI :  4 ; /* bits 19:16 */
    cs_uint32 ACL_ACTION_DEI_1_VLD :  1 ; /* bits 20:20 */
    cs_uint32 ACL_ACTION_DEI_1     :  1 ; /* bits 21:21 */
    cs_uint32 ACL_ACTION_DEI_1_PRI :  4 ; /* bits 25:22 */
    cs_uint32 ACL_ACTION_8021P_2_VLD :  1 ; /* bits 26:26 */
    cs_uint32 ACL_ACTION_8021P_2   :  3 ; /* bits 29:27 */
    cs_uint32 ACL_ACTION_KEEP_TS_VLD :  1 ; /* bits 30:30 */
    cs_uint32 ACL_ACTION_8021P_2_PRI :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA2_t;





#define FETOP_FE_ACLACTION_DATA1                 0xf00201d0
#define FETOP_FE_ACLACTION_DATA1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_POLICER_ID :  7 ; /* bits 31:25 */
    cs_uint32 ACL_ACTION_POLICER_ID_VLD :  1 ; /* bits 24:24 */
    cs_uint32 ACL_ACTION_PRE_MARK_PRI :  4 ; /* bits 23:20 */
    cs_uint32 ACL_ACTION_PRE_MARK  :  1 ; /* bits 19:19 */
    cs_uint32 ACL_ACTION_PRE_MARK_VLD :  1 ; /* bits 18:18 */
    cs_uint32 ACL_ACTION_WRED_COS_PRI :  4 ; /* bits 17:14 */
    cs_uint32 ACL_ACTION_WRED_COS  :  3 ; /* bits 13:11 */
    cs_uint32 ACL_ACTION_WRED_COS_VLD :  1 ; /* bits 10:10 */
    cs_uint32 ACL_ACTION_MIRROR_ID_PRI :  4 ; /* bits 9:6 */
    cs_uint32 ACL_ACTION_MIRROR_ID :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_MIRROR_ID :  6 ; /* bits 5:0 */
    cs_uint32 ACL_ACTION_MIRROR_ID_PRI :  4 ; /* bits 9:6 */
    cs_uint32 ACL_ACTION_WRED_COS_VLD :  1 ; /* bits 10:10 */
    cs_uint32 ACL_ACTION_WRED_COS  :  3 ; /* bits 13:11 */
    cs_uint32 ACL_ACTION_WRED_COS_PRI :  4 ; /* bits 17:14 */
    cs_uint32 ACL_ACTION_PRE_MARK_VLD :  1 ; /* bits 18:18 */
    cs_uint32 ACL_ACTION_PRE_MARK  :  1 ; /* bits 19:19 */
    cs_uint32 ACL_ACTION_PRE_MARK_PRI :  4 ; /* bits 23:20 */
    cs_uint32 ACL_ACTION_POLICER_ID_VLD :  1 ; /* bits 24:24 */
    cs_uint32 ACL_ACTION_POLICER_ID :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA1_t;





#define FETOP_FE_ACLACTION_DATA0                 0xf00201d4
#define FETOP_FE_ACLACTION_DATA0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACL_ACTION_MIRROR_ID :  3 ; /* bits 31:29 */
    cs_uint32 ACL_ACTION_MIRROR_VLD :  1 ; /* bits 28:28 */
    cs_uint32 ACL_ACTION_CPUCOPY_PRI :  4 ; /* bits 27:24 */
    cs_uint32 ACL_ACTION_CPUCOPY_VOQ :  6 ; /* bits 23:18 */
    cs_uint32 ACL_ACTION_CPUCOPY   :  1 ; /* bits 17:17 */
    cs_uint32 ACL_ACTION_LDPID     :  4 ; /* bits 16:13 */
    cs_uint32 ACL_ACTION_VOQ       :  8 ; /* bits 12:5 */
    cs_uint32 ACL_ACTION_VOQ_PRI   :  4 ; /* bits 4:1 */
    cs_uint32 ACL_ACTION_VOQ_VLD   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ACL_ACTION_VOQ_VLD   :  1 ; /* bits 0:0 */
    cs_uint32 ACL_ACTION_VOQ_PRI   :  4 ; /* bits 4:1 */
    cs_uint32 ACL_ACTION_VOQ       :  8 ; /* bits 12:5 */
    cs_uint32 ACL_ACTION_LDPID     :  4 ; /* bits 16:13 */
    cs_uint32 ACL_ACTION_CPUCOPY   :  1 ; /* bits 17:17 */
    cs_uint32 ACL_ACTION_CPUCOPY_VOQ :  6 ; /* bits 23:18 */
    cs_uint32 ACL_ACTION_CPUCOPY_PRI :  4 ; /* bits 27:24 */
    cs_uint32 ACL_ACTION_MIRROR_VLD :  1 ; /* bits 28:28 */
    cs_uint32 ACL_ACTION_MIRROR_ID :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_ACLACTION_DATA0_t;





#define FETOP_FE_INTERRUPT_0                     0xf00201d8
#define FETOP_FE_INTERRUPT_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 DBG_INTi_0           :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 PE_INTi_0            :  1 ; /* bits 3:3 */
    cs_uint32 HASH_INTi_0          :  1 ; /* bits 2:2 */
    cs_uint32 LPM_INTi_0           :  1 ; /* bits 1:1 */
    cs_uint32 FWD_INTi_0           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_INTi_0           :  1 ; /* bits 0:0 */
    cs_uint32 LPM_INTi_0           :  1 ; /* bits 1:1 */
    cs_uint32 HASH_INTi_0          :  1 ; /* bits 2:2 */
    cs_uint32 PE_INTi_0            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 DBG_INTi_0           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_INTERRUPT_0_t;





#define FETOP_FE_INTENABLE_0                     0xf00201dc
#define FETOP_FE_INTENABLE_0_dft                 0x80000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 DBG_INTe_0           :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 PE_INTe_0            :  1 ; /* bits 3:3 */
    cs_uint32 HASH_INTe_0          :  1 ; /* bits 2:2 */
    cs_uint32 LPM_INTe_0           :  1 ; /* bits 1:1 */
    cs_uint32 FWD_INTe_0           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_INTe_0           :  1 ; /* bits 0:0 */
    cs_uint32 LPM_INTe_0           :  1 ; /* bits 1:1 */
    cs_uint32 HASH_INTe_0          :  1 ; /* bits 2:2 */
    cs_uint32 PE_INTe_0            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 DBG_INTe_0           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_INTENABLE_0_t;





#define FETOP_FE_INTERRUPT_1                     0xf00201e0
#define FETOP_FE_INTERRUPT_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 DBG_INTi_1           :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 PE_INTi_1            :  1 ; /* bits 3:3 */
    cs_uint32 HASH_INTi_1          :  1 ; /* bits 2:2 */
    cs_uint32 LPM_INTi_1           :  1 ; /* bits 1:1 */
    cs_uint32 FWD_INTi_1           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_INTi_1           :  1 ; /* bits 0:0 */
    cs_uint32 LPM_INTi_1           :  1 ; /* bits 1:1 */
    cs_uint32 HASH_INTi_1          :  1 ; /* bits 2:2 */
    cs_uint32 PE_INTi_1            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 DBG_INTi_1           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_INTERRUPT_1_t;





#define FETOP_FE_INTENABLE_1                     0xf00201e4
#define FETOP_FE_INTENABLE_1_dft                 0x80000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 DBG_INTe_1           :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 PE_INTe_1            :  1 ; /* bits 3:3 */
    cs_uint32 HASH_INTe_1          :  1 ; /* bits 2:2 */
    cs_uint32 LPM_INTe_1           :  1 ; /* bits 1:1 */
    cs_uint32 FWD_INTe_1           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FWD_INTe_1           :  1 ; /* bits 0:0 */
    cs_uint32 LPM_INTe_1           :  1 ; /* bits 1:1 */
    cs_uint32 HASH_INTe_1          :  1 ; /* bits 2:2 */
    cs_uint32 PE_INTe_1            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 DBG_INTe_1           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_INTENABLE_1_t;





#define FETOP_FE_FWD_INTERRUPT_0                 0xf00201e8
#define FETOP_FE_FWD_INTERRUPT_0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 mem_sdb_prtchkfail_intI :  1 ; /* bits 24:24 */
    cs_uint32 mem_vlntbl_prtchkfail_intI :  1 ; /* bits 23:23 */
    cs_uint32 mem_flowvln_prtchkfail_intI :  1 ; /* bits 22:22 */
    cs_uint32 mem_voqpol_prtchkfail_intI :  1 ; /* bits 21:21 */
    cs_uint32 mem_l3tbl_prtchkfail_intI :  1 ; /* bits 20:20 */
    cs_uint32 mem_l2tbl_prtchkfail_intI :  1 ; /* bits 19:19 */
    cs_uint32 mem_qosrslt_prtchkfail_intI :  1 ; /* bits 18:18 */
    cs_uint32 mem_fwdrslt_prtchkfail_intI :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_aclaction_3_prtchkfail_intI :  1 ; /* bits 14:14 */
    cs_uint32 mem_aclaction_2_prtchkfail_intI :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_1_prtchkfail_intI :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_0_prtchkfail_intI :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclrule_3_prtchkfail_intI :  1 ; /* bits 8:8 */
    cs_uint32 mem_aclrule_2_prtchkfail_intI :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_1_prtchkfail_intI :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_0_prtchkfail_intI :  1 ; /* bits 5:5 */
    cs_uint32 mem_class_3_prtchkfail_intI :  1 ; /* bits 4:4 */
    cs_uint32 mem_class_2_prtchkfail_intI :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_1_prtchkfail_intI :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_0_prtchkfail_intI :  1 ; /* bits 1:1 */
    cs_uint32 drop_intI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_intI            :  1 ; /* bits 0:0 */
    cs_uint32 mem_class_0_prtchkfail_intI :  1 ; /* bits 1:1 */
    cs_uint32 mem_class_1_prtchkfail_intI :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_2_prtchkfail_intI :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_3_prtchkfail_intI :  1 ; /* bits 4:4 */
    cs_uint32 mem_aclrule_0_prtchkfail_intI :  1 ; /* bits 5:5 */
    cs_uint32 mem_aclrule_1_prtchkfail_intI :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_2_prtchkfail_intI :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_3_prtchkfail_intI :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclaction_0_prtchkfail_intI :  1 ; /* bits 11:11 */
    cs_uint32 mem_aclaction_1_prtchkfail_intI :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_2_prtchkfail_intI :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_3_prtchkfail_intI :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_fwdrslt_prtchkfail_intI :  1 ; /* bits 17:17 */
    cs_uint32 mem_qosrslt_prtchkfail_intI :  1 ; /* bits 18:18 */
    cs_uint32 mem_l2tbl_prtchkfail_intI :  1 ; /* bits 19:19 */
    cs_uint32 mem_l3tbl_prtchkfail_intI :  1 ; /* bits 20:20 */
    cs_uint32 mem_voqpol_prtchkfail_intI :  1 ; /* bits 21:21 */
    cs_uint32 mem_flowvln_prtchkfail_intI :  1 ; /* bits 22:22 */
    cs_uint32 mem_vlntbl_prtchkfail_intI :  1 ; /* bits 23:23 */
    cs_uint32 mem_sdb_prtchkfail_intI :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWD_INTERRUPT_0_t;





#define FETOP_FE_FWD_INTENABLE_0                 0xf00201ec
#define FETOP_FE_FWD_INTENABLE_0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 mem_sdb_prtchkfail_intE :  1 ; /* bits 24:24 */
    cs_uint32 mem_vlntbl_prtchkfail_intE :  1 ; /* bits 23:23 */
    cs_uint32 mem_flowvln_prtchkfail_intE :  1 ; /* bits 22:22 */
    cs_uint32 mem_voqpol_prtchkfail_intE :  1 ; /* bits 21:21 */
    cs_uint32 mem_l3tbl_prtchkfail_intE :  1 ; /* bits 20:20 */
    cs_uint32 mem_l2tbl_prtchkfail_intE :  1 ; /* bits 19:19 */
    cs_uint32 mem_qosrslt_prtchkfail_intE :  1 ; /* bits 18:18 */
    cs_uint32 mem_fwdrslt_prtchkfail_intE :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_aclaction_3_prtchkfail_intE :  1 ; /* bits 14:14 */
    cs_uint32 mem_aclaction_2_prtchkfail_intE :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_1_prtchkfail_intE :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_0_prtchkfail_intE :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclrule_3_prtchkfail_intE :  1 ; /* bits 8:8 */
    cs_uint32 mem_aclrule_2_prtchkfail_intE :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_1_prtchkfail_intE :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_0_prtchkfail_intE :  1 ; /* bits 5:5 */
    cs_uint32 mem_class_3_prtchkfail_intE :  1 ; /* bits 4:4 */
    cs_uint32 mem_class_2_prtchkfail_intE :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_1_prtchkfail_intE :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_0_prtchkfail_intE :  1 ; /* bits 1:1 */
    cs_uint32 drop_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_intE            :  1 ; /* bits 0:0 */
    cs_uint32 mem_class_0_prtchkfail_intE :  1 ; /* bits 1:1 */
    cs_uint32 mem_class_1_prtchkfail_intE :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_2_prtchkfail_intE :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_3_prtchkfail_intE :  1 ; /* bits 4:4 */
    cs_uint32 mem_aclrule_0_prtchkfail_intE :  1 ; /* bits 5:5 */
    cs_uint32 mem_aclrule_1_prtchkfail_intE :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_2_prtchkfail_intE :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_3_prtchkfail_intE :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclaction_0_prtchkfail_intE :  1 ; /* bits 11:11 */
    cs_uint32 mem_aclaction_1_prtchkfail_intE :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_2_prtchkfail_intE :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_3_prtchkfail_intE :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_fwdrslt_prtchkfail_intE :  1 ; /* bits 17:17 */
    cs_uint32 mem_qosrslt_prtchkfail_intE :  1 ; /* bits 18:18 */
    cs_uint32 mem_l2tbl_prtchkfail_intE :  1 ; /* bits 19:19 */
    cs_uint32 mem_l3tbl_prtchkfail_intE :  1 ; /* bits 20:20 */
    cs_uint32 mem_voqpol_prtchkfail_intE :  1 ; /* bits 21:21 */
    cs_uint32 mem_flowvln_prtchkfail_intE :  1 ; /* bits 22:22 */
    cs_uint32 mem_vlntbl_prtchkfail_intE :  1 ; /* bits 23:23 */
    cs_uint32 mem_sdb_prtchkfail_intE :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWD_INTENABLE_0_t;





#define FETOP_FE_FWD_INTERRUPT_1                 0xf00201f0
#define FETOP_FE_FWD_INTERRUPT_1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 mem_sdb_prtchkfail_intI :  1 ; /* bits 24:24 */
    cs_uint32 mem_vlntbl_prtchkfail_intI :  1 ; /* bits 23:23 */
    cs_uint32 mem_flowvln_prtchkfail_intI :  1 ; /* bits 22:22 */
    cs_uint32 mem_voqpol_prtchkfail_intI :  1 ; /* bits 21:21 */
    cs_uint32 mem_l3tbl_prtchkfail_intI :  1 ; /* bits 20:20 */
    cs_uint32 mem_l2tbl_prtchkfail_intI :  1 ; /* bits 19:19 */
    cs_uint32 mem_qosrslt_prtchkfail_intI :  1 ; /* bits 18:18 */
    cs_uint32 mem_fwdrslt_prtchkfail_intI :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_aclaction_3_prtchkfail_intI :  1 ; /* bits 14:14 */
    cs_uint32 mem_aclaction_2_prtchkfail_intI :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_1_prtchkfail_intI :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_0_prtchkfail_intI :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclrule_3_prtchkfail_intI :  1 ; /* bits 8:8 */
    cs_uint32 mem_aclrule_2_prtchkfail_intI :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_1_prtchkfail_intI :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_0_prtchkfail_intI :  1 ; /* bits 5:5 */
    cs_uint32 mem_class_3_prtchkfail_intI :  1 ; /* bits 4:4 */
    cs_uint32 mem_class_2_prtchkfail_intI :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_1_prtchkfail_intI :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_0_prtchkfail_intI :  1 ; /* bits 1:1 */
    cs_uint32 drop_intI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_intI            :  1 ; /* bits 0:0 */
    cs_uint32 mem_class_0_prtchkfail_intI :  1 ; /* bits 1:1 */
    cs_uint32 mem_class_1_prtchkfail_intI :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_2_prtchkfail_intI :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_3_prtchkfail_intI :  1 ; /* bits 4:4 */
    cs_uint32 mem_aclrule_0_prtchkfail_intI :  1 ; /* bits 5:5 */
    cs_uint32 mem_aclrule_1_prtchkfail_intI :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_2_prtchkfail_intI :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_3_prtchkfail_intI :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclaction_0_prtchkfail_intI :  1 ; /* bits 11:11 */
    cs_uint32 mem_aclaction_1_prtchkfail_intI :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_2_prtchkfail_intI :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_3_prtchkfail_intI :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_fwdrslt_prtchkfail_intI :  1 ; /* bits 17:17 */
    cs_uint32 mem_qosrslt_prtchkfail_intI :  1 ; /* bits 18:18 */
    cs_uint32 mem_l2tbl_prtchkfail_intI :  1 ; /* bits 19:19 */
    cs_uint32 mem_l3tbl_prtchkfail_intI :  1 ; /* bits 20:20 */
    cs_uint32 mem_voqpol_prtchkfail_intI :  1 ; /* bits 21:21 */
    cs_uint32 mem_flowvln_prtchkfail_intI :  1 ; /* bits 22:22 */
    cs_uint32 mem_vlntbl_prtchkfail_intI :  1 ; /* bits 23:23 */
    cs_uint32 mem_sdb_prtchkfail_intI :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWD_INTERRUPT_1_t;





#define FETOP_FE_FWD_INTENABLE_1                 0xf00201f4
#define FETOP_FE_FWD_INTENABLE_1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 mem_sdb_prtchkfail_intE :  1 ; /* bits 24:24 */
    cs_uint32 mem_vlntbl_prtchkfail_intE :  1 ; /* bits 23:23 */
    cs_uint32 mem_flowvln_prtchkfail_intE :  1 ; /* bits 22:22 */
    cs_uint32 mem_voqpol_prtchkfail_intE :  1 ; /* bits 21:21 */
    cs_uint32 mem_l3tbl_prtchkfail_intE :  1 ; /* bits 20:20 */
    cs_uint32 mem_l2tbl_prtchkfail_intE :  1 ; /* bits 19:19 */
    cs_uint32 mem_qosrslt_prtchkfail_intE :  1 ; /* bits 18:18 */
    cs_uint32 mem_fwdrslt_prtchkfail_intE :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_aclaction_3_prtchkfail_intE :  1 ; /* bits 14:14 */
    cs_uint32 mem_aclaction_2_prtchkfail_intE :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_1_prtchkfail_intE :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_0_prtchkfail_intE :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclrule_3_prtchkfail_intE :  1 ; /* bits 8:8 */
    cs_uint32 mem_aclrule_2_prtchkfail_intE :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_1_prtchkfail_intE :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_0_prtchkfail_intE :  1 ; /* bits 5:5 */
    cs_uint32 mem_class_3_prtchkfail_intE :  1 ; /* bits 4:4 */
    cs_uint32 mem_class_2_prtchkfail_intE :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_1_prtchkfail_intE :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_0_prtchkfail_intE :  1 ; /* bits 1:1 */
    cs_uint32 drop_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_intE            :  1 ; /* bits 0:0 */
    cs_uint32 mem_class_0_prtchkfail_intE :  1 ; /* bits 1:1 */
    cs_uint32 mem_class_1_prtchkfail_intE :  1 ; /* bits 2:2 */
    cs_uint32 mem_class_2_prtchkfail_intE :  1 ; /* bits 3:3 */
    cs_uint32 mem_class_3_prtchkfail_intE :  1 ; /* bits 4:4 */
    cs_uint32 mem_aclrule_0_prtchkfail_intE :  1 ; /* bits 5:5 */
    cs_uint32 mem_aclrule_1_prtchkfail_intE :  1 ; /* bits 6:6 */
    cs_uint32 mem_aclrule_2_prtchkfail_intE :  1 ; /* bits 7:7 */
    cs_uint32 mem_aclrule_3_prtchkfail_intE :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_aclaction_0_prtchkfail_intE :  1 ; /* bits 11:11 */
    cs_uint32 mem_aclaction_1_prtchkfail_intE :  1 ; /* bits 12:12 */
    cs_uint32 mem_aclaction_2_prtchkfail_intE :  1 ; /* bits 13:13 */
    cs_uint32 mem_aclaction_3_prtchkfail_intE :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mem_fwdrslt_prtchkfail_intE :  1 ; /* bits 17:17 */
    cs_uint32 mem_qosrslt_prtchkfail_intE :  1 ; /* bits 18:18 */
    cs_uint32 mem_l2tbl_prtchkfail_intE :  1 ; /* bits 19:19 */
    cs_uint32 mem_l3tbl_prtchkfail_intE :  1 ; /* bits 20:20 */
    cs_uint32 mem_voqpol_prtchkfail_intE :  1 ; /* bits 21:21 */
    cs_uint32 mem_flowvln_prtchkfail_intE :  1 ; /* bits 22:22 */
    cs_uint32 mem_vlntbl_prtchkfail_intE :  1 ; /* bits 23:23 */
    cs_uint32 mem_sdb_prtchkfail_intE :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_FWD_INTENABLE_1_t;





#define FETOP_FE_DBG_INTERRUPT_0                 0xf00201f8
#define FETOP_FE_DBG_INTERRUPT_0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_class_hit_intI   :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tm_buf_ovf_intI      :  1 ; /* bits 12:12 */
    cs_uint32 inbuf_ovf_intI       :  1 ; /* bits 11:11 */
    cs_uint32 qos_rslt_buf_ovf_intI :  1 ; /* bits 10:10 */
    cs_uint32 qos_rslt_buf_int_ovf_intI :  1 ; /* bits 9:9 */
    cs_uint32 fwd_rslt_buf_ovf_intI :  1 ; /* bits 8:8 */
    cs_uint32 fwd_rslt_buf_int_ovf_intI :  1 ; /* bits 7:7 */
    cs_uint32 lpm_rslt_buf_ovf_intI :  1 ; /* bits 6:6 */
    cs_uint32 lpm_rslt_buf_int_ovf_intI :  1 ; /* bits 5:5 */
    cs_uint32 hlkp_rslt_buf_ovf_intI :  1 ; /* bits 4:4 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intI :  1 ; /* bits 3:3 */
    cs_uint32 class_rslt_buf_ovf_intI :  1 ; /* bits 2:2 */
    cs_uint32 class_rslt_buf_int_ovf_intI :  1 ; /* bits 1:1 */
    cs_uint32 hdr_d_buf_ovf_intI   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hdr_d_buf_ovf_intI   :  1 ; /* bits 0:0 */
    cs_uint32 class_rslt_buf_int_ovf_intI :  1 ; /* bits 1:1 */
    cs_uint32 class_rslt_buf_ovf_intI :  1 ; /* bits 2:2 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intI :  1 ; /* bits 3:3 */
    cs_uint32 hlkp_rslt_buf_ovf_intI :  1 ; /* bits 4:4 */
    cs_uint32 lpm_rslt_buf_int_ovf_intI :  1 ; /* bits 5:5 */
    cs_uint32 lpm_rslt_buf_ovf_intI :  1 ; /* bits 6:6 */
    cs_uint32 fwd_rslt_buf_int_ovf_intI :  1 ; /* bits 7:7 */
    cs_uint32 fwd_rslt_buf_ovf_intI :  1 ; /* bits 8:8 */
    cs_uint32 qos_rslt_buf_int_ovf_intI :  1 ; /* bits 9:9 */
    cs_uint32 qos_rslt_buf_ovf_intI :  1 ; /* bits 10:10 */
    cs_uint32 inbuf_ovf_intI       :  1 ; /* bits 11:11 */
    cs_uint32 tm_buf_ovf_intI      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 dbg_class_hit_intI   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_INTERRUPT_0_t;





#define FETOP_FE_DBG_INTENABLE_0                 0xf00201fc
#define FETOP_FE_DBG_INTENABLE_0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_class_hit_intE   :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tm_buf_ovf_intE      :  1 ; /* bits 12:12 */
    cs_uint32 inbuf_ovf_intE       :  1 ; /* bits 11:11 */
    cs_uint32 qos_rslt_buf_ovf_intE :  1 ; /* bits 10:10 */
    cs_uint32 qos_rslt_buf_int_ovf_intE :  1 ; /* bits 9:9 */
    cs_uint32 fwd_rslt_buf_ovf_intE :  1 ; /* bits 8:8 */
    cs_uint32 fwd_rslt_buf_int_ovf_intE :  1 ; /* bits 7:7 */
    cs_uint32 lpm_rslt_buf_ovf_intE :  1 ; /* bits 6:6 */
    cs_uint32 lpm_rslt_buf_int_ovf_intE :  1 ; /* bits 5:5 */
    cs_uint32 hlkp_rslt_buf_ovf_intE :  1 ; /* bits 4:4 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intE :  1 ; /* bits 3:3 */
    cs_uint32 class_rslt_buf_ovf_intE :  1 ; /* bits 2:2 */
    cs_uint32 class_rslt_buf_int_ovf_intE :  1 ; /* bits 1:1 */
    cs_uint32 hdr_d_buf_ovf_intE   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hdr_d_buf_ovf_intE   :  1 ; /* bits 0:0 */
    cs_uint32 class_rslt_buf_int_ovf_intE :  1 ; /* bits 1:1 */
    cs_uint32 class_rslt_buf_ovf_intE :  1 ; /* bits 2:2 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intE :  1 ; /* bits 3:3 */
    cs_uint32 hlkp_rslt_buf_ovf_intE :  1 ; /* bits 4:4 */
    cs_uint32 lpm_rslt_buf_int_ovf_intE :  1 ; /* bits 5:5 */
    cs_uint32 lpm_rslt_buf_ovf_intE :  1 ; /* bits 6:6 */
    cs_uint32 fwd_rslt_buf_int_ovf_intE :  1 ; /* bits 7:7 */
    cs_uint32 fwd_rslt_buf_ovf_intE :  1 ; /* bits 8:8 */
    cs_uint32 qos_rslt_buf_int_ovf_intE :  1 ; /* bits 9:9 */
    cs_uint32 qos_rslt_buf_ovf_intE :  1 ; /* bits 10:10 */
    cs_uint32 inbuf_ovf_intE       :  1 ; /* bits 11:11 */
    cs_uint32 tm_buf_ovf_intE      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 dbg_class_hit_intE   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_INTENABLE_0_t;





#define FETOP_FE_DBG_INTERRUPT_1                 0xf0020200
#define FETOP_FE_DBG_INTERRUPT_1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_class_hit_intI   :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tm_buf_ovf_intI      :  1 ; /* bits 12:12 */
    cs_uint32 inbuf_ovf_intI       :  1 ; /* bits 11:11 */
    cs_uint32 qos_rslt_buf_ovf_intI :  1 ; /* bits 10:10 */
    cs_uint32 qos_rslt_buf_int_ovf_intI :  1 ; /* bits 9:9 */
    cs_uint32 fwd_rslt_buf_ovf_intI :  1 ; /* bits 8:8 */
    cs_uint32 fwd_rslt_buf_int_ovf_intI :  1 ; /* bits 7:7 */
    cs_uint32 lpm_rslt_buf_ovf_intI :  1 ; /* bits 6:6 */
    cs_uint32 lpm_rslt_buf_int_ovf_intI :  1 ; /* bits 5:5 */
    cs_uint32 hlkp_rslt_buf_ovf_intI :  1 ; /* bits 4:4 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intI :  1 ; /* bits 3:3 */
    cs_uint32 class_rslt_buf_ovf_intI :  1 ; /* bits 2:2 */
    cs_uint32 class_rslt_buf_int_ovf_intI :  1 ; /* bits 1:1 */
    cs_uint32 hdr_d_buf_ovf_intI   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hdr_d_buf_ovf_intI   :  1 ; /* bits 0:0 */
    cs_uint32 class_rslt_buf_int_ovf_intI :  1 ; /* bits 1:1 */
    cs_uint32 class_rslt_buf_ovf_intI :  1 ; /* bits 2:2 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intI :  1 ; /* bits 3:3 */
    cs_uint32 hlkp_rslt_buf_ovf_intI :  1 ; /* bits 4:4 */
    cs_uint32 lpm_rslt_buf_int_ovf_intI :  1 ; /* bits 5:5 */
    cs_uint32 lpm_rslt_buf_ovf_intI :  1 ; /* bits 6:6 */
    cs_uint32 fwd_rslt_buf_int_ovf_intI :  1 ; /* bits 7:7 */
    cs_uint32 fwd_rslt_buf_ovf_intI :  1 ; /* bits 8:8 */
    cs_uint32 qos_rslt_buf_int_ovf_intI :  1 ; /* bits 9:9 */
    cs_uint32 qos_rslt_buf_ovf_intI :  1 ; /* bits 10:10 */
    cs_uint32 inbuf_ovf_intI       :  1 ; /* bits 11:11 */
    cs_uint32 tm_buf_ovf_intI      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 dbg_class_hit_intI   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_INTERRUPT_1_t;





#define FETOP_FE_DBG_INTENABLE_1                 0xf0020204
#define FETOP_FE_DBG_INTENABLE_1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_class_hit_intE   :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tm_buf_ovf_intE      :  1 ; /* bits 12:12 */
    cs_uint32 inbuf_ovf_intE       :  1 ; /* bits 11:11 */
    cs_uint32 qos_rslt_buf_ovf_intE :  1 ; /* bits 10:10 */
    cs_uint32 qos_rslt_buf_int_ovf_intE :  1 ; /* bits 9:9 */
    cs_uint32 fwd_rslt_buf_ovf_intE :  1 ; /* bits 8:8 */
    cs_uint32 fwd_rslt_buf_int_ovf_intE :  1 ; /* bits 7:7 */
    cs_uint32 lpm_rslt_buf_ovf_intE :  1 ; /* bits 6:6 */
    cs_uint32 lpm_rslt_buf_int_ovf_intE :  1 ; /* bits 5:5 */
    cs_uint32 hlkp_rslt_buf_ovf_intE :  1 ; /* bits 4:4 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intE :  1 ; /* bits 3:3 */
    cs_uint32 class_rslt_buf_ovf_intE :  1 ; /* bits 2:2 */
    cs_uint32 class_rslt_buf_int_ovf_intE :  1 ; /* bits 1:1 */
    cs_uint32 hdr_d_buf_ovf_intE   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hdr_d_buf_ovf_intE   :  1 ; /* bits 0:0 */
    cs_uint32 class_rslt_buf_int_ovf_intE :  1 ; /* bits 1:1 */
    cs_uint32 class_rslt_buf_ovf_intE :  1 ; /* bits 2:2 */
    cs_uint32 hlkp_rslt_buf_int_ovf_intE :  1 ; /* bits 3:3 */
    cs_uint32 hlkp_rslt_buf_ovf_intE :  1 ; /* bits 4:4 */
    cs_uint32 lpm_rslt_buf_int_ovf_intE :  1 ; /* bits 5:5 */
    cs_uint32 lpm_rslt_buf_ovf_intE :  1 ; /* bits 6:6 */
    cs_uint32 fwd_rslt_buf_int_ovf_intE :  1 ; /* bits 7:7 */
    cs_uint32 fwd_rslt_buf_ovf_intE :  1 ; /* bits 8:8 */
    cs_uint32 qos_rslt_buf_int_ovf_intE :  1 ; /* bits 9:9 */
    cs_uint32 qos_rslt_buf_ovf_intE :  1 ; /* bits 10:10 */
    cs_uint32 inbuf_ovf_intE       :  1 ; /* bits 11:11 */
    cs_uint32 tm_buf_ovf_intE      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 dbg_class_hit_intE   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_INTENABLE_1_t;





#define FETOP_FE_PE_INTERRUPT_0                  0xf0020208
#define FETOP_FE_PE_INTERRUPT_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 pe_ipv6_udpcsum_0_detI :  1 ; /* bits 6:6 */
    cs_uint32 pe_runt_pkt_detI     :  1 ; /* bits 5:5 */
    cs_uint32 pe_hdra_pkt_drop_msb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pe_fe_pkt_drop_msb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pe_fe_pkt_cnt_msb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pe_cmd_fifo_overflow_intI :  1 ; /* bits 1:1 */
    cs_uint32 pe_data_fifo_overflow_intI :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pe_data_fifo_overflow_intI :  1 ; /* bits 0:0 */
    cs_uint32 pe_cmd_fifo_overflow_intI :  1 ; /* bits 1:1 */
    cs_uint32 pe_fe_pkt_cnt_msb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pe_fe_pkt_drop_msb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pe_hdra_pkt_drop_msb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pe_runt_pkt_detI     :  1 ; /* bits 5:5 */
    cs_uint32 pe_ipv6_udpcsum_0_detI :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_INTERRUPT_0_t;





#define FETOP_FE_PE_INTENABLE_0                  0xf002020c
#define FETOP_FE_PE_INTENABLE_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 pe_ipv6_udpcsum_0_detE :  1 ; /* bits 6:6 */
    cs_uint32 pe_runt_pkt_detE     :  1 ; /* bits 5:5 */
    cs_uint32 pe_hdra_pkt_drop_msb_setE :  1 ; /* bits 4:4 */
    cs_uint32 pe_fe_pkt_drop_msb_setE :  1 ; /* bits 3:3 */
    cs_uint32 pe_fe_pkt_cnt_msb_setE :  1 ; /* bits 2:2 */
    cs_uint32 pe_cmd_fifo_overflow_intE :  1 ; /* bits 1:1 */
    cs_uint32 pe_data_fifo_overflow_intE :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pe_data_fifo_overflow_intE :  1 ; /* bits 0:0 */
    cs_uint32 pe_cmd_fifo_overflow_intE :  1 ; /* bits 1:1 */
    cs_uint32 pe_fe_pkt_cnt_msb_setE :  1 ; /* bits 2:2 */
    cs_uint32 pe_fe_pkt_drop_msb_setE :  1 ; /* bits 3:3 */
    cs_uint32 pe_hdra_pkt_drop_msb_setE :  1 ; /* bits 4:4 */
    cs_uint32 pe_runt_pkt_detE     :  1 ; /* bits 5:5 */
    cs_uint32 pe_ipv6_udpcsum_0_detE :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_INTENABLE_0_t;





#define FETOP_FE_PE_INTERRUPT_1                  0xf0020210
#define FETOP_FE_PE_INTERRUPT_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 pe_ipv6_udpcsum_0_detI :  1 ; /* bits 6:6 */
    cs_uint32 pe_runt_pkt_detI     :  1 ; /* bits 5:5 */
    cs_uint32 pe_hdra_pkt_drop_msb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pe_fe_pkt_drop_msb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pe_fe_pkt_cnt_msb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pe_cmd_fifo_overflow_intI :  1 ; /* bits 1:1 */
    cs_uint32 pe_data_fifo_overflow_intI :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pe_data_fifo_overflow_intI :  1 ; /* bits 0:0 */
    cs_uint32 pe_cmd_fifo_overflow_intI :  1 ; /* bits 1:1 */
    cs_uint32 pe_fe_pkt_cnt_msb_setI :  1 ; /* bits 2:2 */
    cs_uint32 pe_fe_pkt_drop_msb_setI :  1 ; /* bits 3:3 */
    cs_uint32 pe_hdra_pkt_drop_msb_setI :  1 ; /* bits 4:4 */
    cs_uint32 pe_runt_pkt_detI     :  1 ; /* bits 5:5 */
    cs_uint32 pe_ipv6_udpcsum_0_detI :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_INTERRUPT_1_t;





#define FETOP_FE_PE_INTENABLE_1                  0xf0020214
#define FETOP_FE_PE_INTENABLE_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 pe_ipv6_udpcsum_0_detE :  1 ; /* bits 6:6 */
    cs_uint32 pe_runt_pkt_detE     :  1 ; /* bits 5:5 */
    cs_uint32 pe_hdra_pkt_drop_msb_setE :  1 ; /* bits 4:4 */
    cs_uint32 pe_fe_pkt_drop_msb_setE :  1 ; /* bits 3:3 */
    cs_uint32 pe_fe_pkt_cnt_msb_setE :  1 ; /* bits 2:2 */
    cs_uint32 pe_cmd_fifo_overflow_intE :  1 ; /* bits 1:1 */
    cs_uint32 pe_data_fifo_overflow_intE :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pe_data_fifo_overflow_intE :  1 ; /* bits 0:0 */
    cs_uint32 pe_cmd_fifo_overflow_intE :  1 ; /* bits 1:1 */
    cs_uint32 pe_fe_pkt_cnt_msb_setE :  1 ; /* bits 2:2 */
    cs_uint32 pe_fe_pkt_drop_msb_setE :  1 ; /* bits 3:3 */
    cs_uint32 pe_hdra_pkt_drop_msb_setE :  1 ; /* bits 4:4 */
    cs_uint32 pe_runt_pkt_detE     :  1 ; /* bits 5:5 */
    cs_uint32 pe_ipv6_udpcsum_0_detE :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_INTENABLE_1_t;





#define FETOP_FE_DBG_FE_PP                       0xf0020218
#define FETOP_FE_DBG_FE_PP_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 state                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 state                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_FE_PP_t;





#define FETOP_FE_DBG_FE_PP_CNTR                  0xf002021c
#define FETOP_FE_DBG_FE_PP_CNTR_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 cntr                 : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cntr                 : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_FE_PP_CNTR_t;





#define FETOP_FE_PE_CONFIG                       0xf0020220
#define FETOP_FE_PE_CONFIG_dft                   0x000010d8




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bypass_pr            :  1 ; /* bits 31:31 */
    cs_uint32 bypass_pe            :  1 ; /* bits 30:30 */
    cs_uint32 dscp_dbg             :  1 ; /* bits 29:29 */
    cs_uint32 vlan_dbg             :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pecnt_op_code        :  2 ; /* bits 26:25 */
    cs_uint32 pecnt_debug_mode     :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 pe_keep_ts_byp       :  1 ; /* bits 21:21 */
    cs_uint32 pe_crc_ins_dis       :  1 ; /* bits 20:20 */
    cs_uint32 pe_stuff_dis         :  1 ; /* bits 19:19 */
    cs_uint32 pe_fifo_reset        :  1 ; /* bits 18:18 */
    cs_uint32 dis_mirror_drop      :  1 ; /* bits 17:17 */
    cs_uint32 stomp_crc            :  1 ; /* bits 16:16 */
    cs_uint32 ni_rdy_ff_thld       :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 cmdff_rdy_thld       :  5 ; /* bits 12:8 */
    cs_uint32 dataff_rdy_thld      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataff_rdy_thld      :  8 ; /* bits 7:0 */
    cs_uint32 cmdff_rdy_thld       :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ni_rdy_ff_thld       :  1 ; /* bits 15:15 */
    cs_uint32 stomp_crc            :  1 ; /* bits 16:16 */
    cs_uint32 dis_mirror_drop      :  1 ; /* bits 17:17 */
    cs_uint32 pe_fifo_reset        :  1 ; /* bits 18:18 */
    cs_uint32 pe_stuff_dis         :  1 ; /* bits 19:19 */
    cs_uint32 pe_crc_ins_dis       :  1 ; /* bits 20:20 */
    cs_uint32 pe_keep_ts_byp       :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 pecnt_debug_mode     :  1 ; /* bits 24:24 */
    cs_uint32 pecnt_op_code        :  2 ; /* bits 26:25 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 vlan_dbg             :  1 ; /* bits 28:28 */
    cs_uint32 dscp_dbg             :  1 ; /* bits 29:29 */
    cs_uint32 bypass_pe            :  1 ; /* bits 30:30 */
    cs_uint32 bypass_pr            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_CONFIG_t;





#define FETOP_FE_PE_CONFIG_1                     0xf0020224
#define FETOP_FE_PE_CONFIG_1_dft                 0x00006000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 pe_cfg_spare         :  4 ; /* bits 27:24 */
    cs_uint32 qm_pkt_cnt_voq       :  8 ; /* bits 23:16 */
    cs_uint32 parse_limit          :  5 ; /* bits 15:11 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ins_cpuhdr_encap     :  1 ; /* bits 9:9 */
    cs_uint32 ins_cpuhdr_crypto    :  1 ; /* bits 8:8 */
    cs_uint32 ins_cpuhdr_voq       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ins_cpuhdr_voq       :  8 ; /* bits 7:0 */
    cs_uint32 ins_cpuhdr_crypto    :  1 ; /* bits 8:8 */
    cs_uint32 ins_cpuhdr_encap     :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 parse_limit          :  5 ; /* bits 15:11 */
    cs_uint32 qm_pkt_cnt_voq       :  8 ; /* bits 23:16 */
    cs_uint32 pe_cfg_spare         :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_CONFIG_1_t;





#define FETOP_FE_PE_PPPOE_CFG_0                  0xf0020228
#define FETOP_FE_PE_PPPOE_CFG_0_dft              0x88640011




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_pppoe_ethtype  : 16 ; /* bits 31:16 */
    cs_uint32 encap_code           :  8 ; /* bits 15:8 */
    cs_uint32 encap_ver            :  4 ; /* bits 7:4 */
    cs_uint32 encap_type           :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_type           :  4 ; /* bits 3:0 */
    cs_uint32 encap_ver            :  4 ; /* bits 7:4 */
    cs_uint32 encap_code           :  8 ; /* bits 15:8 */
    cs_uint32 encap_pppoe_ethtype  : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_PPPOE_CFG_0_t;





#define FETOP_FE_PE_PPPOE_CFG_1                  0xf002022c
#define FETOP_FE_PE_PPPOE_CFG_1_dft              0x00210800




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv4_ppp_type        : 16 ; /* bits 31:16 */
    cs_uint32 ipv4_ethtype         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_ethtype         : 16 ; /* bits 15:0 */
    cs_uint32 ipv4_ppp_type        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_PPPOE_CFG_1_t;





#define FETOP_FE_PE_PPPOE_CFG_2                  0xf0020230
#define FETOP_FE_PE_PPPOE_CFG_2_dft              0x005786dd




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv6_ppp_type        : 16 ; /* bits 31:16 */
    cs_uint32 ipv6_ethtype         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_ethtype         : 16 ; /* bits 15:0 */
    cs_uint32 ipv6_ppp_type        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_PPPOE_CFG_2_t;





#define FETOP_FE_PE_PPPOE_CFG_3                  0xf0020234
#define FETOP_FE_PE_PPPOE_CFG_3_dft              0x00378000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 def_ppp_type         : 16 ; /* bits 31:16 */
    cs_uint32 def_ethtype          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 def_ethtype          : 16 ; /* bits 15:0 */
    cs_uint32 def_ppp_type         : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_PPPOE_CFG_3_t;





#define FETOP_FE_PROC_DROP_STS                   0xf0020238
#define FETOP_FE_PROC_DROP_STS_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 vec                  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 vec                  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PROC_DROP_STS_t;





#define FETOP_FE_PE_VOQ_DRP_ACCESS               0xf002023c
#define FETOP_FE_PE_VOQ_DRP_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 address              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_VOQ_DRP_ACCESS_t;





#define FETOP_FE_PE_VOQ_DRP_DATA                 0xf0020240
#define FETOP_FE_PE_VOQ_DRP_DATA_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 drop_cfg             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_cfg             :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_VOQ_DRP_DATA_t;





#define FETOP_FE_PE_PKT_CNT                      0xf0020244
#define FETOP_FE_PE_PKT_CNT_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 fe_pkt_cnt           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 fe_pkt_cnt           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_PKT_CNT_t;





#define FETOP_FE_PE_HDRA_PKT_DROPCNT             0xf0020248
#define FETOP_FE_PE_HDRA_PKT_DROPCNT_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 hdra_pkt_drop        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hdra_pkt_drop        : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_HDRA_PKT_DROPCNT_t;





#define FETOP_FE_PE_FE_PKT_DROPCNT               0xf002024c
#define FETOP_FE_PE_FE_PKT_DROPCNT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 fe_pkt_drop          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 fe_pkt_drop          : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_FE_PKT_DROPCNT_t;





#define FETOP_FE_PE_DEBUG                        0xf0020250
#define FETOP_FE_PE_DEBUG_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pe_cf_op_ccnt        :  8 ; /* bits 31:24 */
    cs_uint32 pe_cf_ip_ccnt        :  8 ; /* bits 23:16 */
    cs_uint32 pe_df_op_scnt        :  8 ; /* bits 15:8 */
    cs_uint32 pe_df_ip_scnt        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pe_df_ip_scnt        :  8 ; /* bits 7:0 */
    cs_uint32 pe_df_op_scnt        :  8 ; /* bits 15:8 */
    cs_uint32 pe_cf_ip_ccnt        :  8 ; /* bits 23:16 */
    cs_uint32 pe_cf_op_ccnt        :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PE_DEBUG_t;





#define FETOP_FE_DBG_CLASS_MON_CMD               0xf0020254
#define FETOP_FE_DBG_CLASS_MON_CMD_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 trigger              :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 bank                 :  2 ; /* bits 5:4 */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
    cs_uint32 bank                 :  2 ; /* bits 5:4 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 trigger              :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_CLASS_MON_CMD_t;





#define FETOP_FE_DBG_CLASS_MON_STS               0xf0020258
#define FETOP_FE_DBG_CLASS_MON_STS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 hit                  :  1 ; /* bits 31:31 */
    cs_uint32 match                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 svidx                :  6 ; /* bits 11:6 */
    cs_uint32 bank                 :  2 ; /* bits 5:4 */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
    cs_uint32 bank                 :  2 ; /* bits 5:4 */
    cs_uint32 svidx                :  6 ; /* bits 11:6 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 match                :  1 ; /* bits 30:30 */
    cs_uint32 hit                  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_DBG_CLASS_MON_STS_t;





#define FETOP_FE_MEM_CLASS_PRTCHKFAIL_STS        0xf002025c
#define FETOP_FE_MEM_CLASS_PRTCHKFAIL_STS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_CLASS_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_ACLRULE_PRTCHKFAIL_STS      0xf0020260
#define FETOP_FE_MEM_ACLRULE_PRTCHKFAIL_STS_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_ACLRULE_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_ACLACTION_PRTCHKFAIL_STS    0xf0020264
#define FETOP_FE_MEM_ACLACTION_PRTCHKFAIL_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bank_0               :  4 ; /* bits 3:0 */
    cs_uint32 bank_1               :  4 ; /* bits 7:4 */
    cs_uint32 bank_2               :  4 ; /* bits 11:8 */
    cs_uint32 bank_3               :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_ACLACTION_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_FWDRSLT_PRTCHKFAIL_STS      0xf0020268
#define FETOP_FE_MEM_FWDRSLT_PRTCHKFAIL_STS_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 addr                 : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_FWDRSLT_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_QOSRSLT_PRTCHKFAIL_STS      0xf002026c
#define FETOP_FE_MEM_QOSRSLT_PRTCHKFAIL_STS_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_QOSRSLT_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_L2TBL_PRTCHKFAIL_STS        0xf0020270
#define FETOP_FE_MEM_L2TBL_PRTCHKFAIL_STS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_L2TBL_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_L3TBL_PRTCHKFAIL_STS        0xf0020274
#define FETOP_FE_MEM_L3TBL_PRTCHKFAIL_STS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 addr                 : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_L3TBL_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_FLOWVLN_PRTCHKFAIL_STS      0xf0020278
#define FETOP_FE_MEM_FLOWVLN_PRTCHKFAIL_STS_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_FLOWVLN_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_VOQPOL_PRTCHKFAIL_STS       0xf002027c
#define FETOP_FE_MEM_VOQPOL_PRTCHKFAIL_STS_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_VOQPOL_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_VLNTBL_PRTCHKFAIL_STS       0xf0020280
#define FETOP_FE_MEM_VLNTBL_PRTCHKFAIL_STS_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_VLNTBL_PRTCHKFAIL_STS_t;





#define FETOP_FE_MEM_SDB_PRTCHKFAIL_STS          0xf0020284
#define FETOP_FE_MEM_SDB_PRTCHKFAIL_STS_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 addr                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_MEM_SDB_PRTCHKFAIL_STS_t;





#define FETOP_FE_PKTLEN_RNGS_ACCESS              0xf0020288
#define FETOP_FE_PKTLEN_RNGS_ACCESS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 ADDR                 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PKTLEN_RNGS_ACCESS_t;





#define FETOP_FE_PKTLEN_RNGS_DATA                0xf002028c
#define FETOP_FE_PKTLEN_RNGS_DATA_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 valid                :  1 ; /* bits 28:28 */
    cs_uint32 pktlen_high          : 14 ; /* bits 27:14 */
    cs_uint32 pktlen_low           : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pktlen_low           : 14 ; /* bits 13:0 */
    cs_uint32 pktlen_high          : 14 ; /* bits 27:14 */
    cs_uint32 valid                :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_FE_PKTLEN_RNGS_DATA_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* FE */

typedef struct {
  FETOP_FE_SCRATCH_t                       SCRATCH;                       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  FETOP_FE_AN_BNG_MAC_ACCESS_t             AN_BNG_MAC_ACCESS;             /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  FETOP_FE_AN_BNG_MAC_DATA1_t              AN_BNG_MAC_DATA1;              /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  FETOP_FE_AN_BNG_MAC_DATA0_t              AN_BNG_MAC_DATA0;              /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  FETOP_FE_L4_PORT_RNGS_ACCESS_t           L4_PORT_RNGS_ACCESS;           /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  FETOP_FE_L4_PORT_RNGS_DATA1_t            L4_PORT_RNGS_DATA1;            /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  FETOP_FE_L4_PORT_RNGS_DATA0_t            L4_PORT_RNGS_DATA0;            /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  FETOP_FE_ETYPE_ACCESS_t                  ETYPE_ACCESS;                  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  FETOP_FE_ETYPE_DATA_t                    ETYPE_DATA;                    /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  FETOP_FE_LLC_HDR_ACCESS_t                LLC_HDR_ACCESS;                /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  FETOP_FE_LLC_HDR_DATA_t                  LLC_HDR_DATA;                  /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  FETOP_FE_LLC_OTHER_A_t                   LLC_OTHER_A;                   /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  FETOP_FE_LLC_OTHER_B_t                   LLC_OTHER_B;                   /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  FETOP_FE_CFG_TPID1_t                     CFG_TPID1;                     /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  FETOP_FE_CFG_TPID0_t                     CFG_TPID0;                     /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  FETOP_FE_PRSR_CFG_0_t                    PRSR_CFG_0;                    /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  FETOP_FE_CFG_GLBL_t                      CFG_GLBL;                      /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  FETOP_FE_STS_GLBL_t                      STS_GLBL;                      /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  FETOP_FE_PROC_CFG_0_t                    PROC_CFG_0;                    /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  FETOP_FE_LPB_ACCESS_t                    LPB_ACCESS;                    /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  FETOP_FE_LPB_DATA_t                      LPB_DATA;                      /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  FETOP_FE_CLASS_ACCESS_t                  CLASS_ACCESS;                  /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  FETOP_FE_CLASS_DATA19_t                  CLASS_DATA19;                  /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  FETOP_FE_CLASS_DATA18_t                  CLASS_DATA18;                  /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  FETOP_FE_CLASS_DATA17_t                  CLASS_DATA17;                  /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  FETOP_FE_CLASS_DATA16_t                  CLASS_DATA16;                  /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  FETOP_FE_CLASS_DATA15_t                  CLASS_DATA15;                  /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  FETOP_FE_CLASS_DATA14_t                  CLASS_DATA14;                  /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  FETOP_FE_CLASS_DATA13_t                  CLASS_DATA13;                  /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  FETOP_FE_CLASS_DATA12_t                  CLASS_DATA12;                  /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  FETOP_FE_CLASS_DATA11_t                  CLASS_DATA11;                  /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  FETOP_FE_CLASS_DATA10_t                  CLASS_DATA10;                  /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  FETOP_FE_CLASS_DATA9_t                   CLASS_DATA9;                   /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  FETOP_FE_CLASS_DATA8_t                   CLASS_DATA8;                   /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  FETOP_FE_CLASS_DATA7_t                   CLASS_DATA7;                   /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  FETOP_FE_CLASS_DATA6_t                   CLASS_DATA6;                   /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  FETOP_FE_CLASS_DATA5_t                   CLASS_DATA5;                   /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  FETOP_FE_CLASS_DATA4_t                   CLASS_DATA4;                   /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  FETOP_FE_CLASS_DATA3_t                   CLASS_DATA3;                   /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  FETOP_FE_CLASS_DATA2_t                   CLASS_DATA2;                   /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  FETOP_FE_CLASS_DATA1_t                   CLASS_DATA1;                   /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  FETOP_FE_CLASS_DATA0_t                   CLASS_DATA0;                   /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  FETOP_FE_SDB_ACCESS_t                    SDB_ACCESS;                    /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  FETOP_FE_SDB_DATA6_t                     SDB_DATA6;                     /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  FETOP_FE_SDB_DATA5_t                     SDB_DATA5;                     /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  FETOP_FE_SDB_DATA4_t                     SDB_DATA4;                     /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  FETOP_FE_SDB_DATA3_t                     SDB_DATA3;                     /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  FETOP_FE_SDB_DATA2_t                     SDB_DATA2;                     /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  FETOP_FE_SDB_DATA1_t                     SDB_DATA1;                     /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  FETOP_FE_SDB_DATA0_t                     SDB_DATA0;                     /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  FETOP_FE_VLN_ACCESS_t                    VLN_ACCESS;                    /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  FETOP_FE_VLN_DATA1_t                     VLN_DATA1;                     /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  FETOP_FE_VLN_DATA0_t                     VLN_DATA0;                     /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  FETOP_FE_FWDRSLT_ACCESS_t                FWDRSLT_ACCESS;                /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  FETOP_FE_FWDRSLT_DATA3_t                 FWDRSLT_DATA3;                 /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  FETOP_FE_FWDRSLT_DATA2_t                 FWDRSLT_DATA2;                 /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  FETOP_FE_FWDRSLT_DATA1_t                 FWDRSLT_DATA1;                 /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  FETOP_FE_FWDRSLT_DATA0_t                 FWDRSLT_DATA0;                 /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  FETOP_FE_QOSRSLT_ACCESS_t                QOSRSLT_ACCESS;                /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  FETOP_FE_QOSRSLT_DATA1_t                 QOSRSLT_DATA1;                 /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  FETOP_FE_QOSRSLT_DATA0_t                 QOSRSLT_DATA0;                 /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  FETOP_FE_VOQPOL_ACCESS_t                 VOQPOL_ACCESS;                 /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  FETOP_FE_VOQPOL_DATA1_t                  VOQPOL_DATA1;                  /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  FETOP_FE_VOQPOL_DATA0_t                  VOQPOL_DATA0;                  /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  FETOP_FE_FVLAN_ACCESS_t                  FVLAN_ACCESS;                  /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  FETOP_FE_FVLAN_DATA1_t                   FVLAN_DATA1;                   /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  FETOP_FE_FVLAN_DATA0_t                   FVLAN_DATA0;                   /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  FETOP_FE_L3TBL_ACCESS_t                  L3TBL_ACCESS;                  /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  FETOP_FE_L3TBL_DATA4_t                   L3TBL_DATA4;                   /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  FETOP_FE_L3TBL_DATA3_t                   L3TBL_DATA3;                   /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  FETOP_FE_L3TBL_DATA2_t                   L3TBL_DATA2;                   /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  FETOP_FE_L3TBL_DATA1_t                   L3TBL_DATA1;                   /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  FETOP_FE_L3TBL_DATA0_t                   L3TBL_DATA0;                   /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  FETOP_FE_L2TBL_ACCESS_t                  L2TBL_ACCESS;                  /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  FETOP_FE_L2TBL_DATA3_t                   L2TBL_DATA3;                   /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  FETOP_FE_L2TBL_DATA2_t                   L2TBL_DATA2;                   /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  FETOP_FE_L2TBL_DATA1_t                   L2TBL_DATA1;                   /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  FETOP_FE_L2TBL_DATA0_t                   L2TBL_DATA0;                   /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  FETOP_FE_ACLRULE_ACCESS_t                ACLRULE_ACCESS;                /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  FETOP_FE_ACLRULE_DATA27_t                ACLRULE_DATA27;                /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  FETOP_FE_ACLRULE_DATA26_t                ACLRULE_DATA26;                /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  FETOP_FE_ACLRULE_DATA25_t                ACLRULE_DATA25;                /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  FETOP_FE_ACLRULE_DATA24_t                ACLRULE_DATA24;                /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  FETOP_FE_ACLRULE_DATA23_t                ACLRULE_DATA23;                /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  FETOP_FE_ACLRULE_DATA22_t                ACLRULE_DATA22;                /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  FETOP_FE_ACLRULE_DATA21_t                ACLRULE_DATA21;                /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  FETOP_FE_ACLRULE_DATA20_t                ACLRULE_DATA20;                /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  FETOP_FE_ACLRULE_DATA19_t                ACLRULE_DATA19;                /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  FETOP_FE_ACLRULE_DATA18_t                ACLRULE_DATA18;                /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  FETOP_FE_ACLRULE_DATA17_t                ACLRULE_DATA17;                /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  FETOP_FE_ACLRULE_DATA16_t                ACLRULE_DATA16;                /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  FETOP_FE_ACLRULE_DATA15_t                ACLRULE_DATA15;                /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  FETOP_FE_ACLRULE_DATA14_t                ACLRULE_DATA14;                /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  FETOP_FE_ACLRULE_DATA13_t                ACLRULE_DATA13;                /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  FETOP_FE_ACLRULE_DATA12_t                ACLRULE_DATA12;                /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  FETOP_FE_ACLRULE_DATA11_t                ACLRULE_DATA11;                /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  FETOP_FE_ACLRULE_DATA10_t                ACLRULE_DATA10;                /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  FETOP_FE_ACLRULE_DATA9_t                 ACLRULE_DATA9;                 /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  FETOP_FE_ACLRULE_DATA8_t                 ACLRULE_DATA8;                 /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  FETOP_FE_ACLRULE_DATA7_t                 ACLRULE_DATA7;                 /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  FETOP_FE_ACLRULE_DATA6_t                 ACLRULE_DATA6;                 /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  FETOP_FE_ACLRULE_DATA5_t                 ACLRULE_DATA5;                 /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  FETOP_FE_ACLRULE_DATA4_t                 ACLRULE_DATA4;                 /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  FETOP_FE_ACLRULE_DATA3_t                 ACLRULE_DATA3;                 /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  FETOP_FE_ACLRULE_DATA2_t                 ACLRULE_DATA2;                 /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  FETOP_FE_ACLRULE_DATA1_t                 ACLRULE_DATA1;                 /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  FETOP_FE_ACLRULE_DATA0_t                 ACLRULE_DATA0;                 /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  FETOP_FE_ACLACTION_ACCESS_t              ACLACTION_ACCESS;              /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  FETOP_FE_ACLACTION_DATA9_t               ACLACTION_DATA9;               /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  FETOP_FE_ACLACTION_DATA8_t               ACLACTION_DATA8;               /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  FETOP_FE_ACLACTION_DATA7_t               ACLACTION_DATA7;               /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  FETOP_FE_ACLACTION_DATA6_t               ACLACTION_DATA6;               /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  FETOP_FE_ACLACTION_DATA5_t               ACLACTION_DATA5;               /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  FETOP_FE_ACLACTION_DATA4_t               ACLACTION_DATA4;               /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  FETOP_FE_ACLACTION_DATA3_t               ACLACTION_DATA3;               /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  FETOP_FE_ACLACTION_DATA2_t               ACLACTION_DATA2;               /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  FETOP_FE_ACLACTION_DATA1_t               ACLACTION_DATA1;               /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  FETOP_FE_ACLACTION_DATA0_t               ACLACTION_DATA0;               /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  FETOP_FE_INTERRUPT_0_t                   INTERRUPT_0;                   /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  FETOP_FE_INTENABLE_0_t                   INTENABLE_0;                   /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  FETOP_FE_INTERRUPT_1_t                   INTERRUPT_1;                   /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  FETOP_FE_INTENABLE_1_t                   INTENABLE_1;                   /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  FETOP_FE_FWD_INTERRUPT_0_t               FWD_INTERRUPT_0;               /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  FETOP_FE_FWD_INTENABLE_0_t               FWD_INTENABLE_0;               /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  FETOP_FE_FWD_INTERRUPT_1_t               FWD_INTERRUPT_1;               /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  FETOP_FE_FWD_INTENABLE_1_t               FWD_INTENABLE_1;               /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd126[3];                  
  FETOP_FE_DBG_INTERRUPT_0_t               DBG_INTERRUPT_0;               /* addr: 0x000001f8 */ 
  cs_uint32                                rsrvd127[3];                  
  FETOP_FE_DBG_INTENABLE_0_t               DBG_INTENABLE_0;               /* addr: 0x000001fc */ 
  cs_uint32                                rsrvd128[3];                  
  FETOP_FE_DBG_INTERRUPT_1_t               DBG_INTERRUPT_1;               /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd129[3];                  
  FETOP_FE_DBG_INTENABLE_1_t               DBG_INTENABLE_1;               /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd130[3];                  
  FETOP_FE_PE_INTERRUPT_0_t                PE_INTERRUPT_0;                /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd131[3];                  
  FETOP_FE_PE_INTENABLE_0_t                PE_INTENABLE_0;                /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd132[3];                  
  FETOP_FE_PE_INTERRUPT_1_t                PE_INTERRUPT_1;                /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd133[3];                  
  FETOP_FE_PE_INTENABLE_1_t                PE_INTENABLE_1;                /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd134[3];                  
  FETOP_FE_DBG_FE_PP_t                     DBG_FE_PP;                     /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd135[3];                  
  FETOP_FE_DBG_FE_PP_CNTR_t                DBG_FE_PP_CNTR;                /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd136[3];                  
  FETOP_FE_PE_CONFIG_t                     PE_CONFIG;                     /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd137[3];                  
  FETOP_FE_PE_CONFIG_1_t                   PE_CONFIG_1;                   /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd138[3];                  
  FETOP_FE_PE_PPPOE_CFG_0_t                PE_PPPOE_CFG_0;                /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd139[3];                  
  FETOP_FE_PE_PPPOE_CFG_1_t                PE_PPPOE_CFG_1;                /* addr: 0x0000022c */ 
  cs_uint32                                rsrvd140[3];                  
  FETOP_FE_PE_PPPOE_CFG_2_t                PE_PPPOE_CFG_2;                /* addr: 0x00000230 */ 
  cs_uint32                                rsrvd141[3];                  
  FETOP_FE_PE_PPPOE_CFG_3_t                PE_PPPOE_CFG_3;                /* addr: 0x00000234 */ 
  cs_uint32                                rsrvd142[3];                  
  FETOP_FE_PROC_DROP_STS_t                 PROC_DROP_STS;                 /* addr: 0x00000238 */ 
  cs_uint32                                rsrvd143[3];                  
  FETOP_FE_PE_VOQ_DRP_ACCESS_t             PE_VOQ_DRP_ACCESS;             /* addr: 0x0000023c */ 
  cs_uint32                                rsrvd144[3];                  
  FETOP_FE_PE_VOQ_DRP_DATA_t               PE_VOQ_DRP_DATA;               /* addr: 0x00000240 */ 
  cs_uint32                                rsrvd145[3];                  
  FETOP_FE_PE_PKT_CNT_t                    PE_PKT_CNT;                    /* addr: 0x00000244 */ 
  cs_uint32                                rsrvd146[3];                  
  FETOP_FE_PE_HDRA_PKT_DROPCNT_t           PE_HDRA_PKT_DROPCNT;           /* addr: 0x00000248 */ 
  cs_uint32                                rsrvd147[3];                  
  FETOP_FE_PE_FE_PKT_DROPCNT_t             PE_FE_PKT_DROPCNT;             /* addr: 0x0000024c */ 
  cs_uint32                                rsrvd148[3];                  
  FETOP_FE_PE_DEBUG_t                      PE_DEBUG;                      /* addr: 0x00000250 */ 
  cs_uint32                                rsrvd149[3];                  
  FETOP_FE_DBG_CLASS_MON_CMD_t             DBG_CLASS_MON_CMD;             /* addr: 0x00000254 */ 
  cs_uint32                                rsrvd150[3];                  
  FETOP_FE_DBG_CLASS_MON_STS_t             DBG_CLASS_MON_STS;             /* addr: 0x00000258 */ 
  cs_uint32                                rsrvd151[3];                  
  FETOP_FE_MEM_CLASS_PRTCHKFAIL_STS_t      MEM_CLASS_PRTCHKFAIL_STS;      /* addr: 0x0000025c */ 
  cs_uint32                                rsrvd152[3];                  
  FETOP_FE_MEM_ACLRULE_PRTCHKFAIL_STS_t    MEM_ACLRULE_PRTCHKFAIL_STS;    /* addr: 0x00000260 */ 
  cs_uint32                                rsrvd153[3];                  
  FETOP_FE_MEM_ACLACTION_PRTCHKFAIL_STS_t  MEM_ACLACTION_PRTCHKFAIL_STS;  /* addr: 0x00000264 */ 
  cs_uint32                                rsrvd154[3];                  
  FETOP_FE_MEM_FWDRSLT_PRTCHKFAIL_STS_t    MEM_FWDRSLT_PRTCHKFAIL_STS;    /* addr: 0x00000268 */ 
  cs_uint32                                rsrvd155[3];                  
  FETOP_FE_MEM_QOSRSLT_PRTCHKFAIL_STS_t    MEM_QOSRSLT_PRTCHKFAIL_STS;    /* addr: 0x0000026c */ 
  cs_uint32                                rsrvd156[3];                  
  FETOP_FE_MEM_L2TBL_PRTCHKFAIL_STS_t      MEM_L2TBL_PRTCHKFAIL_STS;      /* addr: 0x00000270 */ 
  cs_uint32                                rsrvd157[3];                  
  FETOP_FE_MEM_L3TBL_PRTCHKFAIL_STS_t      MEM_L3TBL_PRTCHKFAIL_STS;      /* addr: 0x00000274 */ 
  cs_uint32                                rsrvd158[3];                  
  FETOP_FE_MEM_FLOWVLN_PRTCHKFAIL_STS_t    MEM_FLOWVLN_PRTCHKFAIL_STS;    /* addr: 0x00000278 */ 
  cs_uint32                                rsrvd159[3];                  
  FETOP_FE_MEM_VOQPOL_PRTCHKFAIL_STS_t     MEM_VOQPOL_PRTCHKFAIL_STS;     /* addr: 0x0000027c */ 
  cs_uint32                                rsrvd160[3];                  
  FETOP_FE_MEM_VLNTBL_PRTCHKFAIL_STS_t     MEM_VLNTBL_PRTCHKFAIL_STS;     /* addr: 0x00000280 */ 
  cs_uint32                                rsrvd161[3];                  
  FETOP_FE_MEM_SDB_PRTCHKFAIL_STS_t        MEM_SDB_PRTCHKFAIL_STS;        /* addr: 0x00000284 */ 
  cs_uint32                                rsrvd162[3];                  
  FETOP_FE_PKTLEN_RNGS_ACCESS_t            PKTLEN_RNGS_ACCESS;            /* addr: 0x00000288 */ 
  cs_uint32                                rsrvd163[3];                  
  FETOP_FE_PKTLEN_RNGS_DATA_t              PKTLEN_RNGS_DATA;              /* addr: 0x0000028c */ 
} FETOP_FE_t;

  

/*
 * LPM
 */
  



#define FETOP_LPM_INTERRUPT_0                    0xf0021000
#define FETOP_LPM_INTERRUPT_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 hc1_full_roll_int    :  1 ; /* bits 11:11 */
    cs_uint32 hc1_half_roll_int    :  1 ; /* bits 10:10 */
    cs_uint32 hc0_full_roll_int    :  1 ; /* bits 9:9 */
    cs_uint32 hc0_half_roll_int    :  1 ; /* bits 8:8 */
    cs_uint32 hc_table1_lower_par_err_int :  1 ; /* bits 7:7 */
    cs_uint32 hc_table1_upper_par_err_int :  1 ; /* bits 6:6 */
    cs_uint32 hc_table0_lower_par_err_int :  1 ; /* bits 5:5 */
    cs_uint32 hc_table0_upper_par_err_int :  1 ; /* bits 4:4 */
    cs_uint32 lpm_table1_lower_par_err_int :  1 ; /* bits 3:3 */
    cs_uint32 lpm_table1_upper_par_err_int :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table0_lower_par_err_int :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table0_upper_par_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_upper_par_err_int :  1 ; /* bits 0:0 */
    cs_uint32 lpm_table0_lower_par_err_int :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table1_upper_par_err_int :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table1_lower_par_err_int :  1 ; /* bits 3:3 */
    cs_uint32 hc_table0_upper_par_err_int :  1 ; /* bits 4:4 */
    cs_uint32 hc_table0_lower_par_err_int :  1 ; /* bits 5:5 */
    cs_uint32 hc_table1_upper_par_err_int :  1 ; /* bits 6:6 */
    cs_uint32 hc_table1_lower_par_err_int :  1 ; /* bits 7:7 */
    cs_uint32 hc0_half_roll_int    :  1 ; /* bits 8:8 */
    cs_uint32 hc0_full_roll_int    :  1 ; /* bits 9:9 */
    cs_uint32 hc1_half_roll_int    :  1 ; /* bits 10:10 */
    cs_uint32 hc1_full_roll_int    :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_INTERRUPT_0_t;





#define FETOP_LPM_INTENABLE_0                    0xf0021004
#define FETOP_LPM_INTENABLE_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 hc1_full_roll_int_en :  1 ; /* bits 11:11 */
    cs_uint32 hc1_half_roll_int_en :  1 ; /* bits 10:10 */
    cs_uint32 hc0_full_roll_int_en :  1 ; /* bits 9:9 */
    cs_uint32 hc0_half_roll_int_en :  1 ; /* bits 8:8 */
    cs_uint32 hc_table1_lower_par_err_int_en :  1 ; /* bits 7:7 */
    cs_uint32 hc_table1_upper_par_err_int_en :  1 ; /* bits 6:6 */
    cs_uint32 hc_table0_lower_par_err_int_en :  1 ; /* bits 5:5 */
    cs_uint32 hc_table0_upper_par_err_int_en :  1 ; /* bits 4:4 */
    cs_uint32 lpm_table1_lower_par_err_int_en :  1 ; /* bits 3:3 */
    cs_uint32 lpm_table1_upper_par_err_int_en :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table0_lower_par_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table0_upper_par_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_upper_par_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 lpm_table0_lower_par_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table1_upper_par_err_int_en :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table1_lower_par_err_int_en :  1 ; /* bits 3:3 */
    cs_uint32 hc_table0_upper_par_err_int_en :  1 ; /* bits 4:4 */
    cs_uint32 hc_table0_lower_par_err_int_en :  1 ; /* bits 5:5 */
    cs_uint32 hc_table1_upper_par_err_int_en :  1 ; /* bits 6:6 */
    cs_uint32 hc_table1_lower_par_err_int_en :  1 ; /* bits 7:7 */
    cs_uint32 hc0_half_roll_int_en :  1 ; /* bits 8:8 */
    cs_uint32 hc0_full_roll_int_en :  1 ; /* bits 9:9 */
    cs_uint32 hc1_half_roll_int_en :  1 ; /* bits 10:10 */
    cs_uint32 hc1_full_roll_int_en :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_INTENABLE_0_t;





#define FETOP_LPM_INTERRUPT_1                    0xf0021008
#define FETOP_LPM_INTERRUPT_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 hc1_full_roll_int    :  1 ; /* bits 11:11 */
    cs_uint32 hc1_half_roll_int    :  1 ; /* bits 10:10 */
    cs_uint32 hc0_full_roll_int    :  1 ; /* bits 9:9 */
    cs_uint32 hc0_half_roll_int    :  1 ; /* bits 8:8 */
    cs_uint32 hc_table1_lower_par_err_int :  1 ; /* bits 7:7 */
    cs_uint32 hc_table1_upper_par_err_int :  1 ; /* bits 6:6 */
    cs_uint32 hc_table0_lower_par_err_int :  1 ; /* bits 5:5 */
    cs_uint32 hc_table0_upper_par_err_int :  1 ; /* bits 4:4 */
    cs_uint32 lpm_table1_lower_par_err_int :  1 ; /* bits 3:3 */
    cs_uint32 lpm_table1_upper_par_err_int :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table0_lower_par_err_int :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table0_upper_par_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_upper_par_err_int :  1 ; /* bits 0:0 */
    cs_uint32 lpm_table0_lower_par_err_int :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table1_upper_par_err_int :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table1_lower_par_err_int :  1 ; /* bits 3:3 */
    cs_uint32 hc_table0_upper_par_err_int :  1 ; /* bits 4:4 */
    cs_uint32 hc_table0_lower_par_err_int :  1 ; /* bits 5:5 */
    cs_uint32 hc_table1_upper_par_err_int :  1 ; /* bits 6:6 */
    cs_uint32 hc_table1_lower_par_err_int :  1 ; /* bits 7:7 */
    cs_uint32 hc0_half_roll_int    :  1 ; /* bits 8:8 */
    cs_uint32 hc0_full_roll_int    :  1 ; /* bits 9:9 */
    cs_uint32 hc1_half_roll_int    :  1 ; /* bits 10:10 */
    cs_uint32 hc1_full_roll_int    :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_INTERRUPT_1_t;





#define FETOP_LPM_INTENABLE_1                    0xf002100c
#define FETOP_LPM_INTENABLE_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 hc1_full_roll_int_en :  1 ; /* bits 11:11 */
    cs_uint32 hc1_half_roll_int_en :  1 ; /* bits 10:10 */
    cs_uint32 hc0_full_roll_int_en :  1 ; /* bits 9:9 */
    cs_uint32 hc0_half_roll_int_en :  1 ; /* bits 8:8 */
    cs_uint32 hc_table1_lower_par_err_int_en :  1 ; /* bits 7:7 */
    cs_uint32 hc_table1_upper_par_err_int_en :  1 ; /* bits 6:6 */
    cs_uint32 hc_table0_lower_par_err_int_en :  1 ; /* bits 5:5 */
    cs_uint32 hc_table0_upper_par_err_int_en :  1 ; /* bits 4:4 */
    cs_uint32 lpm_table1_lower_par_err_int_en :  1 ; /* bits 3:3 */
    cs_uint32 lpm_table1_upper_par_err_int_en :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table0_lower_par_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table0_upper_par_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_upper_par_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 lpm_table0_lower_par_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 lpm_table1_upper_par_err_int_en :  1 ; /* bits 2:2 */
    cs_uint32 lpm_table1_lower_par_err_int_en :  1 ; /* bits 3:3 */
    cs_uint32 hc_table0_upper_par_err_int_en :  1 ; /* bits 4:4 */
    cs_uint32 hc_table0_lower_par_err_int_en :  1 ; /* bits 5:5 */
    cs_uint32 hc_table1_upper_par_err_int_en :  1 ; /* bits 6:6 */
    cs_uint32 hc_table1_lower_par_err_int_en :  1 ; /* bits 7:7 */
    cs_uint32 hc0_half_roll_int_en :  1 ; /* bits 8:8 */
    cs_uint32 hc0_full_roll_int_en :  1 ; /* bits 9:9 */
    cs_uint32 hc1_half_roll_int_en :  1 ; /* bits 10:10 */
    cs_uint32 hc1_full_roll_int_en :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_INTENABLE_1_t;





#define FETOP_LPM_LPM_CONFIG                     0xf0021010
#define FETOP_LPM_LPM_CONFIG_dft                 0x00000008




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 col_msk_sel          :  3 ; /* bits 6:4 */
    cs_uint32 sdb_en               :  1 ; /* bits 3:3 */
    cs_uint32 clr_read             :  1 ; /* bits 2:2 */
    cs_uint32 active_table         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 active_table         :  2 ; /* bits 1:0 */
    cs_uint32 clr_read             :  1 ; /* bits 2:2 */
    cs_uint32 sdb_en               :  1 ; /* bits 3:3 */
    cs_uint32 col_msk_sel          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_CONFIG_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_PARITY   0xf0021014
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 lpm_table0_upper_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_upper_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_PARITY_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_PARITY   0xf0021018
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 lpm_table0_lower_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table0_lower_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_PARITY_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_PARITY   0xf002101c
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 lpm_table1_upper_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table1_upper_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_PARITY_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_PARITY   0xf0021020
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 lpm_table1_lower_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_table1_lower_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_PARITY_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_PARITY    0xf0021024
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 hc_table0_upper_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hc_table0_upper_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_PARITY_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_PARITY    0xf0021028
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 hc_table0_lower_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hc_table0_lower_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_PARITY_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_PARITY    0xf002102c
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 hc_table1_upper_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hc_table1_upper_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_PARITY_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_PARITY    0xf0021030
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_PARITY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 hc_table1_lower_regf_parity :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hc_table1_lower_regf_parity :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_PARITY_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_ACCESS   0xf0021034
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_ACCESS_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA8    0xf0021038
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 up_ip03              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip03              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA8_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA7    0xf002103c
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA7_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip03              : 28 ; /* bits 31:4 */
    cs_uint32 up_mask03            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_mask03            :  4 ; /* bits 3:0 */
    cs_uint32 up_ip03              : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA7_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA6    0xf0021040
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA6_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_mask03            :  2 ; /* bits 31:30 */
    cs_uint32 up_ip02              : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip02              : 30 ; /* bits 29:0 */
    cs_uint32 up_mask03            :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA6_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA5    0xf0021044
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA5_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip02              :  2 ; /* bits 31:30 */
    cs_uint32 up_mask02            :  6 ; /* bits 29:24 */
    cs_uint32 up_ip01              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip01              : 24 ; /* bits 23:0 */
    cs_uint32 up_mask02            :  6 ; /* bits 29:24 */
    cs_uint32 up_ip02              :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA5_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA4    0xf0021048
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip01              :  8 ; /* bits 31:24 */
    cs_uint32 up_mask01            :  6 ; /* bits 23:18 */
    cs_uint32 up_ip00              : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip00              : 18 ; /* bits 17:0 */
    cs_uint32 up_mask01            :  6 ; /* bits 23:18 */
    cs_uint32 up_ip01              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA4_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA3    0xf002104c
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip00              : 14 ; /* bits 31:18 */
    cs_uint32 up_mask00            :  6 ; /* bits 17:12 */
    cs_uint32 up_nh03              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh03              : 12 ; /* bits 11:0 */
    cs_uint32 up_mask00            :  6 ; /* bits 17:12 */
    cs_uint32 up_ip00              : 14 ; /* bits 31:18 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA3_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA2    0xf0021050
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh03              : 15 ; /* bits 31:17 */
    cs_uint32 up_nh02              : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh02              : 17 ; /* bits 16:0 */
    cs_uint32 up_nh03              : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA2_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA1    0xf0021054
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh02              : 10 ; /* bits 31:22 */
    cs_uint32 up_nh01              : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh01              : 22 ; /* bits 21:0 */
    cs_uint32 up_nh02              : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA1_t;





#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA0    0xf0021058
#define FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh01              :  5 ; /* bits 31:27 */
    cs_uint32 up_nh00              : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh00              : 27 ; /* bits 26:0 */
    cs_uint32 up_nh01              :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA0_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_ACCESS    0xf002105c
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_ACCESS_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA3     0xf0021060
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 up_hit_cnt03         : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt03         : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA3_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA2     0xf0021064
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt03         : 15 ; /* bits 31:17 */
    cs_uint32 up_hit_cnt02         : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt02         : 17 ; /* bits 16:0 */
    cs_uint32 up_hit_cnt03         : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA2_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA1     0xf0021068
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt02         : 10 ; /* bits 31:22 */
    cs_uint32 up_hit_cnt01         : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt01         : 22 ; /* bits 21:0 */
    cs_uint32 up_hit_cnt02         : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA1_t;





#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA0     0xf002106c
#define FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt01         :  5 ; /* bits 31:27 */
    cs_uint32 up_hit_cnt00         : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt00         : 27 ; /* bits 26:0 */
    cs_uint32 up_hit_cnt01         :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA0_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_ACCESS   0xf0021070
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_ACCESS_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA8    0xf0021074
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 lo_ip03              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip03              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA8_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA7    0xf0021078
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA7_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip03              : 28 ; /* bits 31:4 */
    cs_uint32 lo_mask03            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_mask03            :  4 ; /* bits 3:0 */
    cs_uint32 lo_ip03              : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA7_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA6    0xf002107c
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA6_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_mask03            :  2 ; /* bits 31:30 */
    cs_uint32 lo_ip02              : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip02              : 30 ; /* bits 29:0 */
    cs_uint32 lo_mask03            :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA6_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA5    0xf0021080
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA5_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip02              :  2 ; /* bits 31:30 */
    cs_uint32 lo_mask02            :  6 ; /* bits 29:24 */
    cs_uint32 lo_ip01              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip01              : 24 ; /* bits 23:0 */
    cs_uint32 lo_mask02            :  6 ; /* bits 29:24 */
    cs_uint32 lo_ip02              :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA5_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA4    0xf0021084
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip01              :  8 ; /* bits 31:24 */
    cs_uint32 lo_mask01            :  6 ; /* bits 23:18 */
    cs_uint32 lo_ip00              : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip00              : 18 ; /* bits 17:0 */
    cs_uint32 lo_mask01            :  6 ; /* bits 23:18 */
    cs_uint32 lo_ip01              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA4_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA3    0xf0021088
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip00              : 14 ; /* bits 31:18 */
    cs_uint32 lo_mask00            :  6 ; /* bits 17:12 */
    cs_uint32 lo_nh03              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh03              : 12 ; /* bits 11:0 */
    cs_uint32 lo_mask00            :  6 ; /* bits 17:12 */
    cs_uint32 lo_ip00              : 14 ; /* bits 31:18 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA3_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA2    0xf002108c
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh03              : 15 ; /* bits 31:17 */
    cs_uint32 lo_nh02              : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh02              : 17 ; /* bits 16:0 */
    cs_uint32 lo_nh03              : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA2_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA1    0xf0021090
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh02              : 10 ; /* bits 31:22 */
    cs_uint32 lo_nh01              : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh01              : 22 ; /* bits 21:0 */
    cs_uint32 lo_nh02              : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA1_t;





#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA0    0xf0021094
#define FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh01              :  5 ; /* bits 31:27 */
    cs_uint32 lo_nh00              : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh00              : 27 ; /* bits 26:0 */
    cs_uint32 lo_nh01              :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA0_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_ACCESS    0xf0021098
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_ACCESS_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA3     0xf002109c
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 lo_hit_cnt03         : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt03         : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA3_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA2     0xf00210a0
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt03         : 15 ; /* bits 31:17 */
    cs_uint32 lo_hit_cnt02         : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt02         : 17 ; /* bits 16:0 */
    cs_uint32 lo_hit_cnt03         : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA2_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA1     0xf00210a4
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt02         : 10 ; /* bits 31:22 */
    cs_uint32 lo_hit_cnt01         : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt01         : 22 ; /* bits 21:0 */
    cs_uint32 lo_hit_cnt02         : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA1_t;





#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA0     0xf00210a8
#define FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt01         :  5 ; /* bits 31:27 */
    cs_uint32 lo_hit_cnt00         : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt00         : 27 ; /* bits 26:0 */
    cs_uint32 lo_hit_cnt01         :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA0_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_ACCESS   0xf00210ac
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_ACCESS_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA8    0xf00210b0
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 up_ip13              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip13              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA8_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA7    0xf00210b4
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA7_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip13              : 28 ; /* bits 31:4 */
    cs_uint32 up_mask13            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_mask13            :  4 ; /* bits 3:0 */
    cs_uint32 up_ip13              : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA7_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA6    0xf00210b8
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA6_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_mask13            :  2 ; /* bits 31:30 */
    cs_uint32 up_ip12              : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip12              : 30 ; /* bits 29:0 */
    cs_uint32 up_mask13            :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA6_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA5    0xf00210bc
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA5_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip12              :  2 ; /* bits 31:30 */
    cs_uint32 up_mask12            :  6 ; /* bits 29:24 */
    cs_uint32 up_ip11              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip11              : 24 ; /* bits 23:0 */
    cs_uint32 up_mask12            :  6 ; /* bits 29:24 */
    cs_uint32 up_ip12              :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA5_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA4    0xf00210c0
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip11              :  8 ; /* bits 31:24 */
    cs_uint32 up_mask11            :  6 ; /* bits 23:18 */
    cs_uint32 up_ip10              : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_ip10              : 18 ; /* bits 17:0 */
    cs_uint32 up_mask11            :  6 ; /* bits 23:18 */
    cs_uint32 up_ip11              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA4_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA3    0xf00210c4
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_ip10              : 14 ; /* bits 31:18 */
    cs_uint32 up_mask10            :  6 ; /* bits 17:12 */
    cs_uint32 up_nh13              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh13              : 12 ; /* bits 11:0 */
    cs_uint32 up_mask10            :  6 ; /* bits 17:12 */
    cs_uint32 up_ip10              : 14 ; /* bits 31:18 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA3_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA2    0xf00210c8
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh13              : 15 ; /* bits 31:17 */
    cs_uint32 up_nh12              : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh12              : 17 ; /* bits 16:0 */
    cs_uint32 up_nh13              : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA2_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA1    0xf00210cc
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh12              : 10 ; /* bits 31:22 */
    cs_uint32 up_nh11              : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh11              : 22 ; /* bits 21:0 */
    cs_uint32 up_nh12              : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA1_t;





#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA0    0xf00210d0
#define FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_nh11              :  5 ; /* bits 31:27 */
    cs_uint32 up_nh10              : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_nh10              : 27 ; /* bits 26:0 */
    cs_uint32 up_nh11              :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA0_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_ACCESS    0xf00210d4
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_ACCESS_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA3     0xf00210d8
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 up_hit_cnt13         : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt13         : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA3_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA2     0xf00210dc
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt13         : 15 ; /* bits 31:17 */
    cs_uint32 up_hit_cnt12         : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt12         : 17 ; /* bits 16:0 */
    cs_uint32 up_hit_cnt13         : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA2_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA1     0xf00210e0
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt12         : 10 ; /* bits 31:22 */
    cs_uint32 up_hit_cnt11         : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt11         : 22 ; /* bits 21:0 */
    cs_uint32 up_hit_cnt12         : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA1_t;





#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA0     0xf00210e4
#define FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 up_hit_cnt11         :  5 ; /* bits 31:27 */
    cs_uint32 up_hit_cnt10         : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 up_hit_cnt10         : 27 ; /* bits 26:0 */
    cs_uint32 up_hit_cnt11         :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA0_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_ACCESS   0xf00210e8
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_ACCESS_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA8    0xf00210ec
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 lo_ip13              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip13              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA8_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA7    0xf00210f0
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA7_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip13              : 28 ; /* bits 31:4 */
    cs_uint32 lo_mask13            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_mask13            :  4 ; /* bits 3:0 */
    cs_uint32 lo_ip13              : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA7_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA6    0xf00210f4
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA6_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_mask13            :  2 ; /* bits 31:30 */
    cs_uint32 lo_ip12              : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip12              : 30 ; /* bits 29:0 */
    cs_uint32 lo_mask13            :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA6_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA5    0xf00210f8
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA5_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip12              :  2 ; /* bits 31:30 */
    cs_uint32 lo_mask12            :  6 ; /* bits 29:24 */
    cs_uint32 lo_ip11              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip11              : 24 ; /* bits 23:0 */
    cs_uint32 lo_mask12            :  6 ; /* bits 29:24 */
    cs_uint32 lo_ip12              :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA5_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA4    0xf00210fc
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip11              :  8 ; /* bits 31:24 */
    cs_uint32 lo_mask11            :  6 ; /* bits 23:18 */
    cs_uint32 lo_ip10              : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_ip10              : 18 ; /* bits 17:0 */
    cs_uint32 lo_mask11            :  6 ; /* bits 23:18 */
    cs_uint32 lo_ip11              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA4_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA3    0xf0021100
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_ip10              : 14 ; /* bits 31:18 */
    cs_uint32 lo_mask10            :  6 ; /* bits 17:12 */
    cs_uint32 lo_nh13              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh13              : 12 ; /* bits 11:0 */
    cs_uint32 lo_mask10            :  6 ; /* bits 17:12 */
    cs_uint32 lo_ip10              : 14 ; /* bits 31:18 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA3_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA2    0xf0021104
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh13              : 15 ; /* bits 31:17 */
    cs_uint32 lo_nh12              : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh12              : 17 ; /* bits 16:0 */
    cs_uint32 lo_nh13              : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA2_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA1    0xf0021108
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh12              : 10 ; /* bits 31:22 */
    cs_uint32 lo_nh11              : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh11              : 22 ; /* bits 21:0 */
    cs_uint32 lo_nh12              : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA1_t;





#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA0    0xf002110c
#define FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_nh11              :  5 ; /* bits 31:27 */
    cs_uint32 lo_nh10              : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_nh10              : 27 ; /* bits 26:0 */
    cs_uint32 lo_nh11              :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA0_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_ACCESS    0xf0021110
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 parity_bypass        :  1 ; /* bits 29:29 */
    cs_uint32 w_rdn                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_ACCESS_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA3     0xf0021114
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA3_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 lo_hit_cnt13         : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt13         : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA3_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA2     0xf0021118
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt13         : 15 ; /* bits 31:17 */
    cs_uint32 lo_hit_cnt12         : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt12         : 17 ; /* bits 16:0 */
    cs_uint32 lo_hit_cnt13         : 15 ; /* bits 31:17 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA2_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA1     0xf002111c
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt12         : 10 ; /* bits 31:22 */
    cs_uint32 lo_hit_cnt11         : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt11         : 22 ; /* bits 21:0 */
    cs_uint32 lo_hit_cnt12         : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA1_t;





#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA0     0xf0021120
#define FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lo_hit_cnt11         :  5 ; /* bits 31:27 */
    cs_uint32 lo_hit_cnt10         : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lo_hit_cnt10         : 27 ; /* bits 26:0 */
    cs_uint32 lo_hit_cnt11         :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA0_t;





#define FETOP_LPM_IPV4_START_PTR0                0xf0021124
#define FETOP_LPM_IPV4_START_PTR0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 ipv4_start_ptr0      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_start_ptr0      :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_START_PTR0_t;





#define FETOP_LPM_IPV4_START_PTR1                0xf0021128
#define FETOP_LPM_IPV4_START_PTR1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 ipv4_start_ptr1      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_start_ptr1      :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_START_PTR1_t;





#define FETOP_LPM_IPV6_START_PTR0                0xf002112c
#define FETOP_LPM_IPV6_START_PTR0_dft            0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 ipv6_start_ptr0      :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_start_ptr0      :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_START_PTR0_t;





#define FETOP_LPM_IPV6_START_PTR1                0xf0021130
#define FETOP_LPM_IPV6_START_PTR1_dft            0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 ipv6_start_ptr1      :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_start_ptr1      :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_START_PTR1_t;





#define FETOP_LPM_IPV4_END_PTR0                  0xf0021134
#define FETOP_LPM_IPV4_END_PTR0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 ipv4_end_ptr0        :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_end_ptr0        :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_END_PTR0_t;





#define FETOP_LPM_IPV4_END_PTR1                  0xf0021138
#define FETOP_LPM_IPV4_END_PTR1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 ipv4_end_ptr1        :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_end_ptr1        :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_END_PTR1_t;





#define FETOP_LPM_IPV6_END_PTR0                  0xf002113c
#define FETOP_LPM_IPV6_END_PTR0_dft              0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 ipv6_end_ptr0        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_end_ptr0        :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_END_PTR0_t;





#define FETOP_LPM_IPV6_END_PTR1                  0xf0021140
#define FETOP_LPM_IPV6_END_PTR1_dft              0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 ipv6_end_ptr1        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_end_ptr1        :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_END_PTR1_t;





#define FETOP_LPM_INACTIVE_DROP_COUNT            0xf0021144
#define FETOP_LPM_INACTIVE_DROP_COUNT_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 inactive_drop_count  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 inactive_drop_count  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_INACTIVE_DROP_COUNT_t;





#define FETOP_LPM_IPV4_MISS_COUNT0               0xf0021148
#define FETOP_LPM_IPV4_MISS_COUNT0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv4_miss_count0     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_miss_count0     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_MISS_COUNT0_t;





#define FETOP_LPM_IPV4_MISS_COUNT1               0xf002114c
#define FETOP_LPM_IPV4_MISS_COUNT1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv4_miss_count1     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv4_miss_count1     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV4_MISS_COUNT1_t;





#define FETOP_LPM_IPV6_MISS_COUNT0               0xf0021150
#define FETOP_LPM_IPV6_MISS_COUNT0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv6_miss_count0     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_miss_count0     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_MISS_COUNT0_t;





#define FETOP_LPM_IPV6_MISS_COUNT1               0xf0021154
#define FETOP_LPM_IPV6_MISS_COUNT1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ipv6_miss_count1     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipv6_miss_count1     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_IPV6_MISS_COUNT1_t;





#define FETOP_LPM_LPM_STATUS                     0xf0021158
#define FETOP_LPM_LPM_STATUS_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 lpm_status           :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm_status           :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_LPM_STATUS_t;





#define FETOP_LPM_MEM_INIT                       0xf002115c
#define FETOP_LPM_MEM_INIT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 hc1_upper_start_init :  1 ; /* bits 7:7 */
    cs_uint32 hc0_upper_start_init :  1 ; /* bits 6:6 */
    cs_uint32 hc1_lower_start_init :  1 ; /* bits 5:5 */
    cs_uint32 hc0_lower_start_init :  1 ; /* bits 4:4 */
    cs_uint32 lpm1_lower_start_init :  1 ; /* bits 3:3 */
    cs_uint32 lpm1_upper_start_init :  1 ; /* bits 2:2 */
    cs_uint32 lpm0_upper_start_init :  1 ; /* bits 1:1 */
    cs_uint32 lpm0_lower_start_init :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm0_lower_start_init :  1 ; /* bits 0:0 */
    cs_uint32 lpm0_upper_start_init :  1 ; /* bits 1:1 */
    cs_uint32 lpm1_upper_start_init :  1 ; /* bits 2:2 */
    cs_uint32 lpm1_lower_start_init :  1 ; /* bits 3:3 */
    cs_uint32 hc0_lower_start_init :  1 ; /* bits 4:4 */
    cs_uint32 hc1_lower_start_init :  1 ; /* bits 5:5 */
    cs_uint32 hc0_upper_start_init :  1 ; /* bits 6:6 */
    cs_uint32 hc1_upper_start_init :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_MEM_INIT_t;





#define FETOP_LPM_MEM_STATUS                     0xf0021160
#define FETOP_LPM_MEM_STATUS_dft                 0x000000ff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 hc1_upper_init_in_progress :  1 ; /* bits 15:15 */
    cs_uint32 hc0_upper_init_in_progress :  1 ; /* bits 14:14 */
    cs_uint32 hc1_lower_init_in_progress :  1 ; /* bits 13:13 */
    cs_uint32 hc0_lower_init_in_progress :  1 ; /* bits 12:12 */
    cs_uint32 lpm1_lower_init_in_progress :  1 ; /* bits 11:11 */
    cs_uint32 lpm1_upper_init_in_progress :  1 ; /* bits 10:10 */
    cs_uint32 lpm0_upper_init_in_progress :  1 ; /* bits 9:9 */
    cs_uint32 lpm0_lower_init_in_progress :  1 ; /* bits 8:8 */
    cs_uint32 hc1_upper_ready_for_init :  1 ; /* bits 7:7 */
    cs_uint32 hc0_upper_ready_for_init :  1 ; /* bits 6:6 */
    cs_uint32 hc1_lower_ready_for_init :  1 ; /* bits 5:5 */
    cs_uint32 hc0_lower_ready_for_init :  1 ; /* bits 4:4 */
    cs_uint32 lpm1_lower_ready_for_init :  1 ; /* bits 3:3 */
    cs_uint32 lpm1_upper_ready_for_init :  1 ; /* bits 2:2 */
    cs_uint32 lpm0_upper_ready_for_init :  1 ; /* bits 1:1 */
    cs_uint32 lpm0_lower_ready_for_init :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lpm0_lower_ready_for_init :  1 ; /* bits 0:0 */
    cs_uint32 lpm0_upper_ready_for_init :  1 ; /* bits 1:1 */
    cs_uint32 lpm1_upper_ready_for_init :  1 ; /* bits 2:2 */
    cs_uint32 lpm1_lower_ready_for_init :  1 ; /* bits 3:3 */
    cs_uint32 hc0_lower_ready_for_init :  1 ; /* bits 4:4 */
    cs_uint32 hc1_lower_ready_for_init :  1 ; /* bits 5:5 */
    cs_uint32 hc0_upper_ready_for_init :  1 ; /* bits 6:6 */
    cs_uint32 hc1_upper_ready_for_init :  1 ; /* bits 7:7 */
    cs_uint32 lpm0_lower_init_in_progress :  1 ; /* bits 8:8 */
    cs_uint32 lpm0_upper_init_in_progress :  1 ; /* bits 9:9 */
    cs_uint32 lpm1_upper_init_in_progress :  1 ; /* bits 10:10 */
    cs_uint32 lpm1_lower_init_in_progress :  1 ; /* bits 11:11 */
    cs_uint32 hc0_lower_init_in_progress :  1 ; /* bits 12:12 */
    cs_uint32 hc1_lower_init_in_progress :  1 ; /* bits 13:13 */
    cs_uint32 hc0_upper_init_in_progress :  1 ; /* bits 14:14 */
    cs_uint32 hc1_upper_init_in_progress :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_MEM_STATUS_t;





#define FETOP_LPM_DBG_CNTR                       0xf0021164
#define FETOP_LPM_DBG_CNTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 dbg_cntr             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_cntr             : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_CNTR_t;





#define FETOP_LPM_DBG_LOAD_INC_DEC_PTR           0xf0021168
#define FETOP_LPM_DBG_LOAD_INC_DEC_PTR_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_load_inc_dec_ptr : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_load_inc_dec_ptr : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_LOAD_INC_DEC_PTR_t;





#define FETOP_LPM_DBG_COLUMN_MASK                0xf002116c
#define FETOP_LPM_DBG_COLUMN_MASK_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbg_column_mask      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_column_mask      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_COLUMN_MASK_t;





#define FETOP_LPM_DBG_RSLT                       0xf0021170
#define FETOP_LPM_DBG_RSLT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 dbg_rslt             : 25 ; /* bits 24:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbg_rslt             : 25 ; /* bits 24:0 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_RSLT_t;





#define FETOP_LPM_DBG_SPTR_EPTR4                 0xf0021174
#define FETOP_LPM_DBG_SPTR_EPTR4_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_SPTR_EPTR4_t;





#define FETOP_LPM_DBG_SPTR_EPTR6                 0xf0021178
#define FETOP_LPM_DBG_SPTR_EPTR6_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_SPTR_EPTR6_t;





#define FETOP_LPM_DBG_SRCH_ADDR                  0xf002117c
#define FETOP_LPM_DBG_SRCH_ADDR_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sptr_eptr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_DBG_SRCH_ADDR_t;





#define FETOP_LPM_SPARE_REG0                     0xf0021180
#define FETOP_LPM_SPARE_REG0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 spare_reg0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spare_reg0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_SPARE_REG0_t;





#define FETOP_LPM_SPARE_REG1                     0xf0021184
#define FETOP_LPM_SPARE_REG1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 spare_reg1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spare_reg1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_LPM_SPARE_REG1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* LPM */

typedef struct {
  FETOP_LPM_INTERRUPT_0_t                  INTERRUPT_0;                   /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  FETOP_LPM_INTENABLE_0_t                  INTENABLE_0;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  FETOP_LPM_INTERRUPT_1_t                  INTERRUPT_1;                   /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  FETOP_LPM_INTENABLE_1_t                  INTENABLE_1;                   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  FETOP_LPM_LPM_CONFIG_t                   LPM_CONFIG;                    /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_PARITY_t LPM_TABLE0_UPPER_REGF_PARITY;  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_PARITY_t LPM_TABLE0_LOWER_REGF_PARITY;  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_PARITY_t LPM_TABLE1_UPPER_REGF_PARITY;  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_PARITY_t LPM_TABLE1_LOWER_REGF_PARITY;  /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  FETOP_LPM_HC_TABLE0_UPPER_REGF_PARITY_t  HC_TABLE0_UPPER_REGF_PARITY;   /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_PARITY_t  HC_TABLE0_LOWER_REGF_PARITY;   /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_PARITY_t  HC_TABLE1_UPPER_REGF_PARITY;   /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_PARITY_t  HC_TABLE1_LOWER_REGF_PARITY;   /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_ACCESS_t LPM_TABLE0_UPPER_REGF_ACCESS;  /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA8_t  LPM_TABLE0_UPPER_REGF_DATA8;   /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA7_t  LPM_TABLE0_UPPER_REGF_DATA7;   /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA6_t  LPM_TABLE0_UPPER_REGF_DATA6;   /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA5_t  LPM_TABLE0_UPPER_REGF_DATA5;   /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA4_t  LPM_TABLE0_UPPER_REGF_DATA4;   /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA3_t  LPM_TABLE0_UPPER_REGF_DATA3;   /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA2_t  LPM_TABLE0_UPPER_REGF_DATA2;   /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA1_t  LPM_TABLE0_UPPER_REGF_DATA1;   /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  FETOP_LPM_LPM_TABLE0_UPPER_REGF_DATA0_t  LPM_TABLE0_UPPER_REGF_DATA0;   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  FETOP_LPM_HC_TABLE0_UPPER_REGF_ACCESS_t  HC_TABLE0_UPPER_REGF_ACCESS;   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA3_t   HC_TABLE0_UPPER_REGF_DATA3;    /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA2_t   HC_TABLE0_UPPER_REGF_DATA2;    /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA1_t   HC_TABLE0_UPPER_REGF_DATA1;    /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  FETOP_LPM_HC_TABLE0_UPPER_REGF_DATA0_t   HC_TABLE0_UPPER_REGF_DATA0;    /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_ACCESS_t LPM_TABLE0_LOWER_REGF_ACCESS;  /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA8_t  LPM_TABLE0_LOWER_REGF_DATA8;   /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA7_t  LPM_TABLE0_LOWER_REGF_DATA7;   /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA6_t  LPM_TABLE0_LOWER_REGF_DATA6;   /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA5_t  LPM_TABLE0_LOWER_REGF_DATA5;   /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA4_t  LPM_TABLE0_LOWER_REGF_DATA4;   /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA3_t  LPM_TABLE0_LOWER_REGF_DATA3;   /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA2_t  LPM_TABLE0_LOWER_REGF_DATA2;   /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA1_t  LPM_TABLE0_LOWER_REGF_DATA1;   /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  FETOP_LPM_LPM_TABLE0_LOWER_REGF_DATA0_t  LPM_TABLE0_LOWER_REGF_DATA0;   /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_ACCESS_t  HC_TABLE0_LOWER_REGF_ACCESS;   /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA3_t   HC_TABLE0_LOWER_REGF_DATA3;    /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA2_t   HC_TABLE0_LOWER_REGF_DATA2;    /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA1_t   HC_TABLE0_LOWER_REGF_DATA1;    /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  FETOP_LPM_HC_TABLE0_LOWER_REGF_DATA0_t   HC_TABLE0_LOWER_REGF_DATA0;    /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_ACCESS_t LPM_TABLE1_UPPER_REGF_ACCESS;  /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA8_t  LPM_TABLE1_UPPER_REGF_DATA8;   /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA7_t  LPM_TABLE1_UPPER_REGF_DATA7;   /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA6_t  LPM_TABLE1_UPPER_REGF_DATA6;   /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA5_t  LPM_TABLE1_UPPER_REGF_DATA5;   /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA4_t  LPM_TABLE1_UPPER_REGF_DATA4;   /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA3_t  LPM_TABLE1_UPPER_REGF_DATA3;   /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA2_t  LPM_TABLE1_UPPER_REGF_DATA2;   /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA1_t  LPM_TABLE1_UPPER_REGF_DATA1;   /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  FETOP_LPM_LPM_TABLE1_UPPER_REGF_DATA0_t  LPM_TABLE1_UPPER_REGF_DATA0;   /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_ACCESS_t  HC_TABLE1_UPPER_REGF_ACCESS;   /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA3_t   HC_TABLE1_UPPER_REGF_DATA3;    /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA2_t   HC_TABLE1_UPPER_REGF_DATA2;    /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA1_t   HC_TABLE1_UPPER_REGF_DATA1;    /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  FETOP_LPM_HC_TABLE1_UPPER_REGF_DATA0_t   HC_TABLE1_UPPER_REGF_DATA0;    /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_ACCESS_t LPM_TABLE1_LOWER_REGF_ACCESS;  /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA8_t  LPM_TABLE1_LOWER_REGF_DATA8;   /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA7_t  LPM_TABLE1_LOWER_REGF_DATA7;   /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA6_t  LPM_TABLE1_LOWER_REGF_DATA6;   /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA5_t  LPM_TABLE1_LOWER_REGF_DATA5;   /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA4_t  LPM_TABLE1_LOWER_REGF_DATA4;   /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA3_t  LPM_TABLE1_LOWER_REGF_DATA3;   /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA2_t  LPM_TABLE1_LOWER_REGF_DATA2;   /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA1_t  LPM_TABLE1_LOWER_REGF_DATA1;   /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  FETOP_LPM_LPM_TABLE1_LOWER_REGF_DATA0_t  LPM_TABLE1_LOWER_REGF_DATA0;   /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_ACCESS_t  HC_TABLE1_LOWER_REGF_ACCESS;   /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA3_t   HC_TABLE1_LOWER_REGF_DATA3;    /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA2_t   HC_TABLE1_LOWER_REGF_DATA2;    /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA1_t   HC_TABLE1_LOWER_REGF_DATA1;    /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  FETOP_LPM_HC_TABLE1_LOWER_REGF_DATA0_t   HC_TABLE1_LOWER_REGF_DATA0;    /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  FETOP_LPM_IPV4_START_PTR0_t              IPV4_START_PTR0;               /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  FETOP_LPM_IPV4_START_PTR1_t              IPV4_START_PTR1;               /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  FETOP_LPM_IPV6_START_PTR0_t              IPV6_START_PTR0;               /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  FETOP_LPM_IPV6_START_PTR1_t              IPV6_START_PTR1;               /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  FETOP_LPM_IPV4_END_PTR0_t                IPV4_END_PTR0;                 /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  FETOP_LPM_IPV4_END_PTR1_t                IPV4_END_PTR1;                 /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  FETOP_LPM_IPV6_END_PTR0_t                IPV6_END_PTR0;                 /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  FETOP_LPM_IPV6_END_PTR1_t                IPV6_END_PTR1;                 /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  FETOP_LPM_INACTIVE_DROP_COUNT_t          INACTIVE_DROP_COUNT;           /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  FETOP_LPM_IPV4_MISS_COUNT0_t             IPV4_MISS_COUNT0;              /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  FETOP_LPM_IPV4_MISS_COUNT1_t             IPV4_MISS_COUNT1;              /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  FETOP_LPM_IPV6_MISS_COUNT0_t             IPV6_MISS_COUNT0;              /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  FETOP_LPM_IPV6_MISS_COUNT1_t             IPV6_MISS_COUNT1;              /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  FETOP_LPM_LPM_STATUS_t                   LPM_STATUS;                    /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  FETOP_LPM_MEM_INIT_t                     MEM_INIT;                      /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  FETOP_LPM_MEM_STATUS_t                   MEM_STATUS;                    /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  FETOP_LPM_DBG_CNTR_t                     DBG_CNTR;                      /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  FETOP_LPM_DBG_LOAD_INC_DEC_PTR_t         DBG_LOAD_INC_DEC_PTR;          /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  FETOP_LPM_DBG_COLUMN_MASK_t              DBG_COLUMN_MASK;               /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  FETOP_LPM_DBG_RSLT_t                     DBG_RSLT;                      /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  FETOP_LPM_DBG_SPTR_EPTR4_t               DBG_SPTR_EPTR4;                /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  FETOP_LPM_DBG_SPTR_EPTR6_t               DBG_SPTR_EPTR6;                /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  FETOP_LPM_DBG_SRCH_ADDR_t                DBG_SRCH_ADDR;                 /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  FETOP_LPM_SPARE_REG0_t                   SPARE_REG0;                    /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  FETOP_LPM_SPARE_REG1_t                   SPARE_REG1;                    /* addr: 0x00000184 */ 
} FETOP_LPM_t;

  

/*
 * HASH
 */
  



#define FETOP_HASH_STATUS                        0xf0022000
#define FETOP_HASH_STATUS_dft                    0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 ready_for_init       :  1 ; /* bits 1:1 */
    cs_uint32 init_in_progress     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init_in_progress     :  1 ; /* bits 0:0 */
    cs_uint32 ready_for_init       :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_t;





#define FETOP_HASH_INIT                          0xf0022004
#define FETOP_HASH_INIT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 init                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_INIT_t;





#define FETOP_HASH_INTERRUPT_0                   0xf0022008
#define FETOP_HASH_INTERRUPT_0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 checkmem_parity_fail :  1 ; /* bits 7:7 */
    cs_uint32 hash_overflow_mult_hit :  1 ; /* bits 6:6 */
    cs_uint32 hashmem_mult_hit     :  1 ; /* bits 5:5 */
    cs_uint32 statusmem_uncorr_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 statusmem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 maskmem_parity_fail  :  1 ; /* bits 2:2 */
    cs_uint32 hashmem_uncorr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 hashmem_corr_ecc_err :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hashmem_corr_ecc_err :  1 ; /* bits 0:0 */
    cs_uint32 hashmem_uncorr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 maskmem_parity_fail  :  1 ; /* bits 2:2 */
    cs_uint32 statusmem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 statusmem_uncorr_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 hashmem_mult_hit     :  1 ; /* bits 5:5 */
    cs_uint32 hash_overflow_mult_hit :  1 ; /* bits 6:6 */
    cs_uint32 checkmem_parity_fail :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_INTERRUPT_0_t;





#define FETOP_HASH_INTENABLE_0                   0xf002200c
#define FETOP_HASH_INTENABLE_0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 checkmem_parity_fail_E :  1 ; /* bits 7:7 */
    cs_uint32 hash_overflow_mult_hit_E :  1 ; /* bits 6:6 */
    cs_uint32 hashmem_mult_hit_E   :  1 ; /* bits 5:5 */
    cs_uint32 statusmem_uncorr_ecc_err_E :  1 ; /* bits 4:4 */
    cs_uint32 statusmem_corr_ecc_err_E :  1 ; /* bits 3:3 */
    cs_uint32 maskmem_parity_fail_E :  1 ; /* bits 2:2 */
    cs_uint32 hashmem_uncorr_ecc_err_E :  1 ; /* bits 1:1 */
    cs_uint32 hashmem_corr_ecc_err_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hashmem_corr_ecc_err_E :  1 ; /* bits 0:0 */
    cs_uint32 hashmem_uncorr_ecc_err_E :  1 ; /* bits 1:1 */
    cs_uint32 maskmem_parity_fail_E :  1 ; /* bits 2:2 */
    cs_uint32 statusmem_corr_ecc_err_E :  1 ; /* bits 3:3 */
    cs_uint32 statusmem_uncorr_ecc_err_E :  1 ; /* bits 4:4 */
    cs_uint32 hashmem_mult_hit_E   :  1 ; /* bits 5:5 */
    cs_uint32 hash_overflow_mult_hit_E :  1 ; /* bits 6:6 */
    cs_uint32 checkmem_parity_fail_E :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_INTENABLE_0_t;





#define FETOP_HASH_INTERRUPT_1                   0xf0022010
#define FETOP_HASH_INTERRUPT_1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 checkmem_parity_fail :  1 ; /* bits 7:7 */
    cs_uint32 hash_overflow_mult_hit :  1 ; /* bits 6:6 */
    cs_uint32 hashmem_mult_hit     :  1 ; /* bits 5:5 */
    cs_uint32 statusmem_uncorr_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 statusmem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 maskmem_parity_fail  :  1 ; /* bits 2:2 */
    cs_uint32 hashmem_uncorr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 hashmem_corr_ecc_err :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hashmem_corr_ecc_err :  1 ; /* bits 0:0 */
    cs_uint32 hashmem_uncorr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 maskmem_parity_fail  :  1 ; /* bits 2:2 */
    cs_uint32 statusmem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 statusmem_uncorr_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 hashmem_mult_hit     :  1 ; /* bits 5:5 */
    cs_uint32 hash_overflow_mult_hit :  1 ; /* bits 6:6 */
    cs_uint32 checkmem_parity_fail :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_INTERRUPT_1_t;





#define FETOP_HASH_INTENABLE_1                   0xf0022014
#define FETOP_HASH_INTENABLE_1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 checkmem_parity_fail_E :  1 ; /* bits 7:7 */
    cs_uint32 hash_overflow_mult_hit_E :  1 ; /* bits 6:6 */
    cs_uint32 hashmem_mult_hit_E   :  1 ; /* bits 5:5 */
    cs_uint32 statusmem_uncorr_ecc_err_E :  1 ; /* bits 4:4 */
    cs_uint32 statusmem_corr_ecc_err_E :  1 ; /* bits 3:3 */
    cs_uint32 maskmem_parity_fail_E :  1 ; /* bits 2:2 */
    cs_uint32 hashmem_uncorr_ecc_err_E :  1 ; /* bits 1:1 */
    cs_uint32 hashmem_corr_ecc_err_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hashmem_corr_ecc_err_E :  1 ; /* bits 0:0 */
    cs_uint32 hashmem_uncorr_ecc_err_E :  1 ; /* bits 1:1 */
    cs_uint32 maskmem_parity_fail_E :  1 ; /* bits 2:2 */
    cs_uint32 statusmem_corr_ecc_err_E :  1 ; /* bits 3:3 */
    cs_uint32 statusmem_uncorr_ecc_err_E :  1 ; /* bits 4:4 */
    cs_uint32 hashmem_mult_hit_E   :  1 ; /* bits 5:5 */
    cs_uint32 hash_overflow_mult_hit_E :  1 ; /* bits 6:6 */
    cs_uint32 checkmem_parity_fail_E :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_INTENABLE_1_t;





#define FETOP_HASH_MULT_HIT                      0xf0022018
#define FETOP_HASH_MULT_HIT_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 hash_ovfw_addr       :  6 ; /* bits 17:12 */
    cs_uint32 hash_addr            : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hash_addr            : 12 ; /* bits 11:0 */
    cs_uint32 hash_ovfw_addr       :  6 ; /* bits 17:12 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MULT_HIT_t;





#define FETOP_HASH_HASH_MEM_ACCESS               0xf002201c
#define FETOP_HASH_HASH_MEM_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 address              : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_ACCESS_t;





#define FETOP_HASH_HASH_MEM_DATA3                0xf0022020
#define FETOP_HASH_HASH_MEM_DATA3_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 mask_ptr_1           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mask_ptr_1           :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_DATA3_t;





#define FETOP_HASH_HASH_MEM_DATA2                0xf0022024
#define FETOP_HASH_HASH_MEM_DATA2_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 result_index_1       : 13 ; /* bits 31:19 */
    cs_uint32 crc32_1              : 19 ; /* bits 18:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc32_1              : 19 ; /* bits 18:0 */
    cs_uint32 result_index_1       : 13 ; /* bits 31:19 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_DATA2_t;





#define FETOP_HASH_HASH_MEM_DATA1                0xf0022028
#define FETOP_HASH_HASH_MEM_DATA1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crc32_1              : 13 ; /* bits 31:19 */
    cs_uint32 mask_ptr_0           :  6 ; /* bits 18:13 */
    cs_uint32 result_index_0       : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 result_index_0       : 13 ; /* bits 12:0 */
    cs_uint32 mask_ptr_0           :  6 ; /* bits 18:13 */
    cs_uint32 crc32_1              : 13 ; /* bits 31:19 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_DATA1_t;





#define FETOP_HASH_HASH_MEM_DATA0                0xf002202c
#define FETOP_HASH_HASH_MEM_DATA0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crc32_0              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc32_0              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_DATA0_t;





#define FETOP_HASH_HASH_MEM_ECC                  0xf0022030
#define FETOP_HASH_HASH_MEM_ECC_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ecc                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ecc                  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_HASH_MEM_ECC_t;





#define FETOP_HASH_UN_CORR_ECC_ADDR_HASH_MEM     0xf0022034
#define FETOP_HASH_UN_CORR_ECC_ADDR_HASH_MEM_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 addr                 : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_UN_CORR_ECC_ADDR_HASH_MEM_t;





#define FETOP_HASH_CORR_ECC_ADDR_HASH_MEM        0xf0022038
#define FETOP_HASH_CORR_ECC_ADDR_HASH_MEM_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 addr                 : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CORR_ECC_ADDR_HASH_MEM_t;





#define FETOP_HASH_OVERFLOW_MEM_ACCESS           0xf002203c
#define FETOP_HASH_OVERFLOW_MEM_ACCESS_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 address              :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_OVERFLOW_MEM_ACCESS_t;





#define FETOP_HASH_OVERFLOW_MEM_DATA1            0xf0022040
#define FETOP_HASH_OVERFLOW_MEM_DATA1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 mask_ptr             :  6 ; /* bits 30:25 */
    cs_uint32 result_index         : 13 ; /* bits 24:12 */
    cs_uint32 crc16                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc16                : 12 ; /* bits 11:0 */
    cs_uint32 result_index         : 13 ; /* bits 24:12 */
    cs_uint32 mask_ptr             :  6 ; /* bits 30:25 */
    cs_uint32 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_OVERFLOW_MEM_DATA1_t;





#define FETOP_HASH_OVERFLOW_MEM_DATA0            0xf0022044
#define FETOP_HASH_OVERFLOW_MEM_DATA0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crc32                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc32                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_OVERFLOW_MEM_DATA0_t;





#define FETOP_HASH_STATUS_MEM_ACCESS             0xf0022048
#define FETOP_HASH_STATUS_MEM_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 address              :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_ACCESS_t;





#define FETOP_HASH_STATUS_MEM_DATA1              0xf002204c
#define FETOP_HASH_STATUS_MEM_DATA1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 status               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 status               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_DATA1_t;





#define FETOP_HASH_STATUS_MEM_DATA0              0xf0022050
#define FETOP_HASH_STATUS_MEM_DATA0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 status               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 status               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_DATA0_t;





#define FETOP_HASH_STATUS_MEM_ECC                0xf0022054
#define FETOP_HASH_STATUS_MEM_ECC_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 ecc                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ecc                  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_ECC_t;





#define FETOP_HASH_UN_CORR_ECC_ADDR_STATUS_MEM   0xf0022058
#define FETOP_HASH_UN_CORR_ECC_ADDR_STATUS_MEM_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_UN_CORR_ECC_ADDR_STATUS_MEM_t;





#define FETOP_HASH_CORR_ECC_ADDR_STATUS_MEM      0xf002205c
#define FETOP_HASH_CORR_ECC_ADDR_STATUS_MEM_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CORR_ECC_ADDR_STATUS_MEM_t;





#define FETOP_HASH_STATUS_MEM_MASK1              0xf0022060
#define FETOP_HASH_STATUS_MEM_MASK1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mask1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mask1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_MASK1_t;





#define FETOP_HASH_STATUS_MEM_MASK0              0xf0022064
#define FETOP_HASH_STATUS_MEM_MASK0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mask0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mask0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_STATUS_MEM_MASK0_t;





#define FETOP_HASH_MASK_MEM_ACCESS               0xf0022068
#define FETOP_HASH_MASK_MEM_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 address              :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_ACCESS_t;





#define FETOP_HASH_MASK_MEM_DATA4                0xf002206c
#define FETOP_HASH_MASK_MEM_DATA4_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 FE_HM_PARITY         :  1 ; /* bits 21:21 */
    cs_uint32 FE_HM_MCGID_MASK     :  9 ; /* bits 20:12 */
    cs_uint32 FE_HM_PKTLEN_RNG_MATCH_VECTOR_MASK :  4 ; /* bits 11:8 */
    cs_uint32 FE_HM_PPP_PROTOCOL_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_HM_PPP_PROTOCOL_VLD_MASK :  1 ; /* bits 6:6 */
    cs_uint32 FE_HM_IPV6_DOH_MASK  :  1 ; /* bits 5:5 */
    cs_uint32 FE_HM_IPV6_RH_MASK   :  1 ; /* bits 4:4 */
    cs_uint32 FE_HM_IPV6_HBH_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 FE_HM_IPV6_NDP_MASK  :  1 ; /* bits 2:2 */
    cs_uint32 FE_HM_SPI_MASK       :  1 ; /* bits 1:1 */
    cs_uint32 FE_HM_SPI_VLD_MASK   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_HM_SPI_VLD_MASK   :  1 ; /* bits 0:0 */
    cs_uint32 FE_HM_SPI_MASK       :  1 ; /* bits 1:1 */
    cs_uint32 FE_HM_IPV6_NDP_MASK  :  1 ; /* bits 2:2 */
    cs_uint32 FE_HM_IPV6_HBH_MASK  :  1 ; /* bits 3:3 */
    cs_uint32 FE_HM_IPV6_RH_MASK   :  1 ; /* bits 4:4 */
    cs_uint32 FE_HM_IPV6_DOH_MASK  :  1 ; /* bits 5:5 */
    cs_uint32 FE_HM_PPP_PROTOCOL_VLD_MASK :  1 ; /* bits 6:6 */
    cs_uint32 FE_HM_PPP_PROTOCOL_MASK :  1 ; /* bits 7:7 */
    cs_uint32 FE_HM_PKTLEN_RNG_MATCH_VECTOR_MASK :  4 ; /* bits 11:8 */
    cs_uint32 FE_HM_MCGID_MASK     :  9 ; /* bits 20:12 */
    cs_uint32 FE_HM_PARITY         :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_DATA4_t;





#define FETOP_HASH_MASK_MEM_DATA3                0xf0022070
#define FETOP_HASH_MASK_MEM_DATA3_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_HM_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 31:31 */
    cs_uint32 FE_HM_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 30:30 */
    cs_uint32 FE_HM_L7_FIELD_SEL   :  2 ; /* bits 29:28 */
    cs_uint32 FE_HM_HASH_FID_MASK  :  1 ; /* bits 27:27 */
    cs_uint32 FE_HM_NOT_HDR_A_FLAGS_STSVLD_MASK :  1 ; /* bits 26:26 */
    cs_uint32 FE_HM_L4_CHKSUM_ERR_MASK :  1 ; /* bits 25:25 */
    cs_uint32 FE_HM_L3_CHKSUM_ERR_MASK :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_HDR_A_FLAGS_CRCERR_MASK :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_L7_FIELD_VLD_MASK :  1 ; /* bits 22:22 */
    cs_uint32 FE_HM_L7_FIELD_MASK  :  1 ; /* bits 21:21 */
    cs_uint32 FE_HM_ORIG_LSPID_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_DA_AN_MAC_HIT_MASK :  1 ; /* bits 19:19 */
    cs_uint32 FE_HM_DA_AN_MAC_SEL_MASK :  1 ; /* bits 18:18 */
    cs_uint32 FE_HM_BC_DA_MASK     :  1 ; /* bits 17:17 */
    cs_uint32 FE_HM_MC_DA_MASK     :  1 ; /* bits 16:16 */
    cs_uint32 FE_HM_MCIDX_MASK     :  1 ; /* bits 15:15 */
    cs_uint32 FE_HM_RECIRC_IDX_MASK :  1 ; /* bits 14:14 */
    cs_uint32 FE_HM_RSVD_109       :  1 ; /* bits 13:13 */
    cs_uint32 FE_HM_PPPOE_SESSION_ID_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_HM_PPPOE_SESSION_ID_VLD_MASK :  1 ; /* bits 11:11 */
    cs_uint32 FE_HM_FWDTYPE_MASK   :  4 ; /* bits 10:7 */
    cs_uint32 FE_HM_LSPID_MASK     :  1 ; /* bits 6:6 */
    cs_uint32 FE_HM_L4_VLD_MASK    :  1 ; /* bits 5:5 */
    cs_uint32 FE_HM_TCP_ECN_MASK   :  3 ; /* bits 4:2 */
    cs_uint32 FE_HM_TCP_CTRL_MASK  :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_HM_TCP_CTRL_MASK  :  2 ; /* bits 1:0 */
    cs_uint32 FE_HM_TCP_ECN_MASK   :  3 ; /* bits 4:2 */
    cs_uint32 FE_HM_L4_VLD_MASK    :  1 ; /* bits 5:5 */
    cs_uint32 FE_HM_LSPID_MASK     :  1 ; /* bits 6:6 */
    cs_uint32 FE_HM_FWDTYPE_MASK   :  4 ; /* bits 10:7 */
    cs_uint32 FE_HM_PPPOE_SESSION_ID_VLD_MASK :  1 ; /* bits 11:11 */
    cs_uint32 FE_HM_PPPOE_SESSION_ID_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_HM_RSVD_109       :  1 ; /* bits 13:13 */
    cs_uint32 FE_HM_RECIRC_IDX_MASK :  1 ; /* bits 14:14 */
    cs_uint32 FE_HM_MCIDX_MASK     :  1 ; /* bits 15:15 */
    cs_uint32 FE_HM_MC_DA_MASK     :  1 ; /* bits 16:16 */
    cs_uint32 FE_HM_BC_DA_MASK     :  1 ; /* bits 17:17 */
    cs_uint32 FE_HM_DA_AN_MAC_SEL_MASK :  1 ; /* bits 18:18 */
    cs_uint32 FE_HM_DA_AN_MAC_HIT_MASK :  1 ; /* bits 19:19 */
    cs_uint32 FE_HM_ORIG_LSPID_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_L7_FIELD_MASK  :  1 ; /* bits 21:21 */
    cs_uint32 FE_HM_L7_FIELD_VLD_MASK :  1 ; /* bits 22:22 */
    cs_uint32 FE_HM_HDR_A_FLAGS_CRCERR_MASK :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_L3_CHKSUM_ERR_MASK :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_L4_CHKSUM_ERR_MASK :  1 ; /* bits 25:25 */
    cs_uint32 FE_HM_NOT_HDR_A_FLAGS_STSVLD_MASK :  1 ; /* bits 26:26 */
    cs_uint32 FE_HM_HASH_FID_MASK  :  1 ; /* bits 27:27 */
    cs_uint32 FE_HM_L7_FIELD_SEL   :  2 ; /* bits 29:28 */
    cs_uint32 FE_HM_SA_BNG_MAC_SEL_MASK :  1 ; /* bits 30:30 */
    cs_uint32 FE_HM_SA_BNG_MAC_HIT_MASK :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_DATA3_t;





#define FETOP_HASH_MASK_MEM_DATA2                0xf0022074
#define FETOP_HASH_MASK_MEM_DATA2_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_HM_TCP_CTRL_MASK  :  4 ; /* bits 31:28 */
    cs_uint32 FE_HM_L4_SP_MASK     : 16 ; /* bits 27:12 */
    cs_uint32 FE_HM_L4_DP_MASK     : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_HM_L4_DP_MASK     : 12 ; /* bits 11:0 */
    cs_uint32 FE_HM_L4_SP_MASK     : 16 ; /* bits 27:12 */
    cs_uint32 FE_HM_TCP_CTRL_MASK  :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_DATA2_t;





#define FETOP_HASH_MASK_MEM_DATA1                0xf0022078
#define FETOP_HASH_MASK_MEM_DATA1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_HM_L4_DP_MASK     :  4 ; /* bits 31:28 */
    cs_uint32 FE_HM_L4_PORTS_RNGD  :  2 ; /* bits 27:26 */
    cs_uint32 FE_HM_IP_VLD_MASK    :  1 ; /* bits 25:25 */
    cs_uint32 FE_HM_IP_VER_MASK    :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_IPV6_FLOW_LBL_MASK :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_KEYGEN_POLY_SEL :  2 ; /* bits 22:21 */
    cs_uint32 FE_HM_IP_FRAGMENT_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_ECN_MASK       :  2 ; /* bits 19:18 */
    cs_uint32 FE_HM_DSCP_MASK      :  6 ; /* bits 17:12 */
    cs_uint32 FE_HM_IP_PROT_MASK   :  1 ; /* bits 11:11 */
    cs_uint32 FE_HM_IP_SA_MASK     :  9 ; /* bits 10:2 */
    cs_uint32 FE_HM_IP_DA_MASK     :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_HM_IP_DA_MASK     :  2 ; /* bits 1:0 */
    cs_uint32 FE_HM_IP_SA_MASK     :  9 ; /* bits 10:2 */
    cs_uint32 FE_HM_IP_PROT_MASK   :  1 ; /* bits 11:11 */
    cs_uint32 FE_HM_DSCP_MASK      :  6 ; /* bits 17:12 */
    cs_uint32 FE_HM_ECN_MASK       :  2 ; /* bits 19:18 */
    cs_uint32 FE_HM_IP_FRAGMENT_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_KEYGEN_POLY_SEL :  2 ; /* bits 22:21 */
    cs_uint32 FE_HM_IPV6_FLOW_LBL_MASK :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_IP_VER_MASK    :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_IP_VLD_MASK    :  1 ; /* bits 25:25 */
    cs_uint32 FE_HM_L4_PORTS_RNGD  :  2 ; /* bits 27:26 */
    cs_uint32 FE_HM_L4_DP_MASK     :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_DATA1_t;





#define FETOP_HASH_MASK_MEM_DATA0                0xf002207c
#define FETOP_HASH_MASK_MEM_DATA0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FE_HM_IP_DA_MASK     :  7 ; /* bits 31:25 */
    cs_uint32 FE_HM_VID_2_MASK     :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_DEI_2_MASK     :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_8021P_2_MASK   :  1 ; /* bits 22:22 */
    cs_uint32 FE_HM_TPID_ENC_2_LSB_MASK :  1 ; /* bits 21:21 */
    cs_uint32 FE_HM_TPID_ENC_2_MSB_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_VID_1_MASK     :  1 ; /* bits 19:19 */
    cs_uint32 FE_HM_DEI_1_MASK     :  1 ; /* bits 18:18 */
    cs_uint32 FE_HM_8021P_1_MASK   :  1 ; /* bits 17:17 */
    cs_uint32 FE_HM_TPID_ENC_1_LSB_MASK :  1 ; /* bits 16:16 */
    cs_uint32 FE_HM_TPID_ENC_1_MSB_MASK :  1 ; /* bits 15:15 */
    cs_uint32 FE_HM_LLC_TYPE_ENC_LSB_MASK :  1 ; /* bits 14:14 */
    cs_uint32 FE_HM_LLC_TYPE_ENC_MSB_MASK :  1 ; /* bits 13:13 */
    cs_uint32 FE_HM_ETHERTYPE_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_HM_MAC_SA_MASK    :  6 ; /* bits 11:6 */
    cs_uint32 FE_HM_MAC_DA_MASK    :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FE_HM_MAC_DA_MASK    :  6 ; /* bits 5:0 */
    cs_uint32 FE_HM_MAC_SA_MASK    :  6 ; /* bits 11:6 */
    cs_uint32 FE_HM_ETHERTYPE_MASK :  1 ; /* bits 12:12 */
    cs_uint32 FE_HM_LLC_TYPE_ENC_MSB_MASK :  1 ; /* bits 13:13 */
    cs_uint32 FE_HM_LLC_TYPE_ENC_LSB_MASK :  1 ; /* bits 14:14 */
    cs_uint32 FE_HM_TPID_ENC_1_MSB_MASK :  1 ; /* bits 15:15 */
    cs_uint32 FE_HM_TPID_ENC_1_LSB_MASK :  1 ; /* bits 16:16 */
    cs_uint32 FE_HM_8021P_1_MASK   :  1 ; /* bits 17:17 */
    cs_uint32 FE_HM_DEI_1_MASK     :  1 ; /* bits 18:18 */
    cs_uint32 FE_HM_VID_1_MASK     :  1 ; /* bits 19:19 */
    cs_uint32 FE_HM_TPID_ENC_2_MSB_MASK :  1 ; /* bits 20:20 */
    cs_uint32 FE_HM_TPID_ENC_2_LSB_MASK :  1 ; /* bits 21:21 */
    cs_uint32 FE_HM_8021P_2_MASK   :  1 ; /* bits 22:22 */
    cs_uint32 FE_HM_DEI_2_MASK     :  1 ; /* bits 23:23 */
    cs_uint32 FE_HM_VID_2_MASK     :  1 ; /* bits 24:24 */
    cs_uint32 FE_HM_IP_DA_MASK     :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_MASK_MEM_DATA0_t;





#define FETOP_HASH_PARITY_ERR_ADDR_MASK_MEM      0xf0022080
#define FETOP_HASH_PARITY_ERR_ADDR_MASK_MEM_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 addr                 :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_PARITY_ERR_ADDR_MASK_MEM_t;





#define FETOP_HASH_DBG_FIFO_ACCESS               0xf0022084
#define FETOP_HASH_DBG_FIFO_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 address              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_DBG_FIFO_ACCESS_t;





#define FETOP_HASH_DBG_FIFO_DATA2                0xf0022088
#define FETOP_HASH_DBG_FIFO_DATA2_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 tuple_hit            :  1 ; /* bits 19:19 */
    cs_uint32 tuple_priority       :  4 ; /* bits 18:15 */
    cs_uint32 result_addr          : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 result_addr          : 15 ; /* bits 14:0 */
    cs_uint32 tuple_priority       :  4 ; /* bits 18:15 */
    cs_uint32 tuple_hit            :  1 ; /* bits 19:19 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_DBG_FIFO_DATA2_t;





#define FETOP_HASH_DBG_FIFO_DATA1                0xf002208c
#define FETOP_HASH_DBG_FIFO_DATA1_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 result_addr          :  1 ; /* bits 31:31 */
    cs_uint32 mask_ptr             :  6 ; /* bits 30:25 */
    cs_uint32 result_index         : 13 ; /* bits 24:12 */
    cs_uint32 crc16                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc16                : 12 ; /* bits 11:0 */
    cs_uint32 result_index         : 13 ; /* bits 24:12 */
    cs_uint32 mask_ptr             :  6 ; /* bits 30:25 */
    cs_uint32 result_addr          :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_DBG_FIFO_DATA1_t;





#define FETOP_HASH_DBG_FIFO_DATA0                0xf0022090
#define FETOP_HASH_DBG_FIFO_DATA0_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crc32                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crc32                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_DBG_FIFO_DATA0_t;





#define FETOP_HASH_SUPER_HASH                    0xf0022094
#define FETOP_HASH_SUPER_HASH_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 enable               :  1 ; /* bits 6:6 */
    cs_uint32 mask_ptr             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mask_ptr             :  6 ; /* bits 5:0 */
    cs_uint32 enable               :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_SUPER_HASH_t;





#define FETOP_HASH_CHECK_MEM_ACCESS              0xf0022098
#define FETOP_HASH_CHECK_MEM_ACCESS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 address              : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 rb_w                 :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CHECK_MEM_ACCESS_t;





#define FETOP_HASH_CHECK_MEM_DATA2               0xf002209c
#define FETOP_HASH_CHECK_MEM_DATA2_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 parity               :  1 ; /* bits 7:7 */
    cs_uint32 ip_da_check_idx      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ip_da_check_idx      :  7 ; /* bits 6:0 */
    cs_uint32 parity               :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CHECK_MEM_DATA2_t;





#define FETOP_HASH_CHECK_MEM_DATA1               0xf00220a0
#define FETOP_HASH_CHECK_MEM_DATA1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ip_da_check_idx      :  5 ; /* bits 31:27 */
    cs_uint32 ip_sa_check_idx      : 12 ; /* bits 26:15 */
    cs_uint32 l2_check_idx         :  9 ; /* bits 14:6 */
    cs_uint32 l4_dp_to_be_checked  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 l4_dp_to_be_checked  :  6 ; /* bits 5:0 */
    cs_uint32 l2_check_idx         :  9 ; /* bits 14:6 */
    cs_uint32 ip_sa_check_idx      : 12 ; /* bits 26:15 */
    cs_uint32 ip_da_check_idx      :  5 ; /* bits 31:27 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CHECK_MEM_DATA1_t;





#define FETOP_HASH_CHECK_MEM_DATA0               0xf00220a4
#define FETOP_HASH_CHECK_MEM_DATA0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 l4_dp_to_be_checked  : 10 ; /* bits 31:22 */
    cs_uint32 l4_sp_to_be_checked  : 16 ; /* bits 21:6 */
    cs_uint32 check_ip_da_en       :  1 ; /* bits 5:5 */
    cs_uint32 check_ip_sa_en       :  1 ; /* bits 4:4 */
    cs_uint32 check_mac_da_en      :  1 ; /* bits 3:3 */
    cs_uint32 check_mac_sa_en      :  1 ; /* bits 2:2 */
    cs_uint32 check_l4_dp_en       :  1 ; /* bits 1:1 */
    cs_uint32 check_l4_sp_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 check_l4_sp_en       :  1 ; /* bits 0:0 */
    cs_uint32 check_l4_dp_en       :  1 ; /* bits 1:1 */
    cs_uint32 check_mac_sa_en      :  1 ; /* bits 2:2 */
    cs_uint32 check_mac_da_en      :  1 ; /* bits 3:3 */
    cs_uint32 check_ip_sa_en       :  1 ; /* bits 4:4 */
    cs_uint32 check_ip_da_en       :  1 ; /* bits 5:5 */
    cs_uint32 l4_sp_to_be_checked  : 16 ; /* bits 21:6 */
    cs_uint32 l4_dp_to_be_checked  : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_CHECK_MEM_DATA0_t;





#define FETOP_HASH_PARITY_ERR_ADDR_CHECK_MEM     0xf00220a8
#define FETOP_HASH_PARITY_ERR_ADDR_CHECK_MEM_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 addr                 : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FETOP_HASH_PARITY_ERR_ADDR_CHECK_MEM_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* HASH */

typedef struct {
  FETOP_HASH_STATUS_t                      STATUS;                        /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  FETOP_HASH_INIT_t                        INIT;                          /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  FETOP_HASH_INTERRUPT_0_t                 INTERRUPT_0;                   /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  FETOP_HASH_INTENABLE_0_t                 INTENABLE_0;                   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  FETOP_HASH_INTERRUPT_1_t                 INTERRUPT_1;                   /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  FETOP_HASH_INTENABLE_1_t                 INTENABLE_1;                   /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  FETOP_HASH_MULT_HIT_t                    MULT_HIT;                      /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  FETOP_HASH_HASH_MEM_ACCESS_t             HASH_MEM_ACCESS;               /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  FETOP_HASH_HASH_MEM_DATA3_t              HASH_MEM_DATA3;                /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  FETOP_HASH_HASH_MEM_DATA2_t              HASH_MEM_DATA2;                /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  FETOP_HASH_HASH_MEM_DATA1_t              HASH_MEM_DATA1;                /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  FETOP_HASH_HASH_MEM_DATA0_t              HASH_MEM_DATA0;                /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  FETOP_HASH_HASH_MEM_ECC_t                HASH_MEM_ECC;                  /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  FETOP_HASH_UN_CORR_ECC_ADDR_HASH_MEM_t   UN_CORR_ECC_ADDR_HASH_MEM;     /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  FETOP_HASH_CORR_ECC_ADDR_HASH_MEM_t      CORR_ECC_ADDR_HASH_MEM;        /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  FETOP_HASH_OVERFLOW_MEM_ACCESS_t         OVERFLOW_MEM_ACCESS;           /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  FETOP_HASH_OVERFLOW_MEM_DATA1_t          OVERFLOW_MEM_DATA1;            /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  FETOP_HASH_OVERFLOW_MEM_DATA0_t          OVERFLOW_MEM_DATA0;            /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  FETOP_HASH_STATUS_MEM_ACCESS_t           STATUS_MEM_ACCESS;             /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  FETOP_HASH_STATUS_MEM_DATA1_t            STATUS_MEM_DATA1;              /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  FETOP_HASH_STATUS_MEM_DATA0_t            STATUS_MEM_DATA0;              /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  FETOP_HASH_STATUS_MEM_ECC_t              STATUS_MEM_ECC;                /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  FETOP_HASH_UN_CORR_ECC_ADDR_STATUS_MEM_t UN_CORR_ECC_ADDR_STATUS_MEM;   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  FETOP_HASH_CORR_ECC_ADDR_STATUS_MEM_t    CORR_ECC_ADDR_STATUS_MEM;      /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  FETOP_HASH_STATUS_MEM_MASK1_t            STATUS_MEM_MASK1;              /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  FETOP_HASH_STATUS_MEM_MASK0_t            STATUS_MEM_MASK0;              /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  FETOP_HASH_MASK_MEM_ACCESS_t             MASK_MEM_ACCESS;               /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  FETOP_HASH_MASK_MEM_DATA4_t              MASK_MEM_DATA4;                /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  FETOP_HASH_MASK_MEM_DATA3_t              MASK_MEM_DATA3;                /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  FETOP_HASH_MASK_MEM_DATA2_t              MASK_MEM_DATA2;                /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  FETOP_HASH_MASK_MEM_DATA1_t              MASK_MEM_DATA1;                /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  FETOP_HASH_MASK_MEM_DATA0_t              MASK_MEM_DATA0;                /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  FETOP_HASH_PARITY_ERR_ADDR_MASK_MEM_t    PARITY_ERR_ADDR_MASK_MEM;      /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  FETOP_HASH_DBG_FIFO_ACCESS_t             DBG_FIFO_ACCESS;               /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  FETOP_HASH_DBG_FIFO_DATA2_t              DBG_FIFO_DATA2;                /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  FETOP_HASH_DBG_FIFO_DATA1_t              DBG_FIFO_DATA1;                /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  FETOP_HASH_DBG_FIFO_DATA0_t              DBG_FIFO_DATA0;                /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  FETOP_HASH_SUPER_HASH_t                  SUPER_HASH;                    /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  FETOP_HASH_CHECK_MEM_ACCESS_t            CHECK_MEM_ACCESS;              /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  FETOP_HASH_CHECK_MEM_DATA2_t             CHECK_MEM_DATA2;               /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  FETOP_HASH_CHECK_MEM_DATA1_t             CHECK_MEM_DATA1;               /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  FETOP_HASH_CHECK_MEM_DATA0_t             CHECK_MEM_DATA0;               /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  FETOP_HASH_PARITY_ERR_ADDR_CHECK_MEM_t   PARITY_ERR_ADDR_CHECK_MEM;     /* addr: 0x000000a8 */ 
} FETOP_HASH_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* FETOP */

typedef struct {
  FETOP_FE_t                               FE;                            /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3769];                 
  FETOP_LPM_t                              LPM;                           /* addr: 0x00001000 */ 
  cs_uint32                                rsrvd2[3901];                 
  FETOP_HASH_t                             HASH;                          /* addr: 0x00002000 */ 
} FETOP_t;


/*
 * QM
 */
  



#define QM_CONFIG_0                              0xf0030000
#define QM_CONFIG_0_dft                          0x23282001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 max_pkt_len          : 14 ; /* bits 29:16 */
    cs_uint32 mtu                  :  8 ; /* bits 15:8 */
    cs_uint32 egress_flow_cntl_mode :  2 ; /* bits 7:6 */
    cs_uint32 egress_flow_cntl_int_threshold :  2 ; /* bits 5:4 */
    cs_uint32 voq_disable_active   :  1 ; /* bits 3:3 */
    cs_uint32 que_age_test_enable  :  1 ; /* bits 2:2 */
    cs_uint32 pkt_age_test_enable  :  1 ; /* bits 1:1 */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
    cs_uint32 pkt_age_test_enable  :  1 ; /* bits 1:1 */
    cs_uint32 que_age_test_enable  :  1 ; /* bits 2:2 */
    cs_uint32 voq_disable_active   :  1 ; /* bits 3:3 */
    cs_uint32 egress_flow_cntl_int_threshold :  2 ; /* bits 5:4 */
    cs_uint32 egress_flow_cntl_mode :  2 ; /* bits 7:6 */
    cs_uint32 mtu                  :  8 ; /* bits 15:8 */
    cs_uint32 max_pkt_len          : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CONFIG_0_t;





#define QM_CONFIG_1                              0xf0030004
#define QM_CONFIG_1_dft                          0x00000220




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 config_spare         :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               : 14 ;
    cs_uint32 paging_size          :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 cpu_banks            :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 mem_config           :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mem_config           :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 cpu_banks            :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 paging_size          :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd3               : 14 ;
    cs_uint32 config_spare         :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CONFIG_1_t;





#define QM_CONFIG_2                              0xf0030008
#define QM_CONFIG_2_dft                          0x001f011f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 egress_gige_thresh   :  2 ; /* bits 20:19 */
    cs_uint32 egress_gige_mask     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 ingress_write_timeout_control :  1 ; /* bits 8:8 */
    cs_uint32 ingress_write_timeout :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ingress_write_timeout :  8 ; /* bits 7:0 */
    cs_uint32 ingress_write_timeout_control :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 egress_gige_mask     :  3 ; /* bits 18:16 */
    cs_uint32 egress_gige_thresh   :  2 ; /* bits 20:19 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CONFIG_2_t;





#define QM_CONFIG_3                              0xf003000c
#define QM_CONFIG_3_dft                          0xb4cf6080




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 wready_coeff4        :  4 ; /* bits 31:28 */
    cs_uint32 wready_coeff3        :  4 ; /* bits 27:24 */
    cs_uint32 wready_coeff2        :  4 ; /* bits 23:20 */
    cs_uint32 wready_coeff1        :  4 ; /* bits 19:16 */
    cs_uint32 wready_thresh        :  8 ; /* bits 15:8 */
    cs_uint32 wready_period        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wready_period        :  8 ; /* bits 7:0 */
    cs_uint32 wready_thresh        :  8 ; /* bits 15:8 */
    cs_uint32 wready_coeff1        :  4 ; /* bits 19:16 */
    cs_uint32 wready_coeff2        :  4 ; /* bits 23:20 */
    cs_uint32 wready_coeff3        :  4 ; /* bits 27:24 */
    cs_uint32 wready_coeff4        :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CONFIG_3_t;





#define QM_CONFIG_4                              0xf0030010
#define QM_CONFIG_4_dft                          0xb4cf6080




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 wready_coeff4        :  4 ; /* bits 31:28 */
    cs_uint32 wready_coeff3        :  4 ; /* bits 27:24 */
    cs_uint32 wready_coeff2        :  4 ; /* bits 23:20 */
    cs_uint32 wready_coeff1        :  4 ; /* bits 19:16 */
    cs_uint32 wready_thresh        :  8 ; /* bits 15:8 */
    cs_uint32 wready_period        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wready_period        :  8 ; /* bits 7:0 */
    cs_uint32 wready_thresh        :  8 ; /* bits 15:8 */
    cs_uint32 wready_coeff1        :  4 ; /* bits 19:16 */
    cs_uint32 wready_coeff2        :  4 ; /* bits 23:20 */
    cs_uint32 wready_coeff3        :  4 ; /* bits 27:24 */
    cs_uint32 wready_coeff4        :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CONFIG_4_t;





#define QM_STATUS_0                              0xf0030014
#define QM_STATUS_0_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 buffers              :  4 ; /* bits 15:12 */
    cs_uint32 cpu_banks            :  4 ; /* bits 11:8 */
    cs_uint32 pkt_banks            :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pkt_banks            :  4 ; /* bits 7:4 */
    cs_uint32 cpu_banks            :  4 ; /* bits 11:8 */
    cs_uint32 buffers              :  4 ; /* bits 15:12 */
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_STATUS_0_t;





#define QM_STATUS_1                              0xf0030018
#define QM_STATUS_1_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 pkt_buffer0_addr     :  7 ; /* bits 18:12 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 bytes_per_buffer     :  7 ; /* bits 10:4 */
    cs_uint32 buffers_per_bank     :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffers_per_bank     :  4 ; /* bits 3:0 */
    cs_uint32 bytes_per_buffer     :  7 ; /* bits 10:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pkt_buffer0_addr     :  7 ; /* bits 18:12 */
    cs_uint32 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_STATUS_1_t;





#define QM_FLUSH_STATUS                          0xf003001c
#define QM_FLUSH_STATUS_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 flush_fifo_cnt       :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 flush_active         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flush_active         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 flush_fifo_cnt       :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_FLUSH_STATUS_t;





#define QM_INGRESS_STATUS_PRIMARY_PATH0          0xf0030020
#define QM_INGRESS_STATUS_PRIMARY_PATH0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 drop_pkt_write_timeout_err_cnt :  4 ; /* bits 31:28 */
    cs_uint32 drop_pkt_voq_id_err_cnt :  4 ; /* bits 27:24 */
    cs_uint32 drop_pkt_no_free_buf_err_cnt :  4 ; /* bits 23:20 */
    cs_uint32 drop_pkt_buf_max_err_cnt :  4 ; /* bits 19:16 */
    cs_uint32 drop_pkt_len_max_err_cnt :  4 ; /* bits 15:12 */
    cs_uint32 drop_pkt_len_zero_err_cnt :  4 ; /* bits 11:8 */
    cs_uint32 drop_pkt_len_err_cnt :  4 ; /* bits 7:4 */
    cs_uint32 drop_pkt_eop_missing_err_cnt :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_pkt_eop_missing_err_cnt :  4 ; /* bits 3:0 */
    cs_uint32 drop_pkt_len_err_cnt :  4 ; /* bits 7:4 */
    cs_uint32 drop_pkt_len_zero_err_cnt :  4 ; /* bits 11:8 */
    cs_uint32 drop_pkt_len_max_err_cnt :  4 ; /* bits 15:12 */
    cs_uint32 drop_pkt_buf_max_err_cnt :  4 ; /* bits 19:16 */
    cs_uint32 drop_pkt_no_free_buf_err_cnt :  4 ; /* bits 23:20 */
    cs_uint32 drop_pkt_voq_id_err_cnt :  4 ; /* bits 27:24 */
    cs_uint32 drop_pkt_write_timeout_err_cnt :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INGRESS_STATUS_PRIMARY_PATH0_t;





#define QM_INGRESS_STATUS_PRIMARY_PATH1          0xf0030024
#define QM_INGRESS_STATUS_PRIMARY_PATH1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 drop_pkt_voq_disable_id :  7 ; /* bits 22:16 */
    cs_uint32 drop_pkt_voq_disable_cnt :  8 ; /* bits 15:8 */
    cs_uint32 drop_pkt_flush_active_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_pkt_flush_active_cnt :  8 ; /* bits 7:0 */
    cs_uint32 drop_pkt_voq_disable_cnt :  8 ; /* bits 15:8 */
    cs_uint32 drop_pkt_voq_disable_id :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INGRESS_STATUS_PRIMARY_PATH1_t;





#define QM_INGRESS_STATUS_CPU_PATH0              0xf0030028
#define QM_INGRESS_STATUS_CPU_PATH0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 drop_pkt_write_timeout_err_cnt :  4 ; /* bits 31:28 */
    cs_uint32 drop_pkt_voq_id_err_cnt :  4 ; /* bits 27:24 */
    cs_uint32 drop_pkt_no_free_buf_err_cnt :  4 ; /* bits 23:20 */
    cs_uint32 drop_pkt_buf_max_err_cnt :  4 ; /* bits 19:16 */
    cs_uint32 drop_pkt_len_max_err_cnt :  4 ; /* bits 15:12 */
    cs_uint32 drop_pkt_len_zero_err_cnt :  4 ; /* bits 11:8 */
    cs_uint32 drop_pkt_len_err_cnt :  4 ; /* bits 7:4 */
    cs_uint32 drop_pkt_eop_missing_err_cnt :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_pkt_eop_missing_err_cnt :  4 ; /* bits 3:0 */
    cs_uint32 drop_pkt_len_err_cnt :  4 ; /* bits 7:4 */
    cs_uint32 drop_pkt_len_zero_err_cnt :  4 ; /* bits 11:8 */
    cs_uint32 drop_pkt_len_max_err_cnt :  4 ; /* bits 15:12 */
    cs_uint32 drop_pkt_buf_max_err_cnt :  4 ; /* bits 19:16 */
    cs_uint32 drop_pkt_no_free_buf_err_cnt :  4 ; /* bits 23:20 */
    cs_uint32 drop_pkt_voq_id_err_cnt :  4 ; /* bits 27:24 */
    cs_uint32 drop_pkt_write_timeout_err_cnt :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INGRESS_STATUS_CPU_PATH0_t;





#define QM_INGRESS_STATUS_CPU_PATH1              0xf003002c
#define QM_INGRESS_STATUS_CPU_PATH1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 drop_pkt_voq_disable_id :  7 ; /* bits 22:16 */
    cs_uint32 drop_pkt_voq_disable_cnt :  8 ; /* bits 15:8 */
    cs_uint32 drop_pkt_flush_active_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 drop_pkt_flush_active_cnt :  8 ; /* bits 7:0 */
    cs_uint32 drop_pkt_voq_disable_cnt :  8 ; /* bits 15:8 */
    cs_uint32 drop_pkt_voq_disable_id :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INGRESS_STATUS_CPU_PATH1_t;





#define QM_EGRESS_STATUS_0                       0xf0030030
#define QM_EGRESS_STATUS_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_hdr_uncorrected_errs : 16 ; /* bits 31:16 */
    cs_uint32 pkt_hdr_corrected_errs : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_hdr_corrected_errs : 16 ; /* bits 15:0 */
    cs_uint32 pkt_hdr_uncorrected_errs : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_EGRESS_STATUS_0_t;





#define QM_EGRESS_STATUS_1                       0xf0030034
#define QM_EGRESS_STATUS_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 egress_flush_cnt     : 16 ; /* bits 31:16 */
    cs_uint32 pkt_age_old_drop_cnt : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_age_old_drop_cnt : 16 ; /* bits 15:0 */
    cs_uint32 egress_flush_cnt     : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_EGRESS_STATUS_1_t;





#define QM_CPU_PATH_CONFIG_0                     0xf0030038
#define QM_CPU_PATH_CONFIG_0_dft                 0x23281000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 max_cpu_pkt_len      : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_buffers          : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_buffers          : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 max_cpu_pkt_len      : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_CONFIG_0_t;





#define QM_CPU_PATH_CONFIG_1                     0xf003003c
#define QM_CPU_PATH_CONFIG_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 linux_2byte_align_enable :  1 ; /* bits 2:2 */
    cs_uint32 linux_mode_sch_rpt_size :  1 ; /* bits 1:1 */
    cs_uint32 linux_mode           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_mode           :  1 ; /* bits 0:0 */
    cs_uint32 linux_mode_sch_rpt_size :  1 ; /* bits 1:1 */
    cs_uint32 linux_2byte_align_enable :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_CONFIG_1_t;





#define QM_CPU_PATH_VOQ_MAP_0                    0xf0030040
#define QM_CPU_PATH_VOQ_MAP_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_0_t;





#define QM_CPU_PATH_VOQ_MAP_1                    0xf0030044
#define QM_CPU_PATH_VOQ_MAP_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_1_t;





#define QM_CPU_PATH_VOQ_MAP_2                    0xf0030048
#define QM_CPU_PATH_VOQ_MAP_2_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_2_t;





#define QM_CPU_PATH_VOQ_MAP_3                    0xf003004c
#define QM_CPU_PATH_VOQ_MAP_3_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_3_t;





#define QM_CPU_PATH_VOQ_MAP_4                    0xf0030050
#define QM_CPU_PATH_VOQ_MAP_4_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_4_t;





#define QM_CPU_PATH_VOQ_MAP_5                    0xf0030054
#define QM_CPU_PATH_VOQ_MAP_5_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_5_t;





#define QM_CPU_PATH_VOQ_MAP_6                    0xf0030058
#define QM_CPU_PATH_VOQ_MAP_6_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_6_t;





#define QM_CPU_PATH_VOQ_MAP_7                    0xf003005c
#define QM_CPU_PATH_VOQ_MAP_7_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 linux_voq_map        : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_VOQ_MAP_7_t;





#define QM_CPU_PATH_LINUX0_SDRAM_ADDR            0xf0030060
#define QM_CPU_PATH_LINUX0_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX0_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX1_SDRAM_ADDR            0xf0030064
#define QM_CPU_PATH_LINUX1_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX1_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX2_SDRAM_ADDR            0xf0030068
#define QM_CPU_PATH_LINUX2_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX2_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX3_SDRAM_ADDR            0xf003006c
#define QM_CPU_PATH_LINUX3_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX3_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX4_SDRAM_ADDR            0xf0030070
#define QM_CPU_PATH_LINUX4_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX4_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX5_SDRAM_ADDR            0xf0030074
#define QM_CPU_PATH_LINUX5_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX5_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX6_SDRAM_ADDR            0xf0030078
#define QM_CPU_PATH_LINUX6_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX6_SDRAM_ADDR_t;





#define QM_CPU_PATH_LINUX7_SDRAM_ADDR            0xf003007c
#define QM_CPU_PATH_LINUX7_SDRAM_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_LINUX7_SDRAM_ADDR_t;





#define QM_CPU_PATH_STATUS_0                     0xf0030080
#define QM_CPU_PATH_STATUS_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 free_cpu_buffers     : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 sdram_addr_fifo_wr_cnt :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sdram_addr_fifo_wr_cnt :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 free_cpu_buffers     : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_STATUS_0_t;





#define QM_CPU_PATH_FREE_BUFFERS_0               0xf0030084
#define QM_CPU_PATH_FREE_BUFFERS_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux1_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux0_free_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux0_free_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux1_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_FREE_BUFFERS_0_t;





#define QM_CPU_PATH_FREE_BUFFERS_1               0xf0030088
#define QM_CPU_PATH_FREE_BUFFERS_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux3_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux2_free_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux2_free_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux3_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_FREE_BUFFERS_1_t;





#define QM_CPU_PATH_FREE_BUFFERS_2               0xf003008c
#define QM_CPU_PATH_FREE_BUFFERS_2_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux5_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux4_free_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux4_free_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux5_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_FREE_BUFFERS_2_t;





#define QM_CPU_PATH_FREE_BUFFERS_3               0xf0030090
#define QM_CPU_PATH_FREE_BUFFERS_3_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux7_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux6_free_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux6_free_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux7_free_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_FREE_BUFFERS_3_t;





#define QM_CPU_PATH_BUFFERS_0                    0xf0030094
#define QM_CPU_PATH_BUFFERS_0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux1_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux0_buffers   : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux0_buffers   : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux1_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_BUFFERS_0_t;





#define QM_CPU_PATH_BUFFERS_1                    0xf0030098
#define QM_CPU_PATH_BUFFERS_1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux3_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux2_buffers   : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux2_buffers   : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux3_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_BUFFERS_1_t;





#define QM_CPU_PATH_BUFFERS_2                    0xf003009c
#define QM_CPU_PATH_BUFFERS_2_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux5_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux4_buffers   : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux4_buffers   : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux5_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_BUFFERS_2_t;





#define QM_CPU_PATH_BUFFERS_3                    0xf00300a0
#define QM_CPU_PATH_BUFFERS_3_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 cpu_linux7_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux6_buffers   : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_linux6_buffers   : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 cpu_linux7_buffers   : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_PATH_BUFFERS_3_t;





#define QM_FLUSH_VOQ                             0xf00300a4
#define QM_FLUSH_VOQ_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 pkt_hdr_err_flush_voq_id :  7 ; /* bits 22:16 */
    cs_uint32 flush_immediate      :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 flush_voq_id         :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flush_voq_id         :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 flush_immediate      :  1 ; /* bits 15:15 */
    cs_uint32 pkt_hdr_err_flush_voq_id :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_FLUSH_VOQ_t;





#define QM_RDCOM_LP_FB_TH                        0xf00300a8
#define QM_RDCOM_LP_FB_TH_dft                    0x00b4006e




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 t_high               : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 t_low                : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 t_low                : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 t_high               : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_FB_TH_t;





#define QM_RDCOM_LP_S_SAT                        0xf00300ac
#define QM_RDCOM_LP_S_SAT_dft                    0x0c1c766e




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 s_max                : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 s_min                : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 s_min                : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 s_max                : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_S_SAT_t;





#define QM_RDCOM_LP_O_SAT                        0xf00300b0
#define QM_RDCOM_LP_O_SAT_dft                    0x099273e4




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 o_mpos               : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 o_mneg               : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 o_mneg               : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 o_mpos               : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_O_SAT_t;





#define QM_RDCOM_LP_LD_TH                        0xf00300b4
#define QM_RDCOM_LP_LD_TH_dft                    0x00007e0c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 load_thld            : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 load_thld            : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_LD_TH_t;





#define QM_RDCOM_LP_CONFIG                       0xf00300b8
#define QM_RDCOM_LP_CONFIG_dft                   0x0043533f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 s_bucket_load        :  1 ; /* bits 31:31 */
    cs_uint32 ob_bucket_load       :  1 ; /* bits 30:30 */
    cs_uint32 reset                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd4               :  6 ;
    cs_uint32 decay_beta           :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 decay_alpha          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 attack_beta          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 attack_alpha         :  3 ; /* bits 10:8 */
    cs_uint32 loop_time_k          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 loop_time_k          :  8 ; /* bits 7:0 */
    cs_uint32 attack_alpha         :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 attack_beta          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 decay_alpha          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 decay_beta           :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd4               :  6 ;
    cs_uint32 reset                :  1 ; /* bits 29:29 */
    cs_uint32 ob_bucket_load       :  1 ; /* bits 30:30 */
    cs_uint32 s_bucket_load        :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_CONFIG_t;





#define QM_RDCOM_LP_SO_BK                        0xf00300bc
#define QM_RDCOM_LP_SO_BK_dft                    0x00001b58




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 o_bucket             : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 s_bucket             : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 s_bucket             : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 o_bucket             : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_SO_BK_t;





#define QM_RDCOM_LP_OBBK_TAV                     0xf00300c0
#define QM_RDCOM_LP_OBBK_TAV_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 t_avg                : 14 ; /* bits 31:18 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ob_bucket            : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ob_bucket            : 17 ; /* bits 16:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 t_avg                : 14 ; /* bits 31:18 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_RDCOM_LP_OBBK_TAV_t;





#define QM_BUFFER_LIST_MEM_STATUS                0xf00300c4
#define QM_BUFFER_LIST_MEM_STATUS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 err_correct_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 err_addr             : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 err_correct_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_BUFFER_LIST_MEM_STATUS_t;





#define QM_CPU_BUFFER_LIST_MEM_STATUS            0xf00300c8
#define QM_CPU_BUFFER_LIST_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 err_correct_addr     : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 err_addr             : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 err_correct_addr     : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_BUFFER_LIST_MEM_STATUS_t;





#define QM_PROFILE_MEM_STATUS                    0xf00300cc
#define QM_PROFILE_MEM_STATUS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_PROFILE_MEM_STATUS_t;





#define QM_STATUS_MEM_STATUS                     0xf00300d0
#define QM_STATUS_MEM_STATUS_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_STATUS_MEM_STATUS_t;





#define QM_STATUS_SDRAM_ADDR_MEM_STATUS          0xf00300d4
#define QM_STATUS_SDRAM_ADDR_MEM_STATUS_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 10 ;
    cs_uint32 err_correct_addr     :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 err_addr             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 err_correct_addr     :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd2               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_STATUS_SDRAM_ADDR_MEM_STATUS_t;





#define QM_INT_BUFFER_LIST_MEM_STATUS            0xf00300d8
#define QM_INT_BUFFER_LIST_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 err_correct_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 err_addr             : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 err_correct_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUFFER_LIST_MEM_STATUS_t;





#define QM_PKT_AGE_OLD                           0xf00300dc
#define QM_PKT_AGE_OLD_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pkt_age_old_cnt      : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 pkt_age_old_voq      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pkt_age_old_voq      :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 pkt_age_old_cnt      : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_PKT_AGE_OLD_t;





#define QM_QUE_AGE_OLD                           0xf00300e0
#define QM_QUE_AGE_OLD_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 que_age_old_cnt      : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 que_age_old_voq      :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 que_age_old_voq      :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 que_age_old_cnt      : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_AGE_OLD_t;





#define QM_INTERRUPT_0                           0xf00300e4
#define QM_INTERRUPT_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 err_axi_qmcpu_write  :  1 ; /* bits 31:31 */
    cs_uint32 err_axi_qmcpu_read   :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qm_write     :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qm_read      :  1 ; /* bits 28:28 */
    cs_uint32 err_sch_intf         :  1 ; /* bits 27:27 */
    cs_uint32 err_pkt_header       :  1 ; /* bits 26:26 */
    cs_uint32 que_age_old          :  1 ; /* bits 25:25 */
    cs_uint32 pkt_age_old          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 err_cpu_pkt_enqueue  :  1 ; /* bits 22:22 */
    cs_uint32 cpu_voq_disable      :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_buffer_underrun :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_pkt_enqueue      :  1 ; /* bits 18:18 */
    cs_uint32 voq_disable          :  1 ; /* bits 17:17 */
    cs_uint32 err_buffer_underrun  :  1 ; /* bits 16:16 */
    cs_uint32 err_axi_intmem_write :  1 ; /* bits 15:15 */
    cs_uint32 err_axi_intmem_read  :  1 ; /* bits 14:14 */
    cs_uint32 flush_complete       :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 err_correct_int_buffer_list_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_int_buffer_list_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_status_sdram_addr_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_status_sdram_addr_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_status_mem       :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_profile_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_profile_mem      :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_cpu_buffer_list_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_cpu_buffer_list_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_buffer_list_mem :  1 ; /* bits 1:1 */
    cs_uint32 err_buffer_list_mem  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_buffer_list_mem  :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_buffer_list_mem :  1 ; /* bits 1:1 */
    cs_uint32 err_cpu_buffer_list_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_cpu_buffer_list_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_profile_mem      :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_profile_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_status_mem       :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_status_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_status_sdram_addr_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_sdram_addr_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_int_buffer_list_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_int_buffer_list_mem :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 flush_complete       :  1 ; /* bits 13:13 */
    cs_uint32 err_axi_intmem_read  :  1 ; /* bits 14:14 */
    cs_uint32 err_axi_intmem_write :  1 ; /* bits 15:15 */
    cs_uint32 err_buffer_underrun  :  1 ; /* bits 16:16 */
    cs_uint32 voq_disable          :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_enqueue      :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_cpu_buffer_underrun :  1 ; /* bits 20:20 */
    cs_uint32 cpu_voq_disable      :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_pkt_enqueue  :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pkt_age_old          :  1 ; /* bits 24:24 */
    cs_uint32 que_age_old          :  1 ; /* bits 25:25 */
    cs_uint32 err_pkt_header       :  1 ; /* bits 26:26 */
    cs_uint32 err_sch_intf         :  1 ; /* bits 27:27 */
    cs_uint32 err_axi_qm_read      :  1 ; /* bits 28:28 */
    cs_uint32 err_axi_qm_write     :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qmcpu_read   :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qmcpu_write  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INTERRUPT_0_t;





#define QM_INTENABLE_0                           0xf00300e8
#define QM_INTENABLE_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 err_axi_qmcpu_write_en :  1 ; /* bits 31:31 */
    cs_uint32 err_axi_qmcpu_read_en :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qm_write_en  :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qm_read_en   :  1 ; /* bits 28:28 */
    cs_uint32 err_sch_intf_en      :  1 ; /* bits 27:27 */
    cs_uint32 err_pkt_header_en    :  1 ; /* bits 26:26 */
    cs_uint32 que_age_old_en       :  1 ; /* bits 25:25 */
    cs_uint32 pkt_age_old_en       :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 err_cpu_pkt_enqueue_en :  1 ; /* bits 22:22 */
    cs_uint32 cpu_voq_disable_en   :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_buffer_underrun_en :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_pkt_enqueue_en   :  1 ; /* bits 18:18 */
    cs_uint32 voq_disable_en       :  1 ; /* bits 17:17 */
    cs_uint32 err_buffer_underrun_en :  1 ; /* bits 16:16 */
    cs_uint32 err_axi_intmem_write_en :  1 ; /* bits 15:15 */
    cs_uint32 err_axi_intmem_read_en :  1 ; /* bits 14:14 */
    cs_uint32 flush_complete_en    :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 err_correct_int_buffer_list_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_int_buffer_list_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_status_sdram_addr_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_status_sdram_addr_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_status_mem_en    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_profile_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_profile_mem_en   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_cpu_buffer_list_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_cpu_buffer_list_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_buffer_list_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_buffer_list_mem_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_buffer_list_mem_en :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_buffer_list_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_cpu_buffer_list_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_cpu_buffer_list_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_profile_mem_en   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_profile_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_status_mem_en    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_status_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_status_sdram_addr_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_sdram_addr_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_int_buffer_list_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_int_buffer_list_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 flush_complete_en    :  1 ; /* bits 13:13 */
    cs_uint32 err_axi_intmem_read_en :  1 ; /* bits 14:14 */
    cs_uint32 err_axi_intmem_write_en :  1 ; /* bits 15:15 */
    cs_uint32 err_buffer_underrun_en :  1 ; /* bits 16:16 */
    cs_uint32 voq_disable_en       :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_enqueue_en   :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_cpu_buffer_underrun_en :  1 ; /* bits 20:20 */
    cs_uint32 cpu_voq_disable_en   :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_pkt_enqueue_en :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pkt_age_old_en       :  1 ; /* bits 24:24 */
    cs_uint32 que_age_old_en       :  1 ; /* bits 25:25 */
    cs_uint32 err_pkt_header_en    :  1 ; /* bits 26:26 */
    cs_uint32 err_sch_intf_en      :  1 ; /* bits 27:27 */
    cs_uint32 err_axi_qm_read_en   :  1 ; /* bits 28:28 */
    cs_uint32 err_axi_qm_write_en  :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qmcpu_read_en :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qmcpu_write_en :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INTENABLE_0_t;





#define QM_INTERRUPT_1                           0xf00300ec
#define QM_INTERRUPT_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 err_axi_qmcpu_write  :  1 ; /* bits 31:31 */
    cs_uint32 err_axi_qmcpu_read   :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qm_write     :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qm_read      :  1 ; /* bits 28:28 */
    cs_uint32 err_sch_intf         :  1 ; /* bits 27:27 */
    cs_uint32 err_pkt_header       :  1 ; /* bits 26:26 */
    cs_uint32 que_age_old          :  1 ; /* bits 25:25 */
    cs_uint32 pkt_age_old          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 err_cpu_pkt_enqueue  :  1 ; /* bits 22:22 */
    cs_uint32 cpu_voq_disable      :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_buffer_underrun :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_pkt_enqueue      :  1 ; /* bits 18:18 */
    cs_uint32 voq_disable          :  1 ; /* bits 17:17 */
    cs_uint32 err_buffer_underrun  :  1 ; /* bits 16:16 */
    cs_uint32 err_axi_intmem_write :  1 ; /* bits 15:15 */
    cs_uint32 err_axi_intmem_read  :  1 ; /* bits 14:14 */
    cs_uint32 flush_complete       :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 err_correct_int_buffer_list_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_int_buffer_list_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_status_sdram_addr_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_status_sdram_addr_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_status_mem       :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_profile_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_profile_mem      :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_cpu_buffer_list_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_cpu_buffer_list_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_buffer_list_mem :  1 ; /* bits 1:1 */
    cs_uint32 err_buffer_list_mem  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_buffer_list_mem  :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_buffer_list_mem :  1 ; /* bits 1:1 */
    cs_uint32 err_cpu_buffer_list_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_cpu_buffer_list_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_profile_mem      :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_profile_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_status_mem       :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_status_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_status_sdram_addr_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_sdram_addr_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_int_buffer_list_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_int_buffer_list_mem :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 flush_complete       :  1 ; /* bits 13:13 */
    cs_uint32 err_axi_intmem_read  :  1 ; /* bits 14:14 */
    cs_uint32 err_axi_intmem_write :  1 ; /* bits 15:15 */
    cs_uint32 err_buffer_underrun  :  1 ; /* bits 16:16 */
    cs_uint32 voq_disable          :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_enqueue      :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_cpu_buffer_underrun :  1 ; /* bits 20:20 */
    cs_uint32 cpu_voq_disable      :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_pkt_enqueue  :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pkt_age_old          :  1 ; /* bits 24:24 */
    cs_uint32 que_age_old          :  1 ; /* bits 25:25 */
    cs_uint32 err_pkt_header       :  1 ; /* bits 26:26 */
    cs_uint32 err_sch_intf         :  1 ; /* bits 27:27 */
    cs_uint32 err_axi_qm_read      :  1 ; /* bits 28:28 */
    cs_uint32 err_axi_qm_write     :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qmcpu_read   :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qmcpu_write  :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INTERRUPT_1_t;





#define QM_INTENABLE_1                           0xf00300f0
#define QM_INTENABLE_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 err_axi_qmcpu_write_en :  1 ; /* bits 31:31 */
    cs_uint32 err_axi_qmcpu_read_en :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qm_write_en  :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qm_read_en   :  1 ; /* bits 28:28 */
    cs_uint32 err_sch_intf_en      :  1 ; /* bits 27:27 */
    cs_uint32 err_pkt_header_en    :  1 ; /* bits 26:26 */
    cs_uint32 que_age_old_en       :  1 ; /* bits 25:25 */
    cs_uint32 pkt_age_old_en       :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 err_cpu_pkt_enqueue_en :  1 ; /* bits 22:22 */
    cs_uint32 cpu_voq_disable_en   :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_buffer_underrun_en :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_pkt_enqueue_en   :  1 ; /* bits 18:18 */
    cs_uint32 voq_disable_en       :  1 ; /* bits 17:17 */
    cs_uint32 err_buffer_underrun_en :  1 ; /* bits 16:16 */
    cs_uint32 err_axi_intmem_write_en :  1 ; /* bits 15:15 */
    cs_uint32 err_axi_intmem_read_en :  1 ; /* bits 14:14 */
    cs_uint32 flush_complete_en    :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 err_correct_int_buffer_list_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_int_buffer_list_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_status_sdram_addr_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_status_sdram_addr_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_status_mem_en    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_profile_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_profile_mem_en   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_cpu_buffer_list_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_cpu_buffer_list_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_buffer_list_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_buffer_list_mem_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_buffer_list_mem_en :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_buffer_list_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_cpu_buffer_list_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_cpu_buffer_list_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_profile_mem_en   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_profile_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_status_mem_en    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_status_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_status_sdram_addr_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_status_sdram_addr_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_int_buffer_list_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_int_buffer_list_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 flush_complete_en    :  1 ; /* bits 13:13 */
    cs_uint32 err_axi_intmem_read_en :  1 ; /* bits 14:14 */
    cs_uint32 err_axi_intmem_write_en :  1 ; /* bits 15:15 */
    cs_uint32 err_buffer_underrun_en :  1 ; /* bits 16:16 */
    cs_uint32 voq_disable_en       :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_enqueue_en   :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 err_cpu_buffer_underrun_en :  1 ; /* bits 20:20 */
    cs_uint32 cpu_voq_disable_en   :  1 ; /* bits 21:21 */
    cs_uint32 err_cpu_pkt_enqueue_en :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pkt_age_old_en       :  1 ; /* bits 24:24 */
    cs_uint32 que_age_old_en       :  1 ; /* bits 25:25 */
    cs_uint32 err_pkt_header_en    :  1 ; /* bits 26:26 */
    cs_uint32 err_sch_intf_en      :  1 ; /* bits 27:27 */
    cs_uint32 err_axi_qm_read_en   :  1 ; /* bits 28:28 */
    cs_uint32 err_axi_qm_write_en  :  1 ; /* bits 29:29 */
    cs_uint32 err_axi_qmcpu_read_en :  1 ; /* bits 30:30 */
    cs_uint32 err_axi_qmcpu_write_en :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INTENABLE_1_t;





#define QM_DV_CNTL                               0xf00300f4
#define QM_DV_CNTL_dft                           0x00000542




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 19 ;
    cs_uint32 burst_size_2x        :  1 ; /* bits 12:12 */
    cs_uint32 oversize_burst_size_gte_128 :  2 ; /* bits 11:10 */
    cs_uint32 oversize_burst_size_le_128 :  2 ; /* bits 9:8 */
    cs_uint32 oversize_burst_enable :  1 ; /* bits 7:7 */
    cs_uint32 small_packet_burst_alert_enable :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 hdr_err_gen_active   :  1 ; /* bits 4:4 */
    cs_uint32 age_time_warp        :  1 ; /* bits 3:3 */
    cs_uint32 ingress_disable_fifo_read :  1 ; /* bits 2:2 */
    cs_uint32 cpu_path_enable      :  1 ; /* bits 1:1 */
    cs_uint32 egress_cntl_hold_idle :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 egress_cntl_hold_idle :  1 ; /* bits 0:0 */
    cs_uint32 cpu_path_enable      :  1 ; /* bits 1:1 */
    cs_uint32 ingress_disable_fifo_read :  1 ; /* bits 2:2 */
    cs_uint32 age_time_warp        :  1 ; /* bits 3:3 */
    cs_uint32 hdr_err_gen_active   :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 small_packet_burst_alert_enable :  1 ; /* bits 6:6 */
    cs_uint32 oversize_burst_enable :  1 ; /* bits 7:7 */
    cs_uint32 oversize_burst_size_le_128 :  2 ; /* bits 9:8 */
    cs_uint32 oversize_burst_size_gte_128 :  2 ; /* bits 11:10 */
    cs_uint32 burst_size_2x        :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd2               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_DV_CNTL_t;





#define QM_INT_BUF_CONFIG_0                      0xf00300f8
#define QM_INT_BUF_CONFIG_0_dft                  0x03ff0001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 last_buffer_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 first_buffer_addr    : 11 ; /* bits 14:4 */
    cs_uint32 use_internal_voq_enable :  1 ; /* bits 3:3 */
    cs_uint32 use_internal_for_recirc :  1 ; /* bits 2:2 */
    cs_uint32 use_internal         :  1 ; /* bits 1:1 */
    cs_uint32 buffer_size          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffer_size          :  1 ; /* bits 0:0 */
    cs_uint32 use_internal         :  1 ; /* bits 1:1 */
    cs_uint32 use_internal_for_recirc :  1 ; /* bits 2:2 */
    cs_uint32 use_internal_voq_enable :  1 ; /* bits 3:3 */
    cs_uint32 first_buffer_addr    : 11 ; /* bits 14:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 last_buffer_addr     : 11 ; /* bits 26:16 */
    cs_uint32 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUF_CONFIG_0_t;





#define QM_INT_BUF_CONFIG_1                      0xf00300fc
#define QM_INT_BUF_CONFIG_1_dft                  0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 intmem_sel_root      :  8 ; /* bits 31:24 */
    cs_uint32 intmem_sel_uni2      :  8 ; /* bits 23:16 */
    cs_uint32 intmem_sel_uni1      :  8 ; /* bits 15:8 */
    cs_uint32 intmem_sel_uni0      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intmem_sel_uni0      :  8 ; /* bits 7:0 */
    cs_uint32 intmem_sel_uni1      :  8 ; /* bits 15:8 */
    cs_uint32 intmem_sel_uni2      :  8 ; /* bits 23:16 */
    cs_uint32 intmem_sel_root      :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUF_CONFIG_1_t;





#define QM_INT_BUF_STATUS_0                      0xf0030100
#define QM_INT_BUF_STATUS_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               : 16 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUF_STATUS_0_t;





#define QM_SCH_INTF_STATUS                       0xf0030104
#define QM_SCH_INTF_STATUS_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 error_voq            :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 deque_pending_err    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 deque_pending_err    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 error_voq            :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_SCH_INTF_STATUS_t;





#define QM_INT_BUFFER_LIST_MEM_ACCESS            0xf0030190
#define QM_INT_BUFFER_LIST_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 addr                 : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUFFER_LIST_MEM_ACCESS_t;





#define QM_INT_BUFFER_LIST_MEM_DATA              0xf0030194
#define QM_INT_BUFFER_LIST_MEM_DATA_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 data                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_INT_BUFFER_LIST_MEM_DATA_t;





#define QM_BUFFER_LIST_MEM_ACCESS                0xf00301a0
#define QM_BUFFER_LIST_MEM_ACCESS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 addr                 : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_BUFFER_LIST_MEM_ACCESS_t;





#define QM_BUFFER_LIST_MEM_DATA                  0xf00301a4
#define QM_BUFFER_LIST_MEM_DATA_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 data                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_BUFFER_LIST_MEM_DATA_t;





#define QM_CPU_BUFFER_LIST_MEM_ACCESS            0xf00301b0
#define QM_CPU_BUFFER_LIST_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_BUFFER_LIST_MEM_ACCESS_t;





#define QM_CPU_BUFFER_LIST_MEM_DATA1             0xf00301b4
#define QM_CPU_BUFFER_LIST_MEM_DATA1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 data                 : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 11 ; /* bits 10:0 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_BUFFER_LIST_MEM_DATA1_t;





#define QM_CPU_BUFFER_LIST_MEM_DATA0             0xf00301b8
#define QM_CPU_BUFFER_LIST_MEM_DATA0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_CPU_BUFFER_LIST_MEM_DATA0_t;





#define QM_QUE_PROFILE_MEM_ACCESS                0xf00301c0
#define QM_QUE_PROFILE_MEM_ACCESS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_PROFILE_MEM_ACCESS_t;





#define QM_QUE_PROFILE_MEM_DATA                  0xf00301c4
#define QM_QUE_PROFILE_MEM_DATA_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 data                 : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_PROFILE_MEM_DATA_t;





#define QM_QUE_STATUS_MEM_ACCESS                 0xf00301d0
#define QM_QUE_STATUS_MEM_ACCESS_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_STATUS_MEM_ACCESS_t;





#define QM_QUE_STATUS_MEM_DATA3                  0xf00301d4
#define QM_QUE_STATUS_MEM_DATA3_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 data                 : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 27 ; /* bits 26:0 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_STATUS_MEM_DATA3_t;





#define QM_QUE_STATUS_MEM_DATA2                  0xf00301d8
#define QM_QUE_STATUS_MEM_DATA2_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_STATUS_MEM_DATA2_t;





#define QM_QUE_STATUS_MEM_DATA1                  0xf00301dc
#define QM_QUE_STATUS_MEM_DATA1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_STATUS_MEM_DATA1_t;





#define QM_QUE_STATUS_MEM_DATA0                  0xf00301e0
#define QM_QUE_STATUS_MEM_DATA0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_QUE_STATUS_MEM_DATA0_t;





#define QM_DV_REGS_ACCESS                        0xf00301f0
#define QM_DV_REGS_ACCESS_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_DV_REGS_ACCESS_t;





#define QM_DV_REGS_DATA                          0xf00301f4
#define QM_DV_REGS_DATA_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_DV_REGS_DATA_t;





#define QM_SPARE                                 0xf00301f8
#define QM_SPARE_dft                             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 spare                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spare                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} QM_SPARE_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* QM */

typedef struct {
  QM_CONFIG_0_t                            CONFIG_0;                      /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  QM_CONFIG_1_t                            CONFIG_1;                      /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  QM_CONFIG_2_t                            CONFIG_2;                      /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  QM_CONFIG_3_t                            CONFIG_3;                      /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  QM_CONFIG_4_t                            CONFIG_4;                      /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  QM_STATUS_0_t                            STATUS_0;                      /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  QM_STATUS_1_t                            STATUS_1;                      /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  QM_FLUSH_STATUS_t                        FLUSH_STATUS;                  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  QM_INGRESS_STATUS_PRIMARY_PATH0_t        INGRESS_STATUS_PRIMARY_PATH0;  /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  QM_INGRESS_STATUS_PRIMARY_PATH1_t        INGRESS_STATUS_PRIMARY_PATH1;  /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  QM_INGRESS_STATUS_CPU_PATH0_t            INGRESS_STATUS_CPU_PATH0;      /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  QM_INGRESS_STATUS_CPU_PATH1_t            INGRESS_STATUS_CPU_PATH1;      /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  QM_EGRESS_STATUS_0_t                     EGRESS_STATUS_0;               /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  QM_EGRESS_STATUS_1_t                     EGRESS_STATUS_1;               /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  QM_CPU_PATH_CONFIG_0_t                   CPU_PATH_CONFIG_0;             /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  QM_CPU_PATH_CONFIG_1_t                   CPU_PATH_CONFIG_1;             /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  QM_CPU_PATH_VOQ_MAP_0_t                  CPU_PATH_VOQ_MAP_0;            /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  QM_CPU_PATH_VOQ_MAP_1_t                  CPU_PATH_VOQ_MAP_1;            /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  QM_CPU_PATH_VOQ_MAP_2_t                  CPU_PATH_VOQ_MAP_2;            /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  QM_CPU_PATH_VOQ_MAP_3_t                  CPU_PATH_VOQ_MAP_3;            /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  QM_CPU_PATH_VOQ_MAP_4_t                  CPU_PATH_VOQ_MAP_4;            /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  QM_CPU_PATH_VOQ_MAP_5_t                  CPU_PATH_VOQ_MAP_5;            /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  QM_CPU_PATH_VOQ_MAP_6_t                  CPU_PATH_VOQ_MAP_6;            /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  QM_CPU_PATH_VOQ_MAP_7_t                  CPU_PATH_VOQ_MAP_7;            /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  QM_CPU_PATH_LINUX0_SDRAM_ADDR_t          CPU_PATH_LINUX0_SDRAM_ADDR;    /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  QM_CPU_PATH_LINUX1_SDRAM_ADDR_t          CPU_PATH_LINUX1_SDRAM_ADDR;    /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  QM_CPU_PATH_LINUX2_SDRAM_ADDR_t          CPU_PATH_LINUX2_SDRAM_ADDR;    /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  QM_CPU_PATH_LINUX3_SDRAM_ADDR_t          CPU_PATH_LINUX3_SDRAM_ADDR;    /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  QM_CPU_PATH_LINUX4_SDRAM_ADDR_t          CPU_PATH_LINUX4_SDRAM_ADDR;    /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  QM_CPU_PATH_LINUX5_SDRAM_ADDR_t          CPU_PATH_LINUX5_SDRAM_ADDR;    /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  QM_CPU_PATH_LINUX6_SDRAM_ADDR_t          CPU_PATH_LINUX6_SDRAM_ADDR;    /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  QM_CPU_PATH_LINUX7_SDRAM_ADDR_t          CPU_PATH_LINUX7_SDRAM_ADDR;    /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  QM_CPU_PATH_STATUS_0_t                   CPU_PATH_STATUS_0;             /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  QM_CPU_PATH_FREE_BUFFERS_0_t             CPU_PATH_FREE_BUFFERS_0;       /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  QM_CPU_PATH_FREE_BUFFERS_1_t             CPU_PATH_FREE_BUFFERS_1;       /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  QM_CPU_PATH_FREE_BUFFERS_2_t             CPU_PATH_FREE_BUFFERS_2;       /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  QM_CPU_PATH_FREE_BUFFERS_3_t             CPU_PATH_FREE_BUFFERS_3;       /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  QM_CPU_PATH_BUFFERS_0_t                  CPU_PATH_BUFFERS_0;            /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  QM_CPU_PATH_BUFFERS_1_t                  CPU_PATH_BUFFERS_1;            /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  QM_CPU_PATH_BUFFERS_2_t                  CPU_PATH_BUFFERS_2;            /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  QM_CPU_PATH_BUFFERS_3_t                  CPU_PATH_BUFFERS_3;            /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  QM_FLUSH_VOQ_t                           FLUSH_VOQ;                     /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  QM_RDCOM_LP_FB_TH_t                      RDCOM_LP_FB_TH;                /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  QM_RDCOM_LP_S_SAT_t                      RDCOM_LP_S_SAT;                /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  QM_RDCOM_LP_O_SAT_t                      RDCOM_LP_O_SAT;                /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  QM_RDCOM_LP_LD_TH_t                      RDCOM_LP_LD_TH;                /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  QM_RDCOM_LP_CONFIG_t                     RDCOM_LP_CONFIG;               /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  QM_RDCOM_LP_SO_BK_t                      RDCOM_LP_SO_BK;                /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  QM_RDCOM_LP_OBBK_TAV_t                   RDCOM_LP_OBBK_TAV;             /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  QM_BUFFER_LIST_MEM_STATUS_t              BUFFER_LIST_MEM_STATUS;        /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  QM_CPU_BUFFER_LIST_MEM_STATUS_t          CPU_BUFFER_LIST_MEM_STATUS;    /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  QM_PROFILE_MEM_STATUS_t                  PROFILE_MEM_STATUS;            /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  QM_STATUS_MEM_STATUS_t                   STATUS_MEM_STATUS;             /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  QM_STATUS_SDRAM_ADDR_MEM_STATUS_t        STATUS_SDRAM_ADDR_MEM_STATUS;  /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  QM_INT_BUFFER_LIST_MEM_STATUS_t          INT_BUFFER_LIST_MEM_STATUS;    /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  QM_PKT_AGE_OLD_t                         PKT_AGE_OLD;                   /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  QM_QUE_AGE_OLD_t                         QUE_AGE_OLD;                   /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  QM_INTERRUPT_0_t                         INTERRUPT_0;                   /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  QM_INTENABLE_0_t                         INTENABLE_0;                   /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  QM_INTERRUPT_1_t                         INTERRUPT_1;                   /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  QM_INTENABLE_1_t                         INTENABLE_1;                   /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  QM_DV_CNTL_t                             DV_CNTL;                       /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  QM_INT_BUF_CONFIG_0_t                    INT_BUF_CONFIG_0;              /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  QM_INT_BUF_CONFIG_1_t                    INT_BUF_CONFIG_1;              /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  QM_INT_BUF_STATUS_0_t                    INT_BUF_STATUS_0;              /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  QM_SCH_INTF_STATUS_t                     SCH_INTF_STATUS;               /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[139];                 
  QM_INT_BUFFER_LIST_MEM_ACCESS_t          INT_BUFFER_LIST_MEM_ACCESS;    /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd67[3];                   
  QM_INT_BUFFER_LIST_MEM_DATA_t            INT_BUFFER_LIST_MEM_DATA;      /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd68[11];                  
  QM_BUFFER_LIST_MEM_ACCESS_t              BUFFER_LIST_MEM_ACCESS;        /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd69[3];                   
  QM_BUFFER_LIST_MEM_DATA_t                BUFFER_LIST_MEM_DATA;          /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd70[11];                  
  QM_CPU_BUFFER_LIST_MEM_ACCESS_t          CPU_BUFFER_LIST_MEM_ACCESS;    /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd71[3];                   
  QM_CPU_BUFFER_LIST_MEM_DATA1_t           CPU_BUFFER_LIST_MEM_DATA1;     /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd72[3];                   
  QM_CPU_BUFFER_LIST_MEM_DATA0_t           CPU_BUFFER_LIST_MEM_DATA0;     /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd73[7];                   
  QM_QUE_PROFILE_MEM_ACCESS_t              QUE_PROFILE_MEM_ACCESS;        /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd74[3];                   
  QM_QUE_PROFILE_MEM_DATA_t                QUE_PROFILE_MEM_DATA;          /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd75[11];                  
  QM_QUE_STATUS_MEM_ACCESS_t               QUE_STATUS_MEM_ACCESS;         /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd76[3];                   
  QM_QUE_STATUS_MEM_DATA3_t                QUE_STATUS_MEM_DATA3;          /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd77[3];                   
  QM_QUE_STATUS_MEM_DATA2_t                QUE_STATUS_MEM_DATA2;          /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd78[3];                   
  QM_QUE_STATUS_MEM_DATA1_t                QUE_STATUS_MEM_DATA1;          /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd79[3];                   
  QM_QUE_STATUS_MEM_DATA0_t                QUE_STATUS_MEM_DATA0;          /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd80[15];                  
  QM_DV_REGS_ACCESS_t                      DV_REGS_ACCESS;                /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd81[3];                   
  QM_DV_REGS_DATA_t                        DV_REGS_DATA;                  /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd82[3];                   
  QM_SPARE_t                               SPARE;                         /* addr: 0x000001f8 */ 
} QM_t;

  

/*
 * TM
 */
  
  
/*
 * BM
 */
  



#define TM_BM_CONFIG_0                           0xf0040000
#define TM_BM_CONFIG_0_dft                       0x00000341




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
    cs_uint32 disable              :  1 ; /* bits 30:30 */
    cs_uint32 recalculate_global_buffers_used :  1 ; /* bits 29:29 */
    cs_uint32 config_spare         : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 recirc_buffer_disable :  1 ; /* bits 12:12 */
    cs_uint32 recirc_disable       :  1 ; /* bits 11:11 */
    cs_uint32 bm2_bypass_ca_process :  1 ; /* bits 10:10 */
    cs_uint32 bm2_bypass_dest_port_process :  1 ; /* bits 9:9 */
    cs_uint32 bm2_bypass_voq_process :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 bm1_bypass_ca_process :  1 ; /* bits 6:6 */
    cs_uint32 bm1_bypass_dest_port_process :  1 ; /* bits 5:5 */
    cs_uint32 bm1_bypass_voq_process :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 enque_hdr_adjust     :  1 ; /* bits 1:1 */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
    cs_uint32 enque_hdr_adjust     :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 bm1_bypass_voq_process :  1 ; /* bits 4:4 */
    cs_uint32 bm1_bypass_dest_port_process :  1 ; /* bits 5:5 */
    cs_uint32 bm1_bypass_ca_process :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 bm2_bypass_voq_process :  1 ; /* bits 8:8 */
    cs_uint32 bm2_bypass_dest_port_process :  1 ; /* bits 9:9 */
    cs_uint32 bm2_bypass_ca_process :  1 ; /* bits 10:10 */
    cs_uint32 recirc_disable       :  1 ; /* bits 11:11 */
    cs_uint32 recirc_buffer_disable :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 config_spare         : 13 ; /* bits 28:16 */
    cs_uint32 recalculate_global_buffers_used :  1 ; /* bits 29:29 */
    cs_uint32 disable              :  1 ; /* bits 30:30 */
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_CONFIG_0_t;





#define TM_BM_STATUS_0                           0xf0040004
#define TM_BM_STATUS_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 recalculate_global_buffers_used_active :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 recalculate_global_buffers_used_active :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_STATUS_0_t;





#define TM_BM_STATUS_1                           0xf0040008
#define TM_BM_STATUS_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 buffers              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffers              : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_STATUS_1_t;





#define TM_BM_STATUS_2                           0xf004000c
#define TM_BM_STATUS_2_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_global_buffers  : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 global_buffers       : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 global_buffers       : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 free_global_buffers  : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_STATUS_2_t;





#define TM_BM_RESERVE_BUFFERS                    0xf0040010
#define TM_BM_RESERVE_BUFFERS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 10 ;
    cs_uint32 reserve_buffers_inflight_pkts :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 reserve_buffers      : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_buffers      : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 reserve_buffers_inflight_pkts :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd2               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_BUFFERS_t;





#define TM_BM_RESERVE_CPU_BUFFERS                0xf0040014
#define TM_BM_RESERVE_CPU_BUFFERS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 reserve_cpu_buffers  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_cpu_buffers  : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_CPU_BUFFERS_t;





#define TM_BM_RESERVE_LINUX_BUFFERS_0            0xf0040018
#define TM_BM_RESERVE_LINUX_BUFFERS_0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 reserve_linux1_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux0_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_linux0_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux1_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_LINUX_BUFFERS_0_t;





#define TM_BM_RESERVE_LINUX_BUFFERS_1            0xf004001c
#define TM_BM_RESERVE_LINUX_BUFFERS_1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 reserve_linux3_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux2_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_linux2_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux3_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_LINUX_BUFFERS_1_t;





#define TM_BM_RESERVE_LINUX_BUFFERS_2            0xf0040020
#define TM_BM_RESERVE_LINUX_BUFFERS_2_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 reserve_linux5_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux4_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_linux4_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux5_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_LINUX_BUFFERS_2_t;





#define TM_BM_RESERVE_LINUX_BUFFERS_3            0xf0040024
#define TM_BM_RESERVE_LINUX_BUFFERS_3_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 reserve_linux7_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux6_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_linux6_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 reserve_linux7_buffers : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_LINUX_BUFFERS_3_t;





#define TM_BM_WRED_CONFIG_0                      0xf0040028
#define TM_BM_WRED_CONFIG_0_dft                  0x00004000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 wred_ad_update_period : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wred_ad_update_period : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_WRED_CONFIG_0_t;





#define TM_BM_WRED_CONFIG_1                      0xf004002c
#define TM_BM_WRED_CONFIG_1_dft                  0x00000010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 wred_profile_select_mode :  2 ; /* bits 15:14 */
    cs_uint32 wred_ad_grt_ad_max_mode :  1 ; /* bits 13:13 */
    cs_uint32 wred_buffer_alloc_only :  1 ; /* bits 12:12 */
    cs_uint32 wred_agbd_weight     :  4 ; /* bits 11:8 */
    cs_uint32 wred_drop_mark_mode  :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 wred_ad_update_mode  :  1 ; /* bits 5:5 */
    cs_uint32 wred_mode            :  2 ; /* bits 4:3 */
    cs_uint32 wred_adjust_range_index :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wred_adjust_range_index :  3 ; /* bits 2:0 */
    cs_uint32 wred_mode            :  2 ; /* bits 4:3 */
    cs_uint32 wred_ad_update_mode  :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 wred_drop_mark_mode  :  1 ; /* bits 7:7 */
    cs_uint32 wred_agbd_weight     :  4 ; /* bits 11:8 */
    cs_uint32 wred_buffer_alloc_only :  1 ; /* bits 12:12 */
    cs_uint32 wred_ad_grt_ad_max_mode :  1 ; /* bits 13:13 */
    cs_uint32 wred_profile_select_mode :  2 ; /* bits 15:14 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_WRED_CONFIG_1_t;





#define TM_BM_COPY_WRED_PROFILE                  0xf0040030
#define TM_BM_COPY_WRED_PROFILE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 wred_aqd_max_drop_probability :  3 ; /* bits 22:20 */
    cs_uint32 wred_aqd_max_pct_buffers0 :  5 ; /* bits 19:15 */
    cs_uint32 wred_aqd_min_pct_buffers0 :  5 ; /* bits 14:10 */
    cs_uint32 wred_aqd_max_pct_baseline :  5 ; /* bits 9:5 */
    cs_uint32 wred_aqd_min_pct_baseline :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wred_aqd_min_pct_baseline :  5 ; /* bits 4:0 */
    cs_uint32 wred_aqd_max_pct_baseline :  5 ; /* bits 9:5 */
    cs_uint32 wred_aqd_min_pct_buffers0 :  5 ; /* bits 14:10 */
    cs_uint32 wred_aqd_max_pct_buffers0 :  5 ; /* bits 19:15 */
    cs_uint32 wred_aqd_max_drop_probability :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_COPY_WRED_PROFILE_t;





#define TM_BM_COPY_DEST_PORT                     0xf0040034
#define TM_BM_COPY_DEST_PORT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 dest_port_addr       :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dest_port_addr       :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_COPY_DEST_PORT_t;





#define TM_BM_TRAFFIC_CONTROL_0                  0xf0040038
#define TM_BM_TRAFFIC_CONTROL_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 warning_threshold    : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 warning_threshold    : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_TRAFFIC_CONTROL_0_t;





#define TM_BM_TRAFFIC_CONTROL_1                  0xf004003c
#define TM_BM_TRAFFIC_CONTROL_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 dying_gasp_threshold : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 living_threshold     : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 living_threshold     : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 dying_gasp_threshold : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_TRAFFIC_CONTROL_1_t;





#define TM_BM_VOQ_MEM_STATUS                     0xf0040040
#define TM_BM_VOQ_MEM_STATUS_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_MEM_STATUS_t;





#define TM_BM_VOQ_STATUS_MEM_STATUS              0xf0040044
#define TM_BM_VOQ_STATUS_MEM_STATUS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_STATUS_MEM_STATUS_t;





#define TM_BM_DEST_PORT_MEM_STATUS               0xf0040048
#define TM_BM_DEST_PORT_MEM_STATUS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_MEM_STATUS_t;





#define TM_BM_DEST_PORT_STATUS_MEM_STATUS        0xf004004c
#define TM_BM_DEST_PORT_STATUS_MEM_STATUS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_STATUS_MEM_STATUS_t;





#define TM_BM_VOQ_PROFILE_MEM_STATUS             0xf0040050
#define TM_BM_VOQ_PROFILE_MEM_STATUS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_PROFILE_MEM_STATUS_t;





#define TM_BM_WRED_PROFILE_MEM_STATUS            0xf0040054
#define TM_BM_WRED_PROFILE_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_WRED_PROFILE_MEM_STATUS_t;





#define TM_BM_INTERRUPT_0                        0xf0040058
#define TM_BM_INTERRUPT_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_global_int_buffers_used :  1 ; /* bits 22:22 */
    cs_uint32 err_global_linux7_buffers_used :  1 ; /* bits 21:21 */
    cs_uint32 err_global_linux6_buffers_used :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux5_buffers_used :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux4_buffers_used :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux3_buffers_used :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux2_buffers_used :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux1_buffers_used :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux0_buffers_used :  1 ; /* bits 14:14 */
    cs_uint32 err_global_cpu_buffers_used :  1 ; /* bits 13:13 */
    cs_uint32 err_global_buffers_used :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_wred_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_wred_profile_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_dest_port_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_dest_port_status_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_mem    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_voq_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_voq_status_mem   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_profile_mem  :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_mem  :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_mem          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_voq_mem          :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_voq_mem  :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_profile_mem  :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_status_mem   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_dest_port_mem    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_dest_port_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_status_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_wred_profile_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_wred_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_global_buffers_used :  1 ; /* bits 12:12 */
    cs_uint32 err_global_cpu_buffers_used :  1 ; /* bits 13:13 */
    cs_uint32 err_global_linux0_buffers_used :  1 ; /* bits 14:14 */
    cs_uint32 err_global_linux1_buffers_used :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux2_buffers_used :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux3_buffers_used :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux4_buffers_used :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux5_buffers_used :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux6_buffers_used :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux7_buffers_used :  1 ; /* bits 21:21 */
    cs_uint32 err_global_int_buffers_used :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INTERRUPT_0_t;





#define TM_BM_INTENABLE_0                        0xf004005c
#define TM_BM_INTENABLE_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_global_int_buffers_used_en :  1 ; /* bits 22:22 */
    cs_uint32 err_global_linux7_buffers_used_en :  1 ; /* bits 21:21 */
    cs_uint32 err_global_linux6_buffers_used_en :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux5_buffers_used_en :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux4_buffers_used_en :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux3_buffers_used_en :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux2_buffers_used_en :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux1_buffers_used_en :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux0_buffers_used_en :  1 ; /* bits 14:14 */
    cs_uint32 err_global_cpu_buffers_used_en :  1 ; /* bits 13:13 */
    cs_uint32 err_global_buffers_used_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_wred_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_wred_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_dest_port_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_dest_port_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_voq_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_voq_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_mem_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_voq_mem_en       :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_voq_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_dest_port_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_dest_port_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_wred_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_wred_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_global_buffers_used_en :  1 ; /* bits 12:12 */
    cs_uint32 err_global_cpu_buffers_used_en :  1 ; /* bits 13:13 */
    cs_uint32 err_global_linux0_buffers_used_en :  1 ; /* bits 14:14 */
    cs_uint32 err_global_linux1_buffers_used_en :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux2_buffers_used_en :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux3_buffers_used_en :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux4_buffers_used_en :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux5_buffers_used_en :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux6_buffers_used_en :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux7_buffers_used_en :  1 ; /* bits 21:21 */
    cs_uint32 err_global_int_buffers_used_en :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INTENABLE_0_t;





#define TM_BM_INTERRUPT_1                        0xf0040060
#define TM_BM_INTERRUPT_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_global_int_buffers_used :  1 ; /* bits 22:22 */
    cs_uint32 err_global_linux7_buffers_used :  1 ; /* bits 21:21 */
    cs_uint32 err_global_linux6_buffers_used :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux5_buffers_used :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux4_buffers_used :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux3_buffers_used :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux2_buffers_used :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux1_buffers_used :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux0_buffers_used :  1 ; /* bits 14:14 */
    cs_uint32 err_global_cpu_buffers_used :  1 ; /* bits 13:13 */
    cs_uint32 err_global_buffers_used :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_wred_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_wred_profile_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_dest_port_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_dest_port_status_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_mem    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_voq_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_voq_status_mem   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_profile_mem  :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_mem  :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_mem          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_voq_mem          :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_voq_mem  :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_profile_mem  :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_status_mem   :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_dest_port_mem    :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_dest_port_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_status_mem :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_wred_profile_mem :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_wred_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_global_buffers_used :  1 ; /* bits 12:12 */
    cs_uint32 err_global_cpu_buffers_used :  1 ; /* bits 13:13 */
    cs_uint32 err_global_linux0_buffers_used :  1 ; /* bits 14:14 */
    cs_uint32 err_global_linux1_buffers_used :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux2_buffers_used :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux3_buffers_used :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux4_buffers_used :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux5_buffers_used :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux6_buffers_used :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux7_buffers_used :  1 ; /* bits 21:21 */
    cs_uint32 err_global_int_buffers_used :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INTERRUPT_1_t;





#define TM_BM_INTENABLE_1                        0xf0040064
#define TM_BM_INTENABLE_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_global_int_buffers_used_en :  1 ; /* bits 22:22 */
    cs_uint32 err_global_linux7_buffers_used_en :  1 ; /* bits 21:21 */
    cs_uint32 err_global_linux6_buffers_used_en :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux5_buffers_used_en :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux4_buffers_used_en :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux3_buffers_used_en :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux2_buffers_used_en :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux1_buffers_used_en :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux0_buffers_used_en :  1 ; /* bits 14:14 */
    cs_uint32 err_global_cpu_buffers_used_en :  1 ; /* bits 13:13 */
    cs_uint32 err_global_buffers_used_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_wred_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_wred_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_dest_port_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_dest_port_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_voq_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_voq_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_mem_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_voq_mem_en       :  1 ; /* bits 0:0 */
    cs_uint32 err_correct_voq_mem_en :  1 ; /* bits 1:1 */
    cs_uint32 err_voq_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_voq_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_voq_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_voq_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_dest_port_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_dest_port_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_dest_port_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_dest_port_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_wred_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_wred_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_global_buffers_used_en :  1 ; /* bits 12:12 */
    cs_uint32 err_global_cpu_buffers_used_en :  1 ; /* bits 13:13 */
    cs_uint32 err_global_linux0_buffers_used_en :  1 ; /* bits 14:14 */
    cs_uint32 err_global_linux1_buffers_used_en :  1 ; /* bits 15:15 */
    cs_uint32 err_global_linux2_buffers_used_en :  1 ; /* bits 16:16 */
    cs_uint32 err_global_linux3_buffers_used_en :  1 ; /* bits 17:17 */
    cs_uint32 err_global_linux4_buffers_used_en :  1 ; /* bits 18:18 */
    cs_uint32 err_global_linux5_buffers_used_en :  1 ; /* bits 19:19 */
    cs_uint32 err_global_linux6_buffers_used_en :  1 ; /* bits 20:20 */
    cs_uint32 err_global_linux7_buffers_used_en :  1 ; /* bits 21:21 */
    cs_uint32 err_global_int_buffers_used_en :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INTENABLE_1_t;





#define TM_BM_INT_STATUS_1                       0xf0040068
#define TM_BM_INT_STATUS_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 buffers              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffers              : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 free_buffers         : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INT_STATUS_1_t;





#define TM_BM_INT_STATUS_2                       0xf004006c
#define TM_BM_INT_STATUS_2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 free_global_buffers  : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 global_buffers       : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 global_buffers       : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 free_global_buffers  : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_INT_STATUS_2_t;





#define TM_BM_RESERVE_INT_BUFFERS                0xf0040070
#define TM_BM_RESERVE_INT_BUFFERS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 reserve_buffers_inflight_pkts :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 reserve_int_buffers  : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 reserve_int_buffers  : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 reserve_buffers_inflight_pkts :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_RESERVE_INT_BUFFERS_t;





#define TM_BM_TRAFFIC_CONTROL_2                  0xf0040074
#define TM_BM_TRAFFIC_CONTROL_2_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 warning_threshold_int : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 warning_threshold_int : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_TRAFFIC_CONTROL_2_t;





#define TM_BM_TRAFFIC_CONTROL_3                  0xf0040078
#define TM_BM_TRAFFIC_CONTROL_3_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 dying_gasp_threshold_int : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 living_threshold_int : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 living_threshold_int : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 dying_gasp_threshold_int : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_TRAFFIC_CONTROL_3_t;





#define TM_BM_VOQ_MEM_ACCESS                     0xf0040080
#define TM_BM_VOQ_MEM_ACCESS_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_MEM_ACCESS_t;





#define TM_BM_VOQ_MEM_DATA                       0xf0040084
#define TM_BM_VOQ_MEM_DATA_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 wred_enable          :  1 ; /* bits 19:19 */
    cs_uint32 voq_cntr             :  5 ; /* bits 18:14 */
    cs_uint32 voq_cntr_enable      :  1 ; /* bits 13:13 */
    cs_uint32 dest_port            :  3 ; /* bits 12:10 */
    cs_uint32 wred_profile         :  5 ; /* bits 9:5 */
    cs_uint32 voq_profile          :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 voq_profile          :  5 ; /* bits 4:0 */
    cs_uint32 wred_profile         :  5 ; /* bits 9:5 */
    cs_uint32 dest_port            :  3 ; /* bits 12:10 */
    cs_uint32 voq_cntr_enable      :  1 ; /* bits 13:13 */
    cs_uint32 voq_cntr             :  5 ; /* bits 18:14 */
    cs_uint32 wred_enable          :  1 ; /* bits 19:19 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_MEM_DATA_t;





#define TM_BM_VOQ_STATUS_MEM_ACCESS              0xf0040090
#define TM_BM_VOQ_STATUS_MEM_ACCESS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_STATUS_MEM_ACCESS_t;





#define TM_BM_VOQ_STATUS_MEM_DATA1               0xf0040094
#define TM_BM_VOQ_STATUS_MEM_DATA1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 voq_aqd              : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 voq_aqd              : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_STATUS_MEM_DATA1_t;





#define TM_BM_VOQ_STATUS_MEM_DATA0               0xf0040098
#define TM_BM_VOQ_STATUS_MEM_DATA0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 voq_aqd              :  2 ; /* bits 31:30 */
    cs_uint32 voq_depth            : 16 ; /* bits 29:14 */
    cs_uint32 voq_write_ptr        : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 voq_write_ptr        : 14 ; /* bits 13:0 */
    cs_uint32 voq_depth            : 16 ; /* bits 29:14 */
    cs_uint32 voq_aqd              :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_STATUS_MEM_DATA0_t;





#define TM_BM_DEST_PORT_MEM_ACCESS               0xf00400a0
#define TM_BM_DEST_PORT_MEM_ACCESS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_MEM_ACCESS_t;





#define TM_BM_DEST_PORT_MEM_DATA                 0xf00400a4
#define TM_BM_DEST_PORT_MEM_DATA_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 dest_port_max_global_buffers : 13 ; /* bits 25:13 */
    cs_uint32 dest_port_min_global_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dest_port_min_global_buffers : 13 ; /* bits 12:0 */
    cs_uint32 dest_port_max_global_buffers : 13 ; /* bits 25:13 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_MEM_DATA_t;





#define TM_BM_DEST_PORT_STATUS_MEM_ACCESS        0xf00400b0
#define TM_BM_DEST_PORT_STATUS_MEM_ACCESS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_STATUS_MEM_ACCESS_t;





#define TM_BM_DEST_PORT_STATUS_MEM_DATA          0xf00400b4
#define TM_BM_DEST_PORT_STATUS_MEM_DATA_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 dest_port_global_buffers : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dest_port_global_buffers : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_DEST_PORT_STATUS_MEM_DATA_t;





#define TM_BM_VOQ_PROFILE_MEM_ACCESS             0xf00400c0
#define TM_BM_VOQ_PROFILE_MEM_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_PROFILE_MEM_ACCESS_t;





#define TM_BM_VOQ_PROFILE_MEM_DATA1              0xf00400c4
#define TM_BM_VOQ_PROFILE_MEM_DATA1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 wred_aqd_weight      :  4 ; /* bits 6:3 */
    cs_uint32 wred_adjust_range_index :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wred_adjust_range_index :  3 ; /* bits 2:0 */
    cs_uint32 wred_aqd_weight      :  4 ; /* bits 6:3 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_PROFILE_MEM_DATA1_t;





#define TM_BM_VOQ_PROFILE_MEM_DATA0              0xf00400c8
#define TM_BM_VOQ_PROFILE_MEM_DATA0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 voq_max_depth        : 16 ; /* bits 31:16 */
    cs_uint32 voq_min_depth        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 voq_min_depth        : 16 ; /* bits 15:0 */
    cs_uint32 voq_max_depth        : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_VOQ_PROFILE_MEM_DATA0_t;





#define TM_BM_WRED_PROFILE_MEM_ACCESS            0xf00400d0
#define TM_BM_WRED_PROFILE_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_WRED_PROFILE_MEM_ACCESS_t;





#define TM_BM_WRED_PROFILE_MEM_DATA              0xf00400d4
#define TM_BM_WRED_PROFILE_MEM_DATA_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 wred_aqd_max_drop_probability :  3 ; /* bits 22:20 */
    cs_uint32 wred_aqd_max_pct_buffers0 :  5 ; /* bits 19:15 */
    cs_uint32 wred_aqd_min_pct_buffers0 :  5 ; /* bits 14:10 */
    cs_uint32 wred_aqd_max_pct_baseline :  5 ; /* bits 9:5 */
    cs_uint32 wred_aqd_min_pct_baseline :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wred_aqd_min_pct_baseline :  5 ; /* bits 4:0 */
    cs_uint32 wred_aqd_max_pct_baseline :  5 ; /* bits 9:5 */
    cs_uint32 wred_aqd_min_pct_buffers0 :  5 ; /* bits 14:10 */
    cs_uint32 wred_aqd_max_pct_buffers0 :  5 ; /* bits 19:15 */
    cs_uint32 wred_aqd_max_drop_probability :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_BM_WRED_PROFILE_MEM_DATA_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* BM */

typedef struct {
  TM_BM_CONFIG_0_t                         CONFIG_0;                      /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TM_BM_STATUS_0_t                         STATUS_0;                      /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TM_BM_STATUS_1_t                         STATUS_1;                      /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TM_BM_STATUS_2_t                         STATUS_2;                      /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TM_BM_RESERVE_BUFFERS_t                  RESERVE_BUFFERS;               /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TM_BM_RESERVE_CPU_BUFFERS_t              RESERVE_CPU_BUFFERS;           /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TM_BM_RESERVE_LINUX_BUFFERS_0_t          RESERVE_LINUX_BUFFERS_0;       /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TM_BM_RESERVE_LINUX_BUFFERS_1_t          RESERVE_LINUX_BUFFERS_1;       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TM_BM_RESERVE_LINUX_BUFFERS_2_t          RESERVE_LINUX_BUFFERS_2;       /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  TM_BM_RESERVE_LINUX_BUFFERS_3_t          RESERVE_LINUX_BUFFERS_3;       /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  TM_BM_WRED_CONFIG_0_t                    WRED_CONFIG_0;                 /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  TM_BM_WRED_CONFIG_1_t                    WRED_CONFIG_1;                 /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  TM_BM_COPY_WRED_PROFILE_t                COPY_WRED_PROFILE;             /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  TM_BM_COPY_DEST_PORT_t                   COPY_DEST_PORT;                /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  TM_BM_TRAFFIC_CONTROL_0_t                TRAFFIC_CONTROL_0;             /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  TM_BM_TRAFFIC_CONTROL_1_t                TRAFFIC_CONTROL_1;             /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  TM_BM_VOQ_MEM_STATUS_t                   VOQ_MEM_STATUS;                /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  TM_BM_VOQ_STATUS_MEM_STATUS_t            VOQ_STATUS_MEM_STATUS;         /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  TM_BM_DEST_PORT_MEM_STATUS_t             DEST_PORT_MEM_STATUS;          /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  TM_BM_DEST_PORT_STATUS_MEM_STATUS_t      DEST_PORT_STATUS_MEM_STATUS;   /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  TM_BM_VOQ_PROFILE_MEM_STATUS_t           VOQ_PROFILE_MEM_STATUS;        /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  TM_BM_WRED_PROFILE_MEM_STATUS_t          WRED_PROFILE_MEM_STATUS;       /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  TM_BM_INTERRUPT_0_t                      INTERRUPT_0;                   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  TM_BM_INTENABLE_0_t                      INTENABLE_0;                   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  TM_BM_INTERRUPT_1_t                      INTERRUPT_1;                   /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  TM_BM_INTENABLE_1_t                      INTENABLE_1;                   /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  TM_BM_INT_STATUS_1_t                     INT_STATUS_1;                  /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  TM_BM_INT_STATUS_2_t                     INT_STATUS_2;                  /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  TM_BM_RESERVE_INT_BUFFERS_t              RESERVE_INT_BUFFERS;           /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  TM_BM_TRAFFIC_CONTROL_2_t                TRAFFIC_CONTROL_2;             /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  TM_BM_TRAFFIC_CONTROL_3_t                TRAFFIC_CONTROL_3;             /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[7];                   
  TM_BM_VOQ_MEM_ACCESS_t                   VOQ_MEM_ACCESS;                /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd32[3];                   
  TM_BM_VOQ_MEM_DATA_t                     VOQ_MEM_DATA;                  /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd33[11];                  
  TM_BM_VOQ_STATUS_MEM_ACCESS_t            VOQ_STATUS_MEM_ACCESS;         /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd34[3];                   
  TM_BM_VOQ_STATUS_MEM_DATA1_t             VOQ_STATUS_MEM_DATA1;          /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd35[3];                   
  TM_BM_VOQ_STATUS_MEM_DATA0_t             VOQ_STATUS_MEM_DATA0;          /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd36[7];                   
  TM_BM_DEST_PORT_MEM_ACCESS_t             DEST_PORT_MEM_ACCESS;          /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd37[3];                   
  TM_BM_DEST_PORT_MEM_DATA_t               DEST_PORT_MEM_DATA;            /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd38[11];                  
  TM_BM_DEST_PORT_STATUS_MEM_ACCESS_t      DEST_PORT_STATUS_MEM_ACCESS;   /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd39[3];                   
  TM_BM_DEST_PORT_STATUS_MEM_DATA_t        DEST_PORT_STATUS_MEM_DATA;     /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd40[11];                  
  TM_BM_VOQ_PROFILE_MEM_ACCESS_t           VOQ_PROFILE_MEM_ACCESS;        /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd41[3];                   
  TM_BM_VOQ_PROFILE_MEM_DATA1_t            VOQ_PROFILE_MEM_DATA1;         /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd42[3];                   
  TM_BM_VOQ_PROFILE_MEM_DATA0_t            VOQ_PROFILE_MEM_DATA0;         /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd43[7];                   
  TM_BM_WRED_PROFILE_MEM_ACCESS_t          WRED_PROFILE_MEM_ACCESS;       /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd44[3];                   
  TM_BM_WRED_PROFILE_MEM_DATA_t            WRED_PROFILE_MEM_DATA;         /* addr: 0x000000d4 */ 
} TM_BM_t;

  

/*
 * POL
 */
  



#define TM_POL_CONFIG_0                          0xf0040100
#define TM_POL_CONFIG_0_dft                      0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
    cs_uint32 pol_disable          :  1 ; /* bits 30:30 */
    cs_uint32 config_spare         : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 pol_bypass_red       :  1 ; /* bits 6:6 */
    cs_uint32 pol_bypass_yellow    :  1 ; /* bits 5:5 */
    cs_uint32 pol_color_blind      :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 init                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pol_color_blind      :  1 ; /* bits 4:4 */
    cs_uint32 pol_bypass_yellow    :  1 ; /* bits 5:5 */
    cs_uint32 pol_bypass_red       :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 config_spare         : 14 ; /* bits 29:16 */
    cs_uint32 pol_disable          :  1 ; /* bits 30:30 */
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CONFIG_0_t;





#define TM_POL_CONFIG_SPID                       0xf0040104
#define TM_POL_CONFIG_SPID_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 22 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CONFIG_SPID_t;





#define TM_POL_CONFIG_FLOW                       0xf0040108
#define TM_POL_CONFIG_FLOW_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 22 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               : 22 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CONFIG_FLOW_t;





#define TM_POL_CONFIG_PKT_TYPE                   0xf004010c
#define TM_POL_CONFIG_PKT_TYPE_dft               0xffff0000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lspid3               :  4 ; /* bits 31:28 */
    cs_uint32 lspid2               :  4 ; /* bits 27:24 */
    cs_uint32 lspid1               :  4 ; /* bits 23:20 */
    cs_uint32 lspid0               :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 lspid0               :  4 ; /* bits 19:16 */
    cs_uint32 lspid1               :  4 ; /* bits 23:20 */
    cs_uint32 lspid2               :  4 ; /* bits 27:24 */
    cs_uint32 lspid3               :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CONFIG_PKT_TYPE_t;





#define TM_POL_CONFIG_CPU                        0xf0040110
#define TM_POL_CONFIG_CPU_dft                    0x7f7f0000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 voq1                 :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 voq0                 :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bypass_yellow        :  1 ; /* bits 0:0 */
    cs_uint32 bypass_red           :  1 ; /* bits 1:1 */
    cs_uint32 disable              :  1 ; /* bits 2:2 */
    cs_uint32 color_blind          :  1 ; /* bits 3:3 */
    cs_uint32 bypass_yellow_define :  1 ; /* bits 4:4 */
    cs_uint32 update_mode          :  1 ; /* bits 5:5 */
    cs_uint32 nest_level           :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 commit_override_enable :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 voq0                 :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 voq1                 :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CONFIG_CPU_t;





#define TM_POL_IPG_DEST                          0xf0040114
#define TM_POL_IPG_DEST_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ipg_dest6            :  5 ; /* bits 29:25 */
    cs_uint32 ipg_dest5            :  5 ; /* bits 24:20 */
    cs_uint32 ipg_dest4            :  5 ; /* bits 19:15 */
    cs_uint32 ipg_dest3            :  5 ; /* bits 14:10 */
    cs_uint32 ipg_dest2            :  5 ; /* bits 9:5 */
    cs_uint32 ipg_dest1            :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipg_dest1            :  5 ; /* bits 4:0 */
    cs_uint32 ipg_dest2            :  5 ; /* bits 9:5 */
    cs_uint32 ipg_dest3            :  5 ; /* bits 14:10 */
    cs_uint32 ipg_dest4            :  5 ; /* bits 19:15 */
    cs_uint32 ipg_dest5            :  5 ; /* bits 24:20 */
    cs_uint32 ipg_dest6            :  5 ; /* bits 29:25 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_IPG_DEST_t;





#define TM_POL_IPG_DEST_MAP                      0xf0040118
#define TM_POL_IPG_DEST_MAP_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 ipg_ldpid7           :  3 ; /* bits 23:21 */
    cs_uint32 ipg_ldpid6           :  3 ; /* bits 20:18 */
    cs_uint32 ipg_ldpid5           :  3 ; /* bits 17:15 */
    cs_uint32 ipg_ldpid4           :  3 ; /* bits 14:12 */
    cs_uint32 ipg_ldpid3           :  3 ; /* bits 11:9 */
    cs_uint32 ipg_ldpid2           :  3 ; /* bits 8:6 */
    cs_uint32 ipg_ldpid1           :  3 ; /* bits 5:3 */
    cs_uint32 ipg_ldpid0           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipg_ldpid0           :  3 ; /* bits 2:0 */
    cs_uint32 ipg_ldpid1           :  3 ; /* bits 5:3 */
    cs_uint32 ipg_ldpid2           :  3 ; /* bits 8:6 */
    cs_uint32 ipg_ldpid3           :  3 ; /* bits 11:9 */
    cs_uint32 ipg_ldpid4           :  3 ; /* bits 14:12 */
    cs_uint32 ipg_ldpid5           :  3 ; /* bits 17:15 */
    cs_uint32 ipg_ldpid6           :  3 ; /* bits 20:18 */
    cs_uint32 ipg_ldpid7           :  3 ; /* bits 23:21 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_IPG_DEST_MAP_t;





#define TM_POL_IPG_SRC                           0xf004011c
#define TM_POL_IPG_SRC_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ipg_src6             :  5 ; /* bits 29:25 */
    cs_uint32 ipg_src5             :  5 ; /* bits 24:20 */
    cs_uint32 ipg_src4             :  5 ; /* bits 19:15 */
    cs_uint32 ipg_src3             :  5 ; /* bits 14:10 */
    cs_uint32 ipg_src2             :  5 ; /* bits 9:5 */
    cs_uint32 ipg_src1             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipg_src1             :  5 ; /* bits 4:0 */
    cs_uint32 ipg_src2             :  5 ; /* bits 9:5 */
    cs_uint32 ipg_src3             :  5 ; /* bits 14:10 */
    cs_uint32 ipg_src4             :  5 ; /* bits 19:15 */
    cs_uint32 ipg_src5             :  5 ; /* bits 24:20 */
    cs_uint32 ipg_src6             :  5 ; /* bits 29:25 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_IPG_SRC_t;





#define TM_POL_IPG_SRC_MAP                       0xf0040120
#define TM_POL_IPG_SRC_MAP_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 ipg_lspid7           :  3 ; /* bits 23:21 */
    cs_uint32 ipg_lspid6           :  3 ; /* bits 20:18 */
    cs_uint32 ipg_lspid5           :  3 ; /* bits 17:15 */
    cs_uint32 ipg_lspid4           :  3 ; /* bits 14:12 */
    cs_uint32 ipg_lspid3           :  3 ; /* bits 11:9 */
    cs_uint32 ipg_lspid2           :  3 ; /* bits 8:6 */
    cs_uint32 ipg_lspid1           :  3 ; /* bits 5:3 */
    cs_uint32 ipg_lspid0           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ipg_lspid0           :  3 ; /* bits 2:0 */
    cs_uint32 ipg_lspid1           :  3 ; /* bits 5:3 */
    cs_uint32 ipg_lspid2           :  3 ; /* bits 8:6 */
    cs_uint32 ipg_lspid3           :  3 ; /* bits 11:9 */
    cs_uint32 ipg_lspid4           :  3 ; /* bits 14:12 */
    cs_uint32 ipg_lspid5           :  3 ; /* bits 17:15 */
    cs_uint32 ipg_lspid6           :  3 ; /* bits 20:18 */
    cs_uint32 ipg_lspid7           :  3 ; /* bits 23:21 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_IPG_SRC_MAP_t;





#define TM_POL_STATUS_0                          0xf0040124
#define TM_POL_STATUS_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_STATUS_0_t;





#define TM_POL_FLOW_PROFILE_MEM_STATUS           0xf0040128
#define TM_POL_FLOW_PROFILE_MEM_STATUS_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_PROFILE_MEM_STATUS_t;





#define TM_POL_FLOW_STATUS_MEM_STATUS            0xf004012c
#define TM_POL_FLOW_STATUS_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 err_correct_addr     :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_STATUS_MEM_STATUS_t;





#define TM_POL_SPID_PROFILE_MEM_STATUS           0xf0040130
#define TM_POL_SPID_PROFILE_MEM_STATUS_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_PROFILE_MEM_STATUS_t;





#define TM_POL_SPID_STATUS_MEM_STATUS            0xf0040134
#define TM_POL_SPID_STATUS_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 err_correct_addr     :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_STATUS_MEM_STATUS_t;





#define TM_POL_CPU_PROFILE_MEM_STATUS            0xf0040138
#define TM_POL_CPU_PROFILE_MEM_STATUS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 err_correct_addr     :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 err_addr             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 err_correct_addr     :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd2               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_PROFILE_MEM_STATUS_t;





#define TM_POL_CPU_STATUS_MEM_STATUS             0xf004013c
#define TM_POL_CPU_STATUS_MEM_STATUS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 12 ;
    cs_uint32 err_correct_addr     :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 err_addr             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 err_correct_addr     :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd2               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_STATUS_MEM_STATUS_t;





#define TM_POL_PKT_TYPE_PROFILE_MEM_STATUS       0xf0040140
#define TM_POL_PKT_TYPE_PROFILE_MEM_STATUS_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_PROFILE_MEM_STATUS_t;





#define TM_POL_PKT_TYPE_STATUS_MEM_STATUS        0xf0040144
#define TM_POL_PKT_TYPE_STATUS_MEM_STATUS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_correct_addr     :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_STATUS_MEM_STATUS_t;





#define TM_POL_INTERRUPT_0                       0xf0040148
#define TM_POL_INTERRUPT_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 err_correct_pkt_type_status_mem :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_type_status_mem :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_profile_mem :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_profile_mem :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_cpu_status_mem :  1 ; /* bits 13:13 */
    cs_uint32 err_cpu_status_mem   :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_profile_mem  :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_spid_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_spid_status_mem  :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_profile_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_profile_mem :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_flow_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_flow_status_mem  :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_profile_mem :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 err_flow_profile_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_flow_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_status_mem  :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_spid_profile_mem :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_spid_profile_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_status_mem  :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_cpu_profile_mem  :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_cpu_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_status_mem   :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_status_mem :  1 ; /* bits 13:13 */
    cs_uint32 err_pkt_type_profile_mem :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_pkt_type_profile_mem :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_status_mem :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_status_mem :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_INTERRUPT_0_t;





#define TM_POL_INTENABLE_0                       0xf004014c
#define TM_POL_INTENABLE_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 err_correct_pkt_type_status_mem_en :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_type_status_mem_en :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_profile_mem_en :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_profile_mem_en :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_cpu_status_mem_en :  1 ; /* bits 13:13 */
    cs_uint32 err_cpu_status_mem_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_spid_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_spid_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_profile_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_profile_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_flow_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_flow_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 err_flow_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_flow_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_spid_profile_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_spid_profile_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_cpu_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_cpu_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_status_mem_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_status_mem_en :  1 ; /* bits 13:13 */
    cs_uint32 err_pkt_type_profile_mem_en :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_pkt_type_profile_mem_en :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_status_mem_en :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_status_mem_en :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_INTENABLE_0_t;





#define TM_POL_INTERRUPT_1                       0xf0040150
#define TM_POL_INTERRUPT_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 err_correct_pkt_type_status_mem :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_type_status_mem :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_profile_mem :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_profile_mem :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_cpu_status_mem :  1 ; /* bits 13:13 */
    cs_uint32 err_cpu_status_mem   :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_profile_mem  :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_spid_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_spid_status_mem  :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_profile_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_profile_mem :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_flow_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_flow_status_mem  :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_profile_mem :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 err_flow_profile_mem :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_flow_profile_mem :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_status_mem  :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_status_mem :  1 ; /* bits 5:5 */
    cs_uint32 err_spid_profile_mem :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_spid_profile_mem :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_status_mem  :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_status_mem :  1 ; /* bits 9:9 */
    cs_uint32 err_cpu_profile_mem  :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_cpu_profile_mem :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_status_mem   :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_status_mem :  1 ; /* bits 13:13 */
    cs_uint32 err_pkt_type_profile_mem :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_pkt_type_profile_mem :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_status_mem :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_status_mem :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_INTERRUPT_1_t;





#define TM_POL_INTENABLE_1                       0xf0040154
#define TM_POL_INTENABLE_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 err_correct_pkt_type_status_mem_en :  1 ; /* bits 17:17 */
    cs_uint32 err_pkt_type_status_mem_en :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_profile_mem_en :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_profile_mem_en :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_cpu_status_mem_en :  1 ; /* bits 13:13 */
    cs_uint32 err_cpu_status_mem_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_spid_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_spid_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_profile_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_profile_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_flow_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_flow_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 err_flow_profile_mem_en :  1 ; /* bits 2:2 */
    cs_uint32 err_correct_flow_profile_mem_en :  1 ; /* bits 3:3 */
    cs_uint32 err_flow_status_mem_en :  1 ; /* bits 4:4 */
    cs_uint32 err_correct_flow_status_mem_en :  1 ; /* bits 5:5 */
    cs_uint32 err_spid_profile_mem_en :  1 ; /* bits 6:6 */
    cs_uint32 err_correct_spid_profile_mem_en :  1 ; /* bits 7:7 */
    cs_uint32 err_spid_status_mem_en :  1 ; /* bits 8:8 */
    cs_uint32 err_correct_spid_status_mem_en :  1 ; /* bits 9:9 */
    cs_uint32 err_cpu_profile_mem_en :  1 ; /* bits 10:10 */
    cs_uint32 err_correct_cpu_profile_mem_en :  1 ; /* bits 11:11 */
    cs_uint32 err_cpu_status_mem_en :  1 ; /* bits 12:12 */
    cs_uint32 err_correct_cpu_status_mem_en :  1 ; /* bits 13:13 */
    cs_uint32 err_pkt_type_profile_mem_en :  1 ; /* bits 14:14 */
    cs_uint32 err_correct_pkt_type_profile_mem_en :  1 ; /* bits 15:15 */
    cs_uint32 err_pkt_type_status_mem_en :  1 ; /* bits 16:16 */
    cs_uint32 err_correct_pkt_type_status_mem_en :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_INTENABLE_1_t;





#define TM_POL_FLOW_STATUS_MEM_ACCESS            0xf0040180
#define TM_POL_FLOW_STATUS_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_STATUS_MEM_ACCESS_t;





#define TM_POL_FLOW_STATUS_MEM_DATA1             0xf0040184
#define TM_POL_FLOW_STATUS_MEM_DATA1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_STATUS_MEM_DATA1_t;





#define TM_POL_FLOW_STATUS_MEM_DATA0             0xf0040188
#define TM_POL_FLOW_STATUS_MEM_DATA0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_STATUS_MEM_DATA0_t;





#define TM_POL_FLOW_PROFILE_MEM_ACCESS           0xf0040190
#define TM_POL_FLOW_PROFILE_MEM_ACCESS_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_PROFILE_MEM_ACCESS_t;





#define TM_POL_FLOW_PROFILE_MEM_DATA1            0xf0040194
#define TM_POL_FLOW_PROFILE_MEM_DATA1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_PROFILE_MEM_DATA1_t;





#define TM_POL_FLOW_PROFILE_MEM_DATA0            0xf0040198
#define TM_POL_FLOW_PROFILE_MEM_DATA0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_FLOW_PROFILE_MEM_DATA0_t;





#define TM_POL_SPID_STATUS_MEM_ACCESS            0xf00401a0
#define TM_POL_SPID_STATUS_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_STATUS_MEM_ACCESS_t;





#define TM_POL_SPID_STATUS_MEM_DATA1             0xf00401a4
#define TM_POL_SPID_STATUS_MEM_DATA1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_STATUS_MEM_DATA1_t;





#define TM_POL_SPID_STATUS_MEM_DATA0             0xf00401a8
#define TM_POL_SPID_STATUS_MEM_DATA0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_STATUS_MEM_DATA0_t;





#define TM_POL_SPID_PROFILE_MEM_ACCESS           0xf00401b0
#define TM_POL_SPID_PROFILE_MEM_ACCESS_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_PROFILE_MEM_ACCESS_t;





#define TM_POL_SPID_PROFILE_MEM_DATA1            0xf00401b4
#define TM_POL_SPID_PROFILE_MEM_DATA1_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 bypass_red           :  1 ; /* bits 11:11 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 10:10 */
    cs_uint32 pir_max_credit       : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_max_credit       : 10 ; /* bits 9:0 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 10:10 */
    cs_uint32 bypass_red           :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_PROFILE_MEM_DATA1_t;





#define TM_POL_SPID_PROFILE_MEM_DATA0            0xf00401b8
#define TM_POL_SPID_PROFILE_MEM_DATA0_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_max_credit       :  3 ; /* bits 31:29 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 28:16 */
    cs_uint32 cir_credit           : 13 ; /* bits 15:3 */
    cs_uint32 range                :  1 ; /* bits 2:2 */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
    cs_uint32 range                :  1 ; /* bits 2:2 */
    cs_uint32 cir_credit           : 13 ; /* bits 15:3 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 28:16 */
    cs_uint32 pir_max_credit       :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_SPID_PROFILE_MEM_DATA0_t;





#define TM_POL_CPU_STATUS_MEM_ACCESS             0xf00401c0
#define TM_POL_CPU_STATUS_MEM_ACCESS_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_STATUS_MEM_ACCESS_t;





#define TM_POL_CPU_STATUS_MEM_DATA1              0xf00401c4
#define TM_POL_CPU_STATUS_MEM_DATA1_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_STATUS_MEM_DATA1_t;





#define TM_POL_CPU_STATUS_MEM_DATA0              0xf00401c8
#define TM_POL_CPU_STATUS_MEM_DATA0_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_STATUS_MEM_DATA0_t;





#define TM_POL_CPU_PROFILE_MEM_ACCESS            0xf00401d0
#define TM_POL_CPU_PROFILE_MEM_ACCESS_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_PROFILE_MEM_ACCESS_t;





#define TM_POL_CPU_PROFILE_MEM_DATA1             0xf00401d4
#define TM_POL_CPU_PROFILE_MEM_DATA1_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_PROFILE_MEM_DATA1_t;





#define TM_POL_CPU_PROFILE_MEM_DATA0             0xf00401d8
#define TM_POL_CPU_PROFILE_MEM_DATA0_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_CPU_PROFILE_MEM_DATA0_t;





#define TM_POL_PKT_TYPE_STATUS_MEM_ACCESS        0xf00401e0
#define TM_POL_PKT_TYPE_STATUS_MEM_ACCESS_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_STATUS_MEM_ACCESS_t;





#define TM_POL_PKT_TYPE_STATUS_MEM_DATA1         0xf00401e4
#define TM_POL_PKT_TYPE_STATUS_MEM_DATA1_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_token_bucket     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_STATUS_MEM_DATA1_t;





#define TM_POL_PKT_TYPE_STATUS_MEM_DATA0         0xf00401e8
#define TM_POL_PKT_TYPE_STATUS_MEM_DATA0_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_token_bucket     : 20 ; /* bits 19:0 */
    cs_uint32 pir_token_bucket     : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_STATUS_MEM_DATA0_t;





#define TM_POL_PKT_TYPE_PROFILE_MEM_ACCESS       0xf00401f0
#define TM_POL_PKT_TYPE_PROFILE_MEM_ACCESS_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_PROFILE_MEM_ACCESS_t;





#define TM_POL_PKT_TYPE_PROFILE_MEM_DATA1        0xf00401f4
#define TM_POL_PKT_TYPE_PROFILE_MEM_DATA1_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pir_credit           : 11 ; /* bits 10:0 */
    cs_uint32 pir_max_credit       : 13 ; /* bits 23:11 */
    cs_uint32 bypass_yellow        :  1 ; /* bits 24:24 */
    cs_uint32 bypass_red           :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_PROFILE_MEM_DATA1_t;





#define TM_POL_PKT_TYPE_PROFILE_MEM_DATA0        0xf00401f8
#define TM_POL_PKT_TYPE_PROFILE_MEM_DATA0_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 policer_type         :  2 ; /* bits 1:0 */
    cs_uint32 range                :  2 ; /* bits 3:2 */
    cs_uint32 cir_credit           : 13 ; /* bits 16:4 */
    cs_uint32 cir_max_credit       : 13 ; /* bits 29:17 */
    cs_uint32 pir_credit           :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_POL_PKT_TYPE_PROFILE_MEM_DATA0_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* POL */

typedef struct {
  TM_POL_CONFIG_0_t                        CONFIG_0;                      /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TM_POL_CONFIG_SPID_t                     CONFIG_SPID;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TM_POL_CONFIG_FLOW_t                     CONFIG_FLOW;                   /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TM_POL_CONFIG_PKT_TYPE_t                 CONFIG_PKT_TYPE;               /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TM_POL_CONFIG_CPU_t                      CONFIG_CPU;                    /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TM_POL_IPG_DEST_t                        IPG_DEST;                      /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TM_POL_IPG_DEST_MAP_t                    IPG_DEST_MAP;                  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TM_POL_IPG_SRC_t                         IPG_SRC;                       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TM_POL_IPG_SRC_MAP_t                     IPG_SRC_MAP;                   /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  TM_POL_STATUS_0_t                        STATUS_0;                      /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  TM_POL_FLOW_PROFILE_MEM_STATUS_t         FLOW_PROFILE_MEM_STATUS;       /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  TM_POL_FLOW_STATUS_MEM_STATUS_t          FLOW_STATUS_MEM_STATUS;        /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  TM_POL_SPID_PROFILE_MEM_STATUS_t         SPID_PROFILE_MEM_STATUS;       /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  TM_POL_SPID_STATUS_MEM_STATUS_t          SPID_STATUS_MEM_STATUS;        /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  TM_POL_CPU_PROFILE_MEM_STATUS_t          CPU_PROFILE_MEM_STATUS;        /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  TM_POL_CPU_STATUS_MEM_STATUS_t           CPU_STATUS_MEM_STATUS;         /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  TM_POL_PKT_TYPE_PROFILE_MEM_STATUS_t     PKT_TYPE_PROFILE_MEM_STATUS;   /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  TM_POL_PKT_TYPE_STATUS_MEM_STATUS_t      PKT_TYPE_STATUS_MEM_STATUS;    /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  TM_POL_INTERRUPT_0_t                     INTERRUPT_0;                   /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  TM_POL_INTENABLE_0_t                     INTENABLE_0;                   /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  TM_POL_INTERRUPT_1_t                     INTERRUPT_1;                   /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  TM_POL_INTENABLE_1_t                     INTENABLE_1;                   /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[43];                  
  TM_POL_FLOW_STATUS_MEM_ACCESS_t          FLOW_STATUS_MEM_ACCESS;        /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd23[3];                   
  TM_POL_FLOW_STATUS_MEM_DATA1_t           FLOW_STATUS_MEM_DATA1;         /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd24[3];                   
  TM_POL_FLOW_STATUS_MEM_DATA0_t           FLOW_STATUS_MEM_DATA0;         /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd25[7];                   
  TM_POL_FLOW_PROFILE_MEM_ACCESS_t         FLOW_PROFILE_MEM_ACCESS;       /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd26[3];                   
  TM_POL_FLOW_PROFILE_MEM_DATA1_t          FLOW_PROFILE_MEM_DATA1;        /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd27[3];                   
  TM_POL_FLOW_PROFILE_MEM_DATA0_t          FLOW_PROFILE_MEM_DATA0;        /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd28[7];                   
  TM_POL_SPID_STATUS_MEM_ACCESS_t          SPID_STATUS_MEM_ACCESS;        /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd29[3];                   
  TM_POL_SPID_STATUS_MEM_DATA1_t           SPID_STATUS_MEM_DATA1;         /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd30[3];                   
  TM_POL_SPID_STATUS_MEM_DATA0_t           SPID_STATUS_MEM_DATA0;         /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd31[7];                   
  TM_POL_SPID_PROFILE_MEM_ACCESS_t         SPID_PROFILE_MEM_ACCESS;       /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd32[3];                   
  TM_POL_SPID_PROFILE_MEM_DATA1_t          SPID_PROFILE_MEM_DATA1;        /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd33[3];                   
  TM_POL_SPID_PROFILE_MEM_DATA0_t          SPID_PROFILE_MEM_DATA0;        /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd34[7];                   
  TM_POL_CPU_STATUS_MEM_ACCESS_t           CPU_STATUS_MEM_ACCESS;         /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd35[3];                   
  TM_POL_CPU_STATUS_MEM_DATA1_t            CPU_STATUS_MEM_DATA1;          /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd36[3];                   
  TM_POL_CPU_STATUS_MEM_DATA0_t            CPU_STATUS_MEM_DATA0;          /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd37[7];                   
  TM_POL_CPU_PROFILE_MEM_ACCESS_t          CPU_PROFILE_MEM_ACCESS;        /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd38[3];                   
  TM_POL_CPU_PROFILE_MEM_DATA1_t           CPU_PROFILE_MEM_DATA1;         /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd39[3];                   
  TM_POL_CPU_PROFILE_MEM_DATA0_t           CPU_PROFILE_MEM_DATA0;         /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd40[7];                   
  TM_POL_PKT_TYPE_STATUS_MEM_ACCESS_t      PKT_TYPE_STATUS_MEM_ACCESS;    /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd41[3];                   
  TM_POL_PKT_TYPE_STATUS_MEM_DATA1_t       PKT_TYPE_STATUS_MEM_DATA1;     /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd42[3];                   
  TM_POL_PKT_TYPE_STATUS_MEM_DATA0_t       PKT_TYPE_STATUS_MEM_DATA0;     /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd43[7];                   
  TM_POL_PKT_TYPE_PROFILE_MEM_ACCESS_t     PKT_TYPE_PROFILE_MEM_ACCESS;   /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd44[3];                   
  TM_POL_PKT_TYPE_PROFILE_MEM_DATA1_t      PKT_TYPE_PROFILE_MEM_DATA1;    /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd45[3];                   
  TM_POL_PKT_TYPE_PROFILE_MEM_DATA0_t      PKT_TYPE_PROFILE_MEM_DATA0;    /* addr: 0x000000f8 */ 
} TM_POL_t;

  

/*
 * TC
 */
  



#define TM_TC_INTERRUPT_0                        0xf0040200
#define TM_TC_INTERRUPT_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 PMi                  :  1 ; /* bits 2:2 */
    cs_uint32 POLi                 :  1 ; /* bits 1:1 */
    cs_uint32 BMi                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BMi                  :  1 ; /* bits 0:0 */
    cs_uint32 POLi                 :  1 ; /* bits 1:1 */
    cs_uint32 PMi                  :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_TC_INTERRUPT_0_t;





#define TM_TC_INTENABLE_0                        0xf0040204
#define TM_TC_INTENABLE_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 PMe                  :  1 ; /* bits 2:2 */
    cs_uint32 POLe                 :  1 ; /* bits 1:1 */
    cs_uint32 BMe                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BMe                  :  1 ; /* bits 0:0 */
    cs_uint32 POLe                 :  1 ; /* bits 1:1 */
    cs_uint32 PMe                  :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_TC_INTENABLE_0_t;





#define TM_TC_INTERRUPT_1                        0xf0040208
#define TM_TC_INTERRUPT_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 PMi                  :  1 ; /* bits 2:2 */
    cs_uint32 POLi                 :  1 ; /* bits 1:1 */
    cs_uint32 BMi                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BMi                  :  1 ; /* bits 0:0 */
    cs_uint32 POLi                 :  1 ; /* bits 1:1 */
    cs_uint32 PMi                  :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_TC_INTERRUPT_1_t;





#define TM_TC_INTENABLE_1                        0xf004020c
#define TM_TC_INTENABLE_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 PMe                  :  1 ; /* bits 2:2 */
    cs_uint32 POLe                 :  1 ; /* bits 1:1 */
    cs_uint32 BMe                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BMe                  :  1 ; /* bits 0:0 */
    cs_uint32 POLe                 :  1 ; /* bits 1:1 */
    cs_uint32 PMe                  :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_TC_INTENABLE_1_t;





#define TM_TC_PAUSE_FRAME_PORT                   0xf0040210
#define TM_TC_PAUSE_FRAME_PORT_STRIDE            4
#define TM_TC_PAUSE_FRAME_PORT_COUNT             3
#define TM_TC_PAUSE_FRAME_PORT_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bm_pause_cnt         :  8 ; /* bits 31:24 */
    cs_uint32 bm_status            :  1 ; /* bits 23:23 */
    cs_uint32 bm_dying_gasp_enable :  1 ; /* bits 22:22 */
    cs_uint32 bm_warning_enable    :  1 ; /* bits 21:21 */
    cs_uint32 pol_pause_cnt        :  8 ; /* bits 20:13 */
    cs_uint32 pol_status           :  1 ; /* bits 12:12 */
    cs_uint32 pol_mode             :  1 ; /* bits 11:11 */
    cs_uint32 pol_enable           :  1 ; /* bits 10:10 */
    cs_uint32 clear_cnt_on_read    :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 logical_spid         :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 logical_spid         :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 clear_cnt_on_read    :  1 ; /* bits 9:9 */
    cs_uint32 pol_enable           :  1 ; /* bits 10:10 */
    cs_uint32 pol_mode             :  1 ; /* bits 11:11 */
    cs_uint32 pol_status           :  1 ; /* bits 12:12 */
    cs_uint32 pol_pause_cnt        :  8 ; /* bits 20:13 */
    cs_uint32 bm_warning_enable    :  1 ; /* bits 21:21 */
    cs_uint32 bm_dying_gasp_enable :  1 ; /* bits 22:22 */
    cs_uint32 bm_status            :  1 ; /* bits 23:23 */
    cs_uint32 bm_pause_cnt         :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_TC_PAUSE_FRAME_PORT_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* TC */

typedef struct {
  TM_TC_INTERRUPT_0_t                      INTERRUPT_0;                   /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TM_TC_INTENABLE_0_t                      INTENABLE_0;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TM_TC_INTERRUPT_1_t                      INTERRUPT_1;                   /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TM_TC_INTENABLE_1_t                      INTENABLE_1;                   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TM_TC_PAUSE_FRAME_PORT_t                 PAUSE_FRAME_PORT;              /* addr: 0x00000010 */ 
} TM_TC_t;

  

/*
 * PM
 */
  



#define TM_PM_CONFIG_0                           0xf0040400
#define TM_PM_CONFIG_0_dft                       0x600000d1




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
    cs_uint32 disable              :  1 ; /* bits 30:30 */
    cs_uint32 bypass_disable_byte_cntrs :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               : 21 ;
    cs_uint32 mark_mode            :  1 ; /* bits 7:7 */
    cs_uint32 cnt_mode             :  1 ; /* bits 6:6 */
    cs_uint32 auto_clear_on_read_mode :  2 ; /* bits 5:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 init                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 auto_clear_on_read_mode :  2 ; /* bits 5:4 */
    cs_uint32 cnt_mode             :  1 ; /* bits 6:6 */
    cs_uint32 mark_mode            :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 21 ;
    cs_uint32 bypass_disable_byte_cntrs :  1 ; /* bits 29:29 */
    cs_uint32 disable              :  1 ; /* bits 30:30 */
    cs_uint32 cpu_full_access      :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CONFIG_0_t;





#define TM_PM_CONFIG_SPARE                       0xf0040404
#define TM_PM_CONFIG_SPARE_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 config_spare         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 config_spare         :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CONFIG_SPARE_t;





#define TM_PM_STATUS_0                           0xf0040408
#define TM_PM_STATUS_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 init_done            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_STATUS_0_t;





#define TM_PM_CNTR_MEM_STATUS                    0xf004040c
#define TM_PM_CNTR_MEM_STATUS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 10 ;
    cs_uint32 err_cntr             :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 err_addr             : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 err_cntr             :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd2               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_STATUS_t;





#define TM_PM_GLB_CNTR_MEM_STATUS                0xf0040410
#define TM_PM_GLB_CNTR_MEM_STATUS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 err_addr             : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 err_addr             : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_GLB_CNTR_MEM_STATUS_t;





#define TM_PM_INTERRUPT_0                        0xf0040414
#define TM_PM_INTERRUPT_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_glb_cntr_mem     :  1 ; /* bits 20:20 */
    cs_uint32 err_cntr_mem         :  1 ; /* bits 19:19 */
    cs_uint32 glb_cntr_msb0        :  1 ; /* bits 18:18 */
    cs_uint32 cpu_copy_cntr_msb3   :  1 ; /* bits 17:17 */
    cs_uint32 cpu_copy_cntr_msb2   :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb1   :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb0   :  1 ; /* bits 14:14 */
    cs_uint32 pkt_type_cntr_msb1   :  1 ; /* bits 13:13 */
    cs_uint32 pkt_type_cntr_msb0   :  1 ; /* bits 12:12 */
    cs_uint32 cpu_cntr_msb0        :  1 ; /* bits 11:11 */
    cs_uint32 voq_cntr_msb1        :  1 ; /* bits 10:10 */
    cs_uint32 voq_cntr_msb0        :  1 ; /* bits 9:9 */
    cs_uint32 spid_cntr_msb0       :  1 ; /* bits 8:8 */
    cs_uint32 flow_cntr_msb7       :  1 ; /* bits 7:7 */
    cs_uint32 flow_cntr_msb6       :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb5       :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb4       :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb3       :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb2       :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb1       :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb0       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flow_cntr_msb0       :  1 ; /* bits 0:0 */
    cs_uint32 flow_cntr_msb1       :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb2       :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb3       :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb4       :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb5       :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb6       :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb7       :  1 ; /* bits 7:7 */
    cs_uint32 spid_cntr_msb0       :  1 ; /* bits 8:8 */
    cs_uint32 voq_cntr_msb0        :  1 ; /* bits 9:9 */
    cs_uint32 voq_cntr_msb1        :  1 ; /* bits 10:10 */
    cs_uint32 cpu_cntr_msb0        :  1 ; /* bits 11:11 */
    cs_uint32 pkt_type_cntr_msb0   :  1 ; /* bits 12:12 */
    cs_uint32 pkt_type_cntr_msb1   :  1 ; /* bits 13:13 */
    cs_uint32 cpu_copy_cntr_msb0   :  1 ; /* bits 14:14 */
    cs_uint32 cpu_copy_cntr_msb1   :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb2   :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb3   :  1 ; /* bits 17:17 */
    cs_uint32 glb_cntr_msb0        :  1 ; /* bits 18:18 */
    cs_uint32 err_cntr_mem         :  1 ; /* bits 19:19 */
    cs_uint32 err_glb_cntr_mem     :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_INTERRUPT_0_t;





#define TM_PM_INTENABLE_0                        0xf0040418
#define TM_PM_INTENABLE_0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_glb_cntr_mem_en  :  1 ; /* bits 20:20 */
    cs_uint32 err_cntr_mem_en      :  1 ; /* bits 19:19 */
    cs_uint32 glb_cntr_msb0_en     :  1 ; /* bits 18:18 */
    cs_uint32 cpu_copy_cntr_msb3_en :  1 ; /* bits 17:17 */
    cs_uint32 cpu_copy_cntr_msb2_en :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb1_en :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb0_en :  1 ; /* bits 14:14 */
    cs_uint32 pkt_type_cntr_msb1_en :  1 ; /* bits 13:13 */
    cs_uint32 pkt_type_cntr_msb0_en :  1 ; /* bits 12:12 */
    cs_uint32 cpu_cntr_msb0_en     :  1 ; /* bits 11:11 */
    cs_uint32 voq_cntr_msb1_en     :  1 ; /* bits 10:10 */
    cs_uint32 voq_cntr_msb0_en     :  1 ; /* bits 9:9 */
    cs_uint32 spid_cntr_msb0_en    :  1 ; /* bits 8:8 */
    cs_uint32 flow_cntr_msb7_en    :  1 ; /* bits 7:7 */
    cs_uint32 flow_cntr_msb6_en    :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb5_en    :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb4_en    :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb3_en    :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb2_en    :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb1_en    :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb0_en    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flow_cntr_msb0_en    :  1 ; /* bits 0:0 */
    cs_uint32 flow_cntr_msb1_en    :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb2_en    :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb3_en    :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb4_en    :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb5_en    :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb6_en    :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb7_en    :  1 ; /* bits 7:7 */
    cs_uint32 spid_cntr_msb0_en    :  1 ; /* bits 8:8 */
    cs_uint32 voq_cntr_msb0_en     :  1 ; /* bits 9:9 */
    cs_uint32 voq_cntr_msb1_en     :  1 ; /* bits 10:10 */
    cs_uint32 cpu_cntr_msb0_en     :  1 ; /* bits 11:11 */
    cs_uint32 pkt_type_cntr_msb0_en :  1 ; /* bits 12:12 */
    cs_uint32 pkt_type_cntr_msb1_en :  1 ; /* bits 13:13 */
    cs_uint32 cpu_copy_cntr_msb0_en :  1 ; /* bits 14:14 */
    cs_uint32 cpu_copy_cntr_msb1_en :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb2_en :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb3_en :  1 ; /* bits 17:17 */
    cs_uint32 glb_cntr_msb0_en     :  1 ; /* bits 18:18 */
    cs_uint32 err_cntr_mem_en      :  1 ; /* bits 19:19 */
    cs_uint32 err_glb_cntr_mem_en  :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_INTENABLE_0_t;





#define TM_PM_INTERRUPT_1                        0xf004041c
#define TM_PM_INTERRUPT_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_glb_cntr_mem     :  1 ; /* bits 20:20 */
    cs_uint32 err_cntr_mem         :  1 ; /* bits 19:19 */
    cs_uint32 glb_cntr_msb0        :  1 ; /* bits 18:18 */
    cs_uint32 cpu_copy_cntr_msb3   :  1 ; /* bits 17:17 */
    cs_uint32 cpu_copy_cntr_msb2   :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb1   :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb0   :  1 ; /* bits 14:14 */
    cs_uint32 pkt_type_cntr_msb1   :  1 ; /* bits 13:13 */
    cs_uint32 pkt_type_cntr_msb0   :  1 ; /* bits 12:12 */
    cs_uint32 cpu_cntr_msb0        :  1 ; /* bits 11:11 */
    cs_uint32 voq_cntr_msb1        :  1 ; /* bits 10:10 */
    cs_uint32 voq_cntr_msb0        :  1 ; /* bits 9:9 */
    cs_uint32 spid_cntr_msb0       :  1 ; /* bits 8:8 */
    cs_uint32 flow_cntr_msb7       :  1 ; /* bits 7:7 */
    cs_uint32 flow_cntr_msb6       :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb5       :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb4       :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb3       :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb2       :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb1       :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb0       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flow_cntr_msb0       :  1 ; /* bits 0:0 */
    cs_uint32 flow_cntr_msb1       :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb2       :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb3       :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb4       :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb5       :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb6       :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb7       :  1 ; /* bits 7:7 */
    cs_uint32 spid_cntr_msb0       :  1 ; /* bits 8:8 */
    cs_uint32 voq_cntr_msb0        :  1 ; /* bits 9:9 */
    cs_uint32 voq_cntr_msb1        :  1 ; /* bits 10:10 */
    cs_uint32 cpu_cntr_msb0        :  1 ; /* bits 11:11 */
    cs_uint32 pkt_type_cntr_msb0   :  1 ; /* bits 12:12 */
    cs_uint32 pkt_type_cntr_msb1   :  1 ; /* bits 13:13 */
    cs_uint32 cpu_copy_cntr_msb0   :  1 ; /* bits 14:14 */
    cs_uint32 cpu_copy_cntr_msb1   :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb2   :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb3   :  1 ; /* bits 17:17 */
    cs_uint32 glb_cntr_msb0        :  1 ; /* bits 18:18 */
    cs_uint32 err_cntr_mem         :  1 ; /* bits 19:19 */
    cs_uint32 err_glb_cntr_mem     :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_INTERRUPT_1_t;





#define TM_PM_INTENABLE_1                        0xf0040420
#define TM_PM_INTENABLE_1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 err_glb_cntr_mem_en  :  1 ; /* bits 20:20 */
    cs_uint32 err_cntr_mem_en      :  1 ; /* bits 19:19 */
    cs_uint32 glb_cntr_msb0_en     :  1 ; /* bits 18:18 */
    cs_uint32 cpu_copy_cntr_msb3_en :  1 ; /* bits 17:17 */
    cs_uint32 cpu_copy_cntr_msb2_en :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb1_en :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb0_en :  1 ; /* bits 14:14 */
    cs_uint32 pkt_type_cntr_msb1_en :  1 ; /* bits 13:13 */
    cs_uint32 pkt_type_cntr_msb0_en :  1 ; /* bits 12:12 */
    cs_uint32 cpu_cntr_msb0_en     :  1 ; /* bits 11:11 */
    cs_uint32 voq_cntr_msb1_en     :  1 ; /* bits 10:10 */
    cs_uint32 voq_cntr_msb0_en     :  1 ; /* bits 9:9 */
    cs_uint32 spid_cntr_msb0_en    :  1 ; /* bits 8:8 */
    cs_uint32 flow_cntr_msb7_en    :  1 ; /* bits 7:7 */
    cs_uint32 flow_cntr_msb6_en    :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb5_en    :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb4_en    :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb3_en    :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb2_en    :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb1_en    :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb0_en    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flow_cntr_msb0_en    :  1 ; /* bits 0:0 */
    cs_uint32 flow_cntr_msb1_en    :  1 ; /* bits 1:1 */
    cs_uint32 flow_cntr_msb2_en    :  1 ; /* bits 2:2 */
    cs_uint32 flow_cntr_msb3_en    :  1 ; /* bits 3:3 */
    cs_uint32 flow_cntr_msb4_en    :  1 ; /* bits 4:4 */
    cs_uint32 flow_cntr_msb5_en    :  1 ; /* bits 5:5 */
    cs_uint32 flow_cntr_msb6_en    :  1 ; /* bits 6:6 */
    cs_uint32 flow_cntr_msb7_en    :  1 ; /* bits 7:7 */
    cs_uint32 spid_cntr_msb0_en    :  1 ; /* bits 8:8 */
    cs_uint32 voq_cntr_msb0_en     :  1 ; /* bits 9:9 */
    cs_uint32 voq_cntr_msb1_en     :  1 ; /* bits 10:10 */
    cs_uint32 cpu_cntr_msb0_en     :  1 ; /* bits 11:11 */
    cs_uint32 pkt_type_cntr_msb0_en :  1 ; /* bits 12:12 */
    cs_uint32 pkt_type_cntr_msb1_en :  1 ; /* bits 13:13 */
    cs_uint32 cpu_copy_cntr_msb0_en :  1 ; /* bits 14:14 */
    cs_uint32 cpu_copy_cntr_msb1_en :  1 ; /* bits 15:15 */
    cs_uint32 cpu_copy_cntr_msb2_en :  1 ; /* bits 16:16 */
    cs_uint32 cpu_copy_cntr_msb3_en :  1 ; /* bits 17:17 */
    cs_uint32 glb_cntr_msb0_en     :  1 ; /* bits 18:18 */
    cs_uint32 err_cntr_mem_en      :  1 ; /* bits 19:19 */
    cs_uint32 err_glb_cntr_mem_en  :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_INTENABLE_1_t;





#define TM_PM_CNTR_MEM_ACCESS                    0xf0040480
#define TM_PM_CNTR_MEM_ACCESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_ACCESS_t;





#define TM_PM_CNTR_MEM_DATA6                     0xf0040484
#define TM_PM_CNTR_MEM_DATA6_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 data                 : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA6_t;





#define TM_PM_CNTR_MEM_DATA5                     0xf0040488
#define TM_PM_CNTR_MEM_DATA5_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA5_t;





#define TM_PM_CNTR_MEM_DATA4                     0xf004048c
#define TM_PM_CNTR_MEM_DATA4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA4_t;





#define TM_PM_CNTR_MEM_DATA3                     0xf0040490
#define TM_PM_CNTR_MEM_DATA3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA3_t;





#define TM_PM_CNTR_MEM_DATA2                     0xf0040494
#define TM_PM_CNTR_MEM_DATA2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA2_t;





#define TM_PM_CNTR_MEM_DATA1                     0xf0040498
#define TM_PM_CNTR_MEM_DATA1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA1_t;





#define TM_PM_CNTR_MEM_DATA0                     0xf004049c
#define TM_PM_CNTR_MEM_DATA0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_CNTR_MEM_DATA0_t;





#define TM_PM_GLB_CNTR_MEM_ACCESS                0xf00404a0
#define TM_PM_GLB_CNTR_MEM_ACCESS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 addr                 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_GLB_CNTR_MEM_ACCESS_t;





#define TM_PM_GLB_CNTR_MEM_DATA2                 0xf00404a4
#define TM_PM_GLB_CNTR_MEM_DATA2_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 data                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_GLB_CNTR_MEM_DATA2_t;





#define TM_PM_GLB_CNTR_MEM_DATA1                 0xf00404a8
#define TM_PM_GLB_CNTR_MEM_DATA1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_GLB_CNTR_MEM_DATA1_t;





#define TM_PM_GLB_CNTR_MEM_DATA0                 0xf00404ac
#define TM_PM_GLB_CNTR_MEM_DATA0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TM_PM_GLB_CNTR_MEM_DATA0_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* PM */

typedef struct {
  TM_PM_CONFIG_0_t                         CONFIG_0;                      /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TM_PM_CONFIG_SPARE_t                     CONFIG_SPARE;                  /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TM_PM_STATUS_0_t                         STATUS_0;                      /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TM_PM_CNTR_MEM_STATUS_t                  CNTR_MEM_STATUS;               /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TM_PM_GLB_CNTR_MEM_STATUS_t              GLB_CNTR_MEM_STATUS;           /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TM_PM_INTERRUPT_0_t                      INTERRUPT_0;                   /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TM_PM_INTENABLE_0_t                      INTENABLE_0;                   /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TM_PM_INTERRUPT_1_t                      INTERRUPT_1;                   /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TM_PM_INTENABLE_1_t                      INTENABLE_1;                   /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[95];                   
  TM_PM_CNTR_MEM_ACCESS_t                  CNTR_MEM_ACCESS;               /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd10[3];                   
  TM_PM_CNTR_MEM_DATA6_t                   CNTR_MEM_DATA6;                /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd11[3];                   
  TM_PM_CNTR_MEM_DATA5_t                   CNTR_MEM_DATA5;                /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd12[3];                   
  TM_PM_CNTR_MEM_DATA4_t                   CNTR_MEM_DATA4;                /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd13[3];                   
  TM_PM_CNTR_MEM_DATA3_t                   CNTR_MEM_DATA3;                /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd14[3];                   
  TM_PM_CNTR_MEM_DATA2_t                   CNTR_MEM_DATA2;                /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd15[3];                   
  TM_PM_CNTR_MEM_DATA1_t                   CNTR_MEM_DATA1;                /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd16[3];                   
  TM_PM_CNTR_MEM_DATA0_t                   CNTR_MEM_DATA0;                /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd17[3];                   
  TM_PM_GLB_CNTR_MEM_ACCESS_t              GLB_CNTR_MEM_ACCESS;           /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd18[3];                   
  TM_PM_GLB_CNTR_MEM_DATA2_t               GLB_CNTR_MEM_DATA2;            /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd19[3];                   
  TM_PM_GLB_CNTR_MEM_DATA1_t               GLB_CNTR_MEM_DATA1;            /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd20[3];                   
  TM_PM_GLB_CNTR_MEM_DATA0_t               GLB_CNTR_MEM_DATA0;            /* addr: 0x000000ac */ 
} TM_PM_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* TM */

typedef struct {
  TM_BM_t                                  BM;                            /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[149];                  
  TM_POL_t                                 POL;                           /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd2[131];                  
  TM_TC_t                                  TC;                            /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd3[503];                  
  TM_PM_t                                  PM;                            /* addr: 0x00000400 */ 
} TM_t;


/*
 * FLASH_axi
 */
  



#define FLASH_ID                                 0xf0050000
#define FLASH_ID_dft                             0x00000101




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 flashDevID           : 24 ; /* bits 31:8 */
    cs_uint32 flashRevID           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flashRevID           :  8 ; /* bits 7:0 */
    cs_uint32 flashDevID           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_ID_t;





#define FLASH_TIMEOUT                            0xf0050004
#define FLASH_TIMEOUT_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 timeout_load         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 timeout_load         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_TIMEOUT_t;





#define FLASH_STATUS                             0xf0050008
#define FLASH_STATUS_dft                         0x06000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 nflash_rbIn_d        :  1 ; /* bits 26:26 */
    cs_uint32 pflash_rbIn_d        :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 nState               :  4 ; /* bits 11:8 */
    cs_uint32 pState               :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sState               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sState               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 pState               :  4 ; /* bits 7:4 */
    cs_uint32 nState               :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               : 13 ;
    cs_uint32 pflash_rbIn_d        :  1 ; /* bits 25:25 */
    cs_uint32 nflash_rbIn_d        :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd3               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_STATUS_t;





#define FLASH_TYPE                               0xf005000c
#define FLASH_TYPE_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 flashPin             :  1 ; /* bits 15:15 */
    cs_uint32 flashType            :  3 ; /* bits 14:12 */
    cs_uint32 flashWidth           :  1 ; /* bits 11:11 */
    cs_uint32 flashSize            :  2 ; /* bits 10:9 */
    cs_uint32 rsrvd1               :  9 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 flashSize            :  2 ; /* bits 10:9 */
    cs_uint32 flashWidth           :  1 ; /* bits 11:11 */
    cs_uint32 flashType            :  3 ; /* bits 14:12 */
    cs_uint32 flashPin             :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_TYPE_t;





#define FLASH_SF_ACCESS                          0xf0050010
#define FLASH_SF_ACCESS_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 sflashHSRd           :  1 ; /* bits 17:17 */
    cs_uint32 sflashCeAlt          :  1 ; /* bits 16:16 */
    cs_uint32 sflashCnMode         :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sflashForceBurst     :  1 ; /* bits 13:13 */
    cs_uint32 sflashForceTerm      :  1 ; /* bits 12:12 */
    cs_uint32 sflashAcCode         :  4 ; /* bits 11:8 */
    cs_uint32 sflashOpCode         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sflashOpCode         :  8 ; /* bits 7:0 */
    cs_uint32 sflashAcCode         :  4 ; /* bits 11:8 */
    cs_uint32 sflashForceTerm      :  1 ; /* bits 12:12 */
    cs_uint32 sflashForceBurst     :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sflashCnMode         :  1 ; /* bits 15:15 */
    cs_uint32 sflashCeAlt          :  1 ; /* bits 16:16 */
    cs_uint32 sflashHSRd           :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_SF_ACCESS_t;





#define FLASH_SF_ADDRESS                         0xf0050014
#define FLASH_SF_ADDRESS_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sflashRegAddr        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sflashRegAddr        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_SF_ADDRESS_t;





#define FLASH_SF_DATA                            0xf0050018
#define FLASH_SF_DATA_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sflashRegWData       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sflashRegWData       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_SF_DATA_t;





#define FLASH_SF_TIMING                          0xf005001c
#define FLASH_SF_TIMING_dft                      0x00373737




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sflashClkWidth       :  2 ; /* bits 25:24 */
    cs_uint32 sflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 sflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 sflashIdleTime       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sflashIdleTime       :  8 ; /* bits 7:0 */
    cs_uint32 sflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 sflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 sflashClkWidth       :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_SF_TIMING_t;





#define FLASH_PF_ACCESS                          0xf0050020
#define FLASH_PF_ACCESS_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 pflashWrPol          :  1 ; /* bits 23:23 */
    cs_uint32 pflashRdPol          :  1 ; /* bits 22:22 */
    cs_uint32 pflashBzPol          :  1 ; /* bits 21:21 */
    cs_uint32 pflashBzChk          :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 pflashCeAlt          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 pflashExtAddr        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pflashExtAddr        :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 pflashCeAlt          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 pflashBzChk          :  1 ; /* bits 20:20 */
    cs_uint32 pflashBzPol          :  1 ; /* bits 21:21 */
    cs_uint32 pflashRdPol          :  1 ; /* bits 22:22 */
    cs_uint32 pflashWrPol          :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_PF_ACCESS_t;





#define FLASH_PF_TIMING                          0xf0050024
#define FLASH_PF_TIMING_dft                      0x000f0f07




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 pflashClkWidth       :  2 ; /* bits 25:24 */
    cs_uint32 pflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 pflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 pflashIdleTime       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pflashIdleTime       :  8 ; /* bits 7:0 */
    cs_uint32 pflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 pflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 pflashClkWidth       :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_PF_TIMING_t;





#define FLASH_NF_ACCESS                          0xf0050028
#define FLASH_NF_ACCESS_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  4 ;
    cs_uint32 FIFO_WRTH            :  2 ; /* bits 27:26 */
    cs_uint32 FIFO_RDTH            :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 autoReset            :  1 ; /* bits 16:16 */
    cs_uint32 nflashCeAlt          :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nflashRegWidth       :  2 ; /* bits 11:10 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 nflashExtAddr        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashExtAddr        :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 nflashRegWidth       :  2 ; /* bits 11:10 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nflashCeAlt          :  1 ; /* bits 15:15 */
    cs_uint32 autoReset            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 FIFO_RDTH            :  2 ; /* bits 25:24 */
    cs_uint32 FIFO_WRTH            :  2 ; /* bits 27:26 */
    cs_uint32 rsrvd4               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ACCESS_t;





#define FLASH_NF_COUNT                           0xf005002c
#define FLASH_NF_COUNT_dft                       0xffffff00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 nflashRegOobCount    : 10 ; /* bits 31:22 */
    cs_uint32 nflashRegDataCount   : 14 ; /* bits 21:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 nflashRegAddrCount   :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 nflashRegCmdCount    :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegCmdCount    :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 nflashRegAddrCount   :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 nflashRegDataCount   : 14 ; /* bits 21:8 */
    cs_uint32 nflashRegOobCount    : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_COUNT_t;





#define FLASH_NF_COMMAND                         0xf0050030
#define FLASH_NF_COMMAND_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 nflashRegCmd2        :  8 ; /* bits 23:16 */
    cs_uint32 nflashRegCmd1        :  8 ; /* bits 15:8 */
    cs_uint32 nflashRegCmd0        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegCmd0        :  8 ; /* bits 7:0 */
    cs_uint32 nflashRegCmd1        :  8 ; /* bits 15:8 */
    cs_uint32 nflashRegCmd2        :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_COMMAND_t;





#define FLASH_NF_ADDRESS_1                       0xf0050034
#define FLASH_NF_ADDRESS_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 nflashRegAddr3       :  8 ; /* bits 31:24 */
    cs_uint32 nflashRegAddr2       :  8 ; /* bits 23:16 */
    cs_uint32 nflashRegAddr1       :  8 ; /* bits 15:8 */
    cs_uint32 nflashRegAddr0       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegAddr0       :  8 ; /* bits 7:0 */
    cs_uint32 nflashRegAddr1       :  8 ; /* bits 15:8 */
    cs_uint32 nflashRegAddr2       :  8 ; /* bits 23:16 */
    cs_uint32 nflashRegAddr3       :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ADDRESS_1_t;





#define FLASH_NF_ADDRESS_2                       0xf0050038
#define FLASH_NF_ADDRESS_2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 nflashRegAddr4       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegAddr4       :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ADDRESS_2_t;





#define FLASH_NF_DATA                            0xf005003c
#define FLASH_NF_DATA_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 nflashRegWData       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegWData       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_DATA_t;





#define FLASH_NF_TIMING                          0xf0050040
#define FLASH_NF_TIMING_dft                      0x00041703




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 nflashClkWidth       :  3 ; /* bits 26:24 */
    cs_uint32 nflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 nflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 nflashIdleTime       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashIdleTime       :  8 ; /* bits 7:0 */
    cs_uint32 nflashHoldTime       :  8 ; /* bits 15:8 */
    cs_uint32 nflashSetupTime      :  8 ; /* bits 23:16 */
    cs_uint32 nflashClkWidth       :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_TIMING_t;





#define FLASH_NF_ECC_STATUS                      0xf0050044
#define FLASH_NF_ECC_STATUS_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccDone              :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 eccErrWord           :  8 ; /* bits 23:16 */
    cs_uint32 eccErrByte           :  9 ; /* bits 15:7 */
    cs_uint32 eccErrBit            :  4 ; /* bits 6:3 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 eccStatus            :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccStatus            :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 eccErrBit            :  4 ; /* bits 6:3 */
    cs_uint32 eccErrByte           :  9 ; /* bits 15:7 */
    cs_uint32 eccErrWord           :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 eccDone              :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_STATUS_t;





#define FLASH_NF_ECC_CONTROL                     0xf0050048
#define FLASH_NF_ECC_CONTROL_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 23 ;
    cs_uint32 eccEn                :  1 ; /* bits 8:8 */
    cs_uint32 eccCodeSel           :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 eccGenMode           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 eccGenMode           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 eccCodeSel           :  4 ; /* bits 7:4 */
    cs_uint32 eccEn                :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_CONTROL_t;





#define FLASH_NF_ECC_OOB                         0xf005004c
#define FLASH_NF_ECC_OOB_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeOob           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeOob           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_OOB_t;





#define FLASH_NF_ECC_GEN0                        0xf0050050
#define FLASH_NF_ECC_GEN0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen0          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen0          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN0_t;





#define FLASH_NF_ECC_GEN1                        0xf0050054
#define FLASH_NF_ECC_GEN1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen1          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen1          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN1_t;





#define FLASH_NF_ECC_GEN2                        0xf0050058
#define FLASH_NF_ECC_GEN2_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen2          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen2          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN2_t;





#define FLASH_NF_ECC_GEN3                        0xf005005c
#define FLASH_NF_ECC_GEN3_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen3          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen3          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN3_t;





#define FLASH_NF_ECC_GEN4                        0xf0050060
#define FLASH_NF_ECC_GEN4_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen4          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen4          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN4_t;





#define FLASH_NF_ECC_GEN5                        0xf0050064
#define FLASH_NF_ECC_GEN5_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen5          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen5          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN5_t;





#define FLASH_NF_ECC_GEN6                        0xf0050068
#define FLASH_NF_ECC_GEN6_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen6          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen6          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN6_t;





#define FLASH_NF_ECC_GEN7                        0xf005006c
#define FLASH_NF_ECC_GEN7_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen7          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen7          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN7_t;





#define FLASH_NF_ECC_GEN8                        0xf0050070
#define FLASH_NF_ECC_GEN8_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen8          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen8          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN8_t;





#define FLASH_NF_ECC_GEN9                        0xf0050074
#define FLASH_NF_ECC_GEN9_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen9          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen9          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN9_t;





#define FLASH_NF_ECC_GEN10                       0xf0050078
#define FLASH_NF_ECC_GEN10_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen10         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen10         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN10_t;





#define FLASH_NF_ECC_GEN11                       0xf005007c
#define FLASH_NF_ECC_GEN11_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen11         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen11         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN11_t;





#define FLASH_NF_ECC_GEN12                       0xf0050080
#define FLASH_NF_ECC_GEN12_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen12         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen12         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN12_t;





#define FLASH_NF_ECC_GEN13                       0xf0050084
#define FLASH_NF_ECC_GEN13_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen13         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen13         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN13_t;





#define FLASH_NF_ECC_GEN14                       0xf0050088
#define FLASH_NF_ECC_GEN14_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen14         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen14         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN14_t;





#define FLASH_NF_ECC_GEN15                       0xf005008c
#define FLASH_NF_ECC_GEN15_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 eccCodeGen15         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccCodeGen15         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_GEN15_t;





#define FLASH_NF_FIFO_CONTROL                    0xf0050090
#define FLASH_NF_FIFO_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 fifoDbgSel           :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 fifoCmd              :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 fifoCmd              :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 fifoDbgSel           :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_FIFO_CONTROL_t;





#define FLASH_NF_FIFO_STATUS                     0xf0050094
#define FLASH_NF_FIFO_STATUS_dft                 0x00000004




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 f_addr_count         :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 f_ptr_wr             :  5 ; /* bits 13:9 */
    cs_uint32 f_ptr_rd             :  5 ; /* bits 8:4 */
    cs_uint32 f_full               :  1 ; /* bits 3:3 */
    cs_uint32 f_empty              :  1 ; /* bits 2:2 */
    cs_uint32 f_state              :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 f_state              :  2 ; /* bits 1:0 */
    cs_uint32 f_empty              :  1 ; /* bits 2:2 */
    cs_uint32 f_full               :  1 ; /* bits 3:3 */
    cs_uint32 f_ptr_rd             :  5 ; /* bits 8:4 */
    cs_uint32 f_ptr_wr             :  5 ; /* bits 13:9 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 f_addr_count         :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_FIFO_STATUS_t;





#define FLASH_NF_FIFO_ADDRESS                    0xf0050098
#define FLASH_NF_FIFO_ADDRESS_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 f_AXADDR             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 f_AXADDR             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_FIFO_ADDRESS_t;





#define FLASH_NF_FIFO_MATCH_ADDRESS              0xf005009c
#define FLASH_NF_FIFO_MATCH_ADDRESS_dft          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 f_AXADDR_compare     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 f_AXADDR_compare     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_FIFO_MATCH_ADDRESS_t;





#define FLASH_NF_FIFO_DATA                       0xf00500a0
#define FLASH_NF_FIFO_DATA_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 f_ebuf_mem1          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 f_ebuf_mem1          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_FIFO_DATA_t;





#define FLASH_FLASH_ACCESS_START                 0xf00500a4
#define FLASH_FLASH_ACCESS_START_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 18 ;
    cs_uint32 nflashRegCmd         :  2 ; /* bits 13:12 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 fifoReq              :  1 ; /* bits 2:2 */
    cs_uint32 sflashRegReq         :  1 ; /* bits 1:1 */
    cs_uint32 nflashRegReq         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nflashRegReq         :  1 ; /* bits 0:0 */
    cs_uint32 sflashRegReq         :  1 ; /* bits 1:1 */
    cs_uint32 fifoReq              :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  9 ;
    cs_uint32 nflashRegCmd         :  2 ; /* bits 13:12 */
    cs_uint32 rsrvd2               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_FLASH_ACCESS_START_t;





#define FLASH_NF_ECC_RESET                       0xf00500a8
#define FLASH_NF_ECC_RESET_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 nflash_reset         :  1 ; /* bits 2:2 */
    cs_uint32 fifoClear            :  1 ; /* bits 1:1 */
    cs_uint32 eccClear             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 eccClear             :  1 ; /* bits 0:0 */
    cs_uint32 fifoClear            :  1 ; /* bits 1:1 */
    cs_uint32 nflash_reset         :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_ECC_RESET_t;





#define FLASH_FLASH_INTERRUPT                    0xf00500ac
#define FLASH_FLASH_INTERRUPT_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 bchDecIrq            :  1 ; /* bits 7:7 */
    cs_uint32 bchGenIrq            :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nfWdtIrq             :  1 ; /* bits 4:4 */
    cs_uint32 eccIrq               :  1 ; /* bits 3:3 */
    cs_uint32 f_addr_err           :  1 ; /* bits 2:2 */
    cs_uint32 fifoIrq              :  1 ; /* bits 1:1 */
    cs_uint32 regIrq               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 regIrq               :  1 ; /* bits 0:0 */
    cs_uint32 fifoIrq              :  1 ; /* bits 1:1 */
    cs_uint32 f_addr_err           :  1 ; /* bits 2:2 */
    cs_uint32 eccIrq               :  1 ; /* bits 3:3 */
    cs_uint32 nfWdtIrq             :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 bchGenIrq            :  1 ; /* bits 6:6 */
    cs_uint32 bchDecIrq            :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_FLASH_INTERRUPT_t;





#define FLASH_FLASH_MASK                         0xf00500b0
#define FLASH_FLASH_MASK_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 bchDecIrqMask        :  1 ; /* bits 7:7 */
    cs_uint32 bchGenIrqMask        :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 nfWdtIrqMask         :  1 ; /* bits 4:4 */
    cs_uint32 eccIrqMask           :  1 ; /* bits 3:3 */
    cs_uint32 f_addr_IrqMask       :  1 ; /* bits 2:2 */
    cs_uint32 fifoIrqMask          :  1 ; /* bits 1:1 */
    cs_uint32 flashRegIrqMask      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flashRegIrqMask      :  1 ; /* bits 0:0 */
    cs_uint32 fifoIrqMask          :  1 ; /* bits 1:1 */
    cs_uint32 f_addr_IrqMask       :  1 ; /* bits 2:2 */
    cs_uint32 eccIrqMask           :  1 ; /* bits 3:3 */
    cs_uint32 nfWdtIrqMask         :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 bchGenIrqMask        :  1 ; /* bits 6:6 */
    cs_uint32 bchDecIrqMask        :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_FLASH_MASK_t;





#define FLASH_NF_BCH_STATUS                      0xf00500b4
#define FLASH_NF_BCH_STATUS_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchGenDone           :  1 ; /* bits 31:31 */
    cs_uint32 bchDecDone           :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               : 22 ;
    cs_uint32 bchErrNum            :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 bchDecStatus         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchDecStatus         :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 bchErrNum            :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd2               : 22 ;
    cs_uint32 bchDecDone           :  1 ; /* bits 30:30 */
    cs_uint32 bchGenDone           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_STATUS_t;





#define FLASH_NF_BCH_ERROR_LOC01                 0xf00500b8
#define FLASH_NF_BCH_ERROR_LOC01_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc1           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc0           : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc0           : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc1           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC01_t;





#define FLASH_NF_BCH_ERROR_LOC23                 0xf00500bc
#define FLASH_NF_BCH_ERROR_LOC23_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc3           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc2           : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc2           : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc3           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC23_t;





#define FLASH_NF_BCH_ERROR_LOC45                 0xf00500c0
#define FLASH_NF_BCH_ERROR_LOC45_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc5           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc4           : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc4           : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc5           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC45_t;





#define FLASH_NF_BCH_ERROR_LOC67                 0xf00500c4
#define FLASH_NF_BCH_ERROR_LOC67_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc7           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc6           : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc6           : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc7           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC67_t;





#define FLASH_NF_BCH_ERROR_LOC89                 0xf00500c8
#define FLASH_NF_BCH_ERROR_LOC89_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc9           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc8           : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc8           : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc9           : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC89_t;





#define FLASH_NF_BCH_ERROR_LOC1011               0xf00500cc
#define FLASH_NF_BCH_ERROR_LOC1011_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 bchErrLoc11          : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc10          : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchErrLoc10          : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 bchErrLoc11          : 13 ; /* bits 28:16 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_ERROR_LOC1011_t;





#define FLASH_NF_BCH_CONTROL                     0xf00500d0
#define FLASH_NF_BCH_CONTROL_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 12 ;
    cs_uint32 bchTestCtrl          :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 bchErrCap            :  1 ; /* bits 9:9 */
    cs_uint32 bchEn                :  1 ; /* bits 8:8 */
    cs_uint32 bchCodeSel           :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 bchOpcode            :  1 ; /* bits 1:1 */
    cs_uint32 bchCompare           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCompare           :  1 ; /* bits 0:0 */
    cs_uint32 bchOpcode            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 bchCodeSel           :  4 ; /* bits 7:4 */
    cs_uint32 bchEn                :  1 ; /* bits 8:8 */
    cs_uint32 bchErrCap            :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 bchTestCtrl          :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd3               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_CONTROL_t;





#define FLASH_NF_BCH_OOB0                        0xf00500d4
#define FLASH_NF_BCH_OOB0_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeOob0          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeOob0          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_OOB0_t;





#define FLASH_NF_BCH_OOB1                        0xf00500d8
#define FLASH_NF_BCH_OOB1_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeOob1          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeOob1          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_OOB1_t;





#define FLASH_NF_BCH_OOB2                        0xf00500dc
#define FLASH_NF_BCH_OOB2_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeOob2          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeOob2          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_OOB2_t;





#define FLASH_NF_BCH_OOB3                        0xf00500e0
#define FLASH_NF_BCH_OOB3_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeOob3          : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeOob3          : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_OOB3_t;





#define FLASH_NF_BCH_OOB4                        0xf00500e4
#define FLASH_NF_BCH_OOB4_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeOob4          : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeOob4          : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_OOB4_t;





#define FLASH_NF_BCH_GEN0_0                      0xf00500e8
#define FLASH_NF_BCH_GEN0_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen0_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen0_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN0_0_t;





#define FLASH_NF_BCH_GEN0_1                      0xf00500ec
#define FLASH_NF_BCH_GEN0_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen0_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen0_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN0_1_t;





#define FLASH_NF_BCH_GEN0_2                      0xf00500f0
#define FLASH_NF_BCH_GEN0_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen0_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen0_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN0_2_t;





#define FLASH_NF_BCH_GEN0_3                      0xf00500f4
#define FLASH_NF_BCH_GEN0_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen0_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen0_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN0_3_t;





#define FLASH_NF_BCH_GEN0_4                      0xf00500f8
#define FLASH_NF_BCH_GEN0_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen0_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen0_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN0_4_t;





#define FLASH_NF_BCH_GEN1_0                      0xf00500fc
#define FLASH_NF_BCH_GEN1_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen1_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen1_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN1_0_t;





#define FLASH_NF_BCH_GEN1_1                      0xf0050100
#define FLASH_NF_BCH_GEN1_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen1_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen1_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN1_1_t;





#define FLASH_NF_BCH_GEN1_2                      0xf0050104
#define FLASH_NF_BCH_GEN1_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen1_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen1_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN1_2_t;





#define FLASH_NF_BCH_GEN1_3                      0xf0050108
#define FLASH_NF_BCH_GEN1_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen1_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen1_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN1_3_t;





#define FLASH_NF_BCH_GEN1_4                      0xf005010c
#define FLASH_NF_BCH_GEN1_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen1_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen1_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN1_4_t;





#define FLASH_NF_BCH_GEN2_0                      0xf0050110
#define FLASH_NF_BCH_GEN2_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen2_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen2_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN2_0_t;





#define FLASH_NF_BCH_GEN2_1                      0xf0050114
#define FLASH_NF_BCH_GEN2_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen2_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen2_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN2_1_t;





#define FLASH_NF_BCH_GEN2_2                      0xf0050118
#define FLASH_NF_BCH_GEN2_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen2_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen2_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN2_2_t;





#define FLASH_NF_BCH_GEN2_3                      0xf005011c
#define FLASH_NF_BCH_GEN2_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen2_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen2_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN2_3_t;





#define FLASH_NF_BCH_GEN2_4                      0xf0050120
#define FLASH_NF_BCH_GEN2_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen2_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen2_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN2_4_t;





#define FLASH_NF_BCH_GEN3_0                      0xf0050124
#define FLASH_NF_BCH_GEN3_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen3_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen3_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN3_0_t;





#define FLASH_NF_BCH_GEN3_1                      0xf0050128
#define FLASH_NF_BCH_GEN3_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen3_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen3_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN3_1_t;





#define FLASH_NF_BCH_GEN3_2                      0xf005012c
#define FLASH_NF_BCH_GEN3_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen3_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen3_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN3_2_t;





#define FLASH_NF_BCH_GEN3_3                      0xf0050130
#define FLASH_NF_BCH_GEN3_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen3_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen3_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN3_3_t;





#define FLASH_NF_BCH_GEN3_4                      0xf0050134
#define FLASH_NF_BCH_GEN3_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen3_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen3_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN3_4_t;





#define FLASH_NF_BCH_GEN4_0                      0xf0050138
#define FLASH_NF_BCH_GEN4_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen4_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen4_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN4_0_t;





#define FLASH_NF_BCH_GEN4_1                      0xf005013c
#define FLASH_NF_BCH_GEN4_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen4_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen4_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN4_1_t;





#define FLASH_NF_BCH_GEN4_2                      0xf0050140
#define FLASH_NF_BCH_GEN4_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen4_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen4_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN4_2_t;





#define FLASH_NF_BCH_GEN4_3                      0xf0050144
#define FLASH_NF_BCH_GEN4_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen4_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen4_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN4_3_t;





#define FLASH_NF_BCH_GEN4_4                      0xf0050148
#define FLASH_NF_BCH_GEN4_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen4_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen4_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN4_4_t;





#define FLASH_NF_BCH_GEN5_0                      0xf005014c
#define FLASH_NF_BCH_GEN5_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen5_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen5_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN5_0_t;





#define FLASH_NF_BCH_GEN5_1                      0xf0050150
#define FLASH_NF_BCH_GEN5_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen5_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen5_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN5_1_t;





#define FLASH_NF_BCH_GEN5_2                      0xf0050154
#define FLASH_NF_BCH_GEN5_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen5_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen5_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN5_2_t;





#define FLASH_NF_BCH_GEN5_3                      0xf0050158
#define FLASH_NF_BCH_GEN5_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen5_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen5_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN5_3_t;





#define FLASH_NF_BCH_GEN5_4                      0xf005015c
#define FLASH_NF_BCH_GEN5_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen5_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen5_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN5_4_t;





#define FLASH_NF_BCH_GEN6_0                      0xf0050160
#define FLASH_NF_BCH_GEN6_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen6_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen6_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN6_0_t;





#define FLASH_NF_BCH_GEN6_1                      0xf0050164
#define FLASH_NF_BCH_GEN6_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen6_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen6_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN6_1_t;





#define FLASH_NF_BCH_GEN6_2                      0xf0050168
#define FLASH_NF_BCH_GEN6_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen6_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen6_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN6_2_t;





#define FLASH_NF_BCH_GEN6_3                      0xf005016c
#define FLASH_NF_BCH_GEN6_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen6_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen6_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN6_3_t;





#define FLASH_NF_BCH_GEN6_4                      0xf0050170
#define FLASH_NF_BCH_GEN6_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen6_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen6_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN6_4_t;





#define FLASH_NF_BCH_GEN7_0                      0xf0050174
#define FLASH_NF_BCH_GEN7_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen7_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen7_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN7_0_t;





#define FLASH_NF_BCH_GEN7_1                      0xf0050178
#define FLASH_NF_BCH_GEN7_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen7_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen7_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN7_1_t;





#define FLASH_NF_BCH_GEN7_2                      0xf005017c
#define FLASH_NF_BCH_GEN7_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen7_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen7_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN7_2_t;





#define FLASH_NF_BCH_GEN7_3                      0xf0050180
#define FLASH_NF_BCH_GEN7_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen7_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen7_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN7_3_t;





#define FLASH_NF_BCH_GEN7_4                      0xf0050184
#define FLASH_NF_BCH_GEN7_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen7_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen7_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN7_4_t;





#define FLASH_NF_BCH_GEN8_0                      0xf0050188
#define FLASH_NF_BCH_GEN8_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen8_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen8_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN8_0_t;





#define FLASH_NF_BCH_GEN8_1                      0xf005018c
#define FLASH_NF_BCH_GEN8_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen8_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen8_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN8_1_t;





#define FLASH_NF_BCH_GEN8_2                      0xf0050190
#define FLASH_NF_BCH_GEN8_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen8_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen8_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN8_2_t;





#define FLASH_NF_BCH_GEN8_3                      0xf0050194
#define FLASH_NF_BCH_GEN8_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen8_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen8_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN8_3_t;





#define FLASH_NF_BCH_GEN8_4                      0xf0050198
#define FLASH_NF_BCH_GEN8_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen8_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen8_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN8_4_t;





#define FLASH_NF_BCH_GEN9_0                      0xf005019c
#define FLASH_NF_BCH_GEN9_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen9_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen9_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN9_0_t;





#define FLASH_NF_BCH_GEN9_1                      0xf00501a0
#define FLASH_NF_BCH_GEN9_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen9_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen9_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN9_1_t;





#define FLASH_NF_BCH_GEN9_2                      0xf00501a4
#define FLASH_NF_BCH_GEN9_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen9_2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen9_2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN9_2_t;





#define FLASH_NF_BCH_GEN9_3                      0xf00501a8
#define FLASH_NF_BCH_GEN9_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen9_3        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen9_3        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN9_3_t;





#define FLASH_NF_BCH_GEN9_4                      0xf00501ac
#define FLASH_NF_BCH_GEN9_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen9_4        : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen9_4        : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN9_4_t;





#define FLASH_NF_BCH_GEN10_0                     0xf00501b0
#define FLASH_NF_BCH_GEN10_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen10_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen10_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN10_0_t;





#define FLASH_NF_BCH_GEN10_1                     0xf00501b4
#define FLASH_NF_BCH_GEN10_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen10_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen10_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN10_1_t;





#define FLASH_NF_BCH_GEN10_2                     0xf00501b8
#define FLASH_NF_BCH_GEN10_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen10_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen10_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN10_2_t;





#define FLASH_NF_BCH_GEN10_3                     0xf00501bc
#define FLASH_NF_BCH_GEN10_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen10_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen10_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN10_3_t;





#define FLASH_NF_BCH_GEN10_4                     0xf00501c0
#define FLASH_NF_BCH_GEN10_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen10_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen10_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN10_4_t;





#define FLASH_NF_BCH_GEN11_0                     0xf00501c4
#define FLASH_NF_BCH_GEN11_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen11_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen11_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN11_0_t;





#define FLASH_NF_BCH_GEN11_1                     0xf00501c8
#define FLASH_NF_BCH_GEN11_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen11_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen11_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN11_1_t;





#define FLASH_NF_BCH_GEN11_2                     0xf00501cc
#define FLASH_NF_BCH_GEN11_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen11_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen11_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN11_2_t;





#define FLASH_NF_BCH_GEN11_3                     0xf00501d0
#define FLASH_NF_BCH_GEN11_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen11_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen11_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN11_3_t;





#define FLASH_NF_BCH_GEN11_4                     0xf00501d4
#define FLASH_NF_BCH_GEN11_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen11_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen11_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN11_4_t;





#define FLASH_NF_BCH_GEN12_0                     0xf00501d8
#define FLASH_NF_BCH_GEN12_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen12_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen12_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN12_0_t;





#define FLASH_NF_BCH_GEN12_1                     0xf00501dc
#define FLASH_NF_BCH_GEN12_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen12_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen12_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN12_1_t;





#define FLASH_NF_BCH_GEN12_2                     0xf00501e0
#define FLASH_NF_BCH_GEN12_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen12_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen12_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN12_2_t;





#define FLASH_NF_BCH_GEN12_3                     0xf00501e4
#define FLASH_NF_BCH_GEN12_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen12_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen12_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN12_3_t;





#define FLASH_NF_BCH_GEN12_4                     0xf00501e8
#define FLASH_NF_BCH_GEN12_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen12_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen12_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN12_4_t;





#define FLASH_NF_BCH_GEN13_0                     0xf00501ec
#define FLASH_NF_BCH_GEN13_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen13_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen13_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN13_0_t;





#define FLASH_NF_BCH_GEN13_1                     0xf00501f0
#define FLASH_NF_BCH_GEN13_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen13_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen13_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN13_1_t;





#define FLASH_NF_BCH_GEN13_2                     0xf00501f4
#define FLASH_NF_BCH_GEN13_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen13_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen13_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN13_2_t;





#define FLASH_NF_BCH_GEN13_3                     0xf00501f8
#define FLASH_NF_BCH_GEN13_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen13_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen13_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN13_3_t;





#define FLASH_NF_BCH_GEN13_4                     0xf00501fc
#define FLASH_NF_BCH_GEN13_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen13_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen13_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN13_4_t;





#define FLASH_NF_BCH_GEN14_0                     0xf0050200
#define FLASH_NF_BCH_GEN14_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen14_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen14_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN14_0_t;





#define FLASH_NF_BCH_GEN14_1                     0xf0050204
#define FLASH_NF_BCH_GEN14_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen14_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen14_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN14_1_t;





#define FLASH_NF_BCH_GEN14_2                     0xf0050208
#define FLASH_NF_BCH_GEN14_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen14_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen14_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN14_2_t;





#define FLASH_NF_BCH_GEN14_3                     0xf005020c
#define FLASH_NF_BCH_GEN14_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen14_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen14_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN14_3_t;





#define FLASH_NF_BCH_GEN14_4                     0xf0050210
#define FLASH_NF_BCH_GEN14_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen14_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen14_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN14_4_t;





#define FLASH_NF_BCH_GEN15_0                     0xf0050214
#define FLASH_NF_BCH_GEN15_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen15_0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen15_0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN15_0_t;





#define FLASH_NF_BCH_GEN15_1                     0xf0050218
#define FLASH_NF_BCH_GEN15_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen15_1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen15_1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN15_1_t;





#define FLASH_NF_BCH_GEN15_2                     0xf005021c
#define FLASH_NF_BCH_GEN15_2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen15_2       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen15_2       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN15_2_t;





#define FLASH_NF_BCH_GEN15_3                     0xf0050220
#define FLASH_NF_BCH_GEN15_3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bchCodeGen15_3       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen15_3       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN15_3_t;





#define FLASH_NF_BCH_GEN15_4                     0xf0050224
#define FLASH_NF_BCH_GEN15_4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 bchCodeGen15_4       : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bchCodeGen15_4       : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_NF_BCH_GEN15_4_t;





#define FLASH_FLASH_SPARE_0                      0xf0050228
#define FLASH_FLASH_SPARE_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 flash_spare0         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flash_spare0         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_FLASH_SPARE_0_t;





#define FLASH_FLASH_SPARE_1                      0xf005022c
#define FLASH_FLASH_SPARE_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 flash_spare1         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 flash_spare1         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} FLASH_FLASH_SPARE_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* FLASH_axi */

typedef struct {
  FLASH_ID_t                               ID;                            /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  FLASH_TIMEOUT_t                          TIMEOUT;                       /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  FLASH_STATUS_t                           STATUS;                        /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  FLASH_TYPE_t                             TYPE;                          /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  FLASH_SF_ACCESS_t                        SF_ACCESS;                     /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  FLASH_SF_ADDRESS_t                       SF_ADDRESS;                    /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  FLASH_SF_DATA_t                          SF_DATA;                       /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  FLASH_SF_TIMING_t                        SF_TIMING;                     /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  FLASH_PF_ACCESS_t                        PF_ACCESS;                     /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  FLASH_PF_TIMING_t                        PF_TIMING;                     /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  FLASH_NF_ACCESS_t                        NF_ACCESS;                     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  FLASH_NF_COUNT_t                         NF_COUNT;                      /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  FLASH_NF_COMMAND_t                       NF_COMMAND;                    /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  FLASH_NF_ADDRESS_1_t                     NF_ADDRESS_1;                  /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  FLASH_NF_ADDRESS_2_t                     NF_ADDRESS_2;                  /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  FLASH_NF_DATA_t                          NF_DATA;                       /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  FLASH_NF_TIMING_t                        NF_TIMING;                     /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  FLASH_NF_ECC_STATUS_t                    NF_ECC_STATUS;                 /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  FLASH_NF_ECC_CONTROL_t                   NF_ECC_CONTROL;                /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  FLASH_NF_ECC_OOB_t                       NF_ECC_OOB;                    /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  FLASH_NF_ECC_GEN0_t                      NF_ECC_GEN0;                   /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  FLASH_NF_ECC_GEN1_t                      NF_ECC_GEN1;                   /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  FLASH_NF_ECC_GEN2_t                      NF_ECC_GEN2;                   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  FLASH_NF_ECC_GEN3_t                      NF_ECC_GEN3;                   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  FLASH_NF_ECC_GEN4_t                      NF_ECC_GEN4;                   /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  FLASH_NF_ECC_GEN5_t                      NF_ECC_GEN5;                   /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  FLASH_NF_ECC_GEN6_t                      NF_ECC_GEN6;                   /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  FLASH_NF_ECC_GEN7_t                      NF_ECC_GEN7;                   /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  FLASH_NF_ECC_GEN8_t                      NF_ECC_GEN8;                   /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  FLASH_NF_ECC_GEN9_t                      NF_ECC_GEN9;                   /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  FLASH_NF_ECC_GEN10_t                     NF_ECC_GEN10;                  /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  FLASH_NF_ECC_GEN11_t                     NF_ECC_GEN11;                  /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  FLASH_NF_ECC_GEN12_t                     NF_ECC_GEN12;                  /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  FLASH_NF_ECC_GEN13_t                     NF_ECC_GEN13;                  /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  FLASH_NF_ECC_GEN14_t                     NF_ECC_GEN14;                  /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  FLASH_NF_ECC_GEN15_t                     NF_ECC_GEN15;                  /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  FLASH_NF_FIFO_CONTROL_t                  NF_FIFO_CONTROL;               /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  FLASH_NF_FIFO_STATUS_t                   NF_FIFO_STATUS;                /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  FLASH_NF_FIFO_ADDRESS_t                  NF_FIFO_ADDRESS;               /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  FLASH_NF_FIFO_MATCH_ADDRESS_t            NF_FIFO_MATCH_ADDRESS;         /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  FLASH_NF_FIFO_DATA_t                     NF_FIFO_DATA;                  /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  FLASH_FLASH_ACCESS_START_t               FLASH_ACCESS_START;            /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  FLASH_NF_ECC_RESET_t                     NF_ECC_RESET;                  /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  FLASH_FLASH_INTERRUPT_t                  FLASH_INTERRUPT;               /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  FLASH_FLASH_MASK_t                       FLASH_MASK;                    /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  FLASH_NF_BCH_STATUS_t                    NF_BCH_STATUS;                 /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  FLASH_NF_BCH_ERROR_LOC01_t               NF_BCH_ERROR_LOC01;            /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  FLASH_NF_BCH_ERROR_LOC23_t               NF_BCH_ERROR_LOC23;            /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  FLASH_NF_BCH_ERROR_LOC45_t               NF_BCH_ERROR_LOC45;            /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  FLASH_NF_BCH_ERROR_LOC67_t               NF_BCH_ERROR_LOC67;            /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  FLASH_NF_BCH_ERROR_LOC89_t               NF_BCH_ERROR_LOC89;            /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  FLASH_NF_BCH_ERROR_LOC1011_t             NF_BCH_ERROR_LOC1011;          /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  FLASH_NF_BCH_CONTROL_t                   NF_BCH_CONTROL;                /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  FLASH_NF_BCH_OOB0_t                      NF_BCH_OOB0;                   /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  FLASH_NF_BCH_OOB1_t                      NF_BCH_OOB1;                   /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  FLASH_NF_BCH_OOB2_t                      NF_BCH_OOB2;                   /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  FLASH_NF_BCH_OOB3_t                      NF_BCH_OOB3;                   /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  FLASH_NF_BCH_OOB4_t                      NF_BCH_OOB4;                   /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  FLASH_NF_BCH_GEN0_0_t                    NF_BCH_GEN0_0;                 /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  FLASH_NF_BCH_GEN0_1_t                    NF_BCH_GEN0_1;                 /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  FLASH_NF_BCH_GEN0_2_t                    NF_BCH_GEN0_2;                 /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  FLASH_NF_BCH_GEN0_3_t                    NF_BCH_GEN0_3;                 /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  FLASH_NF_BCH_GEN0_4_t                    NF_BCH_GEN0_4;                 /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  FLASH_NF_BCH_GEN1_0_t                    NF_BCH_GEN1_0;                 /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  FLASH_NF_BCH_GEN1_1_t                    NF_BCH_GEN1_1;                 /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  FLASH_NF_BCH_GEN1_2_t                    NF_BCH_GEN1_2;                 /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  FLASH_NF_BCH_GEN1_3_t                    NF_BCH_GEN1_3;                 /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  FLASH_NF_BCH_GEN1_4_t                    NF_BCH_GEN1_4;                 /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  FLASH_NF_BCH_GEN2_0_t                    NF_BCH_GEN2_0;                 /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  FLASH_NF_BCH_GEN2_1_t                    NF_BCH_GEN2_1;                 /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  FLASH_NF_BCH_GEN2_2_t                    NF_BCH_GEN2_2;                 /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  FLASH_NF_BCH_GEN2_3_t                    NF_BCH_GEN2_3;                 /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  FLASH_NF_BCH_GEN2_4_t                    NF_BCH_GEN2_4;                 /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  FLASH_NF_BCH_GEN3_0_t                    NF_BCH_GEN3_0;                 /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  FLASH_NF_BCH_GEN3_1_t                    NF_BCH_GEN3_1;                 /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  FLASH_NF_BCH_GEN3_2_t                    NF_BCH_GEN3_2;                 /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  FLASH_NF_BCH_GEN3_3_t                    NF_BCH_GEN3_3;                 /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  FLASH_NF_BCH_GEN3_4_t                    NF_BCH_GEN3_4;                 /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  FLASH_NF_BCH_GEN4_0_t                    NF_BCH_GEN4_0;                 /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  FLASH_NF_BCH_GEN4_1_t                    NF_BCH_GEN4_1;                 /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  FLASH_NF_BCH_GEN4_2_t                    NF_BCH_GEN4_2;                 /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  FLASH_NF_BCH_GEN4_3_t                    NF_BCH_GEN4_3;                 /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  FLASH_NF_BCH_GEN4_4_t                    NF_BCH_GEN4_4;                 /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  FLASH_NF_BCH_GEN5_0_t                    NF_BCH_GEN5_0;                 /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  FLASH_NF_BCH_GEN5_1_t                    NF_BCH_GEN5_1;                 /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  FLASH_NF_BCH_GEN5_2_t                    NF_BCH_GEN5_2;                 /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  FLASH_NF_BCH_GEN5_3_t                    NF_BCH_GEN5_3;                 /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  FLASH_NF_BCH_GEN5_4_t                    NF_BCH_GEN5_4;                 /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  FLASH_NF_BCH_GEN6_0_t                    NF_BCH_GEN6_0;                 /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  FLASH_NF_BCH_GEN6_1_t                    NF_BCH_GEN6_1;                 /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  FLASH_NF_BCH_GEN6_2_t                    NF_BCH_GEN6_2;                 /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  FLASH_NF_BCH_GEN6_3_t                    NF_BCH_GEN6_3;                 /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  FLASH_NF_BCH_GEN6_4_t                    NF_BCH_GEN6_4;                 /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  FLASH_NF_BCH_GEN7_0_t                    NF_BCH_GEN7_0;                 /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  FLASH_NF_BCH_GEN7_1_t                    NF_BCH_GEN7_1;                 /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  FLASH_NF_BCH_GEN7_2_t                    NF_BCH_GEN7_2;                 /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  FLASH_NF_BCH_GEN7_3_t                    NF_BCH_GEN7_3;                 /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  FLASH_NF_BCH_GEN7_4_t                    NF_BCH_GEN7_4;                 /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  FLASH_NF_BCH_GEN8_0_t                    NF_BCH_GEN8_0;                 /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  FLASH_NF_BCH_GEN8_1_t                    NF_BCH_GEN8_1;                 /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  FLASH_NF_BCH_GEN8_2_t                    NF_BCH_GEN8_2;                 /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  FLASH_NF_BCH_GEN8_3_t                    NF_BCH_GEN8_3;                 /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  FLASH_NF_BCH_GEN8_4_t                    NF_BCH_GEN8_4;                 /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  FLASH_NF_BCH_GEN9_0_t                    NF_BCH_GEN9_0;                 /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  FLASH_NF_BCH_GEN9_1_t                    NF_BCH_GEN9_1;                 /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  FLASH_NF_BCH_GEN9_2_t                    NF_BCH_GEN9_2;                 /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  FLASH_NF_BCH_GEN9_3_t                    NF_BCH_GEN9_3;                 /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  FLASH_NF_BCH_GEN9_4_t                    NF_BCH_GEN9_4;                 /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  FLASH_NF_BCH_GEN10_0_t                   NF_BCH_GEN10_0;                /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  FLASH_NF_BCH_GEN10_1_t                   NF_BCH_GEN10_1;                /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  FLASH_NF_BCH_GEN10_2_t                   NF_BCH_GEN10_2;                /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  FLASH_NF_BCH_GEN10_3_t                   NF_BCH_GEN10_3;                /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  FLASH_NF_BCH_GEN10_4_t                   NF_BCH_GEN10_4;                /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  FLASH_NF_BCH_GEN11_0_t                   NF_BCH_GEN11_0;                /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  FLASH_NF_BCH_GEN11_1_t                   NF_BCH_GEN11_1;                /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  FLASH_NF_BCH_GEN11_2_t                   NF_BCH_GEN11_2;                /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  FLASH_NF_BCH_GEN11_3_t                   NF_BCH_GEN11_3;                /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  FLASH_NF_BCH_GEN11_4_t                   NF_BCH_GEN11_4;                /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  FLASH_NF_BCH_GEN12_0_t                   NF_BCH_GEN12_0;                /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  FLASH_NF_BCH_GEN12_1_t                   NF_BCH_GEN12_1;                /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  FLASH_NF_BCH_GEN12_2_t                   NF_BCH_GEN12_2;                /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  FLASH_NF_BCH_GEN12_3_t                   NF_BCH_GEN12_3;                /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  FLASH_NF_BCH_GEN12_4_t                   NF_BCH_GEN12_4;                /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  FLASH_NF_BCH_GEN13_0_t                   NF_BCH_GEN13_0;                /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  FLASH_NF_BCH_GEN13_1_t                   NF_BCH_GEN13_1;                /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  FLASH_NF_BCH_GEN13_2_t                   NF_BCH_GEN13_2;                /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd126[3];                  
  FLASH_NF_BCH_GEN13_3_t                   NF_BCH_GEN13_3;                /* addr: 0x000001f8 */ 
  cs_uint32                                rsrvd127[3];                  
  FLASH_NF_BCH_GEN13_4_t                   NF_BCH_GEN13_4;                /* addr: 0x000001fc */ 
  cs_uint32                                rsrvd128[3];                  
  FLASH_NF_BCH_GEN14_0_t                   NF_BCH_GEN14_0;                /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd129[3];                  
  FLASH_NF_BCH_GEN14_1_t                   NF_BCH_GEN14_1;                /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd130[3];                  
  FLASH_NF_BCH_GEN14_2_t                   NF_BCH_GEN14_2;                /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd131[3];                  
  FLASH_NF_BCH_GEN14_3_t                   NF_BCH_GEN14_3;                /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd132[3];                  
  FLASH_NF_BCH_GEN14_4_t                   NF_BCH_GEN14_4;                /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd133[3];                  
  FLASH_NF_BCH_GEN15_0_t                   NF_BCH_GEN15_0;                /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd134[3];                  
  FLASH_NF_BCH_GEN15_1_t                   NF_BCH_GEN15_1;                /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd135[3];                  
  FLASH_NF_BCH_GEN15_2_t                   NF_BCH_GEN15_2;                /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd136[3];                  
  FLASH_NF_BCH_GEN15_3_t                   NF_BCH_GEN15_3;                /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd137[3];                  
  FLASH_NF_BCH_GEN15_4_t                   NF_BCH_GEN15_4;                /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd138[3];                  
  FLASH_FLASH_SPARE_0_t                    FLASH_SPARE_0;                 /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd139[3];                  
  FLASH_FLASH_SPARE_1_t                    FLASH_SPARE_1;                 /* addr: 0x0000022c */ 
} FLASH_AXI_t;

  

/*
 * SCH
 */
  



#define SCH_CONTROL                              0xf0060000
#define SCH_CONTROL_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 ptp_enable_port2     :  1 ; /* bits 3:3 */
    cs_uint32 ptp_enable_port1     :  1 ; /* bits 2:2 */
    cs_uint32 ptp_enable_port0     :  1 ; /* bits 1:1 */
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
    cs_uint32 ptp_enable_port0     :  1 ; /* bits 1:1 */
    cs_uint32 ptp_enable_port1     :  1 ; /* bits 2:2 */
    cs_uint32 ptp_enable_port2     :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTROL_t;





#define SCH_STATUS                               0xf0060004
#define SCH_STATUS_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 cpu_cmd_status       :  3 ; /* bits 4:2 */
    cs_uint32 current_set_tdm_control :  1 ; /* bits 1:1 */
    cs_uint32 sch_mem_init_done    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sch_mem_init_done    :  1 ; /* bits 0:0 */
    cs_uint32 current_set_tdm_control :  1 ; /* bits 1:1 */
    cs_uint32 cpu_cmd_status       :  3 ; /* bits 4:2 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_STATUS_t;





#define SCH_SWITCH_TDM_CONTROL_SET               0xf0060008
#define SCH_SWITCH_TDM_CONTROL_SET_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 switch_tdm_control_set :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 switch_tdm_control_set :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SWITCH_TDM_CONTROL_SET_t;





#define SCH_MAIN_TDM_CONTROL_SETA                0xf006000c
#define SCH_MAIN_TDM_CONTROL_SETA_dft            0x0000001f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 calendar_return_seta :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 calendar_return_seta :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_CONTROL_SETA_t;





#define SCH_MAIN_TDM_CONTROL_SETB                0xf0060010
#define SCH_MAIN_TDM_CONTROL_SETB_dft            0x0000001f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 calendar_return_setb :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 calendar_return_setb :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_CONTROL_SETB_t;





#define SCH_MAIN_TDM_PORT_CALENDAR0_SETA         0xf0060014
#define SCH_MAIN_TDM_PORT_CALENDAR0_SETA_dft     0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot15               :  2 ; /* bits 31:30 */
    cs_uint32 slot14               :  2 ; /* bits 29:28 */
    cs_uint32 slot13               :  2 ; /* bits 27:26 */
    cs_uint32 slot12               :  2 ; /* bits 25:24 */
    cs_uint32 slot11               :  2 ; /* bits 23:22 */
    cs_uint32 slot10               :  2 ; /* bits 21:20 */
    cs_uint32 slot9                :  2 ; /* bits 19:18 */
    cs_uint32 slot8                :  2 ; /* bits 17:16 */
    cs_uint32 slot7                :  2 ; /* bits 15:14 */
    cs_uint32 slot6                :  2 ; /* bits 13:12 */
    cs_uint32 slot5                :  2 ; /* bits 11:10 */
    cs_uint32 slot4                :  2 ; /* bits 9:8 */
    cs_uint32 slot3                :  2 ; /* bits 7:6 */
    cs_uint32 slot2                :  2 ; /* bits 5:4 */
    cs_uint32 slot1                :  2 ; /* bits 3:2 */
    cs_uint32 slot0                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot0                :  2 ; /* bits 1:0 */
    cs_uint32 slot1                :  2 ; /* bits 3:2 */
    cs_uint32 slot2                :  2 ; /* bits 5:4 */
    cs_uint32 slot3                :  2 ; /* bits 7:6 */
    cs_uint32 slot4                :  2 ; /* bits 9:8 */
    cs_uint32 slot5                :  2 ; /* bits 11:10 */
    cs_uint32 slot6                :  2 ; /* bits 13:12 */
    cs_uint32 slot7                :  2 ; /* bits 15:14 */
    cs_uint32 slot8                :  2 ; /* bits 17:16 */
    cs_uint32 slot9                :  2 ; /* bits 19:18 */
    cs_uint32 slot10               :  2 ; /* bits 21:20 */
    cs_uint32 slot11               :  2 ; /* bits 23:22 */
    cs_uint32 slot12               :  2 ; /* bits 25:24 */
    cs_uint32 slot13               :  2 ; /* bits 27:26 */
    cs_uint32 slot14               :  2 ; /* bits 29:28 */
    cs_uint32 slot15               :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_PORT_CALENDAR0_SETA_t;





#define SCH_MAIN_TDM_PORT_CALENDAR1_SETA         0xf0060018
#define SCH_MAIN_TDM_PORT_CALENDAR1_SETA_dft     0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot31               :  2 ; /* bits 31:30 */
    cs_uint32 slot30               :  2 ; /* bits 29:28 */
    cs_uint32 slot29               :  2 ; /* bits 27:26 */
    cs_uint32 slot28               :  2 ; /* bits 25:24 */
    cs_uint32 slot27               :  2 ; /* bits 23:22 */
    cs_uint32 slot26               :  2 ; /* bits 21:20 */
    cs_uint32 slot25               :  2 ; /* bits 19:18 */
    cs_uint32 slot24               :  2 ; /* bits 17:16 */
    cs_uint32 slot23               :  2 ; /* bits 15:14 */
    cs_uint32 slot22               :  2 ; /* bits 13:12 */
    cs_uint32 slot21               :  2 ; /* bits 11:10 */
    cs_uint32 slot20               :  2 ; /* bits 9:8 */
    cs_uint32 slot19               :  2 ; /* bits 7:6 */
    cs_uint32 slot18               :  2 ; /* bits 5:4 */
    cs_uint32 slot17               :  2 ; /* bits 3:2 */
    cs_uint32 slot16               :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot16               :  2 ; /* bits 1:0 */
    cs_uint32 slot17               :  2 ; /* bits 3:2 */
    cs_uint32 slot18               :  2 ; /* bits 5:4 */
    cs_uint32 slot19               :  2 ; /* bits 7:6 */
    cs_uint32 slot20               :  2 ; /* bits 9:8 */
    cs_uint32 slot21               :  2 ; /* bits 11:10 */
    cs_uint32 slot22               :  2 ; /* bits 13:12 */
    cs_uint32 slot23               :  2 ; /* bits 15:14 */
    cs_uint32 slot24               :  2 ; /* bits 17:16 */
    cs_uint32 slot25               :  2 ; /* bits 19:18 */
    cs_uint32 slot26               :  2 ; /* bits 21:20 */
    cs_uint32 slot27               :  2 ; /* bits 23:22 */
    cs_uint32 slot28               :  2 ; /* bits 25:24 */
    cs_uint32 slot29               :  2 ; /* bits 27:26 */
    cs_uint32 slot30               :  2 ; /* bits 29:28 */
    cs_uint32 slot31               :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_PORT_CALENDAR1_SETA_t;





#define SCH_MAIN_TDM_PORT_CALENDAR0_SETB         0xf006001c
#define SCH_MAIN_TDM_PORT_CALENDAR0_SETB_dft     0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot15               :  2 ; /* bits 31:30 */
    cs_uint32 slot14               :  2 ; /* bits 29:28 */
    cs_uint32 slot13               :  2 ; /* bits 27:26 */
    cs_uint32 slot12               :  2 ; /* bits 25:24 */
    cs_uint32 slot11               :  2 ; /* bits 23:22 */
    cs_uint32 slot10               :  2 ; /* bits 21:20 */
    cs_uint32 slot9                :  2 ; /* bits 19:18 */
    cs_uint32 slot8                :  2 ; /* bits 17:16 */
    cs_uint32 slot7                :  2 ; /* bits 15:14 */
    cs_uint32 slot6                :  2 ; /* bits 13:12 */
    cs_uint32 slot5                :  2 ; /* bits 11:10 */
    cs_uint32 slot4                :  2 ; /* bits 9:8 */
    cs_uint32 slot3                :  2 ; /* bits 7:6 */
    cs_uint32 slot2                :  2 ; /* bits 5:4 */
    cs_uint32 slot1                :  2 ; /* bits 3:2 */
    cs_uint32 slot0                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot0                :  2 ; /* bits 1:0 */
    cs_uint32 slot1                :  2 ; /* bits 3:2 */
    cs_uint32 slot2                :  2 ; /* bits 5:4 */
    cs_uint32 slot3                :  2 ; /* bits 7:6 */
    cs_uint32 slot4                :  2 ; /* bits 9:8 */
    cs_uint32 slot5                :  2 ; /* bits 11:10 */
    cs_uint32 slot6                :  2 ; /* bits 13:12 */
    cs_uint32 slot7                :  2 ; /* bits 15:14 */
    cs_uint32 slot8                :  2 ; /* bits 17:16 */
    cs_uint32 slot9                :  2 ; /* bits 19:18 */
    cs_uint32 slot10               :  2 ; /* bits 21:20 */
    cs_uint32 slot11               :  2 ; /* bits 23:22 */
    cs_uint32 slot12               :  2 ; /* bits 25:24 */
    cs_uint32 slot13               :  2 ; /* bits 27:26 */
    cs_uint32 slot14               :  2 ; /* bits 29:28 */
    cs_uint32 slot15               :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_PORT_CALENDAR0_SETB_t;





#define SCH_MAIN_TDM_PORT_CALENDAR1_SETB         0xf0060020
#define SCH_MAIN_TDM_PORT_CALENDAR1_SETB_dft     0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot31               :  2 ; /* bits 31:30 */
    cs_uint32 slot30               :  2 ; /* bits 29:28 */
    cs_uint32 slot29               :  2 ; /* bits 27:26 */
    cs_uint32 slot28               :  2 ; /* bits 25:24 */
    cs_uint32 slot27               :  2 ; /* bits 23:22 */
    cs_uint32 slot26               :  2 ; /* bits 21:20 */
    cs_uint32 slot25               :  2 ; /* bits 19:18 */
    cs_uint32 slot24               :  2 ; /* bits 17:16 */
    cs_uint32 slot23               :  2 ; /* bits 15:14 */
    cs_uint32 slot22               :  2 ; /* bits 13:12 */
    cs_uint32 slot21               :  2 ; /* bits 11:10 */
    cs_uint32 slot20               :  2 ; /* bits 9:8 */
    cs_uint32 slot19               :  2 ; /* bits 7:6 */
    cs_uint32 slot18               :  2 ; /* bits 5:4 */
    cs_uint32 slot17               :  2 ; /* bits 3:2 */
    cs_uint32 slot16               :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot16               :  2 ; /* bits 1:0 */
    cs_uint32 slot17               :  2 ; /* bits 3:2 */
    cs_uint32 slot18               :  2 ; /* bits 5:4 */
    cs_uint32 slot19               :  2 ; /* bits 7:6 */
    cs_uint32 slot20               :  2 ; /* bits 9:8 */
    cs_uint32 slot21               :  2 ; /* bits 11:10 */
    cs_uint32 slot22               :  2 ; /* bits 13:12 */
    cs_uint32 slot23               :  2 ; /* bits 15:14 */
    cs_uint32 slot24               :  2 ; /* bits 17:16 */
    cs_uint32 slot25               :  2 ; /* bits 19:18 */
    cs_uint32 slot26               :  2 ; /* bits 21:20 */
    cs_uint32 slot27               :  2 ; /* bits 23:22 */
    cs_uint32 slot28               :  2 ; /* bits 25:24 */
    cs_uint32 slot29               :  2 ; /* bits 27:26 */
    cs_uint32 slot30               :  2 ; /* bits 29:28 */
    cs_uint32 slot31               :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_MAIN_TDM_PORT_CALENDAR1_SETB_t;





#define SCH_SHAPER_CONFIGURATION                 0xf0060024
#define SCH_SHAPER_CONFIGURATION_dft             0x01f40200




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 global_scrub_enable  :  1 ; /* bits 27:27 */
    cs_uint32 clocks_per_round_lt  : 17 ; /* bits 26:10 */
    cs_uint32 clocks_per_round_st  : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 clocks_per_round_st  : 10 ; /* bits 9:0 */
    cs_uint32 clocks_per_round_lt  : 17 ; /* bits 26:10 */
    cs_uint32 global_scrub_enable  :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_CONFIGURATION_t;





#define SCH_ATOMIC_COMMAND_CONTROL               0xf0060028
#define SCH_ATOMIC_COMMAND_CONTROL_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 start_write          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 start_write          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_ATOMIC_COMMAND_CONTROL_t;





#define SCH_ATOMIC_COMMAND_DATA1                 0xf006002c
#define SCH_ATOMIC_COMMAND_DATA1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 data1                : 27 ; /* bits 26:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data1                : 27 ; /* bits 26:0 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_ATOMIC_COMMAND_DATA1_t;





#define SCH_ATOMIC_COMMAND_DATA0                 0xf0060030
#define SCH_ATOMIC_COMMAND_DATA0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_ATOMIC_COMMAND_DATA0_t;





#define SCH_INTERRUPT_0                          0xf0060034
#define SCH_INTERRUPT_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 sch_emyvoq_reqgvn    :  1 ; /* bits 7:7 */
    cs_uint32 express_mode_off     :  1 ; /* bits 6:6 */
    cs_uint32 express_mode_on      :  1 ; /* bits 5:5 */
    cs_uint32 Shp_par_err_3_Int    :  1 ; /* bits 4:4 */
    cs_uint32 Shp_par_err_2_Int    :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_1_Int    :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_0_Int    :  1 ; /* bits 1:1 */
    cs_uint32 cpu_cmd_executed     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_cmd_executed     :  1 ; /* bits 0:0 */
    cs_uint32 Shp_par_err_0_Int    :  1 ; /* bits 1:1 */
    cs_uint32 Shp_par_err_1_Int    :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_2_Int    :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_3_Int    :  1 ; /* bits 4:4 */
    cs_uint32 express_mode_on      :  1 ; /* bits 5:5 */
    cs_uint32 express_mode_off     :  1 ; /* bits 6:6 */
    cs_uint32 sch_emyvoq_reqgvn    :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_INTERRUPT_0_t;





#define SCH_INTENABLE_0                          0xf0060038
#define SCH_INTENABLE_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 sch_emyvoq_reqgvn_E  :  1 ; /* bits 7:7 */
    cs_uint32 express_mode_off_E   :  1 ; /* bits 6:6 */
    cs_uint32 express_mode_on_E    :  1 ; /* bits 5:5 */
    cs_uint32 Shp_par_err_3_Int_E  :  1 ; /* bits 4:4 */
    cs_uint32 Shp_par_err_2_Int_E  :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_1_Int_E  :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_0_Int_E  :  1 ; /* bits 1:1 */
    cs_uint32 cpu_cmd_executed_E   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_cmd_executed_E   :  1 ; /* bits 0:0 */
    cs_uint32 Shp_par_err_0_Int_E  :  1 ; /* bits 1:1 */
    cs_uint32 Shp_par_err_1_Int_E  :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_2_Int_E  :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_3_Int_E  :  1 ; /* bits 4:4 */
    cs_uint32 express_mode_on_E    :  1 ; /* bits 5:5 */
    cs_uint32 express_mode_off_E   :  1 ; /* bits 6:6 */
    cs_uint32 sch_emyvoq_reqgvn_E  :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_INTENABLE_0_t;





#define SCH_INTERRUPT_1                          0xf006003c
#define SCH_INTERRUPT_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 sch_emyvoq_reqgvn    :  1 ; /* bits 7:7 */
    cs_uint32 express_mode_off     :  1 ; /* bits 6:6 */
    cs_uint32 express_mode_on      :  1 ; /* bits 5:5 */
    cs_uint32 Shp_par_err_3_Int    :  1 ; /* bits 4:4 */
    cs_uint32 Shp_par_err_2_Int    :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_1_Int    :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_0_Int    :  1 ; /* bits 1:1 */
    cs_uint32 cpu_cmd_executed     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_cmd_executed     :  1 ; /* bits 0:0 */
    cs_uint32 Shp_par_err_0_Int    :  1 ; /* bits 1:1 */
    cs_uint32 Shp_par_err_1_Int    :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_2_Int    :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_3_Int    :  1 ; /* bits 4:4 */
    cs_uint32 express_mode_on      :  1 ; /* bits 5:5 */
    cs_uint32 express_mode_off     :  1 ; /* bits 6:6 */
    cs_uint32 sch_emyvoq_reqgvn    :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_INTERRUPT_1_t;





#define SCH_INTENABLE_1                          0xf0060040
#define SCH_INTENABLE_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 sch_emyvoq_reqgvn_E  :  1 ; /* bits 7:7 */
    cs_uint32 express_mode_off_E   :  1 ; /* bits 6:6 */
    cs_uint32 express_mode_on_E    :  1 ; /* bits 5:5 */
    cs_uint32 Shp_par_err_3_Int_E  :  1 ; /* bits 4:4 */
    cs_uint32 Shp_par_err_2_Int_E  :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_1_Int_E  :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_0_Int_E  :  1 ; /* bits 1:1 */
    cs_uint32 cpu_cmd_executed_E   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_cmd_executed_E   :  1 ; /* bits 0:0 */
    cs_uint32 Shp_par_err_0_Int_E  :  1 ; /* bits 1:1 */
    cs_uint32 Shp_par_err_1_Int_E  :  1 ; /* bits 2:2 */
    cs_uint32 Shp_par_err_2_Int_E  :  1 ; /* bits 3:3 */
    cs_uint32 Shp_par_err_3_Int_E  :  1 ; /* bits 4:4 */
    cs_uint32 express_mode_on_E    :  1 ; /* bits 5:5 */
    cs_uint32 express_mode_off_E   :  1 ; /* bits 6:6 */
    cs_uint32 sch_emyvoq_reqgvn_E  :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_INTENABLE_1_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT0_0       0xf0060044
#define SCH_SHAPER_PARITY_ERR_INTERRUPT0_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq31 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq30 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq29 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq28 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq27 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq26 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq25 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq24 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq23 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq22 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq21 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq20 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq19 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq18 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq17 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq16 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq15 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq14 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq13 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq12 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq11 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq10 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq9 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq8 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq7 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq6 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq5 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq4 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq3 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq2 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq1 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq0 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq0 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq1 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq2 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq3 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq4 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq5 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq6 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq7 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq8 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq9 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq10 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq11 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq12 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq13 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq14 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq15 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq16 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq17 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq18 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq19 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq20 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq21 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq22 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq23 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq24 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq25 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq26 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq27 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq28 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq29 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq30 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq31 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT0_0_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE0_0       0xf0060048
#define SCH_SHAPER_PARITY_ERR_INTENABLE0_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq31_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq30_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq29_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq28_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq27_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq26_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq25_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq24_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq23_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq22_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq21_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq20_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq19_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq18_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq17_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq16_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq15_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq14_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq13_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq12_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq11_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq10_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq9_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq8_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq7_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq6_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq5_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq4_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq3_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq2_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq1_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq0_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq0_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq1_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq2_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq3_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq4_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq5_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq6_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq7_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq8_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq9_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq10_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq11_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq12_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq13_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq14_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq15_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq16_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq17_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq18_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq19_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq20_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq21_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq22_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq23_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq24_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq25_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq26_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq27_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq28_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq29_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq30_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq31_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE0_0_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT0_1       0xf006004c
#define SCH_SHAPER_PARITY_ERR_INTERRUPT0_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq31 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq30 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq29 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq28 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq27 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq26 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq25 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq24 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq23 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq22 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq21 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq20 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq19 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq18 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq17 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq16 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq15 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq14 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq13 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq12 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq11 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq10 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq9 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq8 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq7 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq6 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq5 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq4 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq3 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq2 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq1 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq0 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq0 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq1 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq2 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq3 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq4 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq5 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq6 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq7 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq8 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq9 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq10 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq11 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq12 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq13 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq14 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq15 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq16 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq17 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq18 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq19 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq20 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq21 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq22 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq23 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq24 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq25 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq26 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq27 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq28 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq29 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq30 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq31 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT0_1_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE0_1       0xf0060050
#define SCH_SHAPER_PARITY_ERR_INTENABLE0_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq31_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq30_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq29_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq28_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq27_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq26_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq25_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq24_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq23_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq22_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq21_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq20_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq19_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq18_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq17_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq16_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq15_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq14_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq13_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq12_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq11_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq10_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq9_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq8_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq7_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq6_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq5_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq4_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq3_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq2_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq1_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq0_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq0_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq1_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq2_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq3_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq4_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq5_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq6_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq7_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq8_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq9_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq10_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq11_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq12_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq13_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq14_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq15_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq16_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq17_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq18_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq19_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq20_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq21_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq22_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq23_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq24_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq25_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq26_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq27_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq28_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq29_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq30_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq31_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE0_1_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT1_0       0xf0060054
#define SCH_SHAPER_PARITY_ERR_INTERRUPT1_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq63 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq62 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq61 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq60 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq59 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq58 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq57 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq56 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq55 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq54 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq53 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq52 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq51 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq50 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq49 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq48 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq47 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq46 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq45 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq44 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq43 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq42 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq41 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq40 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq39 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq38 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq37 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq36 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq35 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq34 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq33 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq32 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq32 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq33 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq34 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq35 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq36 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq37 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq38 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq39 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq40 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq41 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq42 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq43 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq44 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq45 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq46 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq47 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq48 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq49 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq50 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq51 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq52 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq53 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq54 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq55 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq56 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq57 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq58 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq59 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq60 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq61 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq62 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq63 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT1_0_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE1_0       0xf0060058
#define SCH_SHAPER_PARITY_ERR_INTENABLE1_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq63_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq62_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq61_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq60_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq59_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq58_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq57_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq56_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq55_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq54_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq53_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq52_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq51_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq50_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq49_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq48_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq47_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq46_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq45_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq44_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq43_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq42_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq41_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq40_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq39_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq38_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq37_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq36_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq35_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq34_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq33_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq32_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq32_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq33_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq34_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq35_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq36_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq37_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq38_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq39_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq40_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq41_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq42_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq43_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq44_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq45_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq46_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq47_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq48_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq49_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq50_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq51_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq52_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq53_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq54_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq55_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq56_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq57_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq58_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq59_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq60_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq61_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq62_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq63_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE1_0_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT1_1       0xf006005c
#define SCH_SHAPER_PARITY_ERR_INTERRUPT1_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq63 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq62 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq61 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq60 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq59 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq58 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq57 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq56 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq55 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq54 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq53 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq52 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq51 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq50 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq49 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq48 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq47 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq46 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq45 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq44 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq43 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq42 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq41 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq40 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq39 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq38 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq37 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq36 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq35 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq34 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq33 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq32 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq32 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq33 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq34 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq35 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq36 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq37 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq38 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq39 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq40 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq41 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq42 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq43 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq44 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq45 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq46 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq47 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq48 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq49 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq50 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq51 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq52 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq53 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq54 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq55 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq56 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq57 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq58 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq59 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq60 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq61 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq62 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq63 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT1_1_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE1_1       0xf0060060
#define SCH_SHAPER_PARITY_ERR_INTENABLE1_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq63_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq62_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq61_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq60_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq59_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq58_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq57_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq56_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq55_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq54_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq53_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq52_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq51_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq50_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq49_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq48_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq47_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq46_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq45_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq44_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq43_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq42_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq41_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq40_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq39_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq38_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq37_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq36_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq35_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq34_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq33_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq32_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq32_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq33_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq34_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq35_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq36_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq37_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq38_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq39_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq40_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq41_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq42_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq43_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq44_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq45_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq46_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq47_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq48_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq49_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq50_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq51_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq52_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq53_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq54_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq55_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq56_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq57_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq58_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq59_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq60_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq61_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq62_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq63_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE1_1_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT2_0       0xf0060064
#define SCH_SHAPER_PARITY_ERR_INTERRUPT2_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq95 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq94 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq93 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq92 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq91 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq90 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq89 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq88 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq87 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq86 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq85 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq84 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq83 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq82 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq81 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq80 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq79 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq78 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq77 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq76 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq75 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq74 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq73 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq72 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq71 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq70 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq69 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq68 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq67 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq66 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq65 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq64 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq64 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq65 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq66 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq67 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq68 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq69 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq70 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq71 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq72 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq73 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq74 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq75 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq76 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq77 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq78 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq79 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq80 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq81 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq82 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq83 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq84 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq85 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq86 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq87 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq88 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq89 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq90 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq91 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq92 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq93 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq94 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq95 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT2_0_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE2_0       0xf0060068
#define SCH_SHAPER_PARITY_ERR_INTENABLE2_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq95_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq94_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq93_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq92_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq91_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq90_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq89_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq88_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq87_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq86_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq85_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq84_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq83_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq82_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq81_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq80_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq79_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq78_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq77_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq76_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq75_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq74_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq73_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq72_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq71_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq70_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq69_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq68_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq67_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq66_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq65_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq64_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq64_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq65_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq66_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq67_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq68_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq69_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq70_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq71_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq72_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq73_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq74_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq75_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq76_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq77_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq78_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq79_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq80_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq81_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq82_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq83_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq84_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq85_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq86_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq87_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq88_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq89_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq90_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq91_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq92_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq93_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq94_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq95_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE2_0_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT2_1       0xf006006c
#define SCH_SHAPER_PARITY_ERR_INTERRUPT2_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq95 :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq94 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq93 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq92 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq91 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq90 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq89 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq88 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq87 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq86 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq85 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq84 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq83 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq82 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq81 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq80 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq79 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq78 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq77 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq76 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq75 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq74 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq73 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq72 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq71 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq70 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq69 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq68 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq67 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq66 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq65 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq64 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq64 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq65 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq66 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq67 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq68 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq69 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq70 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq71 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq72 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq73 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq74 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq75 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq76 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq77 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq78 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq79 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq80 :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq81 :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq82 :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq83 :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq84 :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq85 :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq86 :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq87 :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq88 :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq89 :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq90 :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq91 :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq92 :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq93 :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq94 :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq95 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT2_1_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE2_1       0xf0060070
#define SCH_SHAPER_PARITY_ERR_INTENABLE2_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 shp_cnfg_parerr_voq95_E :  1 ; /* bits 31:31 */
    cs_uint32 shp_cnfg_parerr_voq94_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq93_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq92_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq91_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq90_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq89_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq88_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq87_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq86_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq85_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq84_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq83_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq82_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq81_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq80_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq79_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq78_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq77_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq76_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq75_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq74_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq73_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq72_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq71_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq70_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq69_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq68_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq67_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq66_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq65_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq64_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq64_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq65_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq66_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq67_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq68_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq69_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq70_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq71_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq72_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq73_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq74_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq75_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq76_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq77_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq78_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq79_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq80_E :  1 ; /* bits 16:16 */
    cs_uint32 shp_cnfg_parerr_voq81_E :  1 ; /* bits 17:17 */
    cs_uint32 shp_cnfg_parerr_voq82_E :  1 ; /* bits 18:18 */
    cs_uint32 shp_cnfg_parerr_voq83_E :  1 ; /* bits 19:19 */
    cs_uint32 shp_cnfg_parerr_voq84_E :  1 ; /* bits 20:20 */
    cs_uint32 shp_cnfg_parerr_voq85_E :  1 ; /* bits 21:21 */
    cs_uint32 shp_cnfg_parerr_voq86_E :  1 ; /* bits 22:22 */
    cs_uint32 shp_cnfg_parerr_voq87_E :  1 ; /* bits 23:23 */
    cs_uint32 shp_cnfg_parerr_voq88_E :  1 ; /* bits 24:24 */
    cs_uint32 shp_cnfg_parerr_voq89_E :  1 ; /* bits 25:25 */
    cs_uint32 shp_cnfg_parerr_voq90_E :  1 ; /* bits 26:26 */
    cs_uint32 shp_cnfg_parerr_voq91_E :  1 ; /* bits 27:27 */
    cs_uint32 shp_cnfg_parerr_voq92_E :  1 ; /* bits 28:28 */
    cs_uint32 shp_cnfg_parerr_voq93_E :  1 ; /* bits 29:29 */
    cs_uint32 shp_cnfg_parerr_voq94_E :  1 ; /* bits 30:30 */
    cs_uint32 shp_cnfg_parerr_voq95_E :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE2_1_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT3_0       0xf0060074
#define SCH_SHAPER_PARITY_ERR_INTERRUPT3_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 shp_cnfg_parerr_voq111 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq110 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq109 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq108 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq107 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq106 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq105 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq104 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq103 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq102 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq101 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq100 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq99 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq98 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq97 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq96 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq96 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq97 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq98 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq99 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq100 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq101 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq102 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq103 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq104 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq105 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq106 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq107 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq108 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq109 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq110 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq111 :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT3_0_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE3_0       0xf0060078
#define SCH_SHAPER_PARITY_ERR_INTENABLE3_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 shp_cnfg_parerr_voq111_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq110_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq109_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq108_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq107_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq106_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq105_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq104_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq103_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq102_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq101_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq100_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq99_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq98_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq97_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq96_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq96_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq97_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq98_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq99_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq100_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq101_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq102_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq103_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq104_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq105_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq106_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq107_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq108_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq109_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq110_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq111_E :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE3_0_t;





#define SCH_SHAPER_PARITY_ERR_INTERRUPT3_1       0xf006007c
#define SCH_SHAPER_PARITY_ERR_INTERRUPT3_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 shp_cnfg_parerr_voq111 :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq110 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq109 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq108 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq107 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq106 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq105 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq104 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq103 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq102 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq101 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq100 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq99 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq98 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq97 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq96 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq96 :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq97 :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq98 :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq99 :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq100 :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq101 :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq102 :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq103 :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq104 :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq105 :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq106 :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq107 :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq108 :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq109 :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq110 :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq111 :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTERRUPT3_1_t;





#define SCH_SHAPER_PARITY_ERR_INTENABLE3_1       0xf0060080
#define SCH_SHAPER_PARITY_ERR_INTENABLE3_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 shp_cnfg_parerr_voq111_E :  1 ; /* bits 15:15 */
    cs_uint32 shp_cnfg_parerr_voq110_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq109_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq108_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq107_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq106_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq105_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq104_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq103_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq102_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq101_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq100_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq99_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq98_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq97_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq96_E :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shp_cnfg_parerr_voq96_E :  1 ; /* bits 0:0 */
    cs_uint32 shp_cnfg_parerr_voq97_E :  1 ; /* bits 1:1 */
    cs_uint32 shp_cnfg_parerr_voq98_E :  1 ; /* bits 2:2 */
    cs_uint32 shp_cnfg_parerr_voq99_E :  1 ; /* bits 3:3 */
    cs_uint32 shp_cnfg_parerr_voq100_E :  1 ; /* bits 4:4 */
    cs_uint32 shp_cnfg_parerr_voq101_E :  1 ; /* bits 5:5 */
    cs_uint32 shp_cnfg_parerr_voq102_E :  1 ; /* bits 6:6 */
    cs_uint32 shp_cnfg_parerr_voq103_E :  1 ; /* bits 7:7 */
    cs_uint32 shp_cnfg_parerr_voq104_E :  1 ; /* bits 8:8 */
    cs_uint32 shp_cnfg_parerr_voq105_E :  1 ; /* bits 9:9 */
    cs_uint32 shp_cnfg_parerr_voq106_E :  1 ; /* bits 10:10 */
    cs_uint32 shp_cnfg_parerr_voq107_E :  1 ; /* bits 11:11 */
    cs_uint32 shp_cnfg_parerr_voq108_E :  1 ; /* bits 12:12 */
    cs_uint32 shp_cnfg_parerr_voq109_E :  1 ; /* bits 13:13 */
    cs_uint32 shp_cnfg_parerr_voq110_E :  1 ; /* bits 14:14 */
    cs_uint32 shp_cnfg_parerr_voq111_E :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_PARITY_ERR_INTENABLE3_1_t;





#define SCH_DEBUG_CONTROL                        0xf0060084
#define SCH_DEBUG_CONTROL_dft                    0x00328000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 switch_expr_mode_lowlvl :  5 ; /* bits 24:20 */
    cs_uint32 switch_expr_mode_uplvl :  5 ; /* bits 19:15 */
    cs_uint32 debug_counter_voqid  :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 stop_scrub           :  1 ; /* bits 4:4 */
    cs_uint32 stop_processing_enq_shp_cpu_update :  1 ; /* bits 3:3 */
    cs_uint32 stop_processing_enq_qm_update :  1 ; /* bits 2:2 */
    cs_uint32 stop_processing_deq_update :  1 ; /* bits 1:1 */
    cs_uint32 ignore_qm_sch_ready  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ignore_qm_sch_ready  :  1 ; /* bits 0:0 */
    cs_uint32 stop_processing_deq_update :  1 ; /* bits 1:1 */
    cs_uint32 stop_processing_enq_qm_update :  1 ; /* bits 2:2 */
    cs_uint32 stop_processing_enq_shp_cpu_update :  1 ; /* bits 3:3 */
    cs_uint32 stop_scrub           :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 debug_counter_voqid  :  7 ; /* bits 14:8 */
    cs_uint32 switch_expr_mode_uplvl :  5 ; /* bits 19:15 */
    cs_uint32 switch_expr_mode_lowlvl :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_DEBUG_CONTROL_t;





#define SCH_DEBUG_FORCE_CONTROL                  0xf0060088
#define SCH_DEBUG_FORCE_CONTROL_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 force_sch_qm_ready   :  1 ; /* bits 17:17 */
    cs_uint32 force_port2_destination_empty :  1 ; /* bits 16:16 */
    cs_uint32 force_port1_destination_empty :  1 ; /* bits 15:15 */
    cs_uint32 force_port0_destination_empty :  1 ; /* bits 14:14 */
    cs_uint32 force_port13_destination_ready :  1 ; /* bits 13:13 */
    cs_uint32 force_port12_destination_ready :  1 ; /* bits 12:12 */
    cs_uint32 force_port11_destination_ready :  1 ; /* bits 11:11 */
    cs_uint32 force_port10_destination_ready :  1 ; /* bits 10:10 */
    cs_uint32 force_port9_destination_ready :  1 ; /* bits 9:9 */
    cs_uint32 force_port8_destination_ready :  1 ; /* bits 8:8 */
    cs_uint32 force_port7_destination_ready :  1 ; /* bits 7:7 */
    cs_uint32 force_port6_destination_ready :  1 ; /* bits 6:6 */
    cs_uint32 force_port5_destination_ready :  1 ; /* bits 5:5 */
    cs_uint32 force_port4_destination_ready :  1 ; /* bits 4:4 */
    cs_uint32 force_port3_destination_ready :  1 ; /* bits 3:3 */
    cs_uint32 force_port2_destination_ready :  1 ; /* bits 2:2 */
    cs_uint32 force_port1_destination_ready :  1 ; /* bits 1:1 */
    cs_uint32 force_port0_destination_ready :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 force_port0_destination_ready :  1 ; /* bits 0:0 */
    cs_uint32 force_port1_destination_ready :  1 ; /* bits 1:1 */
    cs_uint32 force_port2_destination_ready :  1 ; /* bits 2:2 */
    cs_uint32 force_port3_destination_ready :  1 ; /* bits 3:3 */
    cs_uint32 force_port4_destination_ready :  1 ; /* bits 4:4 */
    cs_uint32 force_port5_destination_ready :  1 ; /* bits 5:5 */
    cs_uint32 force_port6_destination_ready :  1 ; /* bits 6:6 */
    cs_uint32 force_port7_destination_ready :  1 ; /* bits 7:7 */
    cs_uint32 force_port8_destination_ready :  1 ; /* bits 8:8 */
    cs_uint32 force_port9_destination_ready :  1 ; /* bits 9:9 */
    cs_uint32 force_port10_destination_ready :  1 ; /* bits 10:10 */
    cs_uint32 force_port11_destination_ready :  1 ; /* bits 11:11 */
    cs_uint32 force_port12_destination_ready :  1 ; /* bits 12:12 */
    cs_uint32 force_port13_destination_ready :  1 ; /* bits 13:13 */
    cs_uint32 force_port0_destination_empty :  1 ; /* bits 14:14 */
    cs_uint32 force_port1_destination_empty :  1 ; /* bits 15:15 */
    cs_uint32 force_port2_destination_empty :  1 ; /* bits 16:16 */
    cs_uint32 force_sch_qm_ready   :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_DEBUG_FORCE_CONTROL_t;





#define SCH_DEBUG_FORCE_VALUE                    0xf006008c
#define SCH_DEBUG_FORCE_VALUE_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 value_sch_qm_ready   :  1 ; /* bits 17:17 */
    cs_uint32 value_port2_destination_empty :  1 ; /* bits 16:16 */
    cs_uint32 value_port1_destination_empty :  1 ; /* bits 15:15 */
    cs_uint32 value_port0_destination_empty :  1 ; /* bits 14:14 */
    cs_uint32 value_port13_destination_ready :  1 ; /* bits 13:13 */
    cs_uint32 value_port12_destination_ready :  1 ; /* bits 12:12 */
    cs_uint32 value_port11_destination_ready :  1 ; /* bits 11:11 */
    cs_uint32 value_port10_destination_ready :  1 ; /* bits 10:10 */
    cs_uint32 value_port9_destination_ready :  1 ; /* bits 9:9 */
    cs_uint32 value_port8_destination_ready :  1 ; /* bits 8:8 */
    cs_uint32 value_port7_destination_ready :  1 ; /* bits 7:7 */
    cs_uint32 value_port6_destination_ready :  1 ; /* bits 6:6 */
    cs_uint32 value_port5_destination_ready :  1 ; /* bits 5:5 */
    cs_uint32 value_port4_destination_ready :  1 ; /* bits 4:4 */
    cs_uint32 value_port3_destination_ready :  1 ; /* bits 3:3 */
    cs_uint32 value_port2_destination_ready :  1 ; /* bits 2:2 */
    cs_uint32 value_port1_destination_ready :  1 ; /* bits 1:1 */
    cs_uint32 value_port0_destination_ready :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 value_port0_destination_ready :  1 ; /* bits 0:0 */
    cs_uint32 value_port1_destination_ready :  1 ; /* bits 1:1 */
    cs_uint32 value_port2_destination_ready :  1 ; /* bits 2:2 */
    cs_uint32 value_port3_destination_ready :  1 ; /* bits 3:3 */
    cs_uint32 value_port4_destination_ready :  1 ; /* bits 4:4 */
    cs_uint32 value_port5_destination_ready :  1 ; /* bits 5:5 */
    cs_uint32 value_port6_destination_ready :  1 ; /* bits 6:6 */
    cs_uint32 value_port7_destination_ready :  1 ; /* bits 7:7 */
    cs_uint32 value_port8_destination_ready :  1 ; /* bits 8:8 */
    cs_uint32 value_port9_destination_ready :  1 ; /* bits 9:9 */
    cs_uint32 value_port10_destination_ready :  1 ; /* bits 10:10 */
    cs_uint32 value_port11_destination_ready :  1 ; /* bits 11:11 */
    cs_uint32 value_port12_destination_ready :  1 ; /* bits 12:12 */
    cs_uint32 value_port13_destination_ready :  1 ; /* bits 13:13 */
    cs_uint32 value_port0_destination_empty :  1 ; /* bits 14:14 */
    cs_uint32 value_port1_destination_empty :  1 ; /* bits 15:15 */
    cs_uint32 value_port2_destination_empty :  1 ; /* bits 16:16 */
    cs_uint32 value_sch_qm_ready   :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_DEBUG_FORCE_VALUE_t;





#define SCH_CONTEXT_MEMORY_ACCESS                0xf0060090
#define SCH_CONTEXT_MEMORY_ACCESS_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 address              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_ACCESS_t;





#define SCH_CONTEXT_MEMORY_DATA5                 0xf0060094
#define SCH_CONTEXT_MEMORY_DATA5_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 data                 : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA5_t;





#define SCH_CONTEXT_MEMORY_DATA4                 0xf0060098
#define SCH_CONTEXT_MEMORY_DATA4_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA4_t;





#define SCH_CONTEXT_MEMORY_DATA3                 0xf006009c
#define SCH_CONTEXT_MEMORY_DATA3_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA3_t;





#define SCH_CONTEXT_MEMORY_DATA2                 0xf00600a0
#define SCH_CONTEXT_MEMORY_DATA2_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA2_t;





#define SCH_CONTEXT_MEMORY_DATA1                 0xf00600a4
#define SCH_CONTEXT_MEMORY_DATA1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA1_t;





#define SCH_CONTEXT_MEMORY_DATA0                 0xf00600a8
#define SCH_CONTEXT_MEMORY_DATA0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_CONTEXT_MEMORY_DATA0_t;





#define SCH_OUTPUT_LATCH_ACCESS                  0xf00600ac
#define SCH_OUTPUT_LATCH_ACCESS_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 port_num             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 port_num             :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_OUTPUT_LATCH_ACCESS_t;





#define SCH_OUTPUT_LATCH_DATA                    0xf00600b0
#define SCH_OUTPUT_LATCH_DATA_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 winner_valid         :  1 ; /* bits 19:19 */
    cs_uint32 sch_lock             :  1 ; /* bits 18:18 */
    cs_uint32 read_update_pending  :  1 ; /* bits 17:17 */
    cs_uint32 winner_ptp_enable    :  1 ; /* bits 16:16 */
    cs_uint32 winner_spdrr         :  1 ; /* bits 15:15 */
    cs_uint32 winner_voqid         :  7 ; /* bits 14:8 */
    cs_uint32 winner_bsize         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 winner_bsize         :  8 ; /* bits 7:0 */
    cs_uint32 winner_voqid         :  7 ; /* bits 14:8 */
    cs_uint32 winner_spdrr         :  1 ; /* bits 15:15 */
    cs_uint32 winner_ptp_enable    :  1 ; /* bits 16:16 */
    cs_uint32 read_update_pending  :  1 ; /* bits 17:17 */
    cs_uint32 sch_lock             :  1 ; /* bits 18:18 */
    cs_uint32 winner_valid         :  1 ; /* bits 19:19 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_OUTPUT_LATCH_DATA_t;





#define SCH_SHAPER_MEMORY_ACCESS                 0xf00600b4
#define SCH_SHAPER_MEMORY_ACCESS_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 shaper_num           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shaper_num           :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 22 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_MEMORY_ACCESS_t;





#define SCH_SHAPER_MEMORY_DATA2                  0xf00600b8
#define SCH_SHAPER_MEMORY_DATA2_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 var_parity           :  1 ; /* bits 6:6 */
    cs_uint32 var_tbc              :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 var_tbc              :  6 ; /* bits 5:0 */
    cs_uint32 var_parity           :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_MEMORY_DATA2_t;





#define SCH_SHAPER_MEMORY_DATA1                  0xf00600bc
#define SCH_SHAPER_MEMORY_DATA1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 var_tbc              : 13 ; /* bits 31:19 */
    cs_uint32 var_rpt              :  5 ; /* bits 18:14 */
    cs_uint32 config_tbc           : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 config_tbc           : 14 ; /* bits 13:0 */
    cs_uint32 var_rpt              :  5 ; /* bits 18:14 */
    cs_uint32 var_tbc              : 13 ; /* bits 31:19 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_MEMORY_DATA1_t;





#define SCH_SHAPER_MEMORY_DATA0                  0xf00600c0
#define SCH_SHAPER_MEMORY_DATA0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 config_tbc           :  4 ; /* bits 31:28 */
    cs_uint32 config_tsize         : 18 ; /* bits 27:10 */
    cs_uint32 config_rpt           :  5 ; /* bits 9:5 */
    cs_uint32 config_cpu_port      :  3 ; /* bits 4:2 */
    cs_uint32 config_mode          :  1 ; /* bits 1:1 */
    cs_uint32 config_enb           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 config_enb           :  1 ; /* bits 0:0 */
    cs_uint32 config_mode          :  1 ; /* bits 1:1 */
    cs_uint32 config_cpu_port      :  3 ; /* bits 4:2 */
    cs_uint32 config_rpt           :  5 ; /* bits 9:5 */
    cs_uint32 config_tsize         : 18 ; /* bits 27:10 */
    cs_uint32 config_tbc           :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_SHAPER_MEMORY_DATA0_t;





#define SCH_VOQ_NON_EMPTY_STATUS_MEMORY_ACCESS   0xf00600c4
#define SCH_VOQ_NON_EMPTY_STATUS_MEMORY_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 access               :  1 ; /* bits 31:31 */
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 voq_num              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 voq_num              :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rbw                  :  1 ; /* bits 30:30 */
    cs_uint32 access               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_VOQ_NON_EMPTY_STATUS_MEMORY_ACCESS_t;





#define SCH_VOQ_NON_EMPTY_STATUS_MEMORY_DATA     0xf00600c8
#define SCH_VOQ_NON_EMPTY_STATUS_MEMORY_DATA_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 non_empty_value      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 non_empty_value      :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_VOQ_NON_EMPTY_STATUS_MEMORY_DATA_t;





#define SCH_NUM_SCHREQ                           0xf00600cc
#define SCH_NUM_SCHREQ_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 num_schreq           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 num_schreq           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_NUM_SCHREQ_t;





#define SCH_NUM_ENQUPD                           0xf00600d0
#define SCH_NUM_ENQUPD_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 num_enqupd           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 num_enqupd           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_NUM_ENQUPD_t;





#define SCH_NUM_DEQUPD                           0xf00600d4
#define SCH_NUM_DEQUPD_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 num_dequpd           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 num_dequpd           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_NUM_DEQUPD_t;





#define SCH_NUM_DEQUPD_ZERO                      0xf00600d8
#define SCH_NUM_DEQUPD_ZERO_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 num_dequpd_zero      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 num_dequpd_zero      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SCH_NUM_DEQUPD_ZERO_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SCH */

typedef struct {
  SCH_CONTROL_t                            CONTROL;                       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  SCH_STATUS_t                             STATUS;                        /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  SCH_SWITCH_TDM_CONTROL_SET_t             SWITCH_TDM_CONTROL_SET;        /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  SCH_MAIN_TDM_CONTROL_SETA_t              MAIN_TDM_CONTROL_SETA;         /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  SCH_MAIN_TDM_CONTROL_SETB_t              MAIN_TDM_CONTROL_SETB;         /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  SCH_MAIN_TDM_PORT_CALENDAR0_SETA_t       MAIN_TDM_PORT_CALENDAR0_SETA;  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  SCH_MAIN_TDM_PORT_CALENDAR1_SETA_t       MAIN_TDM_PORT_CALENDAR1_SETA;  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  SCH_MAIN_TDM_PORT_CALENDAR0_SETB_t       MAIN_TDM_PORT_CALENDAR0_SETB;  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  SCH_MAIN_TDM_PORT_CALENDAR1_SETB_t       MAIN_TDM_PORT_CALENDAR1_SETB;  /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  SCH_SHAPER_CONFIGURATION_t               SHAPER_CONFIGURATION;          /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  SCH_ATOMIC_COMMAND_CONTROL_t             ATOMIC_COMMAND_CONTROL;        /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  SCH_ATOMIC_COMMAND_DATA1_t               ATOMIC_COMMAND_DATA1;          /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  SCH_ATOMIC_COMMAND_DATA0_t               ATOMIC_COMMAND_DATA0;          /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  SCH_INTERRUPT_0_t                        INTERRUPT_0;                   /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  SCH_INTENABLE_0_t                        INTENABLE_0;                   /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  SCH_INTERRUPT_1_t                        INTERRUPT_1;                   /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  SCH_INTENABLE_1_t                        INTENABLE_1;                   /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT0_0_t     SHAPER_PARITY_ERR_INTERRUPT0_0; /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE0_0_t     SHAPER_PARITY_ERR_INTENABLE0_0; /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT0_1_t     SHAPER_PARITY_ERR_INTERRUPT0_1; /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE0_1_t     SHAPER_PARITY_ERR_INTENABLE0_1; /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT1_0_t     SHAPER_PARITY_ERR_INTERRUPT1_0; /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE1_0_t     SHAPER_PARITY_ERR_INTENABLE1_0; /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT1_1_t     SHAPER_PARITY_ERR_INTERRUPT1_1; /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE1_1_t     SHAPER_PARITY_ERR_INTENABLE1_1; /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT2_0_t     SHAPER_PARITY_ERR_INTERRUPT2_0; /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE2_0_t     SHAPER_PARITY_ERR_INTENABLE2_0; /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT2_1_t     SHAPER_PARITY_ERR_INTERRUPT2_1; /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE2_1_t     SHAPER_PARITY_ERR_INTENABLE2_1; /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT3_0_t     SHAPER_PARITY_ERR_INTERRUPT3_0; /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE3_0_t     SHAPER_PARITY_ERR_INTENABLE3_0; /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  SCH_SHAPER_PARITY_ERR_INTERRUPT3_1_t     SHAPER_PARITY_ERR_INTERRUPT3_1; /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  SCH_SHAPER_PARITY_ERR_INTENABLE3_1_t     SHAPER_PARITY_ERR_INTENABLE3_1; /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  SCH_DEBUG_CONTROL_t                      DEBUG_CONTROL;                 /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  SCH_DEBUG_FORCE_CONTROL_t                DEBUG_FORCE_CONTROL;           /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  SCH_DEBUG_FORCE_VALUE_t                  DEBUG_FORCE_VALUE;             /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  SCH_CONTEXT_MEMORY_ACCESS_t              CONTEXT_MEMORY_ACCESS;         /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  SCH_CONTEXT_MEMORY_DATA5_t               CONTEXT_MEMORY_DATA5;          /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  SCH_CONTEXT_MEMORY_DATA4_t               CONTEXT_MEMORY_DATA4;          /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  SCH_CONTEXT_MEMORY_DATA3_t               CONTEXT_MEMORY_DATA3;          /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  SCH_CONTEXT_MEMORY_DATA2_t               CONTEXT_MEMORY_DATA2;          /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  SCH_CONTEXT_MEMORY_DATA1_t               CONTEXT_MEMORY_DATA1;          /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  SCH_CONTEXT_MEMORY_DATA0_t               CONTEXT_MEMORY_DATA0;          /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  SCH_OUTPUT_LATCH_ACCESS_t                OUTPUT_LATCH_ACCESS;           /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  SCH_OUTPUT_LATCH_DATA_t                  OUTPUT_LATCH_DATA;             /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  SCH_SHAPER_MEMORY_ACCESS_t               SHAPER_MEMORY_ACCESS;          /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  SCH_SHAPER_MEMORY_DATA2_t                SHAPER_MEMORY_DATA2;           /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  SCH_SHAPER_MEMORY_DATA1_t                SHAPER_MEMORY_DATA1;           /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  SCH_SHAPER_MEMORY_DATA0_t                SHAPER_MEMORY_DATA0;           /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  SCH_VOQ_NON_EMPTY_STATUS_MEMORY_ACCESS_t VOQ_NON_EMPTY_STATUS_MEMORY_ACCESS; /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  SCH_VOQ_NON_EMPTY_STATUS_MEMORY_DATA_t   VOQ_NON_EMPTY_STATUS_MEMORY_DATA; /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  SCH_NUM_SCHREQ_t                         NUM_SCHREQ;                    /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  SCH_NUM_ENQUPD_t                         NUM_ENQUPD;                    /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  SCH_NUM_DEQUPD_t                         NUM_DEQUPD;                    /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  SCH_NUM_DEQUPD_ZERO_t                    NUM_DEQUPD_ZERO;               /* addr: 0x000000d8 */ 
} SCH_t;

  

/*
 * PER
 */
  



#define PER_SOFT_RESET                           0xf0070000
#define PER_SOFT_RESET_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft_reset           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SOFT_RESET_t;





#define PER_PERIPHERAL_INTERRUPT_0               0xf0070004
#define PER_PERIPHERAL_INTERRUPT_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 trngi                :  1 ; /* bits 14:14 */
    cs_uint32 sspi                 :  1 ; /* bits 13:13 */
    cs_uint32 mdioi                :  1 ; /* bits 12:12 */
    cs_uint32 biwi                 :  1 ; /* bits 11:11 */
    cs_uint32 gpio4i               :  1 ; /* bits 10:10 */
    cs_uint32 gpio3i               :  1 ; /* bits 9:9 */
    cs_uint32 gpio2i               :  1 ; /* bits 8:8 */
    cs_uint32 gpio1i               :  1 ; /* bits 7:7 */
    cs_uint32 gpio0i               :  1 ; /* bits 6:6 */
    cs_uint32 spii                 :  1 ; /* bits 5:5 */
    cs_uint32 axii                 :  1 ; /* bits 4:4 */
    cs_uint32 tmr2i                :  1 ; /* bits 3:3 */
    cs_uint32 tmr1i                :  1 ; /* bits 2:2 */
    cs_uint32 soft1i               :  1 ; /* bits 1:1 */
    cs_uint32 soft0i               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft0i               :  1 ; /* bits 0:0 */
    cs_uint32 soft1i               :  1 ; /* bits 1:1 */
    cs_uint32 tmr1i                :  1 ; /* bits 2:2 */
    cs_uint32 tmr2i                :  1 ; /* bits 3:3 */
    cs_uint32 axii                 :  1 ; /* bits 4:4 */
    cs_uint32 spii                 :  1 ; /* bits 5:5 */
    cs_uint32 gpio0i               :  1 ; /* bits 6:6 */
    cs_uint32 gpio1i               :  1 ; /* bits 7:7 */
    cs_uint32 gpio2i               :  1 ; /* bits 8:8 */
    cs_uint32 gpio3i               :  1 ; /* bits 9:9 */
    cs_uint32 gpio4i               :  1 ; /* bits 10:10 */
    cs_uint32 biwi                 :  1 ; /* bits 11:11 */
    cs_uint32 mdioi                :  1 ; /* bits 12:12 */
    cs_uint32 sspi                 :  1 ; /* bits 13:13 */
    cs_uint32 trngi                :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PERIPHERAL_INTERRUPT_0_t;





#define PER_PERIPHERAL_INTENABLE_0               0xf0070008
#define PER_PERIPHERAL_INTENABLE_0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 trnge                :  1 ; /* bits 14:14 */
    cs_uint32 sspe                 :  1 ; /* bits 13:13 */
    cs_uint32 mdioe                :  1 ; /* bits 12:12 */
    cs_uint32 biwe                 :  1 ; /* bits 11:11 */
    cs_uint32 gpio4e               :  1 ; /* bits 10:10 */
    cs_uint32 gpio3e               :  1 ; /* bits 9:9 */
    cs_uint32 gpio2e               :  1 ; /* bits 8:8 */
    cs_uint32 gpio1e               :  1 ; /* bits 7:7 */
    cs_uint32 gpio0e               :  1 ; /* bits 6:6 */
    cs_uint32 spie                 :  1 ; /* bits 5:5 */
    cs_uint32 axie                 :  1 ; /* bits 4:4 */
    cs_uint32 tmr2e                :  1 ; /* bits 3:3 */
    cs_uint32 tmr1e                :  1 ; /* bits 2:2 */
    cs_uint32 soft1e               :  1 ; /* bits 1:1 */
    cs_uint32 soft0e               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft0e               :  1 ; /* bits 0:0 */
    cs_uint32 soft1e               :  1 ; /* bits 1:1 */
    cs_uint32 tmr1e                :  1 ; /* bits 2:2 */
    cs_uint32 tmr2e                :  1 ; /* bits 3:3 */
    cs_uint32 axie                 :  1 ; /* bits 4:4 */
    cs_uint32 spie                 :  1 ; /* bits 5:5 */
    cs_uint32 gpio0e               :  1 ; /* bits 6:6 */
    cs_uint32 gpio1e               :  1 ; /* bits 7:7 */
    cs_uint32 gpio2e               :  1 ; /* bits 8:8 */
    cs_uint32 gpio3e               :  1 ; /* bits 9:9 */
    cs_uint32 gpio4e               :  1 ; /* bits 10:10 */
    cs_uint32 biwe                 :  1 ; /* bits 11:11 */
    cs_uint32 mdioe                :  1 ; /* bits 12:12 */
    cs_uint32 sspe                 :  1 ; /* bits 13:13 */
    cs_uint32 trnge                :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PERIPHERAL_INTENABLE_0_t;





#define PER_PERIPHERAL_INTERRUPT_1               0xf007000c
#define PER_PERIPHERAL_INTERRUPT_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 trngi                :  1 ; /* bits 14:14 */
    cs_uint32 sspi                 :  1 ; /* bits 13:13 */
    cs_uint32 mdioi                :  1 ; /* bits 12:12 */
    cs_uint32 biwi                 :  1 ; /* bits 11:11 */
    cs_uint32 gpio4i               :  1 ; /* bits 10:10 */
    cs_uint32 gpio3i               :  1 ; /* bits 9:9 */
    cs_uint32 gpio2i               :  1 ; /* bits 8:8 */
    cs_uint32 gpio1i               :  1 ; /* bits 7:7 */
    cs_uint32 gpio0i               :  1 ; /* bits 6:6 */
    cs_uint32 spii                 :  1 ; /* bits 5:5 */
    cs_uint32 axii                 :  1 ; /* bits 4:4 */
    cs_uint32 tmr2i                :  1 ; /* bits 3:3 */
    cs_uint32 tmr1i                :  1 ; /* bits 2:2 */
    cs_uint32 soft1i               :  1 ; /* bits 1:1 */
    cs_uint32 soft0i               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft0i               :  1 ; /* bits 0:0 */
    cs_uint32 soft1i               :  1 ; /* bits 1:1 */
    cs_uint32 tmr1i                :  1 ; /* bits 2:2 */
    cs_uint32 tmr2i                :  1 ; /* bits 3:3 */
    cs_uint32 axii                 :  1 ; /* bits 4:4 */
    cs_uint32 spii                 :  1 ; /* bits 5:5 */
    cs_uint32 gpio0i               :  1 ; /* bits 6:6 */
    cs_uint32 gpio1i               :  1 ; /* bits 7:7 */
    cs_uint32 gpio2i               :  1 ; /* bits 8:8 */
    cs_uint32 gpio3i               :  1 ; /* bits 9:9 */
    cs_uint32 gpio4i               :  1 ; /* bits 10:10 */
    cs_uint32 biwi                 :  1 ; /* bits 11:11 */
    cs_uint32 mdioi                :  1 ; /* bits 12:12 */
    cs_uint32 sspi                 :  1 ; /* bits 13:13 */
    cs_uint32 trngi                :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PERIPHERAL_INTERRUPT_1_t;





#define PER_PERIPHERAL_INTENABLE_1               0xf0070010
#define PER_PERIPHERAL_INTENABLE_1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 trnge                :  1 ; /* bits 14:14 */
    cs_uint32 sspe                 :  1 ; /* bits 13:13 */
    cs_uint32 mdioe                :  1 ; /* bits 12:12 */
    cs_uint32 biwe                 :  1 ; /* bits 11:11 */
    cs_uint32 gpio4e               :  1 ; /* bits 10:10 */
    cs_uint32 gpio3e               :  1 ; /* bits 9:9 */
    cs_uint32 gpio2e               :  1 ; /* bits 8:8 */
    cs_uint32 gpio1e               :  1 ; /* bits 7:7 */
    cs_uint32 gpio0e               :  1 ; /* bits 6:6 */
    cs_uint32 spie                 :  1 ; /* bits 5:5 */
    cs_uint32 axie                 :  1 ; /* bits 4:4 */
    cs_uint32 tmr2e                :  1 ; /* bits 3:3 */
    cs_uint32 tmr1e                :  1 ; /* bits 2:2 */
    cs_uint32 soft1e               :  1 ; /* bits 1:1 */
    cs_uint32 soft0e               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soft0e               :  1 ; /* bits 0:0 */
    cs_uint32 soft1e               :  1 ; /* bits 1:1 */
    cs_uint32 tmr1e                :  1 ; /* bits 2:2 */
    cs_uint32 tmr2e                :  1 ; /* bits 3:3 */
    cs_uint32 axie                 :  1 ; /* bits 4:4 */
    cs_uint32 spie                 :  1 ; /* bits 5:5 */
    cs_uint32 gpio0e               :  1 ; /* bits 6:6 */
    cs_uint32 gpio1e               :  1 ; /* bits 7:7 */
    cs_uint32 gpio2e               :  1 ; /* bits 8:8 */
    cs_uint32 gpio3e               :  1 ; /* bits 9:9 */
    cs_uint32 gpio4e               :  1 ; /* bits 10:10 */
    cs_uint32 biwe                 :  1 ; /* bits 11:11 */
    cs_uint32 mdioe                :  1 ; /* bits 12:12 */
    cs_uint32 sspe                 :  1 ; /* bits 13:13 */
    cs_uint32 trnge                :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PERIPHERAL_INTENABLE_1_t;





#define PER_IRQ_SOFT1                            0xf0070014
#define PER_IRQ_SOFT1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 softiSet             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 softiSet             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_IRQ_SOFT1_t;





#define PER_IRQ_SOFT0                            0xf0070018
#define PER_IRQ_SOFT0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 softiSet             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 softiSet             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_IRQ_SOFT0_t;





#define PER_TMR_LD1                              0xf007001c
#define PER_TMR_LD1_dft                          0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 load1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 load1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_LD1_t;





#define PER_TMR_CTRL1                            0xf0070020
#define PER_TMR_CTRL1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 24 ;
    cs_uint32 timen1               :  1 ; /* bits 7:7 */
    cs_uint32 rlmode1              :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 clksel1              :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 clksel1              :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rlmode1              :  1 ; /* bits 6:6 */
    cs_uint32 timen1               :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd3               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_CTRL1_t;

#define     timen1_DIS                                    0x0
#define     timen1_ENA                                    0x1
#define     rlmode1_ROLL                                  0x0
#define     rlmode1_LOAD                                  0x1
#define     clksel1_direct                                0x0
#define     clksel1_dv64                                  0x1
#define     clksel1_dv1024                                0x2
#define     clksel1_dv4096                                0x3




#define PER_TMR_CNT1                             0xf0070024
#define PER_TMR_CNT1_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 count1               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 count1               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_CNT1_t;





#define PER_TMR_IE1_0                            0xf0070028
#define PER_TMR_IE1_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_IE1_0_t;





#define PER_TMR_IE1_1                            0xf007002c
#define PER_TMR_IE1_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_IE1_1_t;





#define PER_TMR_INT1_0                           0xf0070030
#define PER_TMR_INT1_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_INT1_0_t;





#define PER_TMR_INT1_1                           0xf0070034
#define PER_TMR_INT1_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_INT1_1_t;





#define PER_TMR_STAT1                            0xf0070038
#define PER_TMR_STAT1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1s                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1s                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_STAT1_t;





#define PER_TMR_LD2                              0xf007003c
#define PER_TMR_LD2_dft                          0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 load2                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 load2                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_LD2_t;





#define PER_TMR_CTRL2                            0xf0070040
#define PER_TMR_CTRL2_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 24 ;
    cs_uint32 timen2               :  1 ; /* bits 7:7 */
    cs_uint32 rlmode2              :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 clksel2              :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 clksel2              :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rlmode2              :  1 ; /* bits 6:6 */
    cs_uint32 timen2               :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd3               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_CTRL2_t;

#define     timen2_DIS                                    0x0
#define     timen2_ENA                                    0x1
#define     rlmode2_ROLL                                  0x0
#define     rlmode2_LOAD                                  0x1
#define     clksel2_direct                                0x0
#define     clksel2_dv64                                  0x1
#define     clksel2_dv1024                                0x2
#define     clksel2_dv4096                                0x3




#define PER_TMR_CNT2                             0xf0070044
#define PER_TMR_CNT2_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 count2               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 count2               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_CNT2_t;





#define PER_TMR_IE2_0                            0xf0070048
#define PER_TMR_IE2_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_IE2_0_t;





#define PER_TMR_IE2_1                            0xf007004c
#define PER_TMR_IE2_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1e                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_IE2_1_t;





#define PER_TMR_INT2_0                           0xf0070050
#define PER_TMR_INT2_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_INT2_0_t;





#define PER_TMR_INT2_1                           0xf0070054
#define PER_TMR_INT2_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr1i                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_INT2_1_t;





#define PER_TMR_STAT2                            0xf0070058
#define PER_TMR_STAT2_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 tmr2s                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tmr2s                :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_STAT2_t;





#define PER_TMR_LOADE                            0xf007005c
#define PER_TMR_LOADE_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 update_tmr2          :  1 ; /* bits 2:2 */
    cs_uint32 update_tmr1          :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 update_tmr1          :  1 ; /* bits 1:1 */
    cs_uint32 update_tmr2          :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_LOADE_t;





#define PER_TMR_TST                              0xf0070060
#define PER_TMR_TST_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 pps_timer2_en        :  1 ; /* bits 4:4 */
    cs_uint32 pps_timer1_en        :  1 ; /* bits 3:3 */
    cs_uint32 test2                :  1 ; /* bits 2:2 */
    cs_uint32 test1                :  1 ; /* bits 1:1 */
    cs_uint32 testclksel           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 testclksel           :  1 ; /* bits 0:0 */
    cs_uint32 test1                :  1 ; /* bits 1:1 */
    cs_uint32 test2                :  1 ; /* bits 2:2 */
    cs_uint32 pps_timer1_en        :  1 ; /* bits 3:3 */
    cs_uint32 pps_timer2_en        :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_TMR_TST_t;





#define PER_SPI_CLK                              0xf0070064
#define PER_SPI_CLK_dft                          0x00000002




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 ssp_igap             :  8 ; /* bits 23:16 */
    cs_uint32 counter_load         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter_load         : 16 ; /* bits 15:0 */
    cs_uint32 ssp_igap             :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CLK_t;





#define PER_SPI_CFG                              0xf0070068
#define PER_SPI_CFG_dft                          0x3f090000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sspcs_en4_gpio       :  1 ; /* bits 31:31 */
    cs_uint32 sspcs_en3_gpio       :  1 ; /* bits 30:30 */
    cs_uint32 pre_ssp_dat_cnt      :  6 ; /* bits 29:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ssp_cmd_cnt          :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 sel_ssp_cs           :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 micro_wire_cs_sel    :  5 ; /* bits 6:2 */
    cs_uint32 read_write           :  1 ; /* bits 1:1 */
    cs_uint32 command_cyc          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 command_cyc          :  1 ; /* bits 0:0 */
    cs_uint32 read_write           :  1 ; /* bits 1:1 */
    cs_uint32 micro_wire_cs_sel    :  5 ; /* bits 6:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sel_ssp_cs           :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ssp_cmd_cnt          :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 pre_ssp_dat_cnt      :  6 ; /* bits 29:24 */
    cs_uint32 sspcs_en3_gpio       :  1 ; /* bits 30:30 */
    cs_uint32 sspcs_en4_gpio       :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CFG_t;

#define     micro_wire_cs_sel_SPI                         0x0
#define     micro_wire_cs_sel_MWR                         0x1
#define     read_write_WR                                 0x0
#define     read_write_RD                                 0x1
#define     command_cyc_NORM                              0x0
#define     command_cyc_CONLY                             0x1




#define PER_SPI_CTRL                             0xf007006c
#define PER_SPI_CTRL_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 sspstart             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sspdone              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sspdone              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sspstart             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CTRL_t;





#define PER_SPI_CA0                              0xf0070070
#define PER_SPI_CA0_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_cmd_addr0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_cmd_addr0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CA0_t;





#define PER_SPI_CA1                              0xf0070074
#define PER_SPI_CA1_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_cmd_addr1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_cmd_addr1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CA1_t;





#define PER_SPI_CA2                              0xf0070078
#define PER_SPI_CA2_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_cmd_addr2        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_cmd_addr2        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_CA2_t;





#define PER_SPI_WDAT1                            0xf007007c
#define PER_SPI_WDAT1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_wdata1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_wdata1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_WDAT1_t;





#define PER_SPI_WDAT0                            0xf0070080
#define PER_SPI_WDAT0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_wdata0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_wdata0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_WDAT0_t;





#define PER_SPI_RDAT1                            0xf0070084
#define PER_SPI_RDAT1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_rdata1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_rdata1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_RDAT1_t;





#define PER_SPI_RDAT0                            0xf0070088
#define PER_SPI_RDAT0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssp_rdata0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssp_rdata0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_RDAT0_t;





#define PER_SPI_IE_0                             0xf007008c
#define PER_SPI_IE_0_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 spie                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spie                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_IE_0_t;





#define PER_SPI_INT_0                            0xf0070090
#define PER_SPI_INT_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 sspi                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sspi                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_INT_0_t;





#define PER_SPI_IE_1                             0xf0070094
#define PER_SPI_IE_1_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 spie                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spie                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_IE_1_t;





#define PER_SPI_INT_1                            0xf0070098
#define PER_SPI_INT_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 sspi                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sspi                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_INT_1_t;





#define PER_SPI_STAT                             0xf007009c
#define PER_SPI_STAT_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ssps                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssps                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_STAT_t;





#define PER_MDIO_CFG                             0xf00700a0
#define PER_MDIO_CFG_dft                         0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 mdio_pre_scale       : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 mdio_manual          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdio_manual          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 mdio_pre_scale       : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_CFG_t;

#define     mdio_manual_AUTO                              0x0
#define     mdio_manual_MAN                               0x1




#define PER_MDIO_ADDR                            0xf00700a4
#define PER_MDIO_ADDR_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 16 ;
    cs_uint32 mdio_rd_wr           :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mdio_offset          :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mdio_addr            :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdio_addr            :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mdio_offset          :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 mdio_rd_wr           :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd3               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_ADDR_t;

#define     mdio_rd_wr_WR                                 0x0
#define     mdio_rd_wr_RD                                 0x1
#define     mdio_addr_NORM                                0x0
#define     mdio_addr_CONLY                               0x1




#define PER_MDIO_WRDATA                          0xf00700a8
#define PER_MDIO_WRDATA_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 mdio_wrdata          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdio_wrdata          : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_WRDATA_t;





#define PER_MDIO_RDDATA                          0xf00700ac
#define PER_MDIO_RDDATA_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 mdio_rddata          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdio_rddata          : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_RDDATA_t;





#define PER_MDIO_CTRL                            0xf00700b0
#define PER_MDIO_CTRL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 mdiostart            :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 mdiodone             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdiodone             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 mdiostart            :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_CTRL_t;





#define PER_MDIO_AUTO_CFG                        0xf00700b4
#define PER_MDIO_AUTO_CFG_dft                    0x00001f00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 11 ;
    cs_uint32 auto_mdio_reg_to_read :  5 ; /* bits 20:16 */
    cs_uint32 auto_mdio_gpio       :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 auto_mdio_phy_end_idx :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 auto_mdio_phy_start_idx :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 auto_mdio_phy_start_idx :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 auto_mdio_phy_end_idx :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 auto_mdio_gpio       :  1 ; /* bits 15:15 */
    cs_uint32 auto_mdio_reg_to_read :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_AUTO_CFG_t;

#define     auto_mdio_gpio_32                             0x0
#define     auto_mdio_gpio_64                             0x1




#define PER_MDIO_AUTO_INTV                       0xf00700b8
#define PER_MDIO_AUTO_INTV_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 poll_wait_cycles     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 poll_wait_cycles     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_AUTO_INTV_t;





#define PER_MDIO_AUTO_RM                         0xf00700bc
#define PER_MDIO_AUTO_RM_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 auto_mdio_bit_mask   : 16 ; /* bits 31:16 */
    cs_uint32 auto_mdio_bit_invert : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 auto_mdio_bit_invert : 16 ; /* bits 15:0 */
    cs_uint32 auto_mdio_bit_mask   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_AUTO_RM_t;

#define     auto_mdio_bit_mask_UNMASKED                   0x0
#define     auto_mdio_bit_mask_MASKED                     0x1
#define     auto_mdio_bit_invert_NONINV                   0x0
#define     auto_mdio_bit_invert_INV                      0x1




#define PER_MDIO_AUTO_AADDR                      0xf00700c0
#define PER_MDIO_AUTO_AADDR_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 auto_mdio_rddata     : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 auto_mdio_phy_alert_range :  1 ; /* bits 5:5 */
    cs_uint32 auto_mdio_phy_alert_addr :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 auto_mdio_phy_alert_addr :  5 ; /* bits 4:0 */
    cs_uint32 auto_mdio_phy_alert_range :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 auto_mdio_rddata     : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_AUTO_AADDR_t;

#define     auto_mdio_phy_alert_range_low                 0x0
#define     auto_mdio_phy_alert_range_hi                  0x1




#define PER_MDIO_ENTAB0                          0xf00700c4
#define PER_MDIO_ENTAB0_dft                      0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot_enable0         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot_enable0         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_ENTAB0_t;





#define PER_MDIO_ENTAB1                          0xf00700c8
#define PER_MDIO_ENTAB1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 slot_enable1         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slot_enable1         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_ENTAB1_t;





#define PER_MDIO_ITAB0                           0xf00700cc
#define PER_MDIO_ITAB0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i                    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i                    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_ITAB0_t;





#define PER_MDIO_ITAB1                           0xf00700d0
#define PER_MDIO_ITAB1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i                    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i                    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_ITAB1_t;





#define PER_MDIO_IE_0                            0xf00700d4
#define PER_MDIO_IE_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 autopolle            :  1 ; /* bits 1:1 */
    cs_uint32 mdioe                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdioe                :  1 ; /* bits 0:0 */
    cs_uint32 autopolle            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_IE_0_t;





#define PER_MDIO_INT_0                           0xf00700d8
#define PER_MDIO_INT_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 autopolli            :  1 ; /* bits 1:1 */
    cs_uint32 mdioi                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdioi                :  1 ; /* bits 0:0 */
    cs_uint32 autopolli            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_INT_0_t;





#define PER_MDIO_IE_1                            0xf00700dc
#define PER_MDIO_IE_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 autopolle            :  1 ; /* bits 1:1 */
    cs_uint32 mdioe                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdioe                :  1 ; /* bits 0:0 */
    cs_uint32 autopolle            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_IE_1_t;





#define PER_MDIO_INT_1                           0xf00700e0
#define PER_MDIO_INT_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 autopolli            :  1 ; /* bits 1:1 */
    cs_uint32 mdioi                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdioi                :  1 ; /* bits 0:0 */
    cs_uint32 autopolli            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_INT_1_t;





#define PER_MDIO_STAT                            0xf00700e4
#define PER_MDIO_STAT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 autopolls            :  1 ; /* bits 1:1 */
    cs_uint32 mdios                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mdios                :  1 ; /* bits 0:0 */
    cs_uint32 autopolls            :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_MDIO_STAT_t;





#define PER_BIW_CFG                              0xf00700e8
#define PER_BIW_CFG_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 prer                 : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 core_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 core_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 prer                 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_CFG_t;

#define     core_en_DIS                                   0x0
#define     core_en_ENA                                   0x1




#define PER_BIW_CTRL                             0xf00700ec
#define PER_BIW_CTRL_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 24 ;
    cs_uint32 start                :  1 ; /* bits 7:7 */
    cs_uint32 stop                 :  1 ; /* bits 6:6 */
    cs_uint32 read                 :  1 ; /* bits 5:5 */
    cs_uint32 write                :  1 ; /* bits 4:4 */
    cs_uint32 ack_in               :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 biwdone              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biwdone              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ack_in               :  1 ; /* bits 3:3 */
    cs_uint32 write                :  1 ; /* bits 4:4 */
    cs_uint32 read                 :  1 ; /* bits 5:5 */
    cs_uint32 stop                 :  1 ; /* bits 6:6 */
    cs_uint32 start                :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd2               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_CTRL_t;





#define PER_BIW_TXR                              0xf00700f0
#define PER_BIW_TXR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 txr                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txr                  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_TXR_t;





#define PER_BIW_RXR                              0xf00700f4
#define PER_BIW_RXR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rxr                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxr                  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_RXR_t;





#define PER_BIW_ACK                              0xf00700f8
#define PER_BIW_ACK_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 ack_out              :  1 ; /* bits 2:2 */
    cs_uint32 biw_busy             :  1 ; /* bits 1:1 */
    cs_uint32 al                   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 al                   :  1 ; /* bits 0:0 */
    cs_uint32 biw_busy             :  1 ; /* bits 1:1 */
    cs_uint32 ack_out              :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_ACK_t;

#define     biw_busy_FREE                                 0x0
#define     biw_busy_BUSY                                 0x1
#define     al_OK                                         0x0
#define     al_LOST                                       0x1




#define PER_BIW_IE_0                             0xf00700fc
#define PER_BIW_IE_0_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 biwe                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biwe                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_IE_0_t;





#define PER_BIW_INT_0                            0xf0070100
#define PER_BIW_INT_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 biwi                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biwi                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_INT_0_t;





#define PER_BIW_IE_1                             0xf0070104
#define PER_BIW_IE_1_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 biwe                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biwe                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_IE_1_t;





#define PER_BIW_INT_1                            0xf0070108
#define PER_BIW_INT_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 biwi                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biwi                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_INT_1_t;





#define PER_BIW_STAT                             0xf007010c
#define PER_BIW_STAT_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 biws                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 biws                 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_BIW_STAT_t;





#define PER_UART0_CFG                            0xf0070110
#define PER_UART0_CFG_dft                        0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_CFG_t;

#define     uart_en_DIS                                   0x0
#define     uart_en_ENA                                   0x1
#define     rx_sm_enable_DIS                              0x0
#define     rx_sm_enable_ENA                              0x1
#define     tx_sm_enable_DIS                              0x0
#define     tx_sm_enable_ENA                              0x1
#define     uart_parity_en_DIS                            0x0
#define     uart_parity_en_ENA                            0x1
#define     even_parity_sel_ODD                           0x0
#define     even_parity_sel_EvEN                          0x1
#define     uart_stop_2bit_1                              0x0
#define     uart_stop_2bit_2                              0x1
#define     char_cnt_5                                    0x0
#define     char_cnt_6                                    0x1
#define     char_cnt_7                                    0x2
#define     char_cnt_8                                    0x3




#define PER_UART0_FC                             0xf0070114
#define PER_UART0_FC_dft                         0x00000588




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_FC_t;

#define     no_rts_ENA                                    0x0
#define     no_rts_DIS                                    0x1
#define     inv_rts_POS                                   0x0
#define     inv_rts_NEG                                   0x1
#define     no_cts_ENA                                    0x0
#define     no_cts_DIS                                    0x1
#define     inv_cts_POS                                   0x0
#define     inv_cts_NEG                                   0x1




#define PER_UART0_RX_SAMPLE                      0xf0070118
#define PER_UART0_RX_SAMPLE_dft                  0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_RX_SAMPLE_t;





#define PER_UART0_TUN                            0xf007011c
#define PER_UART0_TUN_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_TUN_t;

#define     tx_tune_add_FASTER                            0x0
#define     tx_tune_add_SLOWER                            0x1
#define     rx_tune_add_FASTER                            0x0
#define     rx_tune_add_SLOWER                            0x1




#define PER_UART0_TXDAT                          0xf0070120
#define PER_UART0_TXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_TXDAT_t;





#define PER_UART0_RXDAT                          0xf0070124
#define PER_UART0_RXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_RXDAT_t;





#define PER_UART0_INFO                           0xf0070128
#define PER_UART0_INFO_dft                       0x0000000a




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_INFO_t;





#define PER_UART0_IE_0                           0xf007012c
#define PER_UART0_IE_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_IE_0_t;





#define PER_UART0_IE_1                           0xf0070130
#define PER_UART0_IE_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_IE_1_t;





#define PER_UART0_INT_0                          0xf0070134
#define PER_UART0_INT_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_INT_0_t;





#define PER_UART0_INT_1                          0xf0070138
#define PER_UART0_INT_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_INT_1_t;





#define PER_UART0_STAT                           0xf007013c
#define PER_UART0_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART0_STAT_t;





#define PER_UART1_CFG                            0xf0070140
#define PER_UART1_CFG_dft                        0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_CFG_t;





#define PER_UART1_FC                             0xf0070144
#define PER_UART1_FC_dft                         0x00000588




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_FC_t;





#define PER_UART1_RX_SAMPLE                      0xf0070148
#define PER_UART1_RX_SAMPLE_dft                  0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_RX_SAMPLE_t;





#define PER_UART1_TUN                            0xf007014c
#define PER_UART1_TUN_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_TUN_t;





#define PER_UART1_TXDAT                          0xf0070150
#define PER_UART1_TXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_TXDAT_t;





#define PER_UART1_RXDAT                          0xf0070154
#define PER_UART1_RXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_RXDAT_t;





#define PER_UART1_INFO                           0xf0070158
#define PER_UART1_INFO_dft                       0x0000000a




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_INFO_t;





#define PER_UART1_IE_0                           0xf007015c
#define PER_UART1_IE_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_IE_0_t;





#define PER_UART1_IE_1                           0xf0070160
#define PER_UART1_IE_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_IE_1_t;





#define PER_UART1_INT_0                          0xf0070164
#define PER_UART1_INT_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_INT_0_t;





#define PER_UART1_INT_1                          0xf0070168
#define PER_UART1_INT_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_INT_1_t;





#define PER_UART1_STAT                           0xf007016c
#define PER_UART1_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART1_STAT_t;





#define PER_UART2_CFG                            0xf0070170
#define PER_UART2_CFG_dft                        0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_CFG_t;





#define PER_UART2_FC                             0xf0070174
#define PER_UART2_FC_dft                         0x00000588




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_FC_t;





#define PER_UART2_RX_SAMPLE                      0xf0070178
#define PER_UART2_RX_SAMPLE_dft                  0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_RX_SAMPLE_t;





#define PER_UART2_TUN                            0xf007017c
#define PER_UART2_TUN_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_TUN_t;





#define PER_UART2_TXDAT                          0xf0070180
#define PER_UART2_TXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_TXDAT_t;





#define PER_UART2_RXDAT                          0xf0070184
#define PER_UART2_RXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_RXDAT_t;





#define PER_UART2_INFO                           0xf0070188
#define PER_UART2_INFO_dft                       0x0000000a




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_INFO_t;





#define PER_UART2_IE_0                           0xf007018c
#define PER_UART2_IE_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_IE_0_t;





#define PER_UART2_IE_1                           0xf0070190
#define PER_UART2_IE_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_IE_1_t;





#define PER_UART2_INT_0                          0xf0070194
#define PER_UART2_INT_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_INT_0_t;





#define PER_UART2_INT_1                          0xf0070198
#define PER_UART2_INT_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_INT_1_t;





#define PER_UART2_STAT                           0xf007019c
#define PER_UART2_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART2_STAT_t;





#define PER_UART3_CFG                            0xf00701a0
#define PER_UART3_CFG_dft                        0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 char_cnt             :  2 ; /* bits 1:0 */
    cs_uint32 uart_stop_2bit       :  1 ; /* bits 2:2 */
    cs_uint32 even_parity_sel      :  1 ; /* bits 3:3 */
    cs_uint32 uart_parity_en       :  1 ; /* bits 4:4 */
    cs_uint32 tx_sm_enable         :  1 ; /* bits 5:5 */
    cs_uint32 rx_sm_enable         :  1 ; /* bits 6:6 */
    cs_uint32 uart_en              :  1 ; /* bits 7:7 */
    cs_uint32 baud_count           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_CFG_t;





#define PER_UART3_FC                             0xf00701a4
#define PER_UART3_FC_dft                         0x00000588




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_wm                :  6 ; /* bits 5:0 */
    cs_uint32 inv_cts              :  1 ; /* bits 6:6 */
    cs_uint32 no_cts               :  1 ; /* bits 7:7 */
    cs_uint32 cts_reg              :  1 ; /* bits 8:8 */
    cs_uint32 inv_rts              :  1 ; /* bits 9:9 */
    cs_uint32 no_rts               :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_FC_t;





#define PER_UART3_RX_SAMPLE                      0xf00701a8
#define PER_UART3_RX_SAMPLE_dft                  0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_center            : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_RX_SAMPLE_t;





#define PER_UART3_TUN                            0xf00701ac
#define PER_UART3_TUN_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fine_tune_ctl     :  8 ; /* bits 7:0 */
    cs_uint32 rx_tune_add          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 tx_fine_tune_ctl     :  8 ; /* bits 23:16 */
    cs_uint32 tx_tune_add          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_TUN_t;





#define PER_UART3_TXDAT                          0xf00701b0
#define PER_UART3_TXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_data              :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_TXDAT_t;





#define PER_UART3_RXDAT                          0xf00701b4
#define PER_UART3_RXDAT_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 23 ;
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_data_lat          :  8 ; /* bits 7:0 */
    cs_uint32 rx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               : 23 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_RXDAT_t;





#define PER_UART3_INFO                           0xf00701b8
#define PER_UART3_INFO_dft                       0x0000000a




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fifo_full         :  1 ; /* bits 0:0 */
    cs_uint32 rx_fifo_empty        :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_full         :  1 ; /* bits 2:2 */
    cs_uint32 tx_fifo_empty        :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_INFO_t;





#define PER_UART3_IE_0                           0xf00701bc
#define PER_UART3_IE_0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_IE_0_t;





#define PER_UART3_IE_1                           0xf00701c0
#define PER_UART3_IE_1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overrune     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erre         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erre       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overrune     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underrune    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptye       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptye    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_IE_1_t;





#define PER_UART3_INT_0                          0xf00701c4
#define PER_UART3_INT_0_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_INT_0_t;





#define PER_UART3_INT_1                          0xf00701c8
#define PER_UART3_INT_1_dft                      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruni     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_erri         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_erri       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruni     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruni    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptyi       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptyi    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_INT_1_t;





#define PER_UART3_STAT                           0xf00701cc
#define PER_UART3_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fifo_overruns     :  1 ; /* bits 0:0 */
    cs_uint32 rx_stop_errs         :  1 ; /* bits 1:1 */
    cs_uint32 rx_parity_errs       :  1 ; /* bits 2:2 */
    cs_uint32 rx_fifo_overruns     :  1 ; /* bits 3:3 */
    cs_uint32 rx_fifo_underruns    :  1 ; /* bits 4:4 */
    cs_uint32 tx_fifo_emptys       :  1 ; /* bits 5:5 */
    cs_uint32 rx_fifo_nonemptys    :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_UART3_STAT_t;





#define PER_GPIO0_CFG                            0xf00701d0
#define PER_GPIO0_CFG_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_CFG_t;

#define     iopmod_OUT                                    0x0
#define     iopmod_IN                                     0x1




#define PER_GPIO0_OUT                            0xf00701d4
#define PER_GPIO0_OUT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_OUT_t;





#define PER_GPIO0_IN                             0xf00701d8
#define PER_GPIO0_IN_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_IN_t;





#define PER_GPIO0_LVL                            0xf00701dc
#define PER_GPIO0_LVL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_LVL_t;

#define     level_LOW                                     0x0
#define     level_HIGH                                    0x1




#define PER_GPIO0_EDGE                           0xf00701e0
#define PER_GPIO0_EDGE_dft                       0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_EDGE_t;

#define     i_edge_LOW                                    0x0
#define     i_edge_HIGH                                   0x1




#define PER_GPIO0_IE                             0xf00701e4
#define PER_GPIO0_IE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_IE_t;





#define PER_GPIO0_INT                            0xf00701e8
#define PER_GPIO0_INT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_INT_t;





#define PER_GPIO0_STAT                           0xf00701ec
#define PER_GPIO0_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO0_STAT_t;





#define PER_GPIO1_CFG                            0xf00701f0
#define PER_GPIO1_CFG_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_CFG_t;





#define PER_GPIO1_OUT                            0xf00701f4
#define PER_GPIO1_OUT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_OUT_t;





#define PER_GPIO1_IN                             0xf00701f8
#define PER_GPIO1_IN_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_IN_t;





#define PER_GPIO1_LVL                            0xf00701fc
#define PER_GPIO1_LVL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_LVL_t;





#define PER_GPIO1_EDGE                           0xf0070200
#define PER_GPIO1_EDGE_dft                       0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_EDGE_t;





#define PER_GPIO1_IE                             0xf0070204
#define PER_GPIO1_IE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_IE_t;





#define PER_GPIO1_INT                            0xf0070208
#define PER_GPIO1_INT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_INT_t;





#define PER_GPIO1_STAT                           0xf007020c
#define PER_GPIO1_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO1_STAT_t;





#define PER_GPIO2_CFG                            0xf0070210
#define PER_GPIO2_CFG_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_CFG_t;





#define PER_GPIO2_OUT                            0xf0070214
#define PER_GPIO2_OUT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_OUT_t;





#define PER_GPIO2_IN                             0xf0070218
#define PER_GPIO2_IN_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_IN_t;





#define PER_GPIO2_LVL                            0xf007021c
#define PER_GPIO2_LVL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_LVL_t;





#define PER_GPIO2_EDGE                           0xf0070220
#define PER_GPIO2_EDGE_dft                       0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_EDGE_t;





#define PER_GPIO2_IE                             0xf0070224
#define PER_GPIO2_IE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_IE_t;





#define PER_GPIO2_INT                            0xf0070228
#define PER_GPIO2_INT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_INT_t;





#define PER_GPIO2_STAT                           0xf007022c
#define PER_GPIO2_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO2_STAT_t;





#define PER_GPIO3_CFG                            0xf0070230
#define PER_GPIO3_CFG_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_CFG_t;





#define PER_GPIO3_OUT                            0xf0070234
#define PER_GPIO3_OUT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_OUT_t;





#define PER_GPIO3_IN                             0xf0070238
#define PER_GPIO3_IN_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_IN_t;





#define PER_GPIO3_LVL                            0xf007023c
#define PER_GPIO3_LVL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_LVL_t;





#define PER_GPIO3_EDGE                           0xf0070240
#define PER_GPIO3_EDGE_dft                       0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_EDGE_t;





#define PER_GPIO3_IE                             0xf0070244
#define PER_GPIO3_IE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_IE_t;





#define PER_GPIO3_INT                            0xf0070248
#define PER_GPIO3_INT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_INT_t;





#define PER_GPIO3_STAT                           0xf007024c
#define PER_GPIO3_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO3_STAT_t;





#define PER_GPIO4_CFG                            0xf0070250
#define PER_GPIO4_CFG_dft                        0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopmod               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_CFG_t;





#define PER_GPIO4_OUT                            0xf0070254
#define PER_GPIO4_OUT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dataout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_OUT_t;





#define PER_GPIO4_IN                             0xf0070258
#define PER_GPIO4_IN_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 iopdata              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_IN_t;





#define PER_GPIO4_LVL                            0xf007025c
#define PER_GPIO4_LVL_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 level                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_LVL_t;





#define PER_GPIO4_EDGE                           0xf0070260
#define PER_GPIO4_EDGE_dft                       0xffffffff




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 i_edge               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_EDGE_t;





#define PER_GPIO4_IE                             0xf0070264
#define PER_GPIO4_IE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioe                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_IE_t;





#define PER_GPIO4_INT                            0xf0070268
#define PER_GPIO4_INT_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpioi                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_INT_t;





#define PER_GPIO4_STAT                           0xf007026c
#define PER_GPIO4_STAT_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gpios                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_GPIO4_STAT_t;





#define PER_SPI_MODE                             0xf0070270
#define PER_SPI_MODE_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cfg                  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg                  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPI_MODE_t;





#define PER_AXI_TIMEOUT                          0xf0070274
#define PER_AXI_TIMEOUT_dft                      0x000004e2




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 timeout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 timeout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_TIMEOUT_t;





#define PER_AXI_REG_CONFIG                       0xf0070278
#define PER_AXI_REG_CONFIG_dft                   0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 post_enable          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 post_enable          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_REG_CONFIG_t;





#define PER_AXI_IE_0                             0xf007027c
#define PER_AXI_IE_0_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_IE_0_t;





#define PER_AXI_INT_0                            0xf0070280
#define PER_AXI_INT_0_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_INT_0_t;





#define PER_AXI_IE_1                             0xf0070284
#define PER_AXI_IE_1_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_IE_1_t;





#define PER_AXI_INT_1                            0xf0070288
#define PER_AXI_INT_1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_AXI_INT_1_t;





#define PER_SYS_TIMER1                           0xf007028c
#define PER_SYS_TIMER1_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gtimer1              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gtimer1              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER1_t;





#define PER_SYS_TIMER0                           0xf0070290
#define PER_SYS_TIMER0_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gtimer0              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gtimer0              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER0_t;





#define PER_SYS_TIMER_COMPARATOR_CPU_01          0xf0070294
#define PER_SYS_TIMER_COMPARATOR_CPU_01_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 comp1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 comp1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_COMPARATOR_CPU_01_t;





#define PER_SYS_TIMER_COMPARATOR_CPU_00          0xf0070298
#define PER_SYS_TIMER_COMPARATOR_CPU_00_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 comp0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 comp0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_COMPARATOR_CPU_00_t;





#define PER_SYS_TIMER_AUTOINC_CPU_01             0xf007029c
#define PER_SYS_TIMER_AUTOINC_CPU_01_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 autoinc1             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 autoinc1             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_AUTOINC_CPU_01_t;





#define PER_SYS_TIMER_AUTOINC_CPU_00             0xf00702a0
#define PER_SYS_TIMER_AUTOINC_CPU_00_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 autoinc0             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 autoinc0             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_AUTOINC_CPU_00_t;





#define PER_SYS_TIMER_CPU_0_INTENABLE            0xf00702a4
#define PER_SYS_TIMER_CPU_0_INTENABLE_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 systimere            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 systimere            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_CPU_0_INTENABLE_t;





#define PER_SYS_TIMER_CPU_0_INTERRUPT            0xf00702a8
#define PER_SYS_TIMER_CPU_0_INTERRUPT_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 systimeri            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 systimeri            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_CPU_0_INTERRUPT_t;





#define PER_SYS_TIMER_COMPARATOR_CPU_11          0xf00702ac
#define PER_SYS_TIMER_COMPARATOR_CPU_11_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 comp1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 comp1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_COMPARATOR_CPU_11_t;





#define PER_SYS_TIMER_COMPARATOR_CPU_10          0xf00702b0
#define PER_SYS_TIMER_COMPARATOR_CPU_10_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 comp0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 comp0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_COMPARATOR_CPU_10_t;





#define PER_SYS_TIMER_AUTOINC_CPU_11             0xf00702b4
#define PER_SYS_TIMER_AUTOINC_CPU_11_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 autoinc1             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 autoinc1             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_AUTOINC_CPU_11_t;





#define PER_SYS_TIMER_AUTOINC_CPU_10             0xf00702b8
#define PER_SYS_TIMER_AUTOINC_CPU_10_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 autoinc0             : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 autoinc0             : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_AUTOINC_CPU_10_t;





#define PER_SYS_TIMER_CPU_1_INTENABLE            0xf00702bc
#define PER_SYS_TIMER_CPU_1_INTENABLE_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 systimere            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 systimere            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_CPU_1_INTENABLE_t;





#define PER_SYS_TIMER_CPU_1_INTERRUPT            0xf00702c0
#define PER_SYS_TIMER_CPU_1_INTERRUPT_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 systimeri            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 systimeri            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SYS_TIMER_CPU_1_INTERRUPT_t;





#define PER_PWM_TIMER_PERIOD                     0xf00702c4
#define PER_PWM_TIMER_PERIOD_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 period               : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 period               : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PWM_TIMER_PERIOD_t;





#define PER_PWM_TIMER_COMP                       0xf00702c8
#define PER_PWM_TIMER_COMP_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 comp                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 comp                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_PWM_TIMER_COMP_t;





#define PER_SPARE                                0xf00702cc
#define PER_SPARE_dft                            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 spare                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spare                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PER_SPARE_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* PER */

typedef struct {
  PER_SOFT_RESET_t                         SOFT_RESET;                    /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  PER_PERIPHERAL_INTERRUPT_0_t             PERIPHERAL_INTERRUPT_0;        /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  PER_PERIPHERAL_INTENABLE_0_t             PERIPHERAL_INTENABLE_0;        /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  PER_PERIPHERAL_INTERRUPT_1_t             PERIPHERAL_INTERRUPT_1;        /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  PER_PERIPHERAL_INTENABLE_1_t             PERIPHERAL_INTENABLE_1;        /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  PER_IRQ_SOFT1_t                          IRQ_SOFT1;                     /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  PER_IRQ_SOFT0_t                          IRQ_SOFT0;                     /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  PER_TMR_LD1_t                            TMR_LD1;                       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  PER_TMR_CTRL1_t                          TMR_CTRL1;                     /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  PER_TMR_CNT1_t                           TMR_CNT1;                      /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  PER_TMR_IE1_0_t                          TMR_IE1_0;                     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  PER_TMR_IE1_1_t                          TMR_IE1_1;                     /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  PER_TMR_INT1_0_t                         TMR_INT1_0;                    /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  PER_TMR_INT1_1_t                         TMR_INT1_1;                    /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  PER_TMR_STAT1_t                          TMR_STAT1;                     /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  PER_TMR_LD2_t                            TMR_LD2;                       /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  PER_TMR_CTRL2_t                          TMR_CTRL2;                     /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  PER_TMR_CNT2_t                           TMR_CNT2;                      /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  PER_TMR_IE2_0_t                          TMR_IE2_0;                     /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  PER_TMR_IE2_1_t                          TMR_IE2_1;                     /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  PER_TMR_INT2_0_t                         TMR_INT2_0;                    /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  PER_TMR_INT2_1_t                         TMR_INT2_1;                    /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  PER_TMR_STAT2_t                          TMR_STAT2;                     /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  PER_TMR_LOADE_t                          TMR_LOADE;                     /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  PER_TMR_TST_t                            TMR_TST;                       /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  PER_SPI_CLK_t                            SPI_CLK;                       /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  PER_SPI_CFG_t                            SPI_CFG;                       /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  PER_SPI_CTRL_t                           SPI_CTRL;                      /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  PER_SPI_CA0_t                            SPI_CA0;                       /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  PER_SPI_CA1_t                            SPI_CA1;                       /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  PER_SPI_CA2_t                            SPI_CA2;                       /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  PER_SPI_WDAT1_t                          SPI_WDAT1;                     /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  PER_SPI_WDAT0_t                          SPI_WDAT0;                     /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  PER_SPI_RDAT1_t                          SPI_RDAT1;                     /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  PER_SPI_RDAT0_t                          SPI_RDAT0;                     /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  PER_SPI_IE_0_t                           SPI_IE_0;                      /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  PER_SPI_INT_0_t                          SPI_INT_0;                     /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  PER_SPI_IE_1_t                           SPI_IE_1;                      /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  PER_SPI_INT_1_t                          SPI_INT_1;                     /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  PER_SPI_STAT_t                           SPI_STAT;                      /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  PER_MDIO_CFG_t                           MDIO_CFG;                      /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  PER_MDIO_ADDR_t                          MDIO_ADDR;                     /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  PER_MDIO_WRDATA_t                        MDIO_WRDATA;                   /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  PER_MDIO_RDDATA_t                        MDIO_RDDATA;                   /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  PER_MDIO_CTRL_t                          MDIO_CTRL;                     /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  PER_MDIO_AUTO_CFG_t                      MDIO_AUTO_CFG;                 /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  PER_MDIO_AUTO_INTV_t                     MDIO_AUTO_INTV;                /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  PER_MDIO_AUTO_RM_t                       MDIO_AUTO_RM;                  /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  PER_MDIO_AUTO_AADDR_t                    MDIO_AUTO_AADDR;               /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  PER_MDIO_ENTAB0_t                        MDIO_ENTAB0;                   /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  PER_MDIO_ENTAB1_t                        MDIO_ENTAB1;                   /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  PER_MDIO_ITAB0_t                         MDIO_ITAB0;                    /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  PER_MDIO_ITAB1_t                         MDIO_ITAB1;                    /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  PER_MDIO_IE_0_t                          MDIO_IE_0;                     /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  PER_MDIO_INT_0_t                         MDIO_INT_0;                    /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  PER_MDIO_IE_1_t                          MDIO_IE_1;                     /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  PER_MDIO_INT_1_t                         MDIO_INT_1;                    /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  PER_MDIO_STAT_t                          MDIO_STAT;                     /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  PER_BIW_CFG_t                            BIW_CFG;                       /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  PER_BIW_CTRL_t                           BIW_CTRL;                      /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  PER_BIW_TXR_t                            BIW_TXR;                       /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  PER_BIW_RXR_t                            BIW_RXR;                       /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  PER_BIW_ACK_t                            BIW_ACK;                       /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  PER_BIW_IE_0_t                           BIW_IE_0;                      /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  PER_BIW_INT_0_t                          BIW_INT_0;                     /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  PER_BIW_IE_1_t                           BIW_IE_1;                      /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  PER_BIW_INT_1_t                          BIW_INT_1;                     /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  PER_BIW_STAT_t                           BIW_STAT;                      /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  PER_UART0_CFG_t                          UART0_CFG;                     /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  PER_UART0_FC_t                           UART0_FC;                      /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  PER_UART0_RX_SAMPLE_t                    UART0_RX_SAMPLE;               /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  PER_UART0_TUN_t                          UART0_TUN;                     /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  PER_UART0_TXDAT_t                        UART0_TXDAT;                   /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  PER_UART0_RXDAT_t                        UART0_RXDAT;                   /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  PER_UART0_INFO_t                         UART0_INFO;                    /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  PER_UART0_IE_0_t                         UART0_IE_0;                    /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  PER_UART0_IE_1_t                         UART0_IE_1;                    /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  PER_UART0_INT_0_t                        UART0_INT_0;                   /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  PER_UART0_INT_1_t                        UART0_INT_1;                   /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  PER_UART0_STAT_t                         UART0_STAT;                    /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  PER_UART1_CFG_t                          UART1_CFG;                     /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  PER_UART1_FC_t                           UART1_FC;                      /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  PER_UART1_RX_SAMPLE_t                    UART1_RX_SAMPLE;               /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  PER_UART1_TUN_t                          UART1_TUN;                     /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  PER_UART1_TXDAT_t                        UART1_TXDAT;                   /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  PER_UART1_RXDAT_t                        UART1_RXDAT;                   /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  PER_UART1_INFO_t                         UART1_INFO;                    /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  PER_UART1_IE_0_t                         UART1_IE_0;                    /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  PER_UART1_IE_1_t                         UART1_IE_1;                    /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  PER_UART1_INT_0_t                        UART1_INT_0;                   /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  PER_UART1_INT_1_t                        UART1_INT_1;                   /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  PER_UART1_STAT_t                         UART1_STAT;                    /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  PER_UART2_CFG_t                          UART2_CFG;                     /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  PER_UART2_FC_t                           UART2_FC;                      /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  PER_UART2_RX_SAMPLE_t                    UART2_RX_SAMPLE;               /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  PER_UART2_TUN_t                          UART2_TUN;                     /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  PER_UART2_TXDAT_t                        UART2_TXDAT;                   /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  PER_UART2_RXDAT_t                        UART2_RXDAT;                   /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  PER_UART2_INFO_t                         UART2_INFO;                    /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  PER_UART2_IE_0_t                         UART2_IE_0;                    /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  PER_UART2_IE_1_t                         UART2_IE_1;                    /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  PER_UART2_INT_0_t                        UART2_INT_0;                   /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  PER_UART2_INT_1_t                        UART2_INT_1;                   /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  PER_UART2_STAT_t                         UART2_STAT;                    /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  PER_UART3_CFG_t                          UART3_CFG;                     /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  PER_UART3_FC_t                           UART3_FC;                      /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  PER_UART3_RX_SAMPLE_t                    UART3_RX_SAMPLE;               /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  PER_UART3_TUN_t                          UART3_TUN;                     /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  PER_UART3_TXDAT_t                        UART3_TXDAT;                   /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  PER_UART3_RXDAT_t                        UART3_RXDAT;                   /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  PER_UART3_INFO_t                         UART3_INFO;                    /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  PER_UART3_IE_0_t                         UART3_IE_0;                    /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  PER_UART3_IE_1_t                         UART3_IE_1;                    /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  PER_UART3_INT_0_t                        UART3_INT_0;                   /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  PER_UART3_INT_1_t                        UART3_INT_1;                   /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  PER_UART3_STAT_t                         UART3_STAT;                    /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  PER_GPIO0_CFG_t                          GPIO0_CFG;                     /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  PER_GPIO0_OUT_t                          GPIO0_OUT;                     /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  PER_GPIO0_IN_t                           GPIO0_IN;                      /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  PER_GPIO0_LVL_t                          GPIO0_LVL;                     /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  PER_GPIO0_EDGE_t                         GPIO0_EDGE;                    /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  PER_GPIO0_IE_t                           GPIO0_IE;                      /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  PER_GPIO0_INT_t                          GPIO0_INT;                     /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  PER_GPIO0_STAT_t                         GPIO0_STAT;                    /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  PER_GPIO1_CFG_t                          GPIO1_CFG;                     /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  PER_GPIO1_OUT_t                          GPIO1_OUT;                     /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd126[3];                  
  PER_GPIO1_IN_t                           GPIO1_IN;                      /* addr: 0x000001f8 */ 
  cs_uint32                                rsrvd127[3];                  
  PER_GPIO1_LVL_t                          GPIO1_LVL;                     /* addr: 0x000001fc */ 
  cs_uint32                                rsrvd128[3];                  
  PER_GPIO1_EDGE_t                         GPIO1_EDGE;                    /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd129[3];                  
  PER_GPIO1_IE_t                           GPIO1_IE;                      /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd130[3];                  
  PER_GPIO1_INT_t                          GPIO1_INT;                     /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd131[3];                  
  PER_GPIO1_STAT_t                         GPIO1_STAT;                    /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd132[3];                  
  PER_GPIO2_CFG_t                          GPIO2_CFG;                     /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd133[3];                  
  PER_GPIO2_OUT_t                          GPIO2_OUT;                     /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd134[3];                  
  PER_GPIO2_IN_t                           GPIO2_IN;                      /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd135[3];                  
  PER_GPIO2_LVL_t                          GPIO2_LVL;                     /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd136[3];                  
  PER_GPIO2_EDGE_t                         GPIO2_EDGE;                    /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd137[3];                  
  PER_GPIO2_IE_t                           GPIO2_IE;                      /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd138[3];                  
  PER_GPIO2_INT_t                          GPIO2_INT;                     /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd139[3];                  
  PER_GPIO2_STAT_t                         GPIO2_STAT;                    /* addr: 0x0000022c */ 
  cs_uint32                                rsrvd140[3];                  
  PER_GPIO3_CFG_t                          GPIO3_CFG;                     /* addr: 0x00000230 */ 
  cs_uint32                                rsrvd141[3];                  
  PER_GPIO3_OUT_t                          GPIO3_OUT;                     /* addr: 0x00000234 */ 
  cs_uint32                                rsrvd142[3];                  
  PER_GPIO3_IN_t                           GPIO3_IN;                      /* addr: 0x00000238 */ 
  cs_uint32                                rsrvd143[3];                  
  PER_GPIO3_LVL_t                          GPIO3_LVL;                     /* addr: 0x0000023c */ 
  cs_uint32                                rsrvd144[3];                  
  PER_GPIO3_EDGE_t                         GPIO3_EDGE;                    /* addr: 0x00000240 */ 
  cs_uint32                                rsrvd145[3];                  
  PER_GPIO3_IE_t                           GPIO3_IE;                      /* addr: 0x00000244 */ 
  cs_uint32                                rsrvd146[3];                  
  PER_GPIO3_INT_t                          GPIO3_INT;                     /* addr: 0x00000248 */ 
  cs_uint32                                rsrvd147[3];                  
  PER_GPIO3_STAT_t                         GPIO3_STAT;                    /* addr: 0x0000024c */ 
  cs_uint32                                rsrvd148[3];                  
  PER_GPIO4_CFG_t                          GPIO4_CFG;                     /* addr: 0x00000250 */ 
  cs_uint32                                rsrvd149[3];                  
  PER_GPIO4_OUT_t                          GPIO4_OUT;                     /* addr: 0x00000254 */ 
  cs_uint32                                rsrvd150[3];                  
  PER_GPIO4_IN_t                           GPIO4_IN;                      /* addr: 0x00000258 */ 
  cs_uint32                                rsrvd151[3];                  
  PER_GPIO4_LVL_t                          GPIO4_LVL;                     /* addr: 0x0000025c */ 
  cs_uint32                                rsrvd152[3];                  
  PER_GPIO4_EDGE_t                         GPIO4_EDGE;                    /* addr: 0x00000260 */ 
  cs_uint32                                rsrvd153[3];                  
  PER_GPIO4_IE_t                           GPIO4_IE;                      /* addr: 0x00000264 */ 
  cs_uint32                                rsrvd154[3];                  
  PER_GPIO4_INT_t                          GPIO4_INT;                     /* addr: 0x00000268 */ 
  cs_uint32                                rsrvd155[3];                  
  PER_GPIO4_STAT_t                         GPIO4_STAT;                    /* addr: 0x0000026c */ 
  cs_uint32                                rsrvd156[3];                  
  PER_SPI_MODE_t                           SPI_MODE;                      /* addr: 0x00000270 */ 
  cs_uint32                                rsrvd157[3];                  
  PER_AXI_TIMEOUT_t                        AXI_TIMEOUT;                   /* addr: 0x00000274 */ 
  cs_uint32                                rsrvd158[3];                  
  PER_AXI_REG_CONFIG_t                     AXI_REG_CONFIG;                /* addr: 0x00000278 */ 
  cs_uint32                                rsrvd159[3];                  
  PER_AXI_IE_0_t                           AXI_IE_0;                      /* addr: 0x0000027c */ 
  cs_uint32                                rsrvd160[3];                  
  PER_AXI_INT_0_t                          AXI_INT_0;                     /* addr: 0x00000280 */ 
  cs_uint32                                rsrvd161[3];                  
  PER_AXI_IE_1_t                           AXI_IE_1;                      /* addr: 0x00000284 */ 
  cs_uint32                                rsrvd162[3];                  
  PER_AXI_INT_1_t                          AXI_INT_1;                     /* addr: 0x00000288 */ 
  cs_uint32                                rsrvd163[3];                  
  PER_SYS_TIMER1_t                         SYS_TIMER1;                    /* addr: 0x0000028c */ 
  cs_uint32                                rsrvd164[3];                  
  PER_SYS_TIMER0_t                         SYS_TIMER0;                    /* addr: 0x00000290 */ 
  cs_uint32                                rsrvd165[3];                  
  PER_SYS_TIMER_COMPARATOR_CPU_01_t        SYS_TIMER_COMPARATOR_CPU_01;   /* addr: 0x00000294 */ 
  cs_uint32                                rsrvd166[3];                  
  PER_SYS_TIMER_COMPARATOR_CPU_00_t        SYS_TIMER_COMPARATOR_CPU_00;   /* addr: 0x00000298 */ 
  cs_uint32                                rsrvd167[3];                  
  PER_SYS_TIMER_AUTOINC_CPU_01_t           SYS_TIMER_AUTOINC_CPU_01;      /* addr: 0x0000029c */ 
  cs_uint32                                rsrvd168[3];                  
  PER_SYS_TIMER_AUTOINC_CPU_00_t           SYS_TIMER_AUTOINC_CPU_00;      /* addr: 0x000002a0 */ 
  cs_uint32                                rsrvd169[3];                  
  PER_SYS_TIMER_CPU_0_INTENABLE_t          SYS_TIMER_CPU_0_INTENABLE;     /* addr: 0x000002a4 */ 
  cs_uint32                                rsrvd170[3];                  
  PER_SYS_TIMER_CPU_0_INTERRUPT_t          SYS_TIMER_CPU_0_INTERRUPT;     /* addr: 0x000002a8 */ 
  cs_uint32                                rsrvd171[3];                  
  PER_SYS_TIMER_COMPARATOR_CPU_11_t        SYS_TIMER_COMPARATOR_CPU_11;   /* addr: 0x000002ac */ 
  cs_uint32                                rsrvd172[3];                  
  PER_SYS_TIMER_COMPARATOR_CPU_10_t        SYS_TIMER_COMPARATOR_CPU_10;   /* addr: 0x000002b0 */ 
  cs_uint32                                rsrvd173[3];                  
  PER_SYS_TIMER_AUTOINC_CPU_11_t           SYS_TIMER_AUTOINC_CPU_11;      /* addr: 0x000002b4 */ 
  cs_uint32                                rsrvd174[3];                  
  PER_SYS_TIMER_AUTOINC_CPU_10_t           SYS_TIMER_AUTOINC_CPU_10;      /* addr: 0x000002b8 */ 
  cs_uint32                                rsrvd175[3];                  
  PER_SYS_TIMER_CPU_1_INTENABLE_t          SYS_TIMER_CPU_1_INTENABLE;     /* addr: 0x000002bc */ 
  cs_uint32                                rsrvd176[3];                  
  PER_SYS_TIMER_CPU_1_INTERRUPT_t          SYS_TIMER_CPU_1_INTERRUPT;     /* addr: 0x000002c0 */ 
  cs_uint32                                rsrvd177[3];                  
  PER_PWM_TIMER_PERIOD_t                   PWM_TIMER_PERIOD;              /* addr: 0x000002c4 */ 
  cs_uint32                                rsrvd178[3];                  
  PER_PWM_TIMER_COMP_t                     PWM_TIMER_COMP;                /* addr: 0x000002c8 */ 
  cs_uint32                                rsrvd179[3];                  
  PER_SPARE_t                              SPARE;                         /* addr: 0x000002cc */ 
} PER_t;

  

/*
 * TS
 */
  
  
/*
 * T_DMA
 */
  



#define TS_T_DMA_RXDMA_CONTROL                   0xf0080000
#define TS_T_DMA_RXDMA_CONTROL_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXDMA_CONTROL_t;





#define TS_T_DMA_RXQ0_CONTROL                    0xf0080004
#define TS_T_DMA_RXQ0_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq0_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq0_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_CONTROL_t;





#define TS_T_DMA_RXQ1_CONTROL                    0xf0080008
#define TS_T_DMA_RXQ1_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq1_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq1_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_CONTROL_t;





#define TS_T_DMA_RXQ2_CONTROL                    0xf008000c
#define TS_T_DMA_RXQ2_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq2_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq2_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_CONTROL_t;





#define TS_T_DMA_RXQ3_CONTROL                    0xf0080010
#define TS_T_DMA_RXQ3_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq3_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq3_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_CONTROL_t;





#define TS_T_DMA_RXQ4_CONTROL                    0xf0080014
#define TS_T_DMA_RXQ4_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq4_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq4_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_CONTROL_t;





#define TS_T_DMA_RXQ5_CONTROL                    0xf0080018
#define TS_T_DMA_RXQ5_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_CONTROL_t;





#define TS_T_DMA_RXQ6_CONTROL                    0xf008001c
#define TS_T_DMA_RXQ6_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_CONTROL_t;





#define TS_T_DMA_RXQ7_CONTROL                    0xf0080020
#define TS_T_DMA_RXQ7_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_CONTROL_t;





#define TS_T_DMA_RXQ8_CONTROL                    0xf0080024
#define TS_T_DMA_RXQ8_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq8_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq8_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_CONTROL_t;





#define TS_T_DMA_RXQ9_CONTROL                    0xf0080028
#define TS_T_DMA_RXQ9_CONTROL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq9_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq9_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_CONTROL_t;





#define TS_T_DMA_RXQ10_CONTROL                   0xf008002c
#define TS_T_DMA_RXQ10_CONTROL_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq10_flush_en       :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq10_flush_en       :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_CONTROL_t;





#define TS_T_DMA_RXQ11_CONTROL                   0xf0080030
#define TS_T_DMA_RXQ11_CONTROL_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq11_flush_en       :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq11_flush_en       :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_CONTROL_t;





#define TS_T_DMA_RXQ0_PKTCNT_READ                0xf0080034
#define TS_T_DMA_RXQ0_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_PKTCNT_READ_t;





#define TS_T_DMA_RXQ1_PKTCNT_READ                0xf0080038
#define TS_T_DMA_RXQ1_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_PKTCNT_READ_t;





#define TS_T_DMA_RXQ2_PKTCNT_READ                0xf008003c
#define TS_T_DMA_RXQ2_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq2_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_PKTCNT_READ_t;





#define TS_T_DMA_RXQ3_PKTCNT_READ                0xf0080040
#define TS_T_DMA_RXQ3_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq3_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_PKTCNT_READ_t;





#define TS_T_DMA_RXQ4_PKTCNT_READ                0xf0080044
#define TS_T_DMA_RXQ4_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq4_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_PKTCNT_READ_t;





#define TS_T_DMA_RXQ5_PKTCNT_READ                0xf0080048
#define TS_T_DMA_RXQ5_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_PKTCNT_READ_t;





#define TS_T_DMA_RXQ6_PKTCNT_READ                0xf008004c
#define TS_T_DMA_RXQ6_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_PKTCNT_READ_t;





#define TS_T_DMA_RXQ7_PKTCNT_READ                0xf0080050
#define TS_T_DMA_RXQ7_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_PKTCNT_READ_t;





#define TS_T_DMA_RXQ8_PKTCNT_READ                0xf0080054
#define TS_T_DMA_RXQ8_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq8_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq8_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq8_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq8_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_PKTCNT_READ_t;





#define TS_T_DMA_RXQ9_PKTCNT_READ                0xf0080058
#define TS_T_DMA_RXQ9_PKTCNT_READ_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq9_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq9_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq9_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq9_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_PKTCNT_READ_t;





#define TS_T_DMA_RXQ10_PKTCNT_READ               0xf008005c
#define TS_T_DMA_RXQ10_PKTCNT_READ_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq10_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq10_msb_clr        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq10_msb_clr        :  1 ; /* bits 0:0 */
    cs_uint32 rxq10_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_PKTCNT_READ_t;





#define TS_T_DMA_RXQ11_PKTCNT_READ               0xf0080060
#define TS_T_DMA_RXQ11_PKTCNT_READ_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq11_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq11_msb_clr        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq11_msb_clr        :  1 ; /* bits 0:0 */
    cs_uint32 rxq11_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_PKTCNT_READ_t;





#define TS_T_DMA_RXQ0_BASE_DEPTH                 0xf0080064
#define TS_T_DMA_RXQ0_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_BASE_DEPTH_t;





#define TS_T_DMA_RXQ1_BASE_DEPTH                 0xf0080068
#define TS_T_DMA_RXQ1_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_BASE_DEPTH_t;





#define TS_T_DMA_RXQ2_BASE_DEPTH                 0xf008006c
#define TS_T_DMA_RXQ2_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_BASE_DEPTH_t;





#define TS_T_DMA_RXQ3_BASE_DEPTH                 0xf0080070
#define TS_T_DMA_RXQ3_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_BASE_DEPTH_t;





#define TS_T_DMA_RXQ4_BASE_DEPTH                 0xf0080074
#define TS_T_DMA_RXQ4_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_BASE_DEPTH_t;





#define TS_T_DMA_RXQ5_BASE_DEPTH                 0xf0080078
#define TS_T_DMA_RXQ5_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_BASE_DEPTH_t;





#define TS_T_DMA_RXQ6_BASE_DEPTH                 0xf008007c
#define TS_T_DMA_RXQ6_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_BASE_DEPTH_t;





#define TS_T_DMA_RXQ7_BASE_DEPTH                 0xf0080080
#define TS_T_DMA_RXQ7_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_BASE_DEPTH_t;





#define TS_T_DMA_RXQ8_BASE_DEPTH                 0xf0080084
#define TS_T_DMA_RXQ8_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_BASE_DEPTH_t;





#define TS_T_DMA_RXQ9_BASE_DEPTH                 0xf0080088
#define TS_T_DMA_RXQ9_BASE_DEPTH_dft             0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_BASE_DEPTH_t;





#define TS_T_DMA_RXQ10_BASE_DEPTH                0xf008008c
#define TS_T_DMA_RXQ10_BASE_DEPTH_dft            0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_BASE_DEPTH_t;





#define TS_T_DMA_RXQ11_BASE_DEPTH                0xf0080090
#define TS_T_DMA_RXQ11_BASE_DEPTH_dft            0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_BASE_DEPTH_t;





#define TS_T_DMA_RXQ0_WPTR                       0xf0080094
#define TS_T_DMA_RXQ0_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_WPTR_t;





#define TS_T_DMA_RXQ0_RPTR                       0xf0080098
#define TS_T_DMA_RXQ0_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_RPTR_t;





#define TS_T_DMA_RXQ1_WPTR                       0xf008009c
#define TS_T_DMA_RXQ1_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_WPTR_t;





#define TS_T_DMA_RXQ1_RPTR                       0xf00800a0
#define TS_T_DMA_RXQ1_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_RPTR_t;





#define TS_T_DMA_RXQ2_WPTR                       0xf00800a4
#define TS_T_DMA_RXQ2_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_WPTR_t;





#define TS_T_DMA_RXQ2_RPTR                       0xf00800a8
#define TS_T_DMA_RXQ2_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_RPTR_t;





#define TS_T_DMA_RXQ3_WPTR                       0xf00800ac
#define TS_T_DMA_RXQ3_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_WPTR_t;





#define TS_T_DMA_RXQ3_RPTR                       0xf00800b0
#define TS_T_DMA_RXQ3_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_RPTR_t;





#define TS_T_DMA_RXQ4_WPTR                       0xf00800b4
#define TS_T_DMA_RXQ4_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_WPTR_t;





#define TS_T_DMA_RXQ4_RPTR                       0xf00800b8
#define TS_T_DMA_RXQ4_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_RPTR_t;





#define TS_T_DMA_RXQ5_WPTR                       0xf00800bc
#define TS_T_DMA_RXQ5_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_WPTR_t;





#define TS_T_DMA_RXQ5_RPTR                       0xf00800c0
#define TS_T_DMA_RXQ5_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_RPTR_t;





#define TS_T_DMA_RXQ6_WPTR                       0xf00800c4
#define TS_T_DMA_RXQ6_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_WPTR_t;





#define TS_T_DMA_RXQ6_RPTR                       0xf00800c8
#define TS_T_DMA_RXQ6_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_RPTR_t;





#define TS_T_DMA_RXQ7_WPTR                       0xf00800cc
#define TS_T_DMA_RXQ7_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_WPTR_t;





#define TS_T_DMA_RXQ7_RPTR                       0xf00800d0
#define TS_T_DMA_RXQ7_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_RPTR_t;





#define TS_T_DMA_RXQ8_WPTR                       0xf00800d4
#define TS_T_DMA_RXQ8_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_WPTR_t;





#define TS_T_DMA_RXQ8_RPTR                       0xf00800d8
#define TS_T_DMA_RXQ8_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_RPTR_t;





#define TS_T_DMA_RXQ9_WPTR                       0xf00800dc
#define TS_T_DMA_RXQ9_WPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_WPTR_t;





#define TS_T_DMA_RXQ9_RPTR                       0xf00800e0
#define TS_T_DMA_RXQ9_RPTR_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_RPTR_t;





#define TS_T_DMA_RXQ10_WPTR                      0xf00800e4
#define TS_T_DMA_RXQ10_WPTR_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_WPTR_t;





#define TS_T_DMA_RXQ10_RPTR                      0xf00800e8
#define TS_T_DMA_RXQ10_RPTR_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_RPTR_t;





#define TS_T_DMA_RXQ11_WPTR                      0xf00800ec
#define TS_T_DMA_RXQ11_WPTR_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_WPTR_t;





#define TS_T_DMA_RXQ11_RPTR                      0xf00800f0
#define TS_T_DMA_RXQ11_RPTR_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_RPTR_t;





#define TS_T_DMA_RXQ0_FULL_THRESHOLD             0xf00800f4
#define TS_T_DMA_RXQ0_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ1_FULL_THRESHOLD             0xf00800f8
#define TS_T_DMA_RXQ1_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ2_FULL_THRESHOLD             0xf00800fc
#define TS_T_DMA_RXQ2_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ3_FULL_THRESHOLD             0xf0080100
#define TS_T_DMA_RXQ3_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ4_FULL_THRESHOLD             0xf0080104
#define TS_T_DMA_RXQ4_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ5_FULL_THRESHOLD             0xf0080108
#define TS_T_DMA_RXQ5_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ6_FULL_THRESHOLD             0xf008010c
#define TS_T_DMA_RXQ6_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ7_FULL_THRESHOLD             0xf0080110
#define TS_T_DMA_RXQ7_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ8_FULL_THRESHOLD             0xf0080114
#define TS_T_DMA_RXQ8_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ9_FULL_THRESHOLD             0xf0080118
#define TS_T_DMA_RXQ9_FULL_THRESHOLD_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ10_FULL_THRESHOLD            0xf008011c
#define TS_T_DMA_RXQ10_FULL_THRESHOLD_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ11_FULL_THRESHOLD            0xf0080120
#define TS_T_DMA_RXQ11_FULL_THRESHOLD_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_FULL_THRESHOLD_t;





#define TS_T_DMA_RXQ0_PKTCNT                     0xf0080124
#define TS_T_DMA_RXQ0_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_PKTCNT_t;





#define TS_T_DMA_RXQ1_PKTCNT                     0xf0080128
#define TS_T_DMA_RXQ1_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_PKTCNT_t;





#define TS_T_DMA_RXQ2_PKTCNT                     0xf008012c
#define TS_T_DMA_RXQ2_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_PKTCNT_t;





#define TS_T_DMA_RXQ3_PKTCNT                     0xf0080130
#define TS_T_DMA_RXQ3_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_PKTCNT_t;





#define TS_T_DMA_RXQ4_PKTCNT                     0xf0080134
#define TS_T_DMA_RXQ4_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_PKTCNT_t;





#define TS_T_DMA_RXQ5_PKTCNT                     0xf0080138
#define TS_T_DMA_RXQ5_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_PKTCNT_t;





#define TS_T_DMA_RXQ6_PKTCNT                     0xf008013c
#define TS_T_DMA_RXQ6_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_PKTCNT_t;





#define TS_T_DMA_RXQ7_PKTCNT                     0xf0080140
#define TS_T_DMA_RXQ7_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_PKTCNT_t;





#define TS_T_DMA_RXQ8_PKTCNT                     0xf0080144
#define TS_T_DMA_RXQ8_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_PKTCNT_t;





#define TS_T_DMA_RXQ9_PKTCNT                     0xf0080148
#define TS_T_DMA_RXQ9_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_PKTCNT_t;





#define TS_T_DMA_RXQ10_PKTCNT                    0xf008014c
#define TS_T_DMA_RXQ10_PKTCNT_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_PKTCNT_t;





#define TS_T_DMA_RXQ11_PKTCNT                    0xf0080150
#define TS_T_DMA_RXQ11_PKTCNT_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_PKTCNT_t;





#define TS_T_DMA_RXQ0_FULL_DROP_PKTCNT           0xf0080154
#define TS_T_DMA_RXQ0_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ1_FULL_DROP_PKTCNT           0xf0080158
#define TS_T_DMA_RXQ1_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ2_FULL_DROP_PKTCNT           0xf008015c
#define TS_T_DMA_RXQ2_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ3_FULL_DROP_PKTCNT           0xf0080160
#define TS_T_DMA_RXQ3_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ4_FULL_DROP_PKTCNT           0xf0080164
#define TS_T_DMA_RXQ4_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ5_FULL_DROP_PKTCNT           0xf0080168
#define TS_T_DMA_RXQ5_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ6_FULL_DROP_PKTCNT           0xf008016c
#define TS_T_DMA_RXQ6_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ7_FULL_DROP_PKTCNT           0xf0080170
#define TS_T_DMA_RXQ7_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ8_FULL_DROP_PKTCNT           0xf0080174
#define TS_T_DMA_RXQ8_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ9_FULL_DROP_PKTCNT           0xf0080178
#define TS_T_DMA_RXQ9_FULL_DROP_PKTCNT_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ10_FULL_DROP_PKTCNT          0xf008017c
#define TS_T_DMA_RXQ10_FULL_DROP_PKTCNT_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_RXQ11_FULL_DROP_PKTCNT          0xf0080180
#define TS_T_DMA_RXQ11_FULL_DROP_PKTCNT_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_FULL_DROP_PKTCNT_t;





#define TS_T_DMA_TS_INTERRUPT_0                  0xf0080184
#define TS_T_DMA_TS_INTERRUPT_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 RXPID5_INTERRUPTi    :  1 ; /* bits 21:21 */
    cs_uint32 RXPID4_INTERRUPTi    :  1 ; /* bits 20:20 */
    cs_uint32 RXPID3_INTERRUPTi    :  1 ; /* bits 19:19 */
    cs_uint32 RXPID2_INTERRUPTi    :  1 ; /* bits 18:18 */
    cs_uint32 RXPID1_INTERRUPTi    :  1 ; /* bits 17:17 */
    cs_uint32 RXPID0_INTERRUPTi    :  1 ; /* bits 16:16 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 15:15 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 RXQ11_INTERRUPTi     :  1 ; /* bits 12:12 */
    cs_uint32 RXQ10_INTERRUPTi     :  1 ; /* bits 11:11 */
    cs_uint32 RXQ9_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 RXQ8_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ8_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ9_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 RXQ10_INTERRUPTi     :  1 ; /* bits 11:11 */
    cs_uint32 RXQ11_INTERRUPTi     :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 15:15 */
    cs_uint32 RXPID0_INTERRUPTi    :  1 ; /* bits 16:16 */
    cs_uint32 RXPID1_INTERRUPTi    :  1 ; /* bits 17:17 */
    cs_uint32 RXPID2_INTERRUPTi    :  1 ; /* bits 18:18 */
    cs_uint32 RXPID3_INTERRUPTi    :  1 ; /* bits 19:19 */
    cs_uint32 RXPID4_INTERRUPTi    :  1 ; /* bits 20:20 */
    cs_uint32 RXPID5_INTERRUPTi    :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_TS_INTERRUPT_0_t;





#define TS_T_DMA_TS_INTENABLE_0                  0xf0080188
#define TS_T_DMA_TS_INTENABLE_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 RXPID5_INTERRUPTi_en :  1 ; /* bits 21:21 */
    cs_uint32 RXPID4_INTERRUPTi_en :  1 ; /* bits 20:20 */
    cs_uint32 RXPID3_INTERRUPTi_en :  1 ; /* bits 19:19 */
    cs_uint32 RXPID2_INTERRUPTi_en :  1 ; /* bits 18:18 */
    cs_uint32 RXPID1_INTERRUPTi_en :  1 ; /* bits 17:17 */
    cs_uint32 RXPID0_INTERRUPTi_en :  1 ; /* bits 16:16 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 15:15 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 RXQ11_INTERRUPTi_en  :  1 ; /* bits 12:12 */
    cs_uint32 RXQ10_INTERRUPTi_en  :  1 ; /* bits 11:11 */
    cs_uint32 RXQ9_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 RXQ8_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ8_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ9_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 RXQ10_INTERRUPTi_en  :  1 ; /* bits 11:11 */
    cs_uint32 RXQ11_INTERRUPTi_en  :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 15:15 */
    cs_uint32 RXPID0_INTERRUPTi_en :  1 ; /* bits 16:16 */
    cs_uint32 RXPID1_INTERRUPTi_en :  1 ; /* bits 17:17 */
    cs_uint32 RXPID2_INTERRUPTi_en :  1 ; /* bits 18:18 */
    cs_uint32 RXPID3_INTERRUPTi_en :  1 ; /* bits 19:19 */
    cs_uint32 RXPID4_INTERRUPTi_en :  1 ; /* bits 20:20 */
    cs_uint32 RXPID5_INTERRUPTi_en :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_TS_INTENABLE_0_t;





#define TS_T_DMA_TS_INTERRUPT_1                  0xf008018c
#define TS_T_DMA_TS_INTERRUPT_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 RXPID5_INTERRUPTi    :  1 ; /* bits 21:21 */
    cs_uint32 RXPID4_INTERRUPTi    :  1 ; /* bits 20:20 */
    cs_uint32 RXPID3_INTERRUPTi    :  1 ; /* bits 19:19 */
    cs_uint32 RXPID2_INTERRUPTi    :  1 ; /* bits 18:18 */
    cs_uint32 RXPID1_INTERRUPTi    :  1 ; /* bits 17:17 */
    cs_uint32 RXPID0_INTERRUPTi    :  1 ; /* bits 16:16 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 15:15 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 RXQ11_INTERRUPTi     :  1 ; /* bits 12:12 */
    cs_uint32 RXQ10_INTERRUPTi     :  1 ; /* bits 11:11 */
    cs_uint32 RXQ9_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 RXQ8_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ8_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ9_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 RXQ10_INTERRUPTi     :  1 ; /* bits 11:11 */
    cs_uint32 RXQ11_INTERRUPTi     :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 15:15 */
    cs_uint32 RXPID0_INTERRUPTi    :  1 ; /* bits 16:16 */
    cs_uint32 RXPID1_INTERRUPTi    :  1 ; /* bits 17:17 */
    cs_uint32 RXPID2_INTERRUPTi    :  1 ; /* bits 18:18 */
    cs_uint32 RXPID3_INTERRUPTi    :  1 ; /* bits 19:19 */
    cs_uint32 RXPID4_INTERRUPTi    :  1 ; /* bits 20:20 */
    cs_uint32 RXPID5_INTERRUPTi    :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_TS_INTERRUPT_1_t;





#define TS_T_DMA_TS_INTENABLE_1                  0xf0080190
#define TS_T_DMA_TS_INTENABLE_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 10 ;
    cs_uint32 RXPID5_INTERRUPTi_en :  1 ; /* bits 21:21 */
    cs_uint32 RXPID4_INTERRUPTi_en :  1 ; /* bits 20:20 */
    cs_uint32 RXPID3_INTERRUPTi_en :  1 ; /* bits 19:19 */
    cs_uint32 RXPID2_INTERRUPTi_en :  1 ; /* bits 18:18 */
    cs_uint32 RXPID1_INTERRUPTi_en :  1 ; /* bits 17:17 */
    cs_uint32 RXPID0_INTERRUPTi_en :  1 ; /* bits 16:16 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 15:15 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 RXQ11_INTERRUPTi_en  :  1 ; /* bits 12:12 */
    cs_uint32 RXQ10_INTERRUPTi_en  :  1 ; /* bits 11:11 */
    cs_uint32 RXQ9_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 RXQ8_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ8_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ9_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 RXQ10_INTERRUPTi_en  :  1 ; /* bits 11:11 */
    cs_uint32 RXQ11_INTERRUPTi_en  :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 14:14 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 15:15 */
    cs_uint32 RXPID0_INTERRUPTi_en :  1 ; /* bits 16:16 */
    cs_uint32 RXPID1_INTERRUPTi_en :  1 ; /* bits 17:17 */
    cs_uint32 RXPID2_INTERRUPTi_en :  1 ; /* bits 18:18 */
    cs_uint32 RXPID3_INTERRUPTi_en :  1 ; /* bits 19:19 */
    cs_uint32 RXPID4_INTERRUPTi_en :  1 ; /* bits 20:20 */
    cs_uint32 RXPID5_INTERRUPTi_en :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_TS_INTENABLE_1_t;





#define TS_T_DMA_DESC_INTERRUPT                  0xf0080194
#define TS_T_DMA_DESC_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_DESC_INTERRUPT_t;





#define TS_T_DMA_DESC_INTENABLE                  0xf0080198
#define TS_T_DMA_DESC_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_DESC_INTENABLE_t;





#define TS_T_DMA_RXQ0_INTERRUPT                  0xf008019c
#define TS_T_DMA_RXQ0_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_INTERRUPT_t;





#define TS_T_DMA_RXQ0_INTENABLE                  0xf00801a0
#define TS_T_DMA_RXQ0_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_INTENABLE_t;





#define TS_T_DMA_RXQ1_INTERRUPT                  0xf00801a4
#define TS_T_DMA_RXQ1_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_INTERRUPT_t;





#define TS_T_DMA_RXQ1_INTENABLE                  0xf00801a8
#define TS_T_DMA_RXQ1_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_INTENABLE_t;





#define TS_T_DMA_RXQ2_INTERRUPT                  0xf00801ac
#define TS_T_DMA_RXQ2_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq2_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq2_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_INTERRUPT_t;





#define TS_T_DMA_RXQ2_INTENABLE                  0xf00801b0
#define TS_T_DMA_RXQ2_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq2_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq2_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_INTENABLE_t;





#define TS_T_DMA_RXQ3_INTERRUPT                  0xf00801b4
#define TS_T_DMA_RXQ3_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq3_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq3_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_INTERRUPT_t;





#define TS_T_DMA_RXQ3_INTENABLE                  0xf00801b8
#define TS_T_DMA_RXQ3_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq3_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq3_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_INTENABLE_t;





#define TS_T_DMA_RXQ4_INTERRUPT                  0xf00801bc
#define TS_T_DMA_RXQ4_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq4_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq4_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_INTERRUPT_t;





#define TS_T_DMA_RXQ4_INTENABLE                  0xf00801c0
#define TS_T_DMA_RXQ4_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq4_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq4_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_INTENABLE_t;





#define TS_T_DMA_RXQ5_INTERRUPT                  0xf00801c4
#define TS_T_DMA_RXQ5_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_INTERRUPT_t;





#define TS_T_DMA_RXQ5_INTENABLE                  0xf00801c8
#define TS_T_DMA_RXQ5_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_INTENABLE_t;





#define TS_T_DMA_RXQ6_INTERRUPT                  0xf00801cc
#define TS_T_DMA_RXQ6_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_INTERRUPT_t;





#define TS_T_DMA_RXQ6_INTENABLE                  0xf00801d0
#define TS_T_DMA_RXQ6_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_INTENABLE_t;





#define TS_T_DMA_RXQ7_INTERRUPT                  0xf00801d4
#define TS_T_DMA_RXQ7_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_INTERRUPT_t;





#define TS_T_DMA_RXQ7_INTENABLE                  0xf00801d8
#define TS_T_DMA_RXQ7_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_INTENABLE_t;





#define TS_T_DMA_RXQ8_INTERRUPT                  0xf00801dc
#define TS_T_DMA_RXQ8_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq8_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq8_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq8_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq8_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq8_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq8_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq8_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq8_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq8_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq8_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq8_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq8_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_INTERRUPT_t;





#define TS_T_DMA_RXQ8_INTENABLE                  0xf00801e0
#define TS_T_DMA_RXQ8_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq8_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq8_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq8_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq8_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq8_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq8_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq8_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq8_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq8_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq8_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq8_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq8_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_INTENABLE_t;





#define TS_T_DMA_RXQ9_INTERRUPT                  0xf00801e4
#define TS_T_DMA_RXQ9_INTERRUPT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq9_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq9_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq9_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq9_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq9_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq9_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq9_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq9_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq9_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq9_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq9_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq9_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_INTERRUPT_t;





#define TS_T_DMA_RXQ9_INTENABLE                  0xf00801e8
#define TS_T_DMA_RXQ9_INTENABLE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq9_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq9_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq9_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq9_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq9_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq9_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq9_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq9_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq9_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq9_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq9_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq9_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_INTENABLE_t;





#define TS_T_DMA_RXQ10_INTERRUPT                 0xf00801ec
#define TS_T_DMA_RXQ10_INTERRUPT_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq10_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq10_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq10_cntmsb         :  1 ; /* bits 3:3 */
    cs_uint32 rxq10_overrun        :  1 ; /* bits 2:2 */
    cs_uint32 rxq10_full           :  1 ; /* bits 1:1 */
    cs_uint32 rxq10_eof            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq10_eof            :  1 ; /* bits 0:0 */
    cs_uint32 rxq10_full           :  1 ; /* bits 1:1 */
    cs_uint32 rxq10_overrun        :  1 ; /* bits 2:2 */
    cs_uint32 rxq10_cntmsb         :  1 ; /* bits 3:3 */
    cs_uint32 rxq10_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq10_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_INTERRUPT_t;





#define TS_T_DMA_RXQ10_INTENABLE                 0xf00801f0
#define TS_T_DMA_RXQ10_INTENABLE_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq10_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq10_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq10_cntmsb_en      :  1 ; /* bits 3:3 */
    cs_uint32 rxq10_overrun_en     :  1 ; /* bits 2:2 */
    cs_uint32 rxq10_full_en        :  1 ; /* bits 1:1 */
    cs_uint32 rxq10_eof_en         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq10_eof_en         :  1 ; /* bits 0:0 */
    cs_uint32 rxq10_full_en        :  1 ; /* bits 1:1 */
    cs_uint32 rxq10_overrun_en     :  1 ; /* bits 2:2 */
    cs_uint32 rxq10_cntmsb_en      :  1 ; /* bits 3:3 */
    cs_uint32 rxq10_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq10_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_INTENABLE_t;





#define TS_T_DMA_RXQ11_INTERRUPT                 0xf00801f4
#define TS_T_DMA_RXQ11_INTERRUPT_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq11_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq11_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq11_cntmsb         :  1 ; /* bits 3:3 */
    cs_uint32 rxq11_overrun        :  1 ; /* bits 2:2 */
    cs_uint32 rxq11_full           :  1 ; /* bits 1:1 */
    cs_uint32 rxq11_eof            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq11_eof            :  1 ; /* bits 0:0 */
    cs_uint32 rxq11_full           :  1 ; /* bits 1:1 */
    cs_uint32 rxq11_overrun        :  1 ; /* bits 2:2 */
    cs_uint32 rxq11_cntmsb         :  1 ; /* bits 3:3 */
    cs_uint32 rxq11_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq11_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_INTERRUPT_t;





#define TS_T_DMA_RXQ11_INTENABLE                 0xf00801f8
#define TS_T_DMA_RXQ11_INTENABLE_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq11_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq11_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq11_cntmsb_en      :  1 ; /* bits 3:3 */
    cs_uint32 rxq11_overrun_en     :  1 ; /* bits 2:2 */
    cs_uint32 rxq11_full_en        :  1 ; /* bits 1:1 */
    cs_uint32 rxq11_eof_en         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq11_eof_en         :  1 ; /* bits 0:0 */
    cs_uint32 rxq11_full_en        :  1 ; /* bits 1:1 */
    cs_uint32 rxq11_overrun_en     :  1 ; /* bits 2:2 */
    cs_uint32 rxq11_cntmsb_en      :  1 ; /* bits 3:3 */
    cs_uint32 rxq11_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq11_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_INTENABLE_t;





#define TS_T_DMA_RX_FDES_ADDR                    0xf00801fc
#define TS_T_DMA_RX_FDES_ADDR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RX_FDES_ADDR_t;





#define TS_T_DMA_RX_CDES_ADDR                    0xf0080200
#define TS_T_DMA_RX_CDES_ADDR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RX_CDES_ADDR_t;





#define TS_T_DMA_RX_DES_WORD0                    0xf0080204
#define TS_T_DMA_RX_DES_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RX_DES_WORD0_t;





#define TS_T_DMA_RX_DES_WORD1                    0xf0080208
#define TS_T_DMA_RX_DES_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RX_DES_WORD1_t;





#define TS_T_DMA_RXQ0_FRAG_BUFF_ADDR             0xf008020c
#define TS_T_DMA_RXQ0_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ0_FRAG_BUFF_SIZE             0xf0080210
#define TS_T_DMA_RXQ0_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ0_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ1_FRAG_BUFF_ADDR             0xf0080214
#define TS_T_DMA_RXQ1_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ1_FRAG_BUFF_SIZE             0xf0080218
#define TS_T_DMA_RXQ1_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ1_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ2_FRAG_BUFF_ADDR             0xf008021c
#define TS_T_DMA_RXQ2_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ2_FRAG_BUFF_SIZE             0xf0080220
#define TS_T_DMA_RXQ2_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ2_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ3_FRAG_BUFF_ADDR             0xf0080224
#define TS_T_DMA_RXQ3_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ3_FRAG_BUFF_SIZE             0xf0080228
#define TS_T_DMA_RXQ3_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ3_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ4_FRAG_BUFF_ADDR             0xf008022c
#define TS_T_DMA_RXQ4_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ4_FRAG_BUFF_SIZE             0xf0080230
#define TS_T_DMA_RXQ4_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ4_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ5_FRAG_BUFF_ADDR             0xf0080234
#define TS_T_DMA_RXQ5_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ5_FRAG_BUFF_SIZE             0xf0080238
#define TS_T_DMA_RXQ5_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ5_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ6_FRAG_BUFF_ADDR             0xf008023c
#define TS_T_DMA_RXQ6_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ6_FRAG_BUFF_SIZE             0xf0080240
#define TS_T_DMA_RXQ6_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ6_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ7_FRAG_BUFF_ADDR             0xf0080244
#define TS_T_DMA_RXQ7_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ7_FRAG_BUFF_SIZE             0xf0080248
#define TS_T_DMA_RXQ7_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ7_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ8_FRAG_BUFF_ADDR             0xf008024c
#define TS_T_DMA_RXQ8_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ8_FRAG_BUFF_SIZE             0xf0080250
#define TS_T_DMA_RXQ8_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ8_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ9_FRAG_BUFF_ADDR             0xf0080254
#define TS_T_DMA_RXQ9_FRAG_BUFF_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ9_FRAG_BUFF_SIZE             0xf0080258
#define TS_T_DMA_RXQ9_FRAG_BUFF_SIZE_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ9_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ10_FRAG_BUFF_ADDR            0xf008025c
#define TS_T_DMA_RXQ10_FRAG_BUFF_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ10_FRAG_BUFF_SIZE            0xf0080260
#define TS_T_DMA_RXQ10_FRAG_BUFF_SIZE_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ10_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_RXQ11_FRAG_BUFF_ADDR            0xf0080264
#define TS_T_DMA_RXQ11_FRAG_BUFF_ADDR_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_FRAG_BUFF_ADDR_t;





#define TS_T_DMA_RXQ11_FRAG_BUFF_SIZE            0xf0080268
#define TS_T_DMA_RXQ11_FRAG_BUFF_SIZE_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_RXQ11_FRAG_BUFF_SIZE_t;





#define TS_T_DMA_DEBUG_0                         0xf008026c
#define TS_T_DMA_DEBUG_0_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_DEBUG_0_t;





#define TS_T_DMA_DMA_SPARE_0                     0xf0080270
#define TS_T_DMA_DMA_SPARE_0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_DMA_SPARE_0_t;





#define TS_T_DMA_DMA_SPARE_1                     0xf0080274
#define TS_T_DMA_DMA_SPARE_1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_DMA_DMA_SPARE_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* T_DMA */

typedef struct {
  TS_T_DMA_RXDMA_CONTROL_t                 RXDMA_CONTROL;                 /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TS_T_DMA_RXQ0_CONTROL_t                  RXQ0_CONTROL;                  /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TS_T_DMA_RXQ1_CONTROL_t                  RXQ1_CONTROL;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TS_T_DMA_RXQ2_CONTROL_t                  RXQ2_CONTROL;                  /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TS_T_DMA_RXQ3_CONTROL_t                  RXQ3_CONTROL;                  /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TS_T_DMA_RXQ4_CONTROL_t                  RXQ4_CONTROL;                  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TS_T_DMA_RXQ5_CONTROL_t                  RXQ5_CONTROL;                  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TS_T_DMA_RXQ6_CONTROL_t                  RXQ6_CONTROL;                  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TS_T_DMA_RXQ7_CONTROL_t                  RXQ7_CONTROL;                  /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  TS_T_DMA_RXQ8_CONTROL_t                  RXQ8_CONTROL;                  /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  TS_T_DMA_RXQ9_CONTROL_t                  RXQ9_CONTROL;                  /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  TS_T_DMA_RXQ10_CONTROL_t                 RXQ10_CONTROL;                 /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  TS_T_DMA_RXQ11_CONTROL_t                 RXQ11_CONTROL;                 /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  TS_T_DMA_RXQ0_PKTCNT_READ_t              RXQ0_PKTCNT_READ;              /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  TS_T_DMA_RXQ1_PKTCNT_READ_t              RXQ1_PKTCNT_READ;              /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  TS_T_DMA_RXQ2_PKTCNT_READ_t              RXQ2_PKTCNT_READ;              /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  TS_T_DMA_RXQ3_PKTCNT_READ_t              RXQ3_PKTCNT_READ;              /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  TS_T_DMA_RXQ4_PKTCNT_READ_t              RXQ4_PKTCNT_READ;              /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  TS_T_DMA_RXQ5_PKTCNT_READ_t              RXQ5_PKTCNT_READ;              /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  TS_T_DMA_RXQ6_PKTCNT_READ_t              RXQ6_PKTCNT_READ;              /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  TS_T_DMA_RXQ7_PKTCNT_READ_t              RXQ7_PKTCNT_READ;              /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  TS_T_DMA_RXQ8_PKTCNT_READ_t              RXQ8_PKTCNT_READ;              /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  TS_T_DMA_RXQ9_PKTCNT_READ_t              RXQ9_PKTCNT_READ;              /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  TS_T_DMA_RXQ10_PKTCNT_READ_t             RXQ10_PKTCNT_READ;             /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  TS_T_DMA_RXQ11_PKTCNT_READ_t             RXQ11_PKTCNT_READ;             /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  TS_T_DMA_RXQ0_BASE_DEPTH_t               RXQ0_BASE_DEPTH;               /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  TS_T_DMA_RXQ1_BASE_DEPTH_t               RXQ1_BASE_DEPTH;               /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  TS_T_DMA_RXQ2_BASE_DEPTH_t               RXQ2_BASE_DEPTH;               /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  TS_T_DMA_RXQ3_BASE_DEPTH_t               RXQ3_BASE_DEPTH;               /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  TS_T_DMA_RXQ4_BASE_DEPTH_t               RXQ4_BASE_DEPTH;               /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  TS_T_DMA_RXQ5_BASE_DEPTH_t               RXQ5_BASE_DEPTH;               /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  TS_T_DMA_RXQ6_BASE_DEPTH_t               RXQ6_BASE_DEPTH;               /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  TS_T_DMA_RXQ7_BASE_DEPTH_t               RXQ7_BASE_DEPTH;               /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  TS_T_DMA_RXQ8_BASE_DEPTH_t               RXQ8_BASE_DEPTH;               /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  TS_T_DMA_RXQ9_BASE_DEPTH_t               RXQ9_BASE_DEPTH;               /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  TS_T_DMA_RXQ10_BASE_DEPTH_t              RXQ10_BASE_DEPTH;              /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  TS_T_DMA_RXQ11_BASE_DEPTH_t              RXQ11_BASE_DEPTH;              /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  TS_T_DMA_RXQ0_WPTR_t                     RXQ0_WPTR;                     /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  TS_T_DMA_RXQ0_RPTR_t                     RXQ0_RPTR;                     /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  TS_T_DMA_RXQ1_WPTR_t                     RXQ1_WPTR;                     /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  TS_T_DMA_RXQ1_RPTR_t                     RXQ1_RPTR;                     /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  TS_T_DMA_RXQ2_WPTR_t                     RXQ2_WPTR;                     /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  TS_T_DMA_RXQ2_RPTR_t                     RXQ2_RPTR;                     /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  TS_T_DMA_RXQ3_WPTR_t                     RXQ3_WPTR;                     /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  TS_T_DMA_RXQ3_RPTR_t                     RXQ3_RPTR;                     /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  TS_T_DMA_RXQ4_WPTR_t                     RXQ4_WPTR;                     /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  TS_T_DMA_RXQ4_RPTR_t                     RXQ4_RPTR;                     /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  TS_T_DMA_RXQ5_WPTR_t                     RXQ5_WPTR;                     /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  TS_T_DMA_RXQ5_RPTR_t                     RXQ5_RPTR;                     /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  TS_T_DMA_RXQ6_WPTR_t                     RXQ6_WPTR;                     /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  TS_T_DMA_RXQ6_RPTR_t                     RXQ6_RPTR;                     /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  TS_T_DMA_RXQ7_WPTR_t                     RXQ7_WPTR;                     /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  TS_T_DMA_RXQ7_RPTR_t                     RXQ7_RPTR;                     /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  TS_T_DMA_RXQ8_WPTR_t                     RXQ8_WPTR;                     /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  TS_T_DMA_RXQ8_RPTR_t                     RXQ8_RPTR;                     /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  TS_T_DMA_RXQ9_WPTR_t                     RXQ9_WPTR;                     /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  TS_T_DMA_RXQ9_RPTR_t                     RXQ9_RPTR;                     /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  TS_T_DMA_RXQ10_WPTR_t                    RXQ10_WPTR;                    /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  TS_T_DMA_RXQ10_RPTR_t                    RXQ10_RPTR;                    /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  TS_T_DMA_RXQ11_WPTR_t                    RXQ11_WPTR;                    /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  TS_T_DMA_RXQ11_RPTR_t                    RXQ11_RPTR;                    /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  TS_T_DMA_RXQ0_FULL_THRESHOLD_t           RXQ0_FULL_THRESHOLD;           /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  TS_T_DMA_RXQ1_FULL_THRESHOLD_t           RXQ1_FULL_THRESHOLD;           /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  TS_T_DMA_RXQ2_FULL_THRESHOLD_t           RXQ2_FULL_THRESHOLD;           /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  TS_T_DMA_RXQ3_FULL_THRESHOLD_t           RXQ3_FULL_THRESHOLD;           /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  TS_T_DMA_RXQ4_FULL_THRESHOLD_t           RXQ4_FULL_THRESHOLD;           /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  TS_T_DMA_RXQ5_FULL_THRESHOLD_t           RXQ5_FULL_THRESHOLD;           /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  TS_T_DMA_RXQ6_FULL_THRESHOLD_t           RXQ6_FULL_THRESHOLD;           /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  TS_T_DMA_RXQ7_FULL_THRESHOLD_t           RXQ7_FULL_THRESHOLD;           /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  TS_T_DMA_RXQ8_FULL_THRESHOLD_t           RXQ8_FULL_THRESHOLD;           /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  TS_T_DMA_RXQ9_FULL_THRESHOLD_t           RXQ9_FULL_THRESHOLD;           /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  TS_T_DMA_RXQ10_FULL_THRESHOLD_t          RXQ10_FULL_THRESHOLD;          /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  TS_T_DMA_RXQ11_FULL_THRESHOLD_t          RXQ11_FULL_THRESHOLD;          /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  TS_T_DMA_RXQ0_PKTCNT_t                   RXQ0_PKTCNT;                   /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  TS_T_DMA_RXQ1_PKTCNT_t                   RXQ1_PKTCNT;                   /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  TS_T_DMA_RXQ2_PKTCNT_t                   RXQ2_PKTCNT;                   /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  TS_T_DMA_RXQ3_PKTCNT_t                   RXQ3_PKTCNT;                   /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  TS_T_DMA_RXQ4_PKTCNT_t                   RXQ4_PKTCNT;                   /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  TS_T_DMA_RXQ5_PKTCNT_t                   RXQ5_PKTCNT;                   /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  TS_T_DMA_RXQ6_PKTCNT_t                   RXQ6_PKTCNT;                   /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  TS_T_DMA_RXQ7_PKTCNT_t                   RXQ7_PKTCNT;                   /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  TS_T_DMA_RXQ8_PKTCNT_t                   RXQ8_PKTCNT;                   /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  TS_T_DMA_RXQ9_PKTCNT_t                   RXQ9_PKTCNT;                   /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  TS_T_DMA_RXQ10_PKTCNT_t                  RXQ10_PKTCNT;                  /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  TS_T_DMA_RXQ11_PKTCNT_t                  RXQ11_PKTCNT;                  /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  TS_T_DMA_RXQ0_FULL_DROP_PKTCNT_t         RXQ0_FULL_DROP_PKTCNT;         /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  TS_T_DMA_RXQ1_FULL_DROP_PKTCNT_t         RXQ1_FULL_DROP_PKTCNT;         /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  TS_T_DMA_RXQ2_FULL_DROP_PKTCNT_t         RXQ2_FULL_DROP_PKTCNT;         /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  TS_T_DMA_RXQ3_FULL_DROP_PKTCNT_t         RXQ3_FULL_DROP_PKTCNT;         /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  TS_T_DMA_RXQ4_FULL_DROP_PKTCNT_t         RXQ4_FULL_DROP_PKTCNT;         /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  TS_T_DMA_RXQ5_FULL_DROP_PKTCNT_t         RXQ5_FULL_DROP_PKTCNT;         /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  TS_T_DMA_RXQ6_FULL_DROP_PKTCNT_t         RXQ6_FULL_DROP_PKTCNT;         /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  TS_T_DMA_RXQ7_FULL_DROP_PKTCNT_t         RXQ7_FULL_DROP_PKTCNT;         /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  TS_T_DMA_RXQ8_FULL_DROP_PKTCNT_t         RXQ8_FULL_DROP_PKTCNT;         /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  TS_T_DMA_RXQ9_FULL_DROP_PKTCNT_t         RXQ9_FULL_DROP_PKTCNT;         /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  TS_T_DMA_RXQ10_FULL_DROP_PKTCNT_t        RXQ10_FULL_DROP_PKTCNT;        /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  TS_T_DMA_RXQ11_FULL_DROP_PKTCNT_t        RXQ11_FULL_DROP_PKTCNT;        /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  TS_T_DMA_TS_INTERRUPT_0_t                TS_INTERRUPT_0;                /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  TS_T_DMA_TS_INTENABLE_0_t                TS_INTENABLE_0;                /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  TS_T_DMA_TS_INTERRUPT_1_t                TS_INTERRUPT_1;                /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  TS_T_DMA_TS_INTENABLE_1_t                TS_INTENABLE_1;                /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  TS_T_DMA_DESC_INTERRUPT_t                DESC_INTERRUPT;                /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  TS_T_DMA_DESC_INTENABLE_t                DESC_INTENABLE;                /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  TS_T_DMA_RXQ0_INTERRUPT_t                RXQ0_INTERRUPT;                /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  TS_T_DMA_RXQ0_INTENABLE_t                RXQ0_INTENABLE;                /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  TS_T_DMA_RXQ1_INTERRUPT_t                RXQ1_INTERRUPT;                /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  TS_T_DMA_RXQ1_INTENABLE_t                RXQ1_INTENABLE;                /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  TS_T_DMA_RXQ2_INTERRUPT_t                RXQ2_INTERRUPT;                /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  TS_T_DMA_RXQ2_INTENABLE_t                RXQ2_INTENABLE;                /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  TS_T_DMA_RXQ3_INTERRUPT_t                RXQ3_INTERRUPT;                /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  TS_T_DMA_RXQ3_INTENABLE_t                RXQ3_INTENABLE;                /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  TS_T_DMA_RXQ4_INTERRUPT_t                RXQ4_INTERRUPT;                /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  TS_T_DMA_RXQ4_INTENABLE_t                RXQ4_INTENABLE;                /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  TS_T_DMA_RXQ5_INTERRUPT_t                RXQ5_INTERRUPT;                /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  TS_T_DMA_RXQ5_INTENABLE_t                RXQ5_INTENABLE;                /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  TS_T_DMA_RXQ6_INTERRUPT_t                RXQ6_INTERRUPT;                /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  TS_T_DMA_RXQ6_INTENABLE_t                RXQ6_INTENABLE;                /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  TS_T_DMA_RXQ7_INTERRUPT_t                RXQ7_INTERRUPT;                /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  TS_T_DMA_RXQ7_INTENABLE_t                RXQ7_INTENABLE;                /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  TS_T_DMA_RXQ8_INTERRUPT_t                RXQ8_INTERRUPT;                /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  TS_T_DMA_RXQ8_INTENABLE_t                RXQ8_INTENABLE;                /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  TS_T_DMA_RXQ9_INTERRUPT_t                RXQ9_INTERRUPT;                /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  TS_T_DMA_RXQ9_INTENABLE_t                RXQ9_INTENABLE;                /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  TS_T_DMA_RXQ10_INTERRUPT_t               RXQ10_INTERRUPT;               /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  TS_T_DMA_RXQ10_INTENABLE_t               RXQ10_INTENABLE;               /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  TS_T_DMA_RXQ11_INTERRUPT_t               RXQ11_INTERRUPT;               /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd126[3];                  
  TS_T_DMA_RXQ11_INTENABLE_t               RXQ11_INTENABLE;               /* addr: 0x000001f8 */ 
  cs_uint32                                rsrvd127[3];                  
  TS_T_DMA_RX_FDES_ADDR_t                  RX_FDES_ADDR;                  /* addr: 0x000001fc */ 
  cs_uint32                                rsrvd128[3];                  
  TS_T_DMA_RX_CDES_ADDR_t                  RX_CDES_ADDR;                  /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd129[3];                  
  TS_T_DMA_RX_DES_WORD0_t                  RX_DES_WORD0;                  /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd130[3];                  
  TS_T_DMA_RX_DES_WORD1_t                  RX_DES_WORD1;                  /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd131[3];                  
  TS_T_DMA_RXQ0_FRAG_BUFF_ADDR_t           RXQ0_FRAG_BUFF_ADDR;           /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd132[3];                  
  TS_T_DMA_RXQ0_FRAG_BUFF_SIZE_t           RXQ0_FRAG_BUFF_SIZE;           /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd133[3];                  
  TS_T_DMA_RXQ1_FRAG_BUFF_ADDR_t           RXQ1_FRAG_BUFF_ADDR;           /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd134[3];                  
  TS_T_DMA_RXQ1_FRAG_BUFF_SIZE_t           RXQ1_FRAG_BUFF_SIZE;           /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd135[3];                  
  TS_T_DMA_RXQ2_FRAG_BUFF_ADDR_t           RXQ2_FRAG_BUFF_ADDR;           /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd136[3];                  
  TS_T_DMA_RXQ2_FRAG_BUFF_SIZE_t           RXQ2_FRAG_BUFF_SIZE;           /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd137[3];                  
  TS_T_DMA_RXQ3_FRAG_BUFF_ADDR_t           RXQ3_FRAG_BUFF_ADDR;           /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd138[3];                  
  TS_T_DMA_RXQ3_FRAG_BUFF_SIZE_t           RXQ3_FRAG_BUFF_SIZE;           /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd139[3];                  
  TS_T_DMA_RXQ4_FRAG_BUFF_ADDR_t           RXQ4_FRAG_BUFF_ADDR;           /* addr: 0x0000022c */ 
  cs_uint32                                rsrvd140[3];                  
  TS_T_DMA_RXQ4_FRAG_BUFF_SIZE_t           RXQ4_FRAG_BUFF_SIZE;           /* addr: 0x00000230 */ 
  cs_uint32                                rsrvd141[3];                  
  TS_T_DMA_RXQ5_FRAG_BUFF_ADDR_t           RXQ5_FRAG_BUFF_ADDR;           /* addr: 0x00000234 */ 
  cs_uint32                                rsrvd142[3];                  
  TS_T_DMA_RXQ5_FRAG_BUFF_SIZE_t           RXQ5_FRAG_BUFF_SIZE;           /* addr: 0x00000238 */ 
  cs_uint32                                rsrvd143[3];                  
  TS_T_DMA_RXQ6_FRAG_BUFF_ADDR_t           RXQ6_FRAG_BUFF_ADDR;           /* addr: 0x0000023c */ 
  cs_uint32                                rsrvd144[3];                  
  TS_T_DMA_RXQ6_FRAG_BUFF_SIZE_t           RXQ6_FRAG_BUFF_SIZE;           /* addr: 0x00000240 */ 
  cs_uint32                                rsrvd145[3];                  
  TS_T_DMA_RXQ7_FRAG_BUFF_ADDR_t           RXQ7_FRAG_BUFF_ADDR;           /* addr: 0x00000244 */ 
  cs_uint32                                rsrvd146[3];                  
  TS_T_DMA_RXQ7_FRAG_BUFF_SIZE_t           RXQ7_FRAG_BUFF_SIZE;           /* addr: 0x00000248 */ 
  cs_uint32                                rsrvd147[3];                  
  TS_T_DMA_RXQ8_FRAG_BUFF_ADDR_t           RXQ8_FRAG_BUFF_ADDR;           /* addr: 0x0000024c */ 
  cs_uint32                                rsrvd148[3];                  
  TS_T_DMA_RXQ8_FRAG_BUFF_SIZE_t           RXQ8_FRAG_BUFF_SIZE;           /* addr: 0x00000250 */ 
  cs_uint32                                rsrvd149[3];                  
  TS_T_DMA_RXQ9_FRAG_BUFF_ADDR_t           RXQ9_FRAG_BUFF_ADDR;           /* addr: 0x00000254 */ 
  cs_uint32                                rsrvd150[3];                  
  TS_T_DMA_RXQ9_FRAG_BUFF_SIZE_t           RXQ9_FRAG_BUFF_SIZE;           /* addr: 0x00000258 */ 
  cs_uint32                                rsrvd151[3];                  
  TS_T_DMA_RXQ10_FRAG_BUFF_ADDR_t          RXQ10_FRAG_BUFF_ADDR;          /* addr: 0x0000025c */ 
  cs_uint32                                rsrvd152[3];                  
  TS_T_DMA_RXQ10_FRAG_BUFF_SIZE_t          RXQ10_FRAG_BUFF_SIZE;          /* addr: 0x00000260 */ 
  cs_uint32                                rsrvd153[3];                  
  TS_T_DMA_RXQ11_FRAG_BUFF_ADDR_t          RXQ11_FRAG_BUFF_ADDR;          /* addr: 0x00000264 */ 
  cs_uint32                                rsrvd154[3];                  
  TS_T_DMA_RXQ11_FRAG_BUFF_SIZE_t          RXQ11_FRAG_BUFF_SIZE;          /* addr: 0x00000268 */ 
  cs_uint32                                rsrvd155[3];                  
  TS_T_DMA_DEBUG_0_t                       DEBUG_0;                       /* addr: 0x0000026c */ 
  cs_uint32                                rsrvd156[3];                  
  TS_T_DMA_DMA_SPARE_0_t                   DMA_SPARE_0;                   /* addr: 0x00000270 */ 
  cs_uint32                                rsrvd157[3];                  
  TS_T_DMA_DMA_SPARE_1_t                   DMA_SPARE_1;                   /* addr: 0x00000274 */ 
} TS_T_DMA_t;

  

/*
 * T_AXI
 */
  



#define TS_T_AXI_CONFIG                          0xf0080300
#define TS_T_AXI_CONFIG_dft                      0x000000c0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_CONFIG_t;





#define TS_T_AXI_READ_ARB_ID                     0xf0080304
#define TS_T_AXI_READ_ARB_ID_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_READ_ARB_ID_t;





#define TS_T_AXI_WRITE_ARB_ID                    0xf0080308
#define TS_T_AXI_WRITE_ARB_ID_dft                0x00000004




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_ARB_ID_t;





#define TS_T_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT    0xf008030c
#define TS_T_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_dft 0x00001010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 axi_wchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t;





#define TS_T_AXI_RWID_VALUE                      0xf0080310
#define TS_T_AXI_RWID_VALUE_dft                  0x00000021




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_RWID_VALUE_t;





#define TS_T_AXI_READ_TIMEOUT_THRESHOLD          0xf0080314
#define TS_T_AXI_READ_TIMEOUT_THRESHOLD_dft      0x80000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 rsrvd1               : 28 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_READ_TIMEOUT_THRESHOLD_t;





#define TS_T_AXI_WRITE_TIMEOUT_THRESHOLD         0xf0080318
#define TS_T_AXI_WRITE_TIMEOUT_THRESHOLD_dft     0x88000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd1               : 24 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_TIMEOUT_THRESHOLD_t;





#define TS_T_AXI_READ_CHANNEL000_INTERRUPT       0xf008031c
#define TS_T_AXI_READ_CHANNEL000_INTERRUPT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_READ_CHANNEL000_INTERRUPT_t;





#define TS_T_AXI_WRITE_CHANNEL000_INTERRUPT      0xf0080320
#define TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_t;





#define TS_T_AXI_WRITE_CHANNEL001_INTERRUPT      0xf0080324
#define TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_t;





#define TS_T_AXI_READ_CHANNEL000_INTERRUPT_ENABLE 0xf0080328
#define TS_T_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t;





#define TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE 0xf008032c
#define TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t;





#define TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE 0xf0080330
#define TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t;





#define TS_T_AXI_RESERVED                        0xf0080334
#define TS_T_AXI_RESERVED_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_T_AXI_RESERVED_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* T_AXI */

typedef struct {
  TS_T_AXI_CONFIG_t                        CONFIG;                        /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TS_T_AXI_READ_ARB_ID_t                   READ_ARB_ID;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TS_T_AXI_WRITE_ARB_ID_t                  WRITE_ARB_ID;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TS_T_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t  WRITE_CHANNEL_0_3_DRR_WEIGHT;  /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TS_T_AXI_RWID_VALUE_t                    RWID_VALUE;                    /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TS_T_AXI_READ_TIMEOUT_THRESHOLD_t        READ_TIMEOUT_THRESHOLD;        /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TS_T_AXI_WRITE_TIMEOUT_THRESHOLD_t       WRITE_TIMEOUT_THRESHOLD;       /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TS_T_AXI_READ_CHANNEL000_INTERRUPT_t     READ_CHANNEL000_INTERRUPT;     /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_t    WRITE_CHANNEL000_INTERRUPT;    /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_t    WRITE_CHANNEL001_INTERRUPT;    /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  TS_T_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t READ_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  TS_T_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t WRITE_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  TS_T_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t WRITE_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  TS_T_AXI_RESERVED_t                      RESERVED;                      /* addr: 0x00000034 */ 
} TS_T_AXI_t;

  

/*
 * RXPID[0..5]
 */
  



#define TS_RXPID_CONTROL                         0xf0080400
#define TS_RXPID_CONTROL_dft                     0x00bc004c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 rx_packet_len        :  9 ; /* bits 24:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 default_qid          :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 continuous_mode      :  1 ; /* bits 6:6 */
    cs_uint32 data_mode            :  1 ; /* bits 5:5 */
    cs_uint32 endian_dir           :  1 ; /* bits 4:4 */
    cs_uint32 bit_dir              :  1 ; /* bits 3:3 */
    cs_uint32 start_pulse          :  1 ; /* bits 2:2 */
    cs_uint32 pid_enable           :  1 ; /* bits 1:1 */
    cs_uint32 rx_enable            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_enable            :  1 ; /* bits 0:0 */
    cs_uint32 pid_enable           :  1 ; /* bits 1:1 */
    cs_uint32 start_pulse          :  1 ; /* bits 2:2 */
    cs_uint32 bit_dir              :  1 ; /* bits 3:3 */
    cs_uint32 endian_dir           :  1 ; /* bits 4:4 */
    cs_uint32 data_mode            :  1 ; /* bits 5:5 */
    cs_uint32 continuous_mode      :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 default_qid          :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 rx_packet_len        :  9 ; /* bits 24:16 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_CONTROL_t;





#define TS_RXPID_SYNC                            0xf0080404
#define TS_RXPID_SYNC_dft                        0x01000047




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 sync_byte2_en        :  1 ; /* bits 26:26 */
    cs_uint32 sync_byte1_en        :  1 ; /* bits 25:25 */
    cs_uint32 sync_byte0_en        :  1 ; /* bits 24:24 */
    cs_uint32 sync_byte2           :  8 ; /* bits 23:16 */
    cs_uint32 sync_byte1           :  8 ; /* bits 15:8 */
    cs_uint32 sync_byte0           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sync_byte0           :  8 ; /* bits 7:0 */
    cs_uint32 sync_byte1           :  8 ; /* bits 15:8 */
    cs_uint32 sync_byte2           :  8 ; /* bits 23:16 */
    cs_uint32 sync_byte0_en        :  1 ; /* bits 24:24 */
    cs_uint32 sync_byte1_en        :  1 ; /* bits 25:25 */
    cs_uint32 sync_byte2_en        :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_SYNC_t;





#define TS_RXPID_RXBUF_SIZE                      0xf0080408
#define TS_RXPID_RXBUF_SIZE_dft                  0x00000018




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 entry_num            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 entry_num            :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_RXBUF_SIZE_t;





#define TS_RXPID_CNT_READ                        0xf008040c
#define TS_RXPID_CNT_READ_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 clock_msb_clr        :  1 ; /* bits 4:4 */
    cs_uint32 frame_msb_clr        :  1 ; /* bits 3:3 */
    cs_uint32 buffer_full_drop_msb_clr :  1 ; /* bits 2:2 */
    cs_uint32 pid_unmatch_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 good_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 good_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 pid_unmatch_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 buffer_full_drop_msb_clr :  1 ; /* bits 2:2 */
    cs_uint32 frame_msb_clr        :  1 ; /* bits 3:3 */
    cs_uint32 clock_msb_clr        :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_CNT_READ_t;





#define TS_RXPID_DATA_TIMEOUT_RELOAD             0xf0080410
#define TS_RXPID_DATA_TIMEOUT_RELOAD_dft         0x09896800




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 value                : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 value                : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_DATA_TIMEOUT_RELOAD_t;





#define TS_RXPID_DATA_TIMEOUT_TIMER              0xf0080414
#define TS_RXPID_DATA_TIMEOUT_TIMER_dft          0x09896800




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 value                : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 value                : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_DATA_TIMEOUT_TIMER_t;





#define TS_RXPID_GOOD_PKTCNT                     0xf0080418
#define TS_RXPID_GOOD_PKTCNT_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 couter               : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 couter               : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_GOOD_PKTCNT_t;





#define TS_RXPID_PID_UNMATCH_DROP_PKTCNT         0xf008041c
#define TS_RXPID_PID_UNMATCH_DROP_PKTCNT_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 counter              : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_PID_UNMATCH_DROP_PKTCNT_t;





#define TS_RXPID_BUFFER_FULL_DROP_PKTCNT         0xf0080420
#define TS_RXPID_BUFFER_FULL_DROP_PKTCNT_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 counter              : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_BUFFER_FULL_DROP_PKTCNT_t;





#define TS_RXPID_FRAME_CNT                       0xf0080424
#define TS_RXPID_FRAME_CNT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 counter              : 28 ; /* bits 27:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 28 ; /* bits 27:0 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_FRAME_CNT_t;





#define TS_RXPID_CLOCK_CNT                       0xf0080428
#define TS_RXPID_CLOCK_CNT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 counter              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_CLOCK_CNT_t;





#define TS_RXPID_ENTRY0_WORD0                    0xf008042c
#define TS_RXPID_ENTRY0_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY0_WORD0_t;





#define TS_RXPID_ENTRY0_WORD1                    0xf0080430
#define TS_RXPID_ENTRY0_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY0_WORD1_t;





#define TS_RXPID_ENTRY1_WORD0                    0xf0080434
#define TS_RXPID_ENTRY1_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY1_WORD0_t;





#define TS_RXPID_ENTRY1_WORD1                    0xf0080438
#define TS_RXPID_ENTRY1_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY1_WORD1_t;





#define TS_RXPID_ENTRY2_WORD0                    0xf008043c
#define TS_RXPID_ENTRY2_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY2_WORD0_t;





#define TS_RXPID_ENTRY2_WORD1                    0xf0080440
#define TS_RXPID_ENTRY2_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY2_WORD1_t;





#define TS_RXPID_ENTRY3_WORD0                    0xf0080444
#define TS_RXPID_ENTRY3_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY3_WORD0_t;





#define TS_RXPID_ENTRY3_WORD1                    0xf0080448
#define TS_RXPID_ENTRY3_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY3_WORD1_t;





#define TS_RXPID_ENTRY4_WORD0                    0xf008044c
#define TS_RXPID_ENTRY4_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY4_WORD0_t;





#define TS_RXPID_ENTRY4_WORD1                    0xf0080450
#define TS_RXPID_ENTRY4_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY4_WORD1_t;





#define TS_RXPID_ENTRY5_WORD0                    0xf0080454
#define TS_RXPID_ENTRY5_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY5_WORD0_t;





#define TS_RXPID_ENTRY5_WORD1                    0xf0080458
#define TS_RXPID_ENTRY5_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY5_WORD1_t;





#define TS_RXPID_ENTRY6_WORD0                    0xf008045c
#define TS_RXPID_ENTRY6_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY6_WORD0_t;





#define TS_RXPID_ENTRY6_WORD1                    0xf0080460
#define TS_RXPID_ENTRY6_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY6_WORD1_t;





#define TS_RXPID_ENTRY7_WORD0                    0xf0080464
#define TS_RXPID_ENTRY7_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY7_WORD0_t;





#define TS_RXPID_ENTRY7_WORD1                    0xf0080468
#define TS_RXPID_ENTRY7_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY7_WORD1_t;





#define TS_RXPID_ENTRY8_WORD0                    0xf008046c
#define TS_RXPID_ENTRY8_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY8_WORD0_t;





#define TS_RXPID_ENTRY8_WORD1                    0xf0080470
#define TS_RXPID_ENTRY8_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY8_WORD1_t;





#define TS_RXPID_ENTRY9_WORD0                    0xf0080474
#define TS_RXPID_ENTRY9_WORD0_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY9_WORD0_t;





#define TS_RXPID_ENTRY9_WORD1                    0xf0080478
#define TS_RXPID_ENTRY9_WORD1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY9_WORD1_t;





#define TS_RXPID_ENTRY10_WORD0                   0xf008047c
#define TS_RXPID_ENTRY10_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY10_WORD0_t;





#define TS_RXPID_ENTRY10_WORD1                   0xf0080480
#define TS_RXPID_ENTRY10_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY10_WORD1_t;





#define TS_RXPID_ENTRY11_WORD0                   0xf0080484
#define TS_RXPID_ENTRY11_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY11_WORD0_t;





#define TS_RXPID_ENTRY11_WORD1                   0xf0080488
#define TS_RXPID_ENTRY11_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY11_WORD1_t;





#define TS_RXPID_ENTRY12_WORD0                   0xf008048c
#define TS_RXPID_ENTRY12_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY12_WORD0_t;





#define TS_RXPID_ENTRY12_WORD1                   0xf0080490
#define TS_RXPID_ENTRY12_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY12_WORD1_t;





#define TS_RXPID_ENTRY13_WORD0                   0xf0080494
#define TS_RXPID_ENTRY13_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY13_WORD0_t;





#define TS_RXPID_ENTRY13_WORD1                   0xf0080498
#define TS_RXPID_ENTRY13_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY13_WORD1_t;





#define TS_RXPID_ENTRY14_WORD0                   0xf008049c
#define TS_RXPID_ENTRY14_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY14_WORD0_t;





#define TS_RXPID_ENTRY14_WORD1                   0xf00804a0
#define TS_RXPID_ENTRY14_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY14_WORD1_t;





#define TS_RXPID_ENTRY15_WORD0                   0xf00804a4
#define TS_RXPID_ENTRY15_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY15_WORD0_t;





#define TS_RXPID_ENTRY15_WORD1                   0xf00804a8
#define TS_RXPID_ENTRY15_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY15_WORD1_t;





#define TS_RXPID_ENTRY16_WORD0                   0xf00804ac
#define TS_RXPID_ENTRY16_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY16_WORD0_t;





#define TS_RXPID_ENTRY16_WORD1                   0xf00804b0
#define TS_RXPID_ENTRY16_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY16_WORD1_t;





#define TS_RXPID_ENTRY17_WORD0                   0xf00804b4
#define TS_RXPID_ENTRY17_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY17_WORD0_t;





#define TS_RXPID_ENTRY17_WORD1                   0xf00804b8
#define TS_RXPID_ENTRY17_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY17_WORD1_t;





#define TS_RXPID_ENTRY18_WORD0                   0xf00804bc
#define TS_RXPID_ENTRY18_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY18_WORD0_t;





#define TS_RXPID_ENTRY18_WORD1                   0xf00804c0
#define TS_RXPID_ENTRY18_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY18_WORD1_t;





#define TS_RXPID_ENTRY19_WORD0                   0xf00804c4
#define TS_RXPID_ENTRY19_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY19_WORD0_t;





#define TS_RXPID_ENTRY19_WORD1                   0xf00804c8
#define TS_RXPID_ENTRY19_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY19_WORD1_t;





#define TS_RXPID_ENTRY20_WORD0                   0xf00804cc
#define TS_RXPID_ENTRY20_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY20_WORD0_t;





#define TS_RXPID_ENTRY20_WORD1                   0xf00804d0
#define TS_RXPID_ENTRY20_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY20_WORD1_t;





#define TS_RXPID_ENTRY21_WORD0                   0xf00804d4
#define TS_RXPID_ENTRY21_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY21_WORD0_t;





#define TS_RXPID_ENTRY21_WORD1                   0xf00804d8
#define TS_RXPID_ENTRY21_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY21_WORD1_t;





#define TS_RXPID_ENTRY22_WORD0                   0xf00804dc
#define TS_RXPID_ENTRY22_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY22_WORD0_t;





#define TS_RXPID_ENTRY22_WORD1                   0xf00804e0
#define TS_RXPID_ENTRY22_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY22_WORD1_t;





#define TS_RXPID_ENTRY23_WORD0                   0xf00804e4
#define TS_RXPID_ENTRY23_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY23_WORD0_t;





#define TS_RXPID_ENTRY23_WORD1                   0xf00804e8
#define TS_RXPID_ENTRY23_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY23_WORD1_t;





#define TS_RXPID_ENTRY24_WORD0                   0xf00804ec
#define TS_RXPID_ENTRY24_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY24_WORD0_t;





#define TS_RXPID_ENTRY24_WORD1                   0xf00804f0
#define TS_RXPID_ENTRY24_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY24_WORD1_t;





#define TS_RXPID_ENTRY25_WORD0                   0xf00804f4
#define TS_RXPID_ENTRY25_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY25_WORD0_t;





#define TS_RXPID_ENTRY25_WORD1                   0xf00804f8
#define TS_RXPID_ENTRY25_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY25_WORD1_t;





#define TS_RXPID_ENTRY26_WORD0                   0xf00804fc
#define TS_RXPID_ENTRY26_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY26_WORD0_t;





#define TS_RXPID_ENTRY26_WORD1                   0xf0080500
#define TS_RXPID_ENTRY26_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY26_WORD1_t;





#define TS_RXPID_ENTRY27_WORD0                   0xf0080504
#define TS_RXPID_ENTRY27_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY27_WORD0_t;





#define TS_RXPID_ENTRY27_WORD1                   0xf0080508
#define TS_RXPID_ENTRY27_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY27_WORD1_t;





#define TS_RXPID_ENTRY28_WORD0                   0xf008050c
#define TS_RXPID_ENTRY28_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY28_WORD0_t;





#define TS_RXPID_ENTRY28_WORD1                   0xf0080510
#define TS_RXPID_ENTRY28_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY28_WORD1_t;





#define TS_RXPID_ENTRY29_WORD0                   0xf0080514
#define TS_RXPID_ENTRY29_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY29_WORD0_t;





#define TS_RXPID_ENTRY29_WORD1                   0xf0080518
#define TS_RXPID_ENTRY29_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY29_WORD1_t;





#define TS_RXPID_ENTRY30_WORD0                   0xf008051c
#define TS_RXPID_ENTRY30_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY30_WORD0_t;





#define TS_RXPID_ENTRY30_WORD1                   0xf0080520
#define TS_RXPID_ENTRY30_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY30_WORD1_t;





#define TS_RXPID_ENTRY31_WORD0                   0xf0080524
#define TS_RXPID_ENTRY31_WORD0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pid                  : 13 ; /* bits 12:0 */
    cs_uint32 qid0                 :  4 ; /* bits 16:13 */
    cs_uint32 new_pid0             : 13 ; /* bits 29:17 */
    cs_uint32 action0              :  1 ; /* bits 30:30 */
    cs_uint32 valid0               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY31_WORD0_t;





#define TS_RXPID_ENTRY31_WORD1                   0xf0080528
#define TS_RXPID_ENTRY31_WORD1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 qid1                 :  4 ; /* bits 3:0 */
    cs_uint32 new_pid1             : 13 ; /* bits 16:4 */
    cs_uint32 action1              :  1 ; /* bits 17:17 */
    cs_uint32 valid1               :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_ENTRY31_WORD1_t;





#define TS_RXPID_INTERRUPT                       0xf008052c
#define TS_RXPID_INTERRUPT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 sp_fifo_abnormal     :  1 ; /* bits 20:20 */
    cs_uint32 data_timeout         :  1 ; /* bits 19:19 */
    cs_uint32 buffer_full_drop     :  1 ; /* bits 18:18 */
    cs_uint32 pid_unmatch_drop     :  1 ; /* bits 17:17 */
    cs_uint32 rxbuf_empty          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 clock_cntmsb         :  1 ; /* bits 9:9 */
    cs_uint32 clock_overrun        :  1 ; /* bits 8:8 */
    cs_uint32 frame_cntmsb         :  1 ; /* bits 7:7 */
    cs_uint32 frame_overrun        :  1 ; /* bits 6:6 */
    cs_uint32 buffer_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 buffer_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 pid_unmatch_drop_cntmsb :  1 ; /* bits 3:3 */
    cs_uint32 pid_unmatch_drop_overrun :  1 ; /* bits 2:2 */
    cs_uint32 good_cntmsb          :  1 ; /* bits 1:1 */
    cs_uint32 good_overrun         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 good_overrun         :  1 ; /* bits 0:0 */
    cs_uint32 good_cntmsb          :  1 ; /* bits 1:1 */
    cs_uint32 pid_unmatch_drop_overrun :  1 ; /* bits 2:2 */
    cs_uint32 pid_unmatch_drop_cntmsb :  1 ; /* bits 3:3 */
    cs_uint32 buffer_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 buffer_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 frame_overrun        :  1 ; /* bits 6:6 */
    cs_uint32 frame_cntmsb         :  1 ; /* bits 7:7 */
    cs_uint32 clock_overrun        :  1 ; /* bits 8:8 */
    cs_uint32 clock_cntmsb         :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 rxbuf_empty          :  1 ; /* bits 16:16 */
    cs_uint32 pid_unmatch_drop     :  1 ; /* bits 17:17 */
    cs_uint32 buffer_full_drop     :  1 ; /* bits 18:18 */
    cs_uint32 data_timeout         :  1 ; /* bits 19:19 */
    cs_uint32 sp_fifo_abnormal     :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_INTERRUPT_t;





#define TS_RXPID_INTENABLE                       0xf0080530
#define TS_RXPID_INTENABLE_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 11 ;
    cs_uint32 sp_fifo_abnormal_en  :  1 ; /* bits 20:20 */
    cs_uint32 data_timeout_en      :  1 ; /* bits 19:19 */
    cs_uint32 buffer_full_drop_en  :  1 ; /* bits 18:18 */
    cs_uint32 pid_unmatch_drop_en  :  1 ; /* bits 17:17 */
    cs_uint32 rxbuf_empty_en       :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 clock_cntmsb_en      :  1 ; /* bits 9:9 */
    cs_uint32 clock_overrun_en     :  1 ; /* bits 8:8 */
    cs_uint32 frame_cntmsb_en      :  1 ; /* bits 7:7 */
    cs_uint32 frame_overrun_en     :  1 ; /* bits 6:6 */
    cs_uint32 buffer_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 buffer_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 pid_unmatch_drop_cntmsb_en :  1 ; /* bits 3:3 */
    cs_uint32 pid_unmatch_drop_overrun_en :  1 ; /* bits 2:2 */
    cs_uint32 good_cntmsb_en       :  1 ; /* bits 1:1 */
    cs_uint32 good_overrun_en      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 good_overrun_en      :  1 ; /* bits 0:0 */
    cs_uint32 good_cntmsb_en       :  1 ; /* bits 1:1 */
    cs_uint32 pid_unmatch_drop_overrun_en :  1 ; /* bits 2:2 */
    cs_uint32 pid_unmatch_drop_cntmsb_en :  1 ; /* bits 3:3 */
    cs_uint32 buffer_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 buffer_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 frame_overrun_en     :  1 ; /* bits 6:6 */
    cs_uint32 frame_cntmsb_en      :  1 ; /* bits 7:7 */
    cs_uint32 clock_overrun_en     :  1 ; /* bits 8:8 */
    cs_uint32 clock_cntmsb_en      :  1 ; /* bits 9:9 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 rxbuf_empty_en       :  1 ; /* bits 16:16 */
    cs_uint32 pid_unmatch_drop_en  :  1 ; /* bits 17:17 */
    cs_uint32 buffer_full_drop_en  :  1 ; /* bits 18:18 */
    cs_uint32 data_timeout_en      :  1 ; /* bits 19:19 */
    cs_uint32 sp_fifo_abnormal_en  :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_INTENABLE_t;





#define TS_RXPID_DEBUG_0                         0xf0080534
#define TS_RXPID_DEBUG_0_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 11 ;
    cs_uint32 dmaif_cs             :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 pid_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 rx_cs                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_cs                :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pid_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 dmaif_cs             :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_DEBUG_0_t;





#define TS_RXPID_CONFIG_SPARE                    0xf0080538
#define TS_RXPID_CONFIG_SPARE_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 config_spare         : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 config_spare         : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TS_RXPID_CONFIG_SPARE_t;



    
  
  
  
#define TS_RXPID_STRIDE                          512
#define TS_RXPID_COUNT                           6
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* RXPID */

typedef struct {
  TS_RXPID_CONTROL_t                       CONTROL;                       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TS_RXPID_SYNC_t                          SYNC;                          /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TS_RXPID_RXBUF_SIZE_t                    RXBUF_SIZE;                    /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TS_RXPID_CNT_READ_t                      CNT_READ;                      /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TS_RXPID_DATA_TIMEOUT_RELOAD_t           DATA_TIMEOUT_RELOAD;           /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TS_RXPID_DATA_TIMEOUT_TIMER_t            DATA_TIMEOUT_TIMER;            /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TS_RXPID_GOOD_PKTCNT_t                   GOOD_PKTCNT;                   /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  TS_RXPID_PID_UNMATCH_DROP_PKTCNT_t       PID_UNMATCH_DROP_PKTCNT;       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  TS_RXPID_BUFFER_FULL_DROP_PKTCNT_t       BUFFER_FULL_DROP_PKTCNT;       /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  TS_RXPID_FRAME_CNT_t                     FRAME_CNT;                     /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  TS_RXPID_CLOCK_CNT_t                     CLOCK_CNT;                     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  TS_RXPID_ENTRY0_WORD0_t                  ENTRY0_WORD0;                  /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  TS_RXPID_ENTRY0_WORD1_t                  ENTRY0_WORD1;                  /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  TS_RXPID_ENTRY1_WORD0_t                  ENTRY1_WORD0;                  /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  TS_RXPID_ENTRY1_WORD1_t                  ENTRY1_WORD1;                  /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  TS_RXPID_ENTRY2_WORD0_t                  ENTRY2_WORD0;                  /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  TS_RXPID_ENTRY2_WORD1_t                  ENTRY2_WORD1;                  /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  TS_RXPID_ENTRY3_WORD0_t                  ENTRY3_WORD0;                  /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  TS_RXPID_ENTRY3_WORD1_t                  ENTRY3_WORD1;                  /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  TS_RXPID_ENTRY4_WORD0_t                  ENTRY4_WORD0;                  /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  TS_RXPID_ENTRY4_WORD1_t                  ENTRY4_WORD1;                  /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  TS_RXPID_ENTRY5_WORD0_t                  ENTRY5_WORD0;                  /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  TS_RXPID_ENTRY5_WORD1_t                  ENTRY5_WORD1;                  /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  TS_RXPID_ENTRY6_WORD0_t                  ENTRY6_WORD0;                  /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  TS_RXPID_ENTRY6_WORD1_t                  ENTRY6_WORD1;                  /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  TS_RXPID_ENTRY7_WORD0_t                  ENTRY7_WORD0;                  /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  TS_RXPID_ENTRY7_WORD1_t                  ENTRY7_WORD1;                  /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  TS_RXPID_ENTRY8_WORD0_t                  ENTRY8_WORD0;                  /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  TS_RXPID_ENTRY8_WORD1_t                  ENTRY8_WORD1;                  /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  TS_RXPID_ENTRY9_WORD0_t                  ENTRY9_WORD0;                  /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  TS_RXPID_ENTRY9_WORD1_t                  ENTRY9_WORD1;                  /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  TS_RXPID_ENTRY10_WORD0_t                 ENTRY10_WORD0;                 /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  TS_RXPID_ENTRY10_WORD1_t                 ENTRY10_WORD1;                 /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  TS_RXPID_ENTRY11_WORD0_t                 ENTRY11_WORD0;                 /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  TS_RXPID_ENTRY11_WORD1_t                 ENTRY11_WORD1;                 /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  TS_RXPID_ENTRY12_WORD0_t                 ENTRY12_WORD0;                 /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  TS_RXPID_ENTRY12_WORD1_t                 ENTRY12_WORD1;                 /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  TS_RXPID_ENTRY13_WORD0_t                 ENTRY13_WORD0;                 /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  TS_RXPID_ENTRY13_WORD1_t                 ENTRY13_WORD1;                 /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  TS_RXPID_ENTRY14_WORD0_t                 ENTRY14_WORD0;                 /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  TS_RXPID_ENTRY14_WORD1_t                 ENTRY14_WORD1;                 /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  TS_RXPID_ENTRY15_WORD0_t                 ENTRY15_WORD0;                 /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  TS_RXPID_ENTRY15_WORD1_t                 ENTRY15_WORD1;                 /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  TS_RXPID_ENTRY16_WORD0_t                 ENTRY16_WORD0;                 /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  TS_RXPID_ENTRY16_WORD1_t                 ENTRY16_WORD1;                 /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  TS_RXPID_ENTRY17_WORD0_t                 ENTRY17_WORD0;                 /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  TS_RXPID_ENTRY17_WORD1_t                 ENTRY17_WORD1;                 /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  TS_RXPID_ENTRY18_WORD0_t                 ENTRY18_WORD0;                 /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  TS_RXPID_ENTRY18_WORD1_t                 ENTRY18_WORD1;                 /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  TS_RXPID_ENTRY19_WORD0_t                 ENTRY19_WORD0;                 /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  TS_RXPID_ENTRY19_WORD1_t                 ENTRY19_WORD1;                 /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  TS_RXPID_ENTRY20_WORD0_t                 ENTRY20_WORD0;                 /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  TS_RXPID_ENTRY20_WORD1_t                 ENTRY20_WORD1;                 /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  TS_RXPID_ENTRY21_WORD0_t                 ENTRY21_WORD0;                 /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  TS_RXPID_ENTRY21_WORD1_t                 ENTRY21_WORD1;                 /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  TS_RXPID_ENTRY22_WORD0_t                 ENTRY22_WORD0;                 /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  TS_RXPID_ENTRY22_WORD1_t                 ENTRY22_WORD1;                 /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  TS_RXPID_ENTRY23_WORD0_t                 ENTRY23_WORD0;                 /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  TS_RXPID_ENTRY23_WORD1_t                 ENTRY23_WORD1;                 /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  TS_RXPID_ENTRY24_WORD0_t                 ENTRY24_WORD0;                 /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  TS_RXPID_ENTRY24_WORD1_t                 ENTRY24_WORD1;                 /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  TS_RXPID_ENTRY25_WORD0_t                 ENTRY25_WORD0;                 /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  TS_RXPID_ENTRY25_WORD1_t                 ENTRY25_WORD1;                 /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  TS_RXPID_ENTRY26_WORD0_t                 ENTRY26_WORD0;                 /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  TS_RXPID_ENTRY26_WORD1_t                 ENTRY26_WORD1;                 /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  TS_RXPID_ENTRY27_WORD0_t                 ENTRY27_WORD0;                 /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  TS_RXPID_ENTRY27_WORD1_t                 ENTRY27_WORD1;                 /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  TS_RXPID_ENTRY28_WORD0_t                 ENTRY28_WORD0;                 /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  TS_RXPID_ENTRY28_WORD1_t                 ENTRY28_WORD1;                 /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  TS_RXPID_ENTRY29_WORD0_t                 ENTRY29_WORD0;                 /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  TS_RXPID_ENTRY29_WORD1_t                 ENTRY29_WORD1;                 /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  TS_RXPID_ENTRY30_WORD0_t                 ENTRY30_WORD0;                 /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  TS_RXPID_ENTRY30_WORD1_t                 ENTRY30_WORD1;                 /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  TS_RXPID_ENTRY31_WORD0_t                 ENTRY31_WORD0;                 /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  TS_RXPID_ENTRY31_WORD1_t                 ENTRY31_WORD1;                 /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  TS_RXPID_INTERRUPT_t                     INTERRUPT;                     /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  TS_RXPID_INTENABLE_t                     INTENABLE;                     /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  TS_RXPID_DEBUG_0_t                       DEBUG_0;                       /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  TS_RXPID_CONFIG_SPARE_t                  CONFIG_SPARE;                  /* addr: 0x00000138 */ 
} TS_RXPID_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* TS */

typedef struct {
  TS_T_DMA_t                               T_DMA;                         /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[453];                  
  TS_T_AXI_t                               T_AXI;                         /* addr: 0x00000300 */ 
  cs_uint32                                rsrvd2[229];                  
  TS_RXPID_t                               RXPID;                         /* addr: 0x00000400 */ 
} TS_t;


/*
 * DMA
 */
  
  
/*
 * DMA_LSO
 */
  



#define DMA_DMA_LSO_RXDMA_CONTROL                0xf0090000
#define DMA_DMA_LSO_RXDMA_CONTROL_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXDMA_CONTROL_t;





#define DMA_DMA_LSO_TXDMA_CONTROL                0xf0090004
#define DMA_DMA_LSO_TXDMA_CONTROL_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 tx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXDMA_CONTROL_t;





#define DMA_DMA_LSO_TXQ0_CONTROL                 0xf0090008
#define DMA_DMA_LSO_TXQ0_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq0_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_CONTROL_t;





#define DMA_DMA_LSO_TXQ1_CONTROL                 0xf009000c
#define DMA_DMA_LSO_TXQ1_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq1_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_CONTROL_t;





#define DMA_DMA_LSO_TXQ2_CONTROL                 0xf0090010
#define DMA_DMA_LSO_TXQ2_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq2_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq2_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_CONTROL_t;





#define DMA_DMA_LSO_TXQ3_CONTROL                 0xf0090014
#define DMA_DMA_LSO_TXQ3_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq3_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq3_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_CONTROL_t;





#define DMA_DMA_LSO_TXQ4_CONTROL                 0xf0090018
#define DMA_DMA_LSO_TXQ4_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq4_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq4_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_CONTROL_t;





#define DMA_DMA_LSO_TXQ5_CONTROL                 0xf009001c
#define DMA_DMA_LSO_TXQ5_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq5_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_CONTROL_t;





#define DMA_DMA_LSO_TXQ6_CONTROL                 0xf0090020
#define DMA_DMA_LSO_TXQ6_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 txq6_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_en              :  1 ; /* bits 0:0 */
    cs_uint32 txq6_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_CONTROL_t;





#define DMA_DMA_LSO_TXQ7_CONTROL                 0xf0090024
#define DMA_DMA_LSO_TXQ7_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 txq7_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_en              :  1 ; /* bits 0:0 */
    cs_uint32 txq7_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_CONTROL_t;





#define DMA_DMA_LSO_RXQ0_PKTCNT_READ             0xf0090028
#define DMA_DMA_LSO_RXQ0_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ1_PKTCNT_READ             0xf009002c
#define DMA_DMA_LSO_RXQ1_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ2_PKTCNT_READ             0xf0090030
#define DMA_DMA_LSO_RXQ2_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq2_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ3_PKTCNT_READ             0xf0090034
#define DMA_DMA_LSO_RXQ3_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq3_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ4_PKTCNT_READ             0xf0090038
#define DMA_DMA_LSO_RXQ4_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq4_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ5_PKTCNT_READ             0xf009003c
#define DMA_DMA_LSO_RXQ5_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ6_PKTCNT_READ             0xf0090040
#define DMA_DMA_LSO_RXQ6_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ7_PKTCNT_READ             0xf0090044
#define DMA_DMA_LSO_RXQ7_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ0_PKTCNT_READ             0xf0090048
#define DMA_DMA_LSO_TXQ0_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq0_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ1_PKTCNT_READ             0xf009004c
#define DMA_DMA_LSO_TXQ1_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq1_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ2_PKTCNT_READ             0xf0090050
#define DMA_DMA_LSO_TXQ2_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq2_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq2_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ3_PKTCNT_READ             0xf0090054
#define DMA_DMA_LSO_TXQ3_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq3_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq3_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ4_PKTCNT_READ             0xf0090058
#define DMA_DMA_LSO_TXQ4_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq4_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq4_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ5_PKTCNT_READ             0xf009005c
#define DMA_DMA_LSO_TXQ5_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq5_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ6_PKTCNT_READ             0xf0090060
#define DMA_DMA_LSO_TXQ6_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq6_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_PKTCNT_READ_t;





#define DMA_DMA_LSO_TXQ7_PKTCNT_READ             0xf0090064
#define DMA_DMA_LSO_TXQ7_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq7_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_PKTCNT_READ_t;





#define DMA_DMA_LSO_RXQ0_BASE_DEPTH              0xf0090068
#define DMA_DMA_LSO_RXQ0_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ1_BASE_DEPTH              0xf009006c
#define DMA_DMA_LSO_RXQ1_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ2_BASE_DEPTH              0xf0090070
#define DMA_DMA_LSO_RXQ2_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ3_BASE_DEPTH              0xf0090074
#define DMA_DMA_LSO_RXQ3_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ4_BASE_DEPTH              0xf0090078
#define DMA_DMA_LSO_RXQ4_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ5_BASE_DEPTH              0xf009007c
#define DMA_DMA_LSO_RXQ5_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ6_BASE_DEPTH              0xf0090080
#define DMA_DMA_LSO_RXQ6_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ7_BASE_DEPTH              0xf0090084
#define DMA_DMA_LSO_RXQ7_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_BASE_DEPTH_t;





#define DMA_DMA_LSO_RXQ0_WPTR                    0xf0090088
#define DMA_DMA_LSO_RXQ0_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_WPTR_t;





#define DMA_DMA_LSO_RXQ0_RPTR                    0xf009008c
#define DMA_DMA_LSO_RXQ0_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_RPTR_t;





#define DMA_DMA_LSO_RXQ1_WPTR                    0xf0090090
#define DMA_DMA_LSO_RXQ1_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_WPTR_t;





#define DMA_DMA_LSO_RXQ1_RPTR                    0xf0090094
#define DMA_DMA_LSO_RXQ1_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_RPTR_t;





#define DMA_DMA_LSO_RXQ2_WPTR                    0xf0090098
#define DMA_DMA_LSO_RXQ2_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_WPTR_t;





#define DMA_DMA_LSO_RXQ2_RPTR                    0xf009009c
#define DMA_DMA_LSO_RXQ2_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_RPTR_t;





#define DMA_DMA_LSO_RXQ3_WPTR                    0xf00900a0
#define DMA_DMA_LSO_RXQ3_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_WPTR_t;





#define DMA_DMA_LSO_RXQ3_RPTR                    0xf00900a4
#define DMA_DMA_LSO_RXQ3_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_RPTR_t;





#define DMA_DMA_LSO_RXQ4_WPTR                    0xf00900a8
#define DMA_DMA_LSO_RXQ4_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_WPTR_t;





#define DMA_DMA_LSO_RXQ4_RPTR                    0xf00900ac
#define DMA_DMA_LSO_RXQ4_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_RPTR_t;





#define DMA_DMA_LSO_RXQ5_WPTR                    0xf00900b0
#define DMA_DMA_LSO_RXQ5_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_WPTR_t;





#define DMA_DMA_LSO_RXQ5_RPTR                    0xf00900b4
#define DMA_DMA_LSO_RXQ5_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_RPTR_t;





#define DMA_DMA_LSO_RXQ6_WPTR                    0xf00900b8
#define DMA_DMA_LSO_RXQ6_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_WPTR_t;





#define DMA_DMA_LSO_RXQ6_RPTR                    0xf00900bc
#define DMA_DMA_LSO_RXQ6_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_RPTR_t;





#define DMA_DMA_LSO_RXQ7_WPTR                    0xf00900c0
#define DMA_DMA_LSO_RXQ7_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_WPTR_t;





#define DMA_DMA_LSO_RXQ7_RPTR                    0xf00900c4
#define DMA_DMA_LSO_RXQ7_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_RPTR_t;





#define DMA_DMA_LSO_TXQ0_BASE_DEPTH              0xf00900c8
#define DMA_DMA_LSO_TXQ0_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ1_BASE_DEPTH              0xf00900cc
#define DMA_DMA_LSO_TXQ1_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ2_BASE_DEPTH              0xf00900d0
#define DMA_DMA_LSO_TXQ2_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ3_BASE_DEPTH              0xf00900d4
#define DMA_DMA_LSO_TXQ3_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ4_BASE_DEPTH              0xf00900d8
#define DMA_DMA_LSO_TXQ4_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ5_BASE_DEPTH              0xf00900dc
#define DMA_DMA_LSO_TXQ5_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ6_BASE_DEPTH              0xf00900e0
#define DMA_DMA_LSO_TXQ6_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ7_BASE_DEPTH              0xf00900e4
#define DMA_DMA_LSO_TXQ7_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_BASE_DEPTH_t;





#define DMA_DMA_LSO_TXQ0_WPTR                    0xf00900e8
#define DMA_DMA_LSO_TXQ0_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_WPTR_t;





#define DMA_DMA_LSO_TXQ0_RPTR                    0xf00900ec
#define DMA_DMA_LSO_TXQ0_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_RPTR_t;





#define DMA_DMA_LSO_TXQ1_WPTR                    0xf00900f0
#define DMA_DMA_LSO_TXQ1_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_WPTR_t;





#define DMA_DMA_LSO_TXQ1_RPTR                    0xf00900f4
#define DMA_DMA_LSO_TXQ1_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_RPTR_t;





#define DMA_DMA_LSO_TXQ2_WPTR                    0xf00900f8
#define DMA_DMA_LSO_TXQ2_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_WPTR_t;





#define DMA_DMA_LSO_TXQ2_RPTR                    0xf00900fc
#define DMA_DMA_LSO_TXQ2_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_RPTR_t;





#define DMA_DMA_LSO_TXQ3_WPTR                    0xf0090100
#define DMA_DMA_LSO_TXQ3_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_WPTR_t;





#define DMA_DMA_LSO_TXQ3_RPTR                    0xf0090104
#define DMA_DMA_LSO_TXQ3_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_RPTR_t;





#define DMA_DMA_LSO_TXQ4_WPTR                    0xf0090108
#define DMA_DMA_LSO_TXQ4_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_WPTR_t;





#define DMA_DMA_LSO_TXQ4_RPTR                    0xf009010c
#define DMA_DMA_LSO_TXQ4_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_RPTR_t;





#define DMA_DMA_LSO_TXQ5_WPTR                    0xf0090110
#define DMA_DMA_LSO_TXQ5_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_WPTR_t;





#define DMA_DMA_LSO_TXQ5_RPTR                    0xf0090114
#define DMA_DMA_LSO_TXQ5_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_RPTR_t;





#define DMA_DMA_LSO_TXQ6_WPTR                    0xf0090118
#define DMA_DMA_LSO_TXQ6_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_WPTR_t;





#define DMA_DMA_LSO_TXQ6_RPTR                    0xf009011c
#define DMA_DMA_LSO_TXQ6_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_RPTR_t;





#define DMA_DMA_LSO_TXQ7_WPTR                    0xf0090120
#define DMA_DMA_LSO_TXQ7_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_WPTR_t;





#define DMA_DMA_LSO_TXQ7_RPTR                    0xf0090124
#define DMA_DMA_LSO_TXQ7_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_RPTR_t;





#define DMA_DMA_LSO_RXQ0_FULL_THRESHOLD          0xf0090128
#define DMA_DMA_LSO_RXQ0_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ1_FULL_THRESHOLD          0xf009012c
#define DMA_DMA_LSO_RXQ1_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ2_FULL_THRESHOLD          0xf0090130
#define DMA_DMA_LSO_RXQ2_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ3_FULL_THRESHOLD          0xf0090134
#define DMA_DMA_LSO_RXQ3_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ4_FULL_THRESHOLD          0xf0090138
#define DMA_DMA_LSO_RXQ4_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ5_FULL_THRESHOLD          0xf009013c
#define DMA_DMA_LSO_RXQ5_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ6_FULL_THRESHOLD          0xf0090140
#define DMA_DMA_LSO_RXQ6_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ7_FULL_THRESHOLD          0xf0090144
#define DMA_DMA_LSO_RXQ7_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_FULL_THRESHOLD_t;





#define DMA_DMA_LSO_RXQ0_PKTCNT                  0xf0090148
#define DMA_DMA_LSO_RXQ0_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_PKTCNT_t;





#define DMA_DMA_LSO_RXQ1_PKTCNT                  0xf009014c
#define DMA_DMA_LSO_RXQ1_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_PKTCNT_t;





#define DMA_DMA_LSO_RXQ2_PKTCNT                  0xf0090150
#define DMA_DMA_LSO_RXQ2_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_PKTCNT_t;





#define DMA_DMA_LSO_RXQ3_PKTCNT                  0xf0090154
#define DMA_DMA_LSO_RXQ3_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_PKTCNT_t;





#define DMA_DMA_LSO_RXQ4_PKTCNT                  0xf0090158
#define DMA_DMA_LSO_RXQ4_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_PKTCNT_t;





#define DMA_DMA_LSO_RXQ5_PKTCNT                  0xf009015c
#define DMA_DMA_LSO_RXQ5_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_PKTCNT_t;





#define DMA_DMA_LSO_RXQ6_PKTCNT                  0xf0090160
#define DMA_DMA_LSO_RXQ6_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_PKTCNT_t;





#define DMA_DMA_LSO_RXQ7_PKTCNT                  0xf0090164
#define DMA_DMA_LSO_RXQ7_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_PKTCNT_t;





#define DMA_DMA_LSO_RXQ0_FULL_DROP_PKTCNT        0xf0090168
#define DMA_DMA_LSO_RXQ0_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ1_FULL_DROP_PKTCNT        0xf009016c
#define DMA_DMA_LSO_RXQ1_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ2_FULL_DROP_PKTCNT        0xf0090170
#define DMA_DMA_LSO_RXQ2_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ3_FULL_DROP_PKTCNT        0xf0090174
#define DMA_DMA_LSO_RXQ3_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ4_FULL_DROP_PKTCNT        0xf0090178
#define DMA_DMA_LSO_RXQ4_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ5_FULL_DROP_PKTCNT        0xf009017c
#define DMA_DMA_LSO_RXQ5_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ6_FULL_DROP_PKTCNT        0xf0090180
#define DMA_DMA_LSO_RXQ6_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_RXQ7_FULL_DROP_PKTCNT        0xf0090184
#define DMA_DMA_LSO_RXQ7_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_FULL_DROP_PKTCNT_t;





#define DMA_DMA_LSO_TXQ0_PKTCNT                  0xf0090188
#define DMA_DMA_LSO_TXQ0_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_PKTCNT_t;





#define DMA_DMA_LSO_TXQ1_PKTCNT                  0xf009018c
#define DMA_DMA_LSO_TXQ1_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_PKTCNT_t;





#define DMA_DMA_LSO_TXQ2_PKTCNT                  0xf0090190
#define DMA_DMA_LSO_TXQ2_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_PKTCNT_t;





#define DMA_DMA_LSO_TXQ3_PKTCNT                  0xf0090194
#define DMA_DMA_LSO_TXQ3_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_PKTCNT_t;





#define DMA_DMA_LSO_TXQ4_PKTCNT                  0xf0090198
#define DMA_DMA_LSO_TXQ4_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_PKTCNT_t;





#define DMA_DMA_LSO_TXQ5_PKTCNT                  0xf009019c
#define DMA_DMA_LSO_TXQ5_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_PKTCNT_t;





#define DMA_DMA_LSO_TXQ6_PKTCNT                  0xf00901a0
#define DMA_DMA_LSO_TXQ6_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_PKTCNT_t;





#define DMA_DMA_LSO_TXQ7_PKTCNT                  0xf00901a4
#define DMA_DMA_LSO_TXQ7_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_PKTCNT_t;





#define DMA_DMA_LSO_BMC0_START                   0xf00901a8
#define DMA_DMA_LSO_BMC0_START_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_start           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_start           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_START_t;





#define DMA_DMA_LSO_BMC0_SOURCE_ADDR             0xf00901ac
#define DMA_DMA_LSO_BMC0_SOURCE_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_SOURCE_ADDR_t;





#define DMA_DMA_LSO_BMC0_DESTINATION_ADDR        0xf00901b0
#define DMA_DMA_LSO_BMC0_DESTINATION_ADDR_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_DESTINATION_ADDR_t;





#define DMA_DMA_LSO_BMC0_COPY_BYTE               0xf00901b4
#define DMA_DMA_LSO_BMC0_COPY_BYTE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 size                 : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 size                 : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_COPY_BYTE_t;





#define DMA_DMA_LSO_BMC1_START                   0xf00901b8
#define DMA_DMA_LSO_BMC1_START_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_start           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_start           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_START_t;





#define DMA_DMA_LSO_BMC1_SOURCE_ADDR             0xf00901bc
#define DMA_DMA_LSO_BMC1_SOURCE_ADDR_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_SOURCE_ADDR_t;





#define DMA_DMA_LSO_BMC1_DESTINATION_ADDR        0xf00901c0
#define DMA_DMA_LSO_BMC1_DESTINATION_ADDR_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_DESTINATION_ADDR_t;





#define DMA_DMA_LSO_BMC1_COPY_BYTE               0xf00901c4
#define DMA_DMA_LSO_BMC1_COPY_BYTE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 size                 : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 size                 : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_COPY_BYTE_t;





#define DMA_DMA_LSO_VLAN_TAG_TYPE0               0xf00901c8
#define DMA_DMA_LSO_VLAN_TAG_TYPE0_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 enable               :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 value                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 value                : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 enable               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_VLAN_TAG_TYPE0_t;





#define DMA_DMA_LSO_VLAN_TAG_TYPE1               0xf00901cc
#define DMA_DMA_LSO_VLAN_TAG_TYPE1_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 enable               :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 value                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 value                : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 15 ;
    cs_uint32 enable               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_VLAN_TAG_TYPE1_t;





#define DMA_DMA_LSO_DMA_LSO_INTERRUPT_0          0xf00901d0
#define DMA_DMA_LSO_DMA_LSO_INTERRUPT_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 24:24 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 19:19 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 18:18 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 17:17 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 16:16 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 15:15 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 14:14 */
    cs_uint32 TXQ4_INTERRUPTi      :  1 ; /* bits 13:13 */
    cs_uint32 TXQ3_INTERRUPTi      :  1 ; /* bits 12:12 */
    cs_uint32 TXQ2_INTERRUPTi      :  1 ; /* bits 11:11 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 TXQ2_INTERRUPTi      :  1 ; /* bits 11:11 */
    cs_uint32 TXQ3_INTERRUPTi      :  1 ; /* bits 12:12 */
    cs_uint32 TXQ4_INTERRUPTi      :  1 ; /* bits 13:13 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 14:14 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 15:15 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 16:16 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 17:17 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 18:18 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 19:19 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_LSO_INTERRUPT_0_t;





#define DMA_DMA_LSO_DMA_LSO_INTENABLE_0          0xf00901d4
#define DMA_DMA_LSO_DMA_LSO_INTENABLE_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 24:24 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 19:19 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 18:18 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 17:17 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 16:16 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 15:15 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 14:14 */
    cs_uint32 TXQ4_INTERRUPTi_en   :  1 ; /* bits 13:13 */
    cs_uint32 TXQ3_INTERRUPTi_en   :  1 ; /* bits 12:12 */
    cs_uint32 TXQ2_INTERRUPTi_en   :  1 ; /* bits 11:11 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 TXQ2_INTERRUPTi_en   :  1 ; /* bits 11:11 */
    cs_uint32 TXQ3_INTERRUPTi_en   :  1 ; /* bits 12:12 */
    cs_uint32 TXQ4_INTERRUPTi_en   :  1 ; /* bits 13:13 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 14:14 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 15:15 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 16:16 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 17:17 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 18:18 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 19:19 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_LSO_INTENABLE_0_t;





#define DMA_DMA_LSO_DMA_LSO_INTERRUPT_1          0xf00901d8
#define DMA_DMA_LSO_DMA_LSO_INTERRUPT_1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 24:24 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 19:19 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 18:18 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 17:17 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 16:16 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 15:15 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 14:14 */
    cs_uint32 TXQ4_INTERRUPTi      :  1 ; /* bits 13:13 */
    cs_uint32 TXQ3_INTERRUPTi      :  1 ; /* bits 12:12 */
    cs_uint32 TXQ2_INTERRUPTi      :  1 ; /* bits 11:11 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 8:8 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 9:9 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 10:10 */
    cs_uint32 TXQ2_INTERRUPTi      :  1 ; /* bits 11:11 */
    cs_uint32 TXQ3_INTERRUPTi      :  1 ; /* bits 12:12 */
    cs_uint32 TXQ4_INTERRUPTi      :  1 ; /* bits 13:13 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 14:14 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 15:15 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 16:16 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 17:17 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 18:18 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 19:19 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_LSO_INTERRUPT_1_t;





#define DMA_DMA_LSO_DMA_LSO_INTENABLE_1          0xf00901dc
#define DMA_DMA_LSO_DMA_LSO_INTENABLE_1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 24:24 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 19:19 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 18:18 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 17:17 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 16:16 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 15:15 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 14:14 */
    cs_uint32 TXQ4_INTERRUPTi_en   :  1 ; /* bits 13:13 */
    cs_uint32 TXQ3_INTERRUPTi_en   :  1 ; /* bits 12:12 */
    cs_uint32 TXQ2_INTERRUPTi_en   :  1 ; /* bits 11:11 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ2_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ3_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ4_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 8:8 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 9:9 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 10:10 */
    cs_uint32 TXQ2_INTERRUPTi_en   :  1 ; /* bits 11:11 */
    cs_uint32 TXQ3_INTERRUPTi_en   :  1 ; /* bits 12:12 */
    cs_uint32 TXQ4_INTERRUPTi_en   :  1 ; /* bits 13:13 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 14:14 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 15:15 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 16:16 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 17:17 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 18:18 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 19:19 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 20:20 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 21:21 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 22:22 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 23:23 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_LSO_INTENABLE_1_t;





#define DMA_DMA_LSO_DESC_INTERRUPT               0xf00901e0
#define DMA_DMA_LSO_DESC_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DESC_INTERRUPT_t;





#define DMA_DMA_LSO_DESC_INTENABLE               0xf00901e4
#define DMA_DMA_LSO_DESC_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DESC_INTENABLE_t;





#define DMA_DMA_LSO_RXQ0_INTERRUPT               0xf00901e8
#define DMA_DMA_LSO_RXQ0_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ0_INTENABLE               0xf00901ec
#define DMA_DMA_LSO_RXQ0_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ0_INTENABLE_t;





#define DMA_DMA_LSO_RXQ1_INTERRUPT               0xf00901f0
#define DMA_DMA_LSO_RXQ1_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ1_INTENABLE               0xf00901f4
#define DMA_DMA_LSO_RXQ1_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ1_INTENABLE_t;





#define DMA_DMA_LSO_RXQ2_INTERRUPT               0xf00901f8
#define DMA_DMA_LSO_RXQ2_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq2_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq2_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ2_INTENABLE               0xf00901fc
#define DMA_DMA_LSO_RXQ2_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq2_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq2_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq2_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq2_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq2_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq2_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ2_INTENABLE_t;





#define DMA_DMA_LSO_RXQ3_INTERRUPT               0xf0090200
#define DMA_DMA_LSO_RXQ3_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq3_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq3_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ3_INTENABLE               0xf0090204
#define DMA_DMA_LSO_RXQ3_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq3_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq3_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq3_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq3_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq3_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq3_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ3_INTENABLE_t;





#define DMA_DMA_LSO_RXQ4_INTERRUPT               0xf0090208
#define DMA_DMA_LSO_RXQ4_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq4_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq4_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ4_INTENABLE               0xf009020c
#define DMA_DMA_LSO_RXQ4_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq4_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq4_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq4_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq4_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq4_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq4_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ4_INTENABLE_t;





#define DMA_DMA_LSO_RXQ5_INTERRUPT               0xf0090210
#define DMA_DMA_LSO_RXQ5_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ5_INTENABLE               0xf0090214
#define DMA_DMA_LSO_RXQ5_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ5_INTENABLE_t;





#define DMA_DMA_LSO_RXQ6_INTERRUPT               0xf0090218
#define DMA_DMA_LSO_RXQ6_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ6_INTENABLE               0xf009021c
#define DMA_DMA_LSO_RXQ6_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ6_INTENABLE_t;





#define DMA_DMA_LSO_RXQ7_INTERRUPT               0xf0090220
#define DMA_DMA_LSO_RXQ7_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_INTERRUPT_t;





#define DMA_DMA_LSO_RXQ7_INTENABLE               0xf0090224
#define DMA_DMA_LSO_RXQ7_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RXQ7_INTENABLE_t;





#define DMA_DMA_LSO_TXQ0_INTERRUPT               0xf0090228
#define DMA_DMA_LSO_TXQ0_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq0_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq0_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq0_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ0_INTENABLE               0xf009022c
#define DMA_DMA_LSO_TXQ0_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq0_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq0_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq0_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ0_INTENABLE_t;





#define DMA_DMA_LSO_TXQ1_INTERRUPT               0xf0090230
#define DMA_DMA_LSO_TXQ1_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq1_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq1_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq1_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ1_INTENABLE               0xf0090234
#define DMA_DMA_LSO_TXQ1_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq1_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq1_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq1_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ1_INTENABLE_t;





#define DMA_DMA_LSO_TXQ2_INTERRUPT               0xf0090238
#define DMA_DMA_LSO_TXQ2_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq2_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq2_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq2_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq2_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq2_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq2_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ2_INTENABLE               0xf009023c
#define DMA_DMA_LSO_TXQ2_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq2_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq2_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq2_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq2_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq2_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq2_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ2_INTENABLE_t;





#define DMA_DMA_LSO_TXQ3_INTERRUPT               0xf0090240
#define DMA_DMA_LSO_TXQ3_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq3_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq3_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq3_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq3_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq3_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq3_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ3_INTENABLE               0xf0090244
#define DMA_DMA_LSO_TXQ3_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq3_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq3_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq3_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq3_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq3_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq3_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ3_INTENABLE_t;





#define DMA_DMA_LSO_TXQ4_INTERRUPT               0xf0090248
#define DMA_DMA_LSO_TXQ4_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq4_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq4_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq4_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq4_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq4_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq4_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ4_INTENABLE               0xf009024c
#define DMA_DMA_LSO_TXQ4_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq4_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq4_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq4_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq4_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq4_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq4_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ4_INTENABLE_t;





#define DMA_DMA_LSO_TXQ5_INTERRUPT               0xf0090250
#define DMA_DMA_LSO_TXQ5_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq5_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq5_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq5_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ5_INTENABLE               0xf0090254
#define DMA_DMA_LSO_TXQ5_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq5_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq5_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq5_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ5_INTENABLE_t;





#define DMA_DMA_LSO_TXQ6_INTERRUPT               0xf0090258
#define DMA_DMA_LSO_TXQ6_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq6_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq6_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ6_INTENABLE               0xf009025c
#define DMA_DMA_LSO_TXQ6_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq6_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq6_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq6_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ6_INTENABLE_t;





#define DMA_DMA_LSO_TXQ7_INTERRUPT               0xf0090260
#define DMA_DMA_LSO_TXQ7_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq7_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq7_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_INTERRUPT_t;





#define DMA_DMA_LSO_TXQ7_INTENABLE               0xf0090264
#define DMA_DMA_LSO_TXQ7_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq7_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq7_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq7_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TXQ7_INTENABLE_t;





#define DMA_DMA_LSO_BMC0_INTERRUPT               0xf0090268
#define DMA_DMA_LSO_BMC0_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_fin             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_fin             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_INTERRUPT_t;





#define DMA_DMA_LSO_BMC0_INTENABLE               0xf009026c
#define DMA_DMA_LSO_BMC0_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_fin_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_fin_en          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC0_INTENABLE_t;





#define DMA_DMA_LSO_BMC1_INTERRUPT               0xf0090270
#define DMA_DMA_LSO_BMC1_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_fin             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_fin             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_INTERRUPT_t;





#define DMA_DMA_LSO_BMC1_INTENABLE               0xf0090274
#define DMA_DMA_LSO_BMC1_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_fin_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_fin_en          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_BMC1_INTENABLE_t;





#define DMA_DMA_LSO_RX_FDES_ADDR                 0xf0090278
#define DMA_DMA_LSO_RX_FDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RX_FDES_ADDR_t;





#define DMA_DMA_LSO_RX_CDES_ADDR                 0xf009027c
#define DMA_DMA_LSO_RX_CDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RX_CDES_ADDR_t;





#define DMA_DMA_LSO_RX_DES_WORD0                 0xf0090280
#define DMA_DMA_LSO_RX_DES_WORD0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RX_DES_WORD0_t;





#define DMA_DMA_LSO_RX_DES_WORD1                 0xf0090284
#define DMA_DMA_LSO_RX_DES_WORD1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_RX_DES_WORD1_t;





#define DMA_DMA_LSO_TX_FDES_ADDR                 0xf0090288
#define DMA_DMA_LSO_TX_FDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_FDES_ADDR_t;





#define DMA_DMA_LSO_TX_CDES_ADDR                 0xf009028c
#define DMA_DMA_LSO_TX_CDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_CDES_ADDR_t;





#define DMA_DMA_LSO_TX_DES_WORD0                 0xf0090290
#define DMA_DMA_LSO_TX_DES_WORD0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD0_t;





#define DMA_DMA_LSO_TX_DES_WORD1                 0xf0090294
#define DMA_DMA_LSO_TX_DES_WORD1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD1_t;





#define DMA_DMA_LSO_TX_DES_WORD2                 0xf0090298
#define DMA_DMA_LSO_TX_DES_WORD2_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD2_t;





#define DMA_DMA_LSO_TX_DES_WORD3                 0xf009029c
#define DMA_DMA_LSO_TX_DES_WORD3_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD3_t;





#define DMA_DMA_LSO_TX_DES_WORD4                 0xf00902a0
#define DMA_DMA_LSO_TX_DES_WORD4_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD4_t;





#define DMA_DMA_LSO_TX_DES_WORD5                 0xf00902a4
#define DMA_DMA_LSO_TX_DES_WORD5_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD5_t;





#define DMA_DMA_LSO_TX_DES_WORD6                 0xf00902a8
#define DMA_DMA_LSO_TX_DES_WORD6_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD6_t;





#define DMA_DMA_LSO_TX_DES_WORD7                 0xf00902ac
#define DMA_DMA_LSO_TX_DES_WORD7_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_TX_DES_WORD7_t;





#define DMA_DMA_LSO_DEBUG_0                      0xf00902b0
#define DMA_DMA_LSO_DEBUG_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DEBUG_0_t;





#define DMA_DMA_LSO_DEBUG_1                      0xf00902b4
#define DMA_DMA_LSO_DEBUG_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  5 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd5               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DEBUG_1_t;





#define DMA_DMA_LSO_DEBUG_2                      0xf00902b8
#define DMA_DMA_LSO_DEBUG_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 19 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DEBUG_2_t;





#define DMA_DMA_LSO_DEBUG_3                      0xf00902bc
#define DMA_DMA_LSO_DEBUG_3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               : 10 ;
    cs_uint32 inctl_fin_cs         :  2 ; /* bits 21:20 */
    cs_uint32 inctl_fout_cs        :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 outctl_fin_cs        :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 outctl_fout_cs       :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 dmaif_state          :  3 ; /* bits 6:4 */
    cs_uint32 dmaif_fifo_cs        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dmaif_fifo_cs        :  4 ; /* bits 3:0 */
    cs_uint32 dmaif_state          :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 outctl_fout_cs       :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 outctl_fin_cs        :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 inctl_fout_cs        :  4 ; /* bits 19:16 */
    cs_uint32 inctl_fin_cs         :  2 ; /* bits 21:20 */
    cs_uint32 rsrvd4               : 10 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DEBUG_3_t;





#define DMA_DMA_LSO_DEBUG_4                      0xf00902c0
#define DMA_DMA_LSO_DEBUG_4_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 16 ;
    cs_uint32 macif_macIF_st       :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ip_cs                :  3 ; /* bits 10:8 */
    cs_uint32 tcp_cs               :  4 ; /* bits 7:4 */
    cs_uint32 udp_cs               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 udp_cs               :  4 ; /* bits 3:0 */
    cs_uint32 tcp_cs               :  4 ; /* bits 7:4 */
    cs_uint32 ip_cs                :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 macif_macIF_st       :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd2               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DEBUG_4_t;





#define DMA_DMA_LSO_DMA_SPARE_0                  0xf00902c4
#define DMA_DMA_LSO_DMA_SPARE_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_SPARE_0_t;





#define DMA_DMA_LSO_DMA_SPARE_1                  0xf00902c8
#define DMA_DMA_LSO_DMA_SPARE_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_LSO_DMA_SPARE_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* DMA_LSO */

typedef struct {
  DMA_DMA_LSO_RXDMA_CONTROL_t              RXDMA_CONTROL;                 /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  DMA_DMA_LSO_TXDMA_CONTROL_t              TXDMA_CONTROL;                 /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  DMA_DMA_LSO_TXQ0_CONTROL_t               TXQ0_CONTROL;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  DMA_DMA_LSO_TXQ1_CONTROL_t               TXQ1_CONTROL;                  /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  DMA_DMA_LSO_TXQ2_CONTROL_t               TXQ2_CONTROL;                  /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  DMA_DMA_LSO_TXQ3_CONTROL_t               TXQ3_CONTROL;                  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  DMA_DMA_LSO_TXQ4_CONTROL_t               TXQ4_CONTROL;                  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  DMA_DMA_LSO_TXQ5_CONTROL_t               TXQ5_CONTROL;                  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  DMA_DMA_LSO_TXQ6_CONTROL_t               TXQ6_CONTROL;                  /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  DMA_DMA_LSO_TXQ7_CONTROL_t               TXQ7_CONTROL;                  /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  DMA_DMA_LSO_RXQ0_PKTCNT_READ_t           RXQ0_PKTCNT_READ;              /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  DMA_DMA_LSO_RXQ1_PKTCNT_READ_t           RXQ1_PKTCNT_READ;              /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  DMA_DMA_LSO_RXQ2_PKTCNT_READ_t           RXQ2_PKTCNT_READ;              /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  DMA_DMA_LSO_RXQ3_PKTCNT_READ_t           RXQ3_PKTCNT_READ;              /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  DMA_DMA_LSO_RXQ4_PKTCNT_READ_t           RXQ4_PKTCNT_READ;              /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  DMA_DMA_LSO_RXQ5_PKTCNT_READ_t           RXQ5_PKTCNT_READ;              /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  DMA_DMA_LSO_RXQ6_PKTCNT_READ_t           RXQ6_PKTCNT_READ;              /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  DMA_DMA_LSO_RXQ7_PKTCNT_READ_t           RXQ7_PKTCNT_READ;              /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  DMA_DMA_LSO_TXQ0_PKTCNT_READ_t           TXQ0_PKTCNT_READ;              /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  DMA_DMA_LSO_TXQ1_PKTCNT_READ_t           TXQ1_PKTCNT_READ;              /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  DMA_DMA_LSO_TXQ2_PKTCNT_READ_t           TXQ2_PKTCNT_READ;              /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  DMA_DMA_LSO_TXQ3_PKTCNT_READ_t           TXQ3_PKTCNT_READ;              /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  DMA_DMA_LSO_TXQ4_PKTCNT_READ_t           TXQ4_PKTCNT_READ;              /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  DMA_DMA_LSO_TXQ5_PKTCNT_READ_t           TXQ5_PKTCNT_READ;              /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  DMA_DMA_LSO_TXQ6_PKTCNT_READ_t           TXQ6_PKTCNT_READ;              /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  DMA_DMA_LSO_TXQ7_PKTCNT_READ_t           TXQ7_PKTCNT_READ;              /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  DMA_DMA_LSO_RXQ0_BASE_DEPTH_t            RXQ0_BASE_DEPTH;               /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  DMA_DMA_LSO_RXQ1_BASE_DEPTH_t            RXQ1_BASE_DEPTH;               /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  DMA_DMA_LSO_RXQ2_BASE_DEPTH_t            RXQ2_BASE_DEPTH;               /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  DMA_DMA_LSO_RXQ3_BASE_DEPTH_t            RXQ3_BASE_DEPTH;               /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  DMA_DMA_LSO_RXQ4_BASE_DEPTH_t            RXQ4_BASE_DEPTH;               /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  DMA_DMA_LSO_RXQ5_BASE_DEPTH_t            RXQ5_BASE_DEPTH;               /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  DMA_DMA_LSO_RXQ6_BASE_DEPTH_t            RXQ6_BASE_DEPTH;               /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  DMA_DMA_LSO_RXQ7_BASE_DEPTH_t            RXQ7_BASE_DEPTH;               /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  DMA_DMA_LSO_RXQ0_WPTR_t                  RXQ0_WPTR;                     /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  DMA_DMA_LSO_RXQ0_RPTR_t                  RXQ0_RPTR;                     /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  DMA_DMA_LSO_RXQ1_WPTR_t                  RXQ1_WPTR;                     /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  DMA_DMA_LSO_RXQ1_RPTR_t                  RXQ1_RPTR;                     /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  DMA_DMA_LSO_RXQ2_WPTR_t                  RXQ2_WPTR;                     /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  DMA_DMA_LSO_RXQ2_RPTR_t                  RXQ2_RPTR;                     /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  DMA_DMA_LSO_RXQ3_WPTR_t                  RXQ3_WPTR;                     /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  DMA_DMA_LSO_RXQ3_RPTR_t                  RXQ3_RPTR;                     /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  DMA_DMA_LSO_RXQ4_WPTR_t                  RXQ4_WPTR;                     /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  DMA_DMA_LSO_RXQ4_RPTR_t                  RXQ4_RPTR;                     /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  DMA_DMA_LSO_RXQ5_WPTR_t                  RXQ5_WPTR;                     /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  DMA_DMA_LSO_RXQ5_RPTR_t                  RXQ5_RPTR;                     /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  DMA_DMA_LSO_RXQ6_WPTR_t                  RXQ6_WPTR;                     /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  DMA_DMA_LSO_RXQ6_RPTR_t                  RXQ6_RPTR;                     /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  DMA_DMA_LSO_RXQ7_WPTR_t                  RXQ7_WPTR;                     /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  DMA_DMA_LSO_RXQ7_RPTR_t                  RXQ7_RPTR;                     /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  DMA_DMA_LSO_TXQ0_BASE_DEPTH_t            TXQ0_BASE_DEPTH;               /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  DMA_DMA_LSO_TXQ1_BASE_DEPTH_t            TXQ1_BASE_DEPTH;               /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  DMA_DMA_LSO_TXQ2_BASE_DEPTH_t            TXQ2_BASE_DEPTH;               /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  DMA_DMA_LSO_TXQ3_BASE_DEPTH_t            TXQ3_BASE_DEPTH;               /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  DMA_DMA_LSO_TXQ4_BASE_DEPTH_t            TXQ4_BASE_DEPTH;               /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  DMA_DMA_LSO_TXQ5_BASE_DEPTH_t            TXQ5_BASE_DEPTH;               /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  DMA_DMA_LSO_TXQ6_BASE_DEPTH_t            TXQ6_BASE_DEPTH;               /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  DMA_DMA_LSO_TXQ7_BASE_DEPTH_t            TXQ7_BASE_DEPTH;               /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  DMA_DMA_LSO_TXQ0_WPTR_t                  TXQ0_WPTR;                     /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  DMA_DMA_LSO_TXQ0_RPTR_t                  TXQ0_RPTR;                     /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  DMA_DMA_LSO_TXQ1_WPTR_t                  TXQ1_WPTR;                     /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  DMA_DMA_LSO_TXQ1_RPTR_t                  TXQ1_RPTR;                     /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  DMA_DMA_LSO_TXQ2_WPTR_t                  TXQ2_WPTR;                     /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  DMA_DMA_LSO_TXQ2_RPTR_t                  TXQ2_RPTR;                     /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  DMA_DMA_LSO_TXQ3_WPTR_t                  TXQ3_WPTR;                     /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  DMA_DMA_LSO_TXQ3_RPTR_t                  TXQ3_RPTR;                     /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  DMA_DMA_LSO_TXQ4_WPTR_t                  TXQ4_WPTR;                     /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  DMA_DMA_LSO_TXQ4_RPTR_t                  TXQ4_RPTR;                     /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  DMA_DMA_LSO_TXQ5_WPTR_t                  TXQ5_WPTR;                     /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  DMA_DMA_LSO_TXQ5_RPTR_t                  TXQ5_RPTR;                     /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  DMA_DMA_LSO_TXQ6_WPTR_t                  TXQ6_WPTR;                     /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  DMA_DMA_LSO_TXQ6_RPTR_t                  TXQ6_RPTR;                     /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  DMA_DMA_LSO_TXQ7_WPTR_t                  TXQ7_WPTR;                     /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  DMA_DMA_LSO_TXQ7_RPTR_t                  TXQ7_RPTR;                     /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  DMA_DMA_LSO_RXQ0_FULL_THRESHOLD_t        RXQ0_FULL_THRESHOLD;           /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  DMA_DMA_LSO_RXQ1_FULL_THRESHOLD_t        RXQ1_FULL_THRESHOLD;           /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  DMA_DMA_LSO_RXQ2_FULL_THRESHOLD_t        RXQ2_FULL_THRESHOLD;           /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  DMA_DMA_LSO_RXQ3_FULL_THRESHOLD_t        RXQ3_FULL_THRESHOLD;           /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  DMA_DMA_LSO_RXQ4_FULL_THRESHOLD_t        RXQ4_FULL_THRESHOLD;           /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  DMA_DMA_LSO_RXQ5_FULL_THRESHOLD_t        RXQ5_FULL_THRESHOLD;           /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  DMA_DMA_LSO_RXQ6_FULL_THRESHOLD_t        RXQ6_FULL_THRESHOLD;           /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  DMA_DMA_LSO_RXQ7_FULL_THRESHOLD_t        RXQ7_FULL_THRESHOLD;           /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  DMA_DMA_LSO_RXQ0_PKTCNT_t                RXQ0_PKTCNT;                   /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  DMA_DMA_LSO_RXQ1_PKTCNT_t                RXQ1_PKTCNT;                   /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  DMA_DMA_LSO_RXQ2_PKTCNT_t                RXQ2_PKTCNT;                   /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  DMA_DMA_LSO_RXQ3_PKTCNT_t                RXQ3_PKTCNT;                   /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  DMA_DMA_LSO_RXQ4_PKTCNT_t                RXQ4_PKTCNT;                   /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  DMA_DMA_LSO_RXQ5_PKTCNT_t                RXQ5_PKTCNT;                   /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  DMA_DMA_LSO_RXQ6_PKTCNT_t                RXQ6_PKTCNT;                   /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  DMA_DMA_LSO_RXQ7_PKTCNT_t                RXQ7_PKTCNT;                   /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  DMA_DMA_LSO_RXQ0_FULL_DROP_PKTCNT_t      RXQ0_FULL_DROP_PKTCNT;         /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  DMA_DMA_LSO_RXQ1_FULL_DROP_PKTCNT_t      RXQ1_FULL_DROP_PKTCNT;         /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  DMA_DMA_LSO_RXQ2_FULL_DROP_PKTCNT_t      RXQ2_FULL_DROP_PKTCNT;         /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  DMA_DMA_LSO_RXQ3_FULL_DROP_PKTCNT_t      RXQ3_FULL_DROP_PKTCNT;         /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  DMA_DMA_LSO_RXQ4_FULL_DROP_PKTCNT_t      RXQ4_FULL_DROP_PKTCNT;         /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  DMA_DMA_LSO_RXQ5_FULL_DROP_PKTCNT_t      RXQ5_FULL_DROP_PKTCNT;         /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  DMA_DMA_LSO_RXQ6_FULL_DROP_PKTCNT_t      RXQ6_FULL_DROP_PKTCNT;         /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  DMA_DMA_LSO_RXQ7_FULL_DROP_PKTCNT_t      RXQ7_FULL_DROP_PKTCNT;         /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  DMA_DMA_LSO_TXQ0_PKTCNT_t                TXQ0_PKTCNT;                   /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  DMA_DMA_LSO_TXQ1_PKTCNT_t                TXQ1_PKTCNT;                   /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  DMA_DMA_LSO_TXQ2_PKTCNT_t                TXQ2_PKTCNT;                   /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  DMA_DMA_LSO_TXQ3_PKTCNT_t                TXQ3_PKTCNT;                   /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  DMA_DMA_LSO_TXQ4_PKTCNT_t                TXQ4_PKTCNT;                   /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  DMA_DMA_LSO_TXQ5_PKTCNT_t                TXQ5_PKTCNT;                   /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  DMA_DMA_LSO_TXQ6_PKTCNT_t                TXQ6_PKTCNT;                   /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  DMA_DMA_LSO_TXQ7_PKTCNT_t                TXQ7_PKTCNT;                   /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  DMA_DMA_LSO_BMC0_START_t                 BMC0_START;                    /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  DMA_DMA_LSO_BMC0_SOURCE_ADDR_t           BMC0_SOURCE_ADDR;              /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  DMA_DMA_LSO_BMC0_DESTINATION_ADDR_t      BMC0_DESTINATION_ADDR;         /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  DMA_DMA_LSO_BMC0_COPY_BYTE_t             BMC0_COPY_BYTE;                /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  DMA_DMA_LSO_BMC1_START_t                 BMC1_START;                    /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  DMA_DMA_LSO_BMC1_SOURCE_ADDR_t           BMC1_SOURCE_ADDR;              /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  DMA_DMA_LSO_BMC1_DESTINATION_ADDR_t      BMC1_DESTINATION_ADDR;         /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  DMA_DMA_LSO_BMC1_COPY_BYTE_t             BMC1_COPY_BYTE;                /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  DMA_DMA_LSO_VLAN_TAG_TYPE0_t             VLAN_TAG_TYPE0;                /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  DMA_DMA_LSO_VLAN_TAG_TYPE1_t             VLAN_TAG_TYPE1;                /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  DMA_DMA_LSO_DMA_LSO_INTERRUPT_0_t        DMA_LSO_INTERRUPT_0;           /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  DMA_DMA_LSO_DMA_LSO_INTENABLE_0_t        DMA_LSO_INTENABLE_0;           /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  DMA_DMA_LSO_DMA_LSO_INTERRUPT_1_t        DMA_LSO_INTERRUPT_1;           /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  DMA_DMA_LSO_DMA_LSO_INTENABLE_1_t        DMA_LSO_INTENABLE_1;           /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  DMA_DMA_LSO_DESC_INTERRUPT_t             DESC_INTERRUPT;                /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  DMA_DMA_LSO_DESC_INTENABLE_t             DESC_INTENABLE;                /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  DMA_DMA_LSO_RXQ0_INTERRUPT_t             RXQ0_INTERRUPT;                /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  DMA_DMA_LSO_RXQ0_INTENABLE_t             RXQ0_INTENABLE;                /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  DMA_DMA_LSO_RXQ1_INTERRUPT_t             RXQ1_INTERRUPT;                /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  DMA_DMA_LSO_RXQ1_INTENABLE_t             RXQ1_INTENABLE;                /* addr: 0x000001f4 */ 
  cs_uint32                                rsrvd126[3];                  
  DMA_DMA_LSO_RXQ2_INTERRUPT_t             RXQ2_INTERRUPT;                /* addr: 0x000001f8 */ 
  cs_uint32                                rsrvd127[3];                  
  DMA_DMA_LSO_RXQ2_INTENABLE_t             RXQ2_INTENABLE;                /* addr: 0x000001fc */ 
  cs_uint32                                rsrvd128[3];                  
  DMA_DMA_LSO_RXQ3_INTERRUPT_t             RXQ3_INTERRUPT;                /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd129[3];                  
  DMA_DMA_LSO_RXQ3_INTENABLE_t             RXQ3_INTENABLE;                /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd130[3];                  
  DMA_DMA_LSO_RXQ4_INTERRUPT_t             RXQ4_INTERRUPT;                /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd131[3];                  
  DMA_DMA_LSO_RXQ4_INTENABLE_t             RXQ4_INTENABLE;                /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd132[3];                  
  DMA_DMA_LSO_RXQ5_INTERRUPT_t             RXQ5_INTERRUPT;                /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd133[3];                  
  DMA_DMA_LSO_RXQ5_INTENABLE_t             RXQ5_INTENABLE;                /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd134[3];                  
  DMA_DMA_LSO_RXQ6_INTERRUPT_t             RXQ6_INTERRUPT;                /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd135[3];                  
  DMA_DMA_LSO_RXQ6_INTENABLE_t             RXQ6_INTENABLE;                /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd136[3];                  
  DMA_DMA_LSO_RXQ7_INTERRUPT_t             RXQ7_INTERRUPT;                /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd137[3];                  
  DMA_DMA_LSO_RXQ7_INTENABLE_t             RXQ7_INTENABLE;                /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd138[3];                  
  DMA_DMA_LSO_TXQ0_INTERRUPT_t             TXQ0_INTERRUPT;                /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd139[3];                  
  DMA_DMA_LSO_TXQ0_INTENABLE_t             TXQ0_INTENABLE;                /* addr: 0x0000022c */ 
  cs_uint32                                rsrvd140[3];                  
  DMA_DMA_LSO_TXQ1_INTERRUPT_t             TXQ1_INTERRUPT;                /* addr: 0x00000230 */ 
  cs_uint32                                rsrvd141[3];                  
  DMA_DMA_LSO_TXQ1_INTENABLE_t             TXQ1_INTENABLE;                /* addr: 0x00000234 */ 
  cs_uint32                                rsrvd142[3];                  
  DMA_DMA_LSO_TXQ2_INTERRUPT_t             TXQ2_INTERRUPT;                /* addr: 0x00000238 */ 
  cs_uint32                                rsrvd143[3];                  
  DMA_DMA_LSO_TXQ2_INTENABLE_t             TXQ2_INTENABLE;                /* addr: 0x0000023c */ 
  cs_uint32                                rsrvd144[3];                  
  DMA_DMA_LSO_TXQ3_INTERRUPT_t             TXQ3_INTERRUPT;                /* addr: 0x00000240 */ 
  cs_uint32                                rsrvd145[3];                  
  DMA_DMA_LSO_TXQ3_INTENABLE_t             TXQ3_INTENABLE;                /* addr: 0x00000244 */ 
  cs_uint32                                rsrvd146[3];                  
  DMA_DMA_LSO_TXQ4_INTERRUPT_t             TXQ4_INTERRUPT;                /* addr: 0x00000248 */ 
  cs_uint32                                rsrvd147[3];                  
  DMA_DMA_LSO_TXQ4_INTENABLE_t             TXQ4_INTENABLE;                /* addr: 0x0000024c */ 
  cs_uint32                                rsrvd148[3];                  
  DMA_DMA_LSO_TXQ5_INTERRUPT_t             TXQ5_INTERRUPT;                /* addr: 0x00000250 */ 
  cs_uint32                                rsrvd149[3];                  
  DMA_DMA_LSO_TXQ5_INTENABLE_t             TXQ5_INTENABLE;                /* addr: 0x00000254 */ 
  cs_uint32                                rsrvd150[3];                  
  DMA_DMA_LSO_TXQ6_INTERRUPT_t             TXQ6_INTERRUPT;                /* addr: 0x00000258 */ 
  cs_uint32                                rsrvd151[3];                  
  DMA_DMA_LSO_TXQ6_INTENABLE_t             TXQ6_INTENABLE;                /* addr: 0x0000025c */ 
  cs_uint32                                rsrvd152[3];                  
  DMA_DMA_LSO_TXQ7_INTERRUPT_t             TXQ7_INTERRUPT;                /* addr: 0x00000260 */ 
  cs_uint32                                rsrvd153[3];                  
  DMA_DMA_LSO_TXQ7_INTENABLE_t             TXQ7_INTENABLE;                /* addr: 0x00000264 */ 
  cs_uint32                                rsrvd154[3];                  
  DMA_DMA_LSO_BMC0_INTERRUPT_t             BMC0_INTERRUPT;                /* addr: 0x00000268 */ 
  cs_uint32                                rsrvd155[3];                  
  DMA_DMA_LSO_BMC0_INTENABLE_t             BMC0_INTENABLE;                /* addr: 0x0000026c */ 
  cs_uint32                                rsrvd156[3];                  
  DMA_DMA_LSO_BMC1_INTERRUPT_t             BMC1_INTERRUPT;                /* addr: 0x00000270 */ 
  cs_uint32                                rsrvd157[3];                  
  DMA_DMA_LSO_BMC1_INTENABLE_t             BMC1_INTENABLE;                /* addr: 0x00000274 */ 
  cs_uint32                                rsrvd158[3];                  
  DMA_DMA_LSO_RX_FDES_ADDR_t               RX_FDES_ADDR;                  /* addr: 0x00000278 */ 
  cs_uint32                                rsrvd159[3];                  
  DMA_DMA_LSO_RX_CDES_ADDR_t               RX_CDES_ADDR;                  /* addr: 0x0000027c */ 
  cs_uint32                                rsrvd160[3];                  
  DMA_DMA_LSO_RX_DES_WORD0_t               RX_DES_WORD0;                  /* addr: 0x00000280 */ 
  cs_uint32                                rsrvd161[3];                  
  DMA_DMA_LSO_RX_DES_WORD1_t               RX_DES_WORD1;                  /* addr: 0x00000284 */ 
  cs_uint32                                rsrvd162[3];                  
  DMA_DMA_LSO_TX_FDES_ADDR_t               TX_FDES_ADDR;                  /* addr: 0x00000288 */ 
  cs_uint32                                rsrvd163[3];                  
  DMA_DMA_LSO_TX_CDES_ADDR_t               TX_CDES_ADDR;                  /* addr: 0x0000028c */ 
  cs_uint32                                rsrvd164[3];                  
  DMA_DMA_LSO_TX_DES_WORD0_t               TX_DES_WORD0;                  /* addr: 0x00000290 */ 
  cs_uint32                                rsrvd165[3];                  
  DMA_DMA_LSO_TX_DES_WORD1_t               TX_DES_WORD1;                  /* addr: 0x00000294 */ 
  cs_uint32                                rsrvd166[3];                  
  DMA_DMA_LSO_TX_DES_WORD2_t               TX_DES_WORD2;                  /* addr: 0x00000298 */ 
  cs_uint32                                rsrvd167[3];                  
  DMA_DMA_LSO_TX_DES_WORD3_t               TX_DES_WORD3;                  /* addr: 0x0000029c */ 
  cs_uint32                                rsrvd168[3];                  
  DMA_DMA_LSO_TX_DES_WORD4_t               TX_DES_WORD4;                  /* addr: 0x000002a0 */ 
  cs_uint32                                rsrvd169[3];                  
  DMA_DMA_LSO_TX_DES_WORD5_t               TX_DES_WORD5;                  /* addr: 0x000002a4 */ 
  cs_uint32                                rsrvd170[3];                  
  DMA_DMA_LSO_TX_DES_WORD6_t               TX_DES_WORD6;                  /* addr: 0x000002a8 */ 
  cs_uint32                                rsrvd171[3];                  
  DMA_DMA_LSO_TX_DES_WORD7_t               TX_DES_WORD7;                  /* addr: 0x000002ac */ 
  cs_uint32                                rsrvd172[3];                  
  DMA_DMA_LSO_DEBUG_0_t                    DEBUG_0;                       /* addr: 0x000002b0 */ 
  cs_uint32                                rsrvd173[3];                  
  DMA_DMA_LSO_DEBUG_1_t                    DEBUG_1;                       /* addr: 0x000002b4 */ 
  cs_uint32                                rsrvd174[3];                  
  DMA_DMA_LSO_DEBUG_2_t                    DEBUG_2;                       /* addr: 0x000002b8 */ 
  cs_uint32                                rsrvd175[3];                  
  DMA_DMA_LSO_DEBUG_3_t                    DEBUG_3;                       /* addr: 0x000002bc */ 
  cs_uint32                                rsrvd176[3];                  
  DMA_DMA_LSO_DEBUG_4_t                    DEBUG_4;                       /* addr: 0x000002c0 */ 
  cs_uint32                                rsrvd177[3];                  
  DMA_DMA_LSO_DMA_SPARE_0_t                DMA_SPARE_0;                   /* addr: 0x000002c4 */ 
  cs_uint32                                rsrvd178[3];                  
  DMA_DMA_LSO_DMA_SPARE_1_t                DMA_SPARE_1;                   /* addr: 0x000002c8 */ 
} DMA_DMA_LSO_t;

  

/*
 * D_AXI
 */
  



#define DMA_D_AXI_CONFIG                         0xf0090300
#define DMA_D_AXI_CONFIG_dft                     0x000000c0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 axi_read_channel2_arbscheme :  1 ; /* bits 21:21 */
    cs_uint32 axi_read_channel3_arbscheme :  1 ; /* bits 20:20 */
    cs_uint32 axi_read_channel4_arbscheme :  1 ; /* bits 19:19 */
    cs_uint32 axi_read_channel5_arbscheme :  1 ; /* bits 18:18 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel2_arbscheme :  1 ; /* bits 13:13 */
    cs_uint32 axi_write_channel3_arbscheme :  1 ; /* bits 12:12 */
    cs_uint32 axi_write_channel4_arbscheme :  1 ; /* bits 11:11 */
    cs_uint32 axi_write_channel5_arbscheme :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 axi_write_channel5_arbscheme :  1 ; /* bits 10:10 */
    cs_uint32 axi_write_channel4_arbscheme :  1 ; /* bits 11:11 */
    cs_uint32 axi_write_channel3_arbscheme :  1 ; /* bits 12:12 */
    cs_uint32 axi_write_channel2_arbscheme :  1 ; /* bits 13:13 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 axi_read_channel5_arbscheme :  1 ; /* bits 18:18 */
    cs_uint32 axi_read_channel4_arbscheme :  1 ; /* bits 19:19 */
    cs_uint32 axi_read_channel3_arbscheme :  1 ; /* bits 20:20 */
    cs_uint32 axi_read_channel2_arbscheme :  1 ; /* bits 21:21 */
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_CONFIG_t;





#define DMA_D_AXI_READ_ARB_ID                    0xf0090304
#define DMA_D_AXI_READ_ARB_ID_dft                0x0002c688




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 axi_rchannel5_SPpri_or_DRRid :  3 ; /* bits 17:15 */
    cs_uint32 axi_rchannel4_SPpri_or_DRRid :  3 ; /* bits 14:12 */
    cs_uint32 axi_rchannel3_SPpri_or_DRRid :  3 ; /* bits 11:9 */
    cs_uint32 axi_rchannel2_SPpri_or_DRRid :  3 ; /* bits 8:6 */
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  3 ; /* bits 5:3 */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  3 ; /* bits 2:0 */
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  3 ; /* bits 5:3 */
    cs_uint32 axi_rchannel2_SPpri_or_DRRid :  3 ; /* bits 8:6 */
    cs_uint32 axi_rchannel3_SPpri_or_DRRid :  3 ; /* bits 11:9 */
    cs_uint32 axi_rchannel4_SPpri_or_DRRid :  3 ; /* bits 14:12 */
    cs_uint32 axi_rchannel5_SPpri_or_DRRid :  3 ; /* bits 17:15 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_ARB_ID_t;





#define DMA_D_AXI_WRITE_ARB_ID                   0xf0090308
#define DMA_D_AXI_WRITE_ARB_ID_dft               0x0002c688




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 axi_wchannel5_SPpri_or_DRRid :  3 ; /* bits 17:15 */
    cs_uint32 axi_wchannel4_SPpri_or_DRRid :  3 ; /* bits 14:12 */
    cs_uint32 axi_wchannel3_SPpri_or_DRRid :  3 ; /* bits 11:9 */
    cs_uint32 axi_wchannel2_SPpri_or_DRRid :  3 ; /* bits 8:6 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  3 ; /* bits 5:3 */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  3 ; /* bits 2:0 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  3 ; /* bits 5:3 */
    cs_uint32 axi_wchannel2_SPpri_or_DRRid :  3 ; /* bits 8:6 */
    cs_uint32 axi_wchannel3_SPpri_or_DRRid :  3 ; /* bits 11:9 */
    cs_uint32 axi_wchannel4_SPpri_or_DRRid :  3 ; /* bits 14:12 */
    cs_uint32 axi_wchannel5_SPpri_or_DRRid :  3 ; /* bits 17:15 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_ARB_ID_t;





#define DMA_D_AXI_READ_CHANNEL_0_3_DRR_WEIGHT    0xf009030c
#define DMA_D_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_dft 0x10101010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_rchannel_0_3_DRRweight : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel_0_3_DRRweight : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t;





#define DMA_D_AXI_READ_CHANNEL_4_7_DRR_WEIGHT    0xf0090310
#define DMA_D_AXI_READ_CHANNEL_4_7_DRR_WEIGHT_dft 0x00001010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 axi_rchannel_4_7_DRRweight : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel_4_7_DRRweight : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL_4_7_DRR_WEIGHT_t;





#define DMA_D_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT   0xf0090314
#define DMA_D_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_dft 0x10101010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_wchannel_0_3_DRRweight : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel_0_3_DRRweight : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t;





#define DMA_D_AXI_WRITE_CHANNEL_4_7_DRR_WEIGHT   0xf0090318
#define DMA_D_AXI_WRITE_CHANNEL_4_7_DRR_WEIGHT_dft 0x00001010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 axi_wchannel_4_7_DRRweight : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel_4_7_DRRweight : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL_4_7_DRR_WEIGHT_t;





#define DMA_D_AXI_RWID_VALUE                     0xf009031c
#define DMA_D_AXI_RWID_VALUE_dft                 0x00000021




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_RWID_VALUE_t;





#define DMA_D_AXI_READ_TIMEOUT_THRESHOLD         0xf0090320
#define DMA_D_AXI_READ_TIMEOUT_THRESHOLD_dft     0x88888800




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_rchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_rchannel3_timeout_threshold :  4 ; /* bits 19:16 */
    cs_uint32 axi_rchannel4_timeout_threshold :  4 ; /* bits 15:12 */
    cs_uint32 axi_rchannel5_timeout_threshold :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  8 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 axi_rchannel5_timeout_threshold :  4 ; /* bits 11:8 */
    cs_uint32 axi_rchannel4_timeout_threshold :  4 ; /* bits 15:12 */
    cs_uint32 axi_rchannel3_timeout_threshold :  4 ; /* bits 19:16 */
    cs_uint32 axi_rchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_TIMEOUT_THRESHOLD_t;





#define DMA_D_AXI_WRITE_TIMEOUT_THRESHOLD        0xf0090324
#define DMA_D_AXI_WRITE_TIMEOUT_THRESHOLD_dft    0x88888800




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_wchannel3_timeout_threshold :  4 ; /* bits 19:16 */
    cs_uint32 axi_wchannel4_timeout_threshold :  4 ; /* bits 15:12 */
    cs_uint32 axi_wchannel5_timeout_threshold :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  8 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 axi_wchannel5_timeout_threshold :  4 ; /* bits 11:8 */
    cs_uint32 axi_wchannel4_timeout_threshold :  4 ; /* bits 15:12 */
    cs_uint32 axi_wchannel3_timeout_threshold :  4 ; /* bits 19:16 */
    cs_uint32 axi_wchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_TIMEOUT_THRESHOLD_t;





#define DMA_D_AXI_READ_CHANNEL000_INTERRUPT      0xf0090328
#define DMA_D_AXI_READ_CHANNEL000_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL000_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL001_INTERRUPT      0xf009032c
#define DMA_D_AXI_READ_CHANNEL001_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL001_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL010_INTERRUPT      0xf0090330
#define DMA_D_AXI_READ_CHANNEL010_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel010_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL010_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL011_INTERRUPT      0xf0090334
#define DMA_D_AXI_READ_CHANNEL011_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel011_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel011_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel011_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL011_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL100_INTERRUPT      0xf0090338
#define DMA_D_AXI_READ_CHANNEL100_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel100_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel100_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel100_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL100_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL101_INTERRUPT      0xf009033c
#define DMA_D_AXI_READ_CHANNEL101_INTERRUPT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel101_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel101_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel101_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL101_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT     0xf0090340
#define DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT     0xf0090344
#define DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT     0xf0090348
#define DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT     0xf009034c
#define DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel011_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel011_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel011_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel011_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT     0xf0090350
#define DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel100_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel100_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel100_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel100_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_t;





#define DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT     0xf0090354
#define DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel101_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel101_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel101_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel101_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_t;





#define DMA_D_AXI_READ_CHANNEL000_INTERRUPT_ENABLE 0xf0090358
#define DMA_D_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_READ_CHANNEL001_INTERRUPT_ENABLE 0xf009035c
#define DMA_D_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_READ_CHANNEL010_INTERRUPT_ENABLE 0xf0090360
#define DMA_D_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel010_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_READ_CHANNEL011_INTERRUPT_ENABLE 0xf0090364
#define DMA_D_AXI_READ_CHANNEL011_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel011_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel011_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel011_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL011_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_READ_CHANNEL100_INTERRUPT_ENABLE 0xf0090368
#define DMA_D_AXI_READ_CHANNEL100_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel100_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel100_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel100_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL100_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_READ_CHANNEL101_INTERRUPT_ENABLE 0xf009036c
#define DMA_D_AXI_READ_CHANNEL101_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel101_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel101_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel101_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_READ_CHANNEL101_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE 0xf0090370
#define DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE 0xf0090374
#define DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE 0xf0090378
#define DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_ENABLE 0xf009037c
#define DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel011_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel011_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel011_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel011_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel011_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel011_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel011_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel011_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_ENABLE 0xf0090380
#define DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel100_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel100_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel100_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel100_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel100_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel100_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel100_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel100_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_ENABLE 0xf0090384
#define DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel101_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel101_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel101_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel101_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel101_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel101_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel101_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel101_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_ENABLE_t;





#define DMA_D_AXI_RESERVED                       0xf0090388
#define DMA_D_AXI_RESERVED_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_D_AXI_RESERVED_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* D_AXI */

typedef struct {
  DMA_D_AXI_CONFIG_t                       CONFIG;                        /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  DMA_D_AXI_READ_ARB_ID_t                  READ_ARB_ID;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  DMA_D_AXI_WRITE_ARB_ID_t                 WRITE_ARB_ID;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  DMA_D_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t  READ_CHANNEL_0_3_DRR_WEIGHT;   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  DMA_D_AXI_READ_CHANNEL_4_7_DRR_WEIGHT_t  READ_CHANNEL_4_7_DRR_WEIGHT;   /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  DMA_D_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t WRITE_CHANNEL_0_3_DRR_WEIGHT;  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  DMA_D_AXI_WRITE_CHANNEL_4_7_DRR_WEIGHT_t WRITE_CHANNEL_4_7_DRR_WEIGHT;  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  DMA_D_AXI_RWID_VALUE_t                   RWID_VALUE;                    /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  DMA_D_AXI_READ_TIMEOUT_THRESHOLD_t       READ_TIMEOUT_THRESHOLD;        /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  DMA_D_AXI_WRITE_TIMEOUT_THRESHOLD_t      WRITE_TIMEOUT_THRESHOLD;       /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  DMA_D_AXI_READ_CHANNEL000_INTERRUPT_t    READ_CHANNEL000_INTERRUPT;     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  DMA_D_AXI_READ_CHANNEL001_INTERRUPT_t    READ_CHANNEL001_INTERRUPT;     /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  DMA_D_AXI_READ_CHANNEL010_INTERRUPT_t    READ_CHANNEL010_INTERRUPT;     /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  DMA_D_AXI_READ_CHANNEL011_INTERRUPT_t    READ_CHANNEL011_INTERRUPT;     /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  DMA_D_AXI_READ_CHANNEL100_INTERRUPT_t    READ_CHANNEL100_INTERRUPT;     /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  DMA_D_AXI_READ_CHANNEL101_INTERRUPT_t    READ_CHANNEL101_INTERRUPT;     /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_t   WRITE_CHANNEL000_INTERRUPT;    /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_t   WRITE_CHANNEL001_INTERRUPT;    /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_t   WRITE_CHANNEL010_INTERRUPT;    /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_t   WRITE_CHANNEL011_INTERRUPT;    /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_t   WRITE_CHANNEL100_INTERRUPT;    /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_t   WRITE_CHANNEL101_INTERRUPT;    /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  DMA_D_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t READ_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  DMA_D_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t READ_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  DMA_D_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_t READ_CHANNEL010_INTERRUPT_ENABLE; /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  DMA_D_AXI_READ_CHANNEL011_INTERRUPT_ENABLE_t READ_CHANNEL011_INTERRUPT_ENABLE; /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  DMA_D_AXI_READ_CHANNEL100_INTERRUPT_ENABLE_t READ_CHANNEL100_INTERRUPT_ENABLE; /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  DMA_D_AXI_READ_CHANNEL101_INTERRUPT_ENABLE_t READ_CHANNEL101_INTERRUPT_ENABLE; /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  DMA_D_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t WRITE_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  DMA_D_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t WRITE_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  DMA_D_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_t WRITE_CHANNEL010_INTERRUPT_ENABLE; /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  DMA_D_AXI_WRITE_CHANNEL011_INTERRUPT_ENABLE_t WRITE_CHANNEL011_INTERRUPT_ENABLE; /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  DMA_D_AXI_WRITE_CHANNEL100_INTERRUPT_ENABLE_t WRITE_CHANNEL100_INTERRUPT_ENABLE; /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  DMA_D_AXI_WRITE_CHANNEL101_INTERRUPT_ENABLE_t WRITE_CHANNEL101_INTERRUPT_ENABLE; /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  DMA_D_AXI_RESERVED_t                     RESERVED;                      /* addr: 0x00000088 */ 
} DMA_D_AXI_t;

  

/*
 * DMA_SSP
 */
  



#define DMA_DMA_SSP_RXDMA_CONTROL                0xf0090400
#define DMA_DMA_SSP_RXDMA_CONTROL_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXDMA_CONTROL_t;





#define DMA_DMA_SSP_TXDMA_CONTROL                0xf0090404
#define DMA_DMA_SSP_TXDMA_CONTROL_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXDMA_CONTROL_t;





#define DMA_DMA_SSP_RXQ5_CONTROL                 0xf0090408
#define DMA_DMA_SSP_RXQ5_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_CONTROL_t;





#define DMA_DMA_SSP_RXQ6_CONTROL                 0xf009040c
#define DMA_DMA_SSP_RXQ6_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_CONTROL_t;





#define DMA_DMA_SSP_RXQ7_CONTROL                 0xf0090410
#define DMA_DMA_SSP_RXQ7_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 rxq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 rxq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_CONTROL_t;





#define DMA_DMA_SSP_TXQ5_CONTROL                 0xf0090414
#define DMA_DMA_SSP_TXQ5_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 29 ;
    cs_uint32 txq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txq5_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txq5_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd2               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_CONTROL_t;





#define DMA_DMA_SSP_TXQ6_CONTROL                 0xf0090418
#define DMA_DMA_SSP_TXQ6_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 txq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 txq6_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_en              :  1 ; /* bits 0:0 */
    cs_uint32 txq6_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_CONTROL_t;





#define DMA_DMA_SSP_TXQ7_CONTROL                 0xf009041c
#define DMA_DMA_SSP_TXQ7_CONTROL_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 txq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 txq7_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_en              :  1 ; /* bits 0:0 */
    cs_uint32 txq7_sp_en           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_flush_en        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_CONTROL_t;





#define DMA_DMA_SSP_RXQ5_PKTCNT_READ             0xf0090420
#define DMA_DMA_SSP_RXQ5_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_PKTCNT_READ_t;





#define DMA_DMA_SSP_RXQ6_PKTCNT_READ             0xf0090424
#define DMA_DMA_SSP_RXQ6_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_PKTCNT_READ_t;





#define DMA_DMA_SSP_RXQ7_PKTCNT_READ             0xf0090428
#define DMA_DMA_SSP_RXQ7_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_PKTCNT_READ_t;





#define DMA_DMA_SSP_TXQ5_PKTCNT_READ             0xf009042c
#define DMA_DMA_SSP_TXQ5_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq5_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_PKTCNT_READ_t;





#define DMA_DMA_SSP_TXQ6_PKTCNT_READ             0xf0090430
#define DMA_DMA_SSP_TXQ6_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq6_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_PKTCNT_READ_t;





#define DMA_DMA_SSP_TXQ7_PKTCNT_READ             0xf0090434
#define DMA_DMA_SSP_TXQ7_PKTCNT_READ_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq7_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_PKTCNT_READ_t;





#define DMA_DMA_SSP_RXQ5_BASE_DEPTH              0xf0090438
#define DMA_DMA_SSP_RXQ5_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_BASE_DEPTH_t;





#define DMA_DMA_SSP_RXQ6_BASE_DEPTH              0xf009043c
#define DMA_DMA_SSP_RXQ6_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_BASE_DEPTH_t;





#define DMA_DMA_SSP_RXQ7_BASE_DEPTH              0xf0090440
#define DMA_DMA_SSP_RXQ7_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_BASE_DEPTH_t;





#define DMA_DMA_SSP_RXQ5_WPTR                    0xf0090444
#define DMA_DMA_SSP_RXQ5_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_WPTR_t;





#define DMA_DMA_SSP_RXQ5_RPTR                    0xf0090448
#define DMA_DMA_SSP_RXQ5_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_RPTR_t;





#define DMA_DMA_SSP_RXQ6_WPTR                    0xf009044c
#define DMA_DMA_SSP_RXQ6_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_WPTR_t;





#define DMA_DMA_SSP_RXQ6_RPTR                    0xf0090450
#define DMA_DMA_SSP_RXQ6_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_RPTR_t;





#define DMA_DMA_SSP_RXQ7_WPTR                    0xf0090454
#define DMA_DMA_SSP_RXQ7_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_WPTR_t;





#define DMA_DMA_SSP_RXQ7_RPTR                    0xf0090458
#define DMA_DMA_SSP_RXQ7_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_RPTR_t;





#define DMA_DMA_SSP_TXQ5_BASE_DEPTH              0xf009045c
#define DMA_DMA_SSP_TXQ5_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_BASE_DEPTH_t;





#define DMA_DMA_SSP_TXQ6_BASE_DEPTH              0xf0090460
#define DMA_DMA_SSP_TXQ6_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_BASE_DEPTH_t;





#define DMA_DMA_SSP_TXQ7_BASE_DEPTH              0xf0090464
#define DMA_DMA_SSP_TXQ7_BASE_DEPTH_dft          0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_BASE_DEPTH_t;





#define DMA_DMA_SSP_TXQ5_WPTR                    0xf0090468
#define DMA_DMA_SSP_TXQ5_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_WPTR_t;





#define DMA_DMA_SSP_TXQ5_RPTR                    0xf009046c
#define DMA_DMA_SSP_TXQ5_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_RPTR_t;





#define DMA_DMA_SSP_TXQ6_WPTR                    0xf0090470
#define DMA_DMA_SSP_TXQ6_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_WPTR_t;





#define DMA_DMA_SSP_TXQ6_RPTR                    0xf0090474
#define DMA_DMA_SSP_TXQ6_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_RPTR_t;





#define DMA_DMA_SSP_TXQ7_WPTR                    0xf0090478
#define DMA_DMA_SSP_TXQ7_WPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_WPTR_t;





#define DMA_DMA_SSP_TXQ7_RPTR                    0xf009047c
#define DMA_DMA_SSP_TXQ7_RPTR_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_RPTR_t;





#define DMA_DMA_SSP_RXQ5_FULL_THRESHOLD          0xf0090480
#define DMA_DMA_SSP_RXQ5_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_FULL_THRESHOLD_t;





#define DMA_DMA_SSP_RXQ6_FULL_THRESHOLD          0xf0090484
#define DMA_DMA_SSP_RXQ6_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_FULL_THRESHOLD_t;





#define DMA_DMA_SSP_RXQ7_FULL_THRESHOLD          0xf0090488
#define DMA_DMA_SSP_RXQ7_FULL_THRESHOLD_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_FULL_THRESHOLD_t;





#define DMA_DMA_SSP_RXQ5_PKTCNT                  0xf009048c
#define DMA_DMA_SSP_RXQ5_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_PKTCNT_t;





#define DMA_DMA_SSP_RXQ6_PKTCNT                  0xf0090490
#define DMA_DMA_SSP_RXQ6_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_PKTCNT_t;





#define DMA_DMA_SSP_RXQ7_PKTCNT                  0xf0090494
#define DMA_DMA_SSP_RXQ7_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_PKTCNT_t;





#define DMA_DMA_SSP_RXQ5_FULL_DROP_PKTCNT        0xf0090498
#define DMA_DMA_SSP_RXQ5_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_FULL_DROP_PKTCNT_t;





#define DMA_DMA_SSP_RXQ6_FULL_DROP_PKTCNT        0xf009049c
#define DMA_DMA_SSP_RXQ6_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_FULL_DROP_PKTCNT_t;





#define DMA_DMA_SSP_RXQ7_FULL_DROP_PKTCNT        0xf00904a0
#define DMA_DMA_SSP_RXQ7_FULL_DROP_PKTCNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_FULL_DROP_PKTCNT_t;





#define DMA_DMA_SSP_TXQ5_PKTCNT                  0xf00904a4
#define DMA_DMA_SSP_TXQ5_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_PKTCNT_t;





#define DMA_DMA_SSP_TXQ6_PKTCNT                  0xf00904a8
#define DMA_DMA_SSP_TXQ6_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_PKTCNT_t;





#define DMA_DMA_SSP_TXQ7_PKTCNT                  0xf00904ac
#define DMA_DMA_SSP_TXQ7_PKTCNT_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_PKTCNT_t;





#define DMA_DMA_SSP_DMA_SSP_INTERRUPT_0          0xf00904b0
#define DMA_DMA_SSP_DMA_SSP_INTERRUPT_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 SSP1_INTi            :  1 ; /* bits 14:14 */
    cs_uint32 SSP0_INTi            :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 7:7 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 12:12 */
    cs_uint32 SSP0_INTi            :  1 ; /* bits 13:13 */
    cs_uint32 SSP1_INTi            :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SSP_INTERRUPT_0_t;





#define DMA_DMA_SSP_DMA_SSP_INTENABLE_0          0xf00904b4
#define DMA_DMA_SSP_DMA_SSP_INTENABLE_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 SSP1_INTi_en         :  1 ; /* bits 14:14 */
    cs_uint32 SSP0_INTi_en         :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 7:7 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 12:12 */
    cs_uint32 SSP0_INTi_en         :  1 ; /* bits 13:13 */
    cs_uint32 SSP1_INTi_en         :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SSP_INTENABLE_0_t;





#define DMA_DMA_SSP_DMA_SSP_INTERRUPT_1          0xf00904b8
#define DMA_DMA_SSP_DMA_SSP_INTERRUPT_1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 SSP1_INTi            :  1 ; /* bits 14:14 */
    cs_uint32 SSP0_INTi            :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 7:7 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ5_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ6_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ7_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 TXQ5_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 TXQ6_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ7_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 12:12 */
    cs_uint32 SSP0_INTi            :  1 ; /* bits 13:13 */
    cs_uint32 SSP1_INTi            :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SSP_INTERRUPT_1_t;





#define DMA_DMA_SSP_DMA_SSP_INTENABLE_1          0xf00904bc
#define DMA_DMA_SSP_DMA_SSP_INTENABLE_1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 17 ;
    cs_uint32 SSP1_INTi_en         :  1 ; /* bits 14:14 */
    cs_uint32 SSP0_INTi_en         :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 7:7 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ5_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ6_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ7_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 TXQ5_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 TXQ6_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ7_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 12:12 */
    cs_uint32 SSP0_INTi_en         :  1 ; /* bits 13:13 */
    cs_uint32 SSP1_INTi_en         :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SSP_INTENABLE_1_t;





#define DMA_DMA_SSP_DESC_INTERRUPT               0xf00904c0
#define DMA_DMA_SSP_DESC_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DESC_INTERRUPT_t;





#define DMA_DMA_SSP_DESC_INTENABLE               0xf00904c4
#define DMA_DMA_SSP_DESC_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DESC_INTENABLE_t;





#define DMA_DMA_SSP_RXQ5_INTERRUPT               0xf00904c8
#define DMA_DMA_SSP_RXQ5_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_INTERRUPT_t;





#define DMA_DMA_SSP_RXQ5_INTENABLE               0xf00904cc
#define DMA_DMA_SSP_RXQ5_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq5_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq5_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq5_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq5_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_INTENABLE_t;





#define DMA_DMA_SSP_RXQ6_INTERRUPT               0xf00904d0
#define DMA_DMA_SSP_RXQ6_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_INTERRUPT_t;





#define DMA_DMA_SSP_RXQ6_INTENABLE               0xf00904d4
#define DMA_DMA_SSP_RXQ6_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq6_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq6_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq6_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq6_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_INTENABLE_t;





#define DMA_DMA_SSP_RXQ7_INTERRUPT               0xf00904d8
#define DMA_DMA_SSP_RXQ7_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_INTERRUPT_t;





#define DMA_DMA_SSP_RXQ7_INTENABLE               0xf00904dc
#define DMA_DMA_SSP_RXQ7_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq7_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq7_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq7_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq7_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_INTENABLE_t;





#define DMA_DMA_SSP_TXQ5_INTERRUPT               0xf00904e0
#define DMA_DMA_SSP_TXQ5_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq5_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq5_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq5_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq5_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq5_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_INTERRUPT_t;





#define DMA_DMA_SSP_TXQ5_INTENABLE               0xf00904e4
#define DMA_DMA_SSP_TXQ5_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq5_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq5_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq5_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq5_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq5_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq5_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_INTENABLE_t;





#define DMA_DMA_SSP_TXQ6_INTERRUPT               0xf00904e8
#define DMA_DMA_SSP_TXQ6_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq6_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq6_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq6_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq6_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_INTERRUPT_t;





#define DMA_DMA_SSP_TXQ6_INTENABLE               0xf00904ec
#define DMA_DMA_SSP_TXQ6_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq6_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq6_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq6_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq6_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq6_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq6_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_INTENABLE_t;





#define DMA_DMA_SSP_TXQ7_INTERRUPT               0xf00904f0
#define DMA_DMA_SSP_TXQ7_INTERRUPT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq7_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq7_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq7_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq7_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_INTERRUPT_t;





#define DMA_DMA_SSP_TXQ7_INTENABLE               0xf00904f4
#define DMA_DMA_SSP_TXQ7_INTENABLE_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq7_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq7_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq7_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq7_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq7_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq7_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_INTENABLE_t;





#define DMA_DMA_SSP_RX_FDES_ADDR                 0xf00904f8
#define DMA_DMA_SSP_RX_FDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RX_FDES_ADDR_t;





#define DMA_DMA_SSP_RX_CDES_ADDR                 0xf00904fc
#define DMA_DMA_SSP_RX_CDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RX_CDES_ADDR_t;





#define DMA_DMA_SSP_RX_DES_WORD0                 0xf0090500
#define DMA_DMA_SSP_RX_DES_WORD0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RX_DES_WORD0_t;





#define DMA_DMA_SSP_RX_DES_WORD1                 0xf0090504
#define DMA_DMA_SSP_RX_DES_WORD1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RX_DES_WORD1_t;





#define DMA_DMA_SSP_TX_FDES_ADDR                 0xf0090508
#define DMA_DMA_SSP_TX_FDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_FDES_ADDR_t;





#define DMA_DMA_SSP_TX_CDES_ADDR                 0xf009050c
#define DMA_DMA_SSP_TX_CDES_ADDR_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_CDES_ADDR_t;





#define DMA_DMA_SSP_TX_DES_WORD0                 0xf0090510
#define DMA_DMA_SSP_TX_DES_WORD0_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_DES_WORD0_t;





#define DMA_DMA_SSP_TX_DES_WORD1                 0xf0090514
#define DMA_DMA_SSP_TX_DES_WORD1_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_DES_WORD1_t;





#define DMA_DMA_SSP_TX_DES_WORD2                 0xf0090518
#define DMA_DMA_SSP_TX_DES_WORD2_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_DES_WORD2_t;





#define DMA_DMA_SSP_TX_DES_WORD3                 0xf009051c
#define DMA_DMA_SSP_TX_DES_WORD3_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TX_DES_WORD3_t;





#define DMA_DMA_SSP_RXQ5_FRAG_BUFF_ADDR          0xf0090520
#define DMA_DMA_SSP_RXQ5_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_RXQ5_FRAG_BUFF_SIZE          0xf0090524
#define DMA_DMA_SSP_RXQ5_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ5_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_RXQ6_FRAG_BUFF_ADDR          0xf0090528
#define DMA_DMA_SSP_RXQ6_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_RXQ6_FRAG_BUFF_SIZE          0xf009052c
#define DMA_DMA_SSP_RXQ6_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ6_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_RXQ7_FRAG_BUFF_ADDR          0xf0090530
#define DMA_DMA_SSP_RXQ7_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_RXQ7_FRAG_BUFF_SIZE          0xf0090534
#define DMA_DMA_SSP_RXQ7_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 13 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_RXQ7_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_TXQ5_FRAG_BUFF_ADDR          0xf0090538
#define DMA_DMA_SSP_TXQ5_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_TXQ5_FRAG_BUFF_SIZE          0xf009053c
#define DMA_DMA_SSP_TXQ5_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd3               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ5_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_TXQ6_FRAG_BUFF_ADDR          0xf0090540
#define DMA_DMA_SSP_TXQ6_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_TXQ6_FRAG_BUFF_SIZE          0xf0090544
#define DMA_DMA_SSP_TXQ6_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd3               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ6_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_TXQ7_FRAG_BUFF_ADDR          0xf0090548
#define DMA_DMA_SSP_TXQ7_FRAG_BUFF_ADDR_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_FRAG_BUFF_ADDR_t;





#define DMA_DMA_SSP_TXQ7_FRAG_BUFF_SIZE          0xf009054c
#define DMA_DMA_SSP_TXQ7_FRAG_BUFF_SIZE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 buffersize           : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 sgm                  :  5 ; /* bits 26:22 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 cache                :  1 ; /* bits 29:29 */
    cs_uint32 share                :  1 ; /* bits 30:30 */
    cs_uint32 rsrvd3               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_TXQ7_FRAG_BUFF_SIZE_t;





#define DMA_DMA_SSP_DEBUG_0                      0xf0090550
#define DMA_DMA_SSP_DEBUG_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DEBUG_0_t;





#define DMA_DMA_SSP_DEBUG_1                      0xf0090554
#define DMA_DMA_SSP_DEBUG_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  5 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd5               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DEBUG_1_t;





#define DMA_DMA_SSP_DEBUG_2                      0xf0090558
#define DMA_DMA_SSP_DEBUG_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd6               :  6 ;
    cs_uint32 ssprx_cs             :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 ssptx_cs             :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd4               :  2 ;
    cs_uint32 flash_cs             :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 flash_cs             :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd4               :  2 ;
    cs_uint32 ssptx_cs             :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 ssprx_cs             :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd6               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DEBUG_2_t;





#define DMA_DMA_SSP_DMA_SPARE_0                  0xf009055c
#define DMA_DMA_SSP_DMA_SPARE_0_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SPARE_0_t;





#define DMA_DMA_SSP_DMA_SPARE_1                  0xf0090560
#define DMA_DMA_SSP_DMA_SPARE_1_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_DMA_SSP_DMA_SPARE_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* DMA_SSP */

typedef struct {
  DMA_DMA_SSP_RXDMA_CONTROL_t              RXDMA_CONTROL;                 /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  DMA_DMA_SSP_TXDMA_CONTROL_t              TXDMA_CONTROL;                 /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  DMA_DMA_SSP_RXQ5_CONTROL_t               RXQ5_CONTROL;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  DMA_DMA_SSP_RXQ6_CONTROL_t               RXQ6_CONTROL;                  /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  DMA_DMA_SSP_RXQ7_CONTROL_t               RXQ7_CONTROL;                  /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  DMA_DMA_SSP_TXQ5_CONTROL_t               TXQ5_CONTROL;                  /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  DMA_DMA_SSP_TXQ6_CONTROL_t               TXQ6_CONTROL;                  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  DMA_DMA_SSP_TXQ7_CONTROL_t               TXQ7_CONTROL;                  /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  DMA_DMA_SSP_RXQ5_PKTCNT_READ_t           RXQ5_PKTCNT_READ;              /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  DMA_DMA_SSP_RXQ6_PKTCNT_READ_t           RXQ6_PKTCNT_READ;              /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  DMA_DMA_SSP_RXQ7_PKTCNT_READ_t           RXQ7_PKTCNT_READ;              /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  DMA_DMA_SSP_TXQ5_PKTCNT_READ_t           TXQ5_PKTCNT_READ;              /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  DMA_DMA_SSP_TXQ6_PKTCNT_READ_t           TXQ6_PKTCNT_READ;              /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  DMA_DMA_SSP_TXQ7_PKTCNT_READ_t           TXQ7_PKTCNT_READ;              /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  DMA_DMA_SSP_RXQ5_BASE_DEPTH_t            RXQ5_BASE_DEPTH;               /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  DMA_DMA_SSP_RXQ6_BASE_DEPTH_t            RXQ6_BASE_DEPTH;               /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  DMA_DMA_SSP_RXQ7_BASE_DEPTH_t            RXQ7_BASE_DEPTH;               /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  DMA_DMA_SSP_RXQ5_WPTR_t                  RXQ5_WPTR;                     /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  DMA_DMA_SSP_RXQ5_RPTR_t                  RXQ5_RPTR;                     /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  DMA_DMA_SSP_RXQ6_WPTR_t                  RXQ6_WPTR;                     /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  DMA_DMA_SSP_RXQ6_RPTR_t                  RXQ6_RPTR;                     /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  DMA_DMA_SSP_RXQ7_WPTR_t                  RXQ7_WPTR;                     /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  DMA_DMA_SSP_RXQ7_RPTR_t                  RXQ7_RPTR;                     /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  DMA_DMA_SSP_TXQ5_BASE_DEPTH_t            TXQ5_BASE_DEPTH;               /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  DMA_DMA_SSP_TXQ6_BASE_DEPTH_t            TXQ6_BASE_DEPTH;               /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  DMA_DMA_SSP_TXQ7_BASE_DEPTH_t            TXQ7_BASE_DEPTH;               /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  DMA_DMA_SSP_TXQ5_WPTR_t                  TXQ5_WPTR;                     /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  DMA_DMA_SSP_TXQ5_RPTR_t                  TXQ5_RPTR;                     /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  DMA_DMA_SSP_TXQ6_WPTR_t                  TXQ6_WPTR;                     /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  DMA_DMA_SSP_TXQ6_RPTR_t                  TXQ6_RPTR;                     /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  DMA_DMA_SSP_TXQ7_WPTR_t                  TXQ7_WPTR;                     /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  DMA_DMA_SSP_TXQ7_RPTR_t                  TXQ7_RPTR;                     /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  DMA_DMA_SSP_RXQ5_FULL_THRESHOLD_t        RXQ5_FULL_THRESHOLD;           /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  DMA_DMA_SSP_RXQ6_FULL_THRESHOLD_t        RXQ6_FULL_THRESHOLD;           /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  DMA_DMA_SSP_RXQ7_FULL_THRESHOLD_t        RXQ7_FULL_THRESHOLD;           /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  DMA_DMA_SSP_RXQ5_PKTCNT_t                RXQ5_PKTCNT;                   /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  DMA_DMA_SSP_RXQ6_PKTCNT_t                RXQ6_PKTCNT;                   /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  DMA_DMA_SSP_RXQ7_PKTCNT_t                RXQ7_PKTCNT;                   /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  DMA_DMA_SSP_RXQ5_FULL_DROP_PKTCNT_t      RXQ5_FULL_DROP_PKTCNT;         /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  DMA_DMA_SSP_RXQ6_FULL_DROP_PKTCNT_t      RXQ6_FULL_DROP_PKTCNT;         /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  DMA_DMA_SSP_RXQ7_FULL_DROP_PKTCNT_t      RXQ7_FULL_DROP_PKTCNT;         /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  DMA_DMA_SSP_TXQ5_PKTCNT_t                TXQ5_PKTCNT;                   /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  DMA_DMA_SSP_TXQ6_PKTCNT_t                TXQ6_PKTCNT;                   /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  DMA_DMA_SSP_TXQ7_PKTCNT_t                TXQ7_PKTCNT;                   /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  DMA_DMA_SSP_DMA_SSP_INTERRUPT_0_t        DMA_SSP_INTERRUPT_0;           /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  DMA_DMA_SSP_DMA_SSP_INTENABLE_0_t        DMA_SSP_INTENABLE_0;           /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  DMA_DMA_SSP_DMA_SSP_INTERRUPT_1_t        DMA_SSP_INTERRUPT_1;           /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  DMA_DMA_SSP_DMA_SSP_INTENABLE_1_t        DMA_SSP_INTENABLE_1;           /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  DMA_DMA_SSP_DESC_INTERRUPT_t             DESC_INTERRUPT;                /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  DMA_DMA_SSP_DESC_INTENABLE_t             DESC_INTENABLE;                /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  DMA_DMA_SSP_RXQ5_INTERRUPT_t             RXQ5_INTERRUPT;                /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  DMA_DMA_SSP_RXQ5_INTENABLE_t             RXQ5_INTENABLE;                /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  DMA_DMA_SSP_RXQ6_INTERRUPT_t             RXQ6_INTERRUPT;                /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  DMA_DMA_SSP_RXQ6_INTENABLE_t             RXQ6_INTENABLE;                /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  DMA_DMA_SSP_RXQ7_INTERRUPT_t             RXQ7_INTERRUPT;                /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  DMA_DMA_SSP_RXQ7_INTENABLE_t             RXQ7_INTENABLE;                /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  DMA_DMA_SSP_TXQ5_INTERRUPT_t             TXQ5_INTERRUPT;                /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  DMA_DMA_SSP_TXQ5_INTENABLE_t             TXQ5_INTENABLE;                /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  DMA_DMA_SSP_TXQ6_INTERRUPT_t             TXQ6_INTERRUPT;                /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  DMA_DMA_SSP_TXQ6_INTENABLE_t             TXQ6_INTENABLE;                /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  DMA_DMA_SSP_TXQ7_INTERRUPT_t             TXQ7_INTERRUPT;                /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  DMA_DMA_SSP_TXQ7_INTENABLE_t             TXQ7_INTENABLE;                /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  DMA_DMA_SSP_RX_FDES_ADDR_t               RX_FDES_ADDR;                  /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  DMA_DMA_SSP_RX_CDES_ADDR_t               RX_CDES_ADDR;                  /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  DMA_DMA_SSP_RX_DES_WORD0_t               RX_DES_WORD0;                  /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  DMA_DMA_SSP_RX_DES_WORD1_t               RX_DES_WORD1;                  /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  DMA_DMA_SSP_TX_FDES_ADDR_t               TX_FDES_ADDR;                  /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  DMA_DMA_SSP_TX_CDES_ADDR_t               TX_CDES_ADDR;                  /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  DMA_DMA_SSP_TX_DES_WORD0_t               TX_DES_WORD0;                  /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  DMA_DMA_SSP_TX_DES_WORD1_t               TX_DES_WORD1;                  /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  DMA_DMA_SSP_TX_DES_WORD2_t               TX_DES_WORD2;                  /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  DMA_DMA_SSP_TX_DES_WORD3_t               TX_DES_WORD3;                  /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  DMA_DMA_SSP_RXQ5_FRAG_BUFF_ADDR_t        RXQ5_FRAG_BUFF_ADDR;           /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  DMA_DMA_SSP_RXQ5_FRAG_BUFF_SIZE_t        RXQ5_FRAG_BUFF_SIZE;           /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  DMA_DMA_SSP_RXQ6_FRAG_BUFF_ADDR_t        RXQ6_FRAG_BUFF_ADDR;           /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  DMA_DMA_SSP_RXQ6_FRAG_BUFF_SIZE_t        RXQ6_FRAG_BUFF_SIZE;           /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  DMA_DMA_SSP_RXQ7_FRAG_BUFF_ADDR_t        RXQ7_FRAG_BUFF_ADDR;           /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  DMA_DMA_SSP_RXQ7_FRAG_BUFF_SIZE_t        RXQ7_FRAG_BUFF_SIZE;           /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  DMA_DMA_SSP_TXQ5_FRAG_BUFF_ADDR_t        TXQ5_FRAG_BUFF_ADDR;           /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  DMA_DMA_SSP_TXQ5_FRAG_BUFF_SIZE_t        TXQ5_FRAG_BUFF_SIZE;           /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  DMA_DMA_SSP_TXQ6_FRAG_BUFF_ADDR_t        TXQ6_FRAG_BUFF_ADDR;           /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  DMA_DMA_SSP_TXQ6_FRAG_BUFF_SIZE_t        TXQ6_FRAG_BUFF_SIZE;           /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  DMA_DMA_SSP_TXQ7_FRAG_BUFF_ADDR_t        TXQ7_FRAG_BUFF_ADDR;           /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  DMA_DMA_SSP_TXQ7_FRAG_BUFF_SIZE_t        TXQ7_FRAG_BUFF_SIZE;           /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  DMA_DMA_SSP_DEBUG_0_t                    DEBUG_0;                       /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  DMA_DMA_SSP_DEBUG_1_t                    DEBUG_1;                       /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  DMA_DMA_SSP_DEBUG_2_t                    DEBUG_2;                       /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  DMA_DMA_SSP_DMA_SPARE_0_t                DMA_SPARE_0;                   /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  DMA_DMA_SSP_DMA_SPARE_1_t                DMA_SPARE_1;                   /* addr: 0x00000160 */ 
} DMA_DMA_SSP_t;

  

/*
 * SSP[0..1]
 */
  



#define DMA_SSP_ID                               0xf0090700
#define DMA_SSP_ID_dft                           0x00010300




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 DEV_ID               : 24 ; /* bits 31:8 */
    cs_uint32 REV_ID               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 REV_ID               :  8 ; /* bits 7:0 */
    cs_uint32 DEV_ID               : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_ID_t;





#define DMA_SSP_CTRL0                            0xf0090704
#define DMA_SSP_CTRL0_dft                        0x001f0000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 spdif_dll_en         :  1 ; /* bits 23:23 */
    cs_uint32 spdif_dma_wtMk       :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 spdif_mode4WordEn    :  1 ; /* bits 13:13 */
    cs_uint32 spdif_preambleIns    :  1 ; /* bits 12:12 */
    cs_uint32 spdif_byteShift      :  1 ; /* bits 11:11 */
    cs_uint32 spdif_fourBitShift   :  1 ; /* bits 10:10 */
    cs_uint32 s_enable             :  1 ; /* bits 9:9 */
    cs_uint32 spdif_enable         :  1 ; /* bits 8:8 */
    cs_uint32 reserved             :  4 ; /* bits 7:4 */
    cs_uint32 forceTC              :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txChByteSwap         :  1 ; /* bits 1:1 */
    cs_uint32 rxChByteSwap         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxChByteSwap         :  1 ; /* bits 0:0 */
    cs_uint32 txChByteSwap         :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 forceTC              :  1 ; /* bits 3:3 */
    cs_uint32 reserved             :  4 ; /* bits 7:4 */
    cs_uint32 spdif_enable         :  1 ; /* bits 8:8 */
    cs_uint32 s_enable             :  1 ; /* bits 9:9 */
    cs_uint32 spdif_fourBitShift   :  1 ; /* bits 10:10 */
    cs_uint32 spdif_byteShift      :  1 ; /* bits 11:11 */
    cs_uint32 spdif_preambleIns    :  1 ; /* bits 12:12 */
    cs_uint32 spdif_mode4WordEn    :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 spdif_dma_wtMk       :  7 ; /* bits 22:16 */
    cs_uint32 spdif_dll_en         :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_CTRL0_t;





#define DMA_SSP_CTRL1                            0xf0090708
#define DMA_SSP_CTRL1_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 startProc            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 startProc            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_CTRL1_t;





#define DMA_SSP_FRAME_CTRL0                      0xf009070c
#define DMA_SSP_FRAME_CTRL0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bypass_clkDiv        :  1 ; /* bits 31:31 */
    cs_uint32 mclkSel              :  1 ; /* bits 30:30 */
    cs_uint32 FSEdge               :  1 ; /* bits 29:29 */
    cs_uint32 FSPol                :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 rxEdge               :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txEdge               :  1 ; /* bits 24:24 */
    cs_uint32 lsbFirst             :  1 ; /* bits 23:23 */
    cs_uint32 doubleClock          :  1 ; /* bits 22:22 */
    cs_uint32 extSClkSel           :  1 ; /* bits 21:21 */
    cs_uint32 sClkOffOnIdle        :  1 ; /* bits 20:20 */
    cs_uint32 sClkPhase            :  1 ; /* bits 19:19 */
    cs_uint32 sClkPol              :  1 ; /* bits 18:18 */
    cs_uint32 extClkSel            :  1 ; /* bits 17:17 */
    cs_uint32 FSCFreeRun           :  1 ; /* bits 16:16 */
    cs_uint32 clkDiv               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 clkDiv               : 16 ; /* bits 15:0 */
    cs_uint32 FSCFreeRun           :  1 ; /* bits 16:16 */
    cs_uint32 extClkSel            :  1 ; /* bits 17:17 */
    cs_uint32 sClkPol              :  1 ; /* bits 18:18 */
    cs_uint32 sClkPhase            :  1 ; /* bits 19:19 */
    cs_uint32 sClkOffOnIdle        :  1 ; /* bits 20:20 */
    cs_uint32 extSClkSel           :  1 ; /* bits 21:21 */
    cs_uint32 doubleClock          :  1 ; /* bits 22:22 */
    cs_uint32 lsbFirst             :  1 ; /* bits 23:23 */
    cs_uint32 txEdge               :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxEdge               :  1 ; /* bits 26:26 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 FSPol                :  1 ; /* bits 28:28 */
    cs_uint32 FSEdge               :  1 ; /* bits 29:29 */
    cs_uint32 mclkSel              :  1 ; /* bits 30:30 */
    cs_uint32 bypass_clkDiv        :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_FRAME_CTRL0_t;





#define DMA_SSP_FRAME_CTRL1                      0xf0090710
#define DMA_SSP_FRAME_CTRL1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 FS2Slot              :  4 ; /* bits 31:28 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 slot2Slot            :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 numOfSlots           :  7 ; /* bits 22:16 */
    cs_uint32 slot2FS              :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 FSLen                : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 FSLen                : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 slot2FS              :  4 ; /* bits 15:12 */
    cs_uint32 numOfSlots           :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 slot2Slot            :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 FS2Slot              :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_FRAME_CTRL1_t;





#define DMA_SSP_BAUDRATE_CTRL                    0xf0090714
#define DMA_SSP_BAUDRATE_CTRL_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 param_m              :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 param_a2             :  2 ; /* bits 17:16 */
    cs_uint32 param_n              :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 param_a1             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 param_a1             :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 param_n              :  8 ; /* bits 15:8 */
    cs_uint32 param_a2             :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 param_m              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_BAUDRATE_CTRL_t;





#define DMA_SSP_FIFO_CTRL                        0xf0090718
#define DMA_SSP_FIFO_CTRL_dft                    0x07f0007f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  1 ; /* bits 31:31 */
    cs_uint32 frame2Frame          :  3 ; /* bits 30:28 */
    cs_uint32 tfwWtMkLvl           :  8 ; /* bits 27:20 */
    cs_uint32 tfrWtMkLvl           :  4 ; /* bits 19:16 */
    cs_uint32 tx4ByteCheck         :  1 ; /* bits 15:15 */
    cs_uint32 rx4ByteCheck         :  1 ; /* bits 14:14 */
    cs_uint32 tx2ByteCheck         :  1 ; /* bits 13:13 */
    cs_uint32 rx2ByteCheck         :  1 ; /* bits 12:12 */
    cs_uint32 rfwWtMkLvl           :  4 ; /* bits 11:8 */
    cs_uint32 rfrWtMkLvl           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rfrWtMkLvl           :  8 ; /* bits 7:0 */
    cs_uint32 rfwWtMkLvl           :  4 ; /* bits 11:8 */
    cs_uint32 rx2ByteCheck         :  1 ; /* bits 12:12 */
    cs_uint32 tx2ByteCheck         :  1 ; /* bits 13:13 */
    cs_uint32 rx4ByteCheck         :  1 ; /* bits 14:14 */
    cs_uint32 tx4ByteCheck         :  1 ; /* bits 15:15 */
    cs_uint32 tfrWtMkLvl           :  4 ; /* bits 19:16 */
    cs_uint32 tfwWtMkLvl           :  8 ; /* bits 27:20 */
    cs_uint32 frame2Frame          :  3 ; /* bits 30:28 */
    cs_uint32 reserved             :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_FIFO_CTRL_t;





#define DMA_SSP_FIFO_PTR                         0xf009071c
#define DMA_SSP_FIFO_PTR_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rfRdPtr              :  8 ; /* bits 31:24 */
    cs_uint32 rfWrPtr              :  8 ; /* bits 23:16 */
    cs_uint32 tfRdPtr              :  8 ; /* bits 15:8 */
    cs_uint32 tfWrPtr              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tfWrPtr              :  8 ; /* bits 7:0 */
    cs_uint32 tfRdPtr              :  8 ; /* bits 15:8 */
    cs_uint32 rfWrPtr              :  8 ; /* bits 23:16 */
    cs_uint32 rfRdPtr              :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_FIFO_PTR_t;





#define DMA_SSP_INTERRUPT                        0xf0090720
#define DMA_SSP_INTERRUPT_dft                    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 spdifFifoFull_int    :  1 ; /* bits 17:17 */
    cs_uint32 spdif_int            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 txByteShiftErr       :  1 ; /* bits 11:11 */
    cs_uint32 rxByteShiftErr       :  1 ; /* bits 10:10 */
    cs_uint32 rfsOvrRun            :  1 ; /* bits 9:9 */
    cs_uint32 rfsUndRun            :  1 ; /* bits 8:8 */
    cs_uint32 rfrWtMk              :  1 ; /* bits 7:7 */
    cs_uint32 rfsEmpty             :  1 ; /* bits 6:6 */
    cs_uint32 rfsFull              :  1 ; /* bits 5:5 */
    cs_uint32 tfsOvrRun            :  1 ; /* bits 4:4 */
    cs_uint32 tfsUndRun            :  1 ; /* bits 3:3 */
    cs_uint32 tfwWtMk              :  1 ; /* bits 2:2 */
    cs_uint32 tfsEmpty             :  1 ; /* bits 1:1 */
    cs_uint32 tfsFull              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tfsFull              :  1 ; /* bits 0:0 */
    cs_uint32 tfsEmpty             :  1 ; /* bits 1:1 */
    cs_uint32 tfwWtMk              :  1 ; /* bits 2:2 */
    cs_uint32 tfsUndRun            :  1 ; /* bits 3:3 */
    cs_uint32 tfsOvrRun            :  1 ; /* bits 4:4 */
    cs_uint32 rfsFull              :  1 ; /* bits 5:5 */
    cs_uint32 rfsEmpty             :  1 ; /* bits 6:6 */
    cs_uint32 rfrWtMk              :  1 ; /* bits 7:7 */
    cs_uint32 rfsUndRun            :  1 ; /* bits 8:8 */
    cs_uint32 rfsOvrRun            :  1 ; /* bits 9:9 */
    cs_uint32 rxByteShiftErr       :  1 ; /* bits 10:10 */
    cs_uint32 txByteShiftErr       :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 spdif_int            :  1 ; /* bits 16:16 */
    cs_uint32 spdifFifoFull_int    :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_INTERRUPT_t;





#define DMA_SSP_INT_ENABLE                       0xf0090724
#define DMA_SSP_INT_ENABLE_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 spdifFifoFull_int_en :  1 ; /* bits 17:17 */
    cs_uint32 spdif_int_en         :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 txByteShiftErr_int_en :  1 ; /* bits 11:11 */
    cs_uint32 rxByteShiftErr_int_en :  1 ; /* bits 10:10 */
    cs_uint32 rfsOvrRun_int_en     :  1 ; /* bits 9:9 */
    cs_uint32 rfsUndRun_int_en     :  1 ; /* bits 8:8 */
    cs_uint32 rfrWtMk_int_en       :  1 ; /* bits 7:7 */
    cs_uint32 rfsEmpty_int_en      :  1 ; /* bits 6:6 */
    cs_uint32 rfsFull_int_en       :  1 ; /* bits 5:5 */
    cs_uint32 tfsOvrRun_int_en     :  1 ; /* bits 4:4 */
    cs_uint32 tfsUndRun_int_en     :  1 ; /* bits 3:3 */
    cs_uint32 tfwWtMk_int_en       :  1 ; /* bits 2:2 */
    cs_uint32 tfsEmpty_int_en      :  1 ; /* bits 1:1 */
    cs_uint32 tfsFull_int_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tfsFull_int_en       :  1 ; /* bits 0:0 */
    cs_uint32 tfsEmpty_int_en      :  1 ; /* bits 1:1 */
    cs_uint32 tfwWtMk_int_en       :  1 ; /* bits 2:2 */
    cs_uint32 tfsUndRun_int_en     :  1 ; /* bits 3:3 */
    cs_uint32 tfsOvrRun_int_en     :  1 ; /* bits 4:4 */
    cs_uint32 rfsFull_int_en       :  1 ; /* bits 5:5 */
    cs_uint32 rfsEmpty_int_en      :  1 ; /* bits 6:6 */
    cs_uint32 rfrWtMk_int_en       :  1 ; /* bits 7:7 */
    cs_uint32 rfsUndRun_int_en     :  1 ; /* bits 8:8 */
    cs_uint32 rfsOvrRun_int_en     :  1 ; /* bits 9:9 */
    cs_uint32 rxByteShiftErr_int_en :  1 ; /* bits 10:10 */
    cs_uint32 txByteShiftErr_int_en :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 spdif_int_en         :  1 ; /* bits 16:16 */
    cs_uint32 spdifFifoFull_int_en :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_INT_ENABLE_t;





#define DMA_SSP_TXSLOT_VLD0                      0xf0090728
#define DMA_SSP_TXSLOT_VLD0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_TXSLOT_VLD0_t;





#define DMA_SSP_TXSLOT_VLD1                      0xf009072c
#define DMA_SSP_TXSLOT_VLD1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_TXSLOT_VLD1_t;





#define DMA_SSP_TXSLOT_VLD2                      0xf0090730
#define DMA_SSP_TXSLOT_VLD2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_TXSLOT_VLD2_t;





#define DMA_SSP_TXSLOT_VLD3                      0xf0090734
#define DMA_SSP_TXSLOT_VLD3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_TXSLOT_VLD3_t;





#define DMA_SSP_RXSLOT_VLD0                      0xf0090738
#define DMA_SSP_RXSLOT_VLD0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_RXSLOT_VLD0_t;





#define DMA_SSP_RXSLOT_VLD1                      0xf009073c
#define DMA_SSP_RXSLOT_VLD1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_RXSLOT_VLD1_t;





#define DMA_SSP_RXSLOT_VLD2                      0xf0090740
#define DMA_SSP_RXSLOT_VLD2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_RXSLOT_VLD2_t;





#define DMA_SSP_RXSLOT_VLD3                      0xf0090744
#define DMA_SSP_RXSLOT_VLD3_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SlotVld              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_RXSLOT_VLD3_t;





#define DMA_SSP_SLOT_SIZE0                       0xf0090748
#define DMA_SSP_SLOT_SIZE0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 sSize7               :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize6               :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize5               :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize4               :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize3               :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize2               :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize1               :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize0               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sSize0               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize1               :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize2               :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize3               :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize4               :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize5               :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize6               :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize7               :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_SLOT_SIZE0_t;





#define DMA_SSP_SLOT_SIZE1                       0xf009074c
#define DMA_SSP_SLOT_SIZE1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 sSize15              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize14              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize13              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize12              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize11              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize10              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize9               :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize8               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sSize8               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize9               :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize10              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize11              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize12              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize13              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize14              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize15              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_SLOT_SIZE1_t;





#define DMA_SSP_SLOT_SIZE2                       0xf0090750
#define DMA_SSP_SLOT_SIZE2_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 sSize23              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize22              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize21              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize20              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize19              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize18              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize17              :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize16              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sSize16              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize17              :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize18              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize19              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize20              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize21              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize22              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize23              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_SLOT_SIZE2_t;





#define DMA_SSP_SLOT_SIZE3                       0xf0090754
#define DMA_SSP_SLOT_SIZE3_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  1 ;
    cs_uint32 sSize31              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize30              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize29              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize28              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize27              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize26              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize25              :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize24              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sSize24              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sSize25              :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sSize26              :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 sSize27              :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 sSize28              :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 sSize29              :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 sSize30              :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 sSize31              :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd8               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_SLOT_SIZE3_t;





#define DMA_SSP_SPARE                            0xf0090758
#define DMA_SSP_SPARE_dft                        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 Spare                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 Spare                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} DMA_SSP_SPARE_t;



    
  
  
  
#define DMA_SSP_STRIDE                           128
#define DMA_SSP_COUNT                            2
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SSP */

typedef struct {
  DMA_SSP_ID_t                             ID;                            /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  DMA_SSP_CTRL0_t                          CTRL0;                         /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  DMA_SSP_CTRL1_t                          CTRL1;                         /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  DMA_SSP_FRAME_CTRL0_t                    FRAME_CTRL0;                   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  DMA_SSP_FRAME_CTRL1_t                    FRAME_CTRL1;                   /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  DMA_SSP_BAUDRATE_CTRL_t                  BAUDRATE_CTRL;                 /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  DMA_SSP_FIFO_CTRL_t                      FIFO_CTRL;                     /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  DMA_SSP_FIFO_PTR_t                       FIFO_PTR;                      /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  DMA_SSP_INTERRUPT_t                      INTERRUPT;                     /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  DMA_SSP_INT_ENABLE_t                     INT_ENABLE;                    /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  DMA_SSP_TXSLOT_VLD0_t                    TXSLOT_VLD0;                   /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  DMA_SSP_TXSLOT_VLD1_t                    TXSLOT_VLD1;                   /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  DMA_SSP_TXSLOT_VLD2_t                    TXSLOT_VLD2;                   /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  DMA_SSP_TXSLOT_VLD3_t                    TXSLOT_VLD3;                   /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  DMA_SSP_RXSLOT_VLD0_t                    RXSLOT_VLD0;                   /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  DMA_SSP_RXSLOT_VLD1_t                    RXSLOT_VLD1;                   /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  DMA_SSP_RXSLOT_VLD2_t                    RXSLOT_VLD2;                   /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  DMA_SSP_RXSLOT_VLD3_t                    RXSLOT_VLD3;                   /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  DMA_SSP_SLOT_SIZE0_t                     SLOT_SIZE0;                    /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  DMA_SSP_SLOT_SIZE1_t                     SLOT_SIZE1;                    /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  DMA_SSP_SLOT_SIZE2_t                     SLOT_SIZE2;                    /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  DMA_SSP_SLOT_SIZE3_t                     SLOT_SIZE3;                    /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  DMA_SSP_SPARE_t                          SPARE;                         /* addr: 0x00000058 */ 
} DMA_SSP_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* DMA */

typedef struct {
  DMA_DMA_LSO_t                            DMA_LSO;                       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[411];                  
  DMA_D_AXI_t                              D_AXI;                         /* addr: 0x00000300 */ 
  cs_uint32                                rsrvd2[187];                  
  DMA_DMA_SSP_t                            DMA_SSP;                       /* addr: 0x00000400 */ 
  cs_uint32                                rsrvd3[591];                  
  DMA_SSP_t                                SSP;                           /* addr: 0x00000700 */ 
} DMA_t;


/*
 * PCIE_SATA
 */
  
  
/*
 * PCIE_GLBL[0..2]
 */
  



#define PCIE_SATA_PCIE_GLBL_INTERRUPT_0          0xf00a0000
#define PCIE_SATA_PCIE_GLBL_INTERRUPT_0_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 cfg_ur_resp          :  1 ; /* bits 27:27 */
    cs_uint32 hp_msi               :  1 ; /* bits 26:26 */
    cs_uint32 hp_pme               :  1 ; /* bits 25:25 */
    cs_uint32 cfg_pme_msi          :  1 ; /* bits 24:24 */
    cs_uint32 cfg_aer_rc_err_msi   :  1 ; /* bits 23:23 */
    cs_uint32 link_down            :  1 ; /* bits 22:22 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr :  1 ; /* bits 21:21 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr :  1 ; /* bits 20:20 */
    cs_uint32 elastic_buf_underflow :  1 ; /* bits 19:19 */
    cs_uint32 elastic_buf_ovrflow  :  1 ; /* bits 18:18 */
    cs_uint32 radmx_cmposer_lookup_err :  1 ; /* bits 17:17 */
    cs_uint32 gm_cmposer_lookup_err :  1 ; /* bits 16:16 */
    cs_uint32 radm_pm_pme          :  1 ; /* bits 15:15 */
    cs_uint32 radm_pm_to_ack       :  1 ; /* bits 14:14 */
    cs_uint32 radm_fatal_err       :  1 ; /* bits 13:13 */
    cs_uint32 radm_nonfatal_err    :  1 ; /* bits 12:12 */
    cs_uint32 radm_correctable_err :  1 ; /* bits 11:11 */
    cs_uint32 hp_int               :  1 ; /* bits 10:10 */
    cs_uint32 xmlh_link_up         :  1 ; /* bits 9:9 */
    cs_uint32 msi_ctr_int          :  1 ; /* bits 8:8 */
    cs_uint32 radm_intd_deasserted :  1 ; /* bits 7:7 */
    cs_uint32 radm_intd_asserted   :  1 ; /* bits 6:6 */
    cs_uint32 radm_intc_deasserted :  1 ; /* bits 5:5 */
    cs_uint32 radm_intc_asserted   :  1 ; /* bits 4:4 */
    cs_uint32 radm_intb_deasserted :  1 ; /* bits 3:3 */
    cs_uint32 radm_intb_asserted   :  1 ; /* bits 2:2 */
    cs_uint32 radm_inta_deasserted :  1 ; /* bits 1:1 */
    cs_uint32 radm_inta_asserted   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_inta_asserted   :  1 ; /* bits 0:0 */
    cs_uint32 radm_inta_deasserted :  1 ; /* bits 1:1 */
    cs_uint32 radm_intb_asserted   :  1 ; /* bits 2:2 */
    cs_uint32 radm_intb_deasserted :  1 ; /* bits 3:3 */
    cs_uint32 radm_intc_asserted   :  1 ; /* bits 4:4 */
    cs_uint32 radm_intc_deasserted :  1 ; /* bits 5:5 */
    cs_uint32 radm_intd_asserted   :  1 ; /* bits 6:6 */
    cs_uint32 radm_intd_deasserted :  1 ; /* bits 7:7 */
    cs_uint32 msi_ctr_int          :  1 ; /* bits 8:8 */
    cs_uint32 xmlh_link_up         :  1 ; /* bits 9:9 */
    cs_uint32 hp_int               :  1 ; /* bits 10:10 */
    cs_uint32 radm_correctable_err :  1 ; /* bits 11:11 */
    cs_uint32 radm_nonfatal_err    :  1 ; /* bits 12:12 */
    cs_uint32 radm_fatal_err       :  1 ; /* bits 13:13 */
    cs_uint32 radm_pm_to_ack       :  1 ; /* bits 14:14 */
    cs_uint32 radm_pm_pme          :  1 ; /* bits 15:15 */
    cs_uint32 gm_cmposer_lookup_err :  1 ; /* bits 16:16 */
    cs_uint32 radmx_cmposer_lookup_err :  1 ; /* bits 17:17 */
    cs_uint32 elastic_buf_ovrflow  :  1 ; /* bits 18:18 */
    cs_uint32 elastic_buf_underflow :  1 ; /* bits 19:19 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr :  1 ; /* bits 20:20 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr :  1 ; /* bits 21:21 */
    cs_uint32 link_down            :  1 ; /* bits 22:22 */
    cs_uint32 cfg_aer_rc_err_msi   :  1 ; /* bits 23:23 */
    cs_uint32 cfg_pme_msi          :  1 ; /* bits 24:24 */
    cs_uint32 hp_pme               :  1 ; /* bits 25:25 */
    cs_uint32 hp_msi               :  1 ; /* bits 26:26 */
    cs_uint32 cfg_ur_resp          :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_INTERRUPT_0_t;





#define PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_0   0xf00a0004
#define PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 cfg_ur_resp_en       :  1 ; /* bits 27:27 */
    cs_uint32 hp_msi_en            :  1 ; /* bits 26:26 */
    cs_uint32 hp_pme_en            :  1 ; /* bits 25:25 */
    cs_uint32 cfg_pme_msi_en       :  1 ; /* bits 24:24 */
    cs_uint32 cfg_aer_rc_err_msi_en :  1 ; /* bits 23:23 */
    cs_uint32 link_down_en         :  1 ; /* bits 22:22 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr_ovr_en :  1 ; /* bits 21:21 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr_en :  1 ; /* bits 20:20 */
    cs_uint32 elastic_buf_underflow_en :  1 ; /* bits 19:19 */
    cs_uint32 elastic_buf_ovrflow_en :  1 ; /* bits 18:18 */
    cs_uint32 radmx_cmposer_lookup_err_en :  1 ; /* bits 17:17 */
    cs_uint32 gm_cmposer_lookup_err_en :  1 ; /* bits 16:16 */
    cs_uint32 radm_pm_pme_en       :  1 ; /* bits 15:15 */
    cs_uint32 radm_pm_to_ack_en    :  1 ; /* bits 14:14 */
    cs_uint32 radm_fatal_err_en    :  1 ; /* bits 13:13 */
    cs_uint32 radm_nonfatal_err_en :  1 ; /* bits 12:12 */
    cs_uint32 radm_correctable_err_en :  1 ; /* bits 11:11 */
    cs_uint32 hp_int_en            :  1 ; /* bits 10:10 */
    cs_uint32 xmlh_link_up_int_en  :  1 ; /* bits 9:9 */
    cs_uint32 msi_ctrl_int_en      :  1 ; /* bits 8:8 */
    cs_uint32 radm_intd_deasserted_en :  1 ; /* bits 7:7 */
    cs_uint32 radm_intd_asserted_en :  1 ; /* bits 6:6 */
    cs_uint32 radm_intc_deasserted_en :  1 ; /* bits 5:5 */
    cs_uint32 radm_intc_asserted_en :  1 ; /* bits 4:4 */
    cs_uint32 radm_intb_deasserted_en :  1 ; /* bits 3:3 */
    cs_uint32 radm_intb_asserted_en :  1 ; /* bits 2:2 */
    cs_uint32 radm_inta_deasserted_en :  1 ; /* bits 1:1 */
    cs_uint32 radm_inta_asserted_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_inta_asserted_en :  1 ; /* bits 0:0 */
    cs_uint32 radm_inta_deasserted_en :  1 ; /* bits 1:1 */
    cs_uint32 radm_intb_asserted_en :  1 ; /* bits 2:2 */
    cs_uint32 radm_intb_deasserted_en :  1 ; /* bits 3:3 */
    cs_uint32 radm_intc_asserted_en :  1 ; /* bits 4:4 */
    cs_uint32 radm_intc_deasserted_en :  1 ; /* bits 5:5 */
    cs_uint32 radm_intd_asserted_en :  1 ; /* bits 6:6 */
    cs_uint32 radm_intd_deasserted_en :  1 ; /* bits 7:7 */
    cs_uint32 msi_ctrl_int_en      :  1 ; /* bits 8:8 */
    cs_uint32 xmlh_link_up_int_en  :  1 ; /* bits 9:9 */
    cs_uint32 hp_int_en            :  1 ; /* bits 10:10 */
    cs_uint32 radm_correctable_err_en :  1 ; /* bits 11:11 */
    cs_uint32 radm_nonfatal_err_en :  1 ; /* bits 12:12 */
    cs_uint32 radm_fatal_err_en    :  1 ; /* bits 13:13 */
    cs_uint32 radm_pm_to_ack_en    :  1 ; /* bits 14:14 */
    cs_uint32 radm_pm_pme_en       :  1 ; /* bits 15:15 */
    cs_uint32 gm_cmposer_lookup_err_en :  1 ; /* bits 16:16 */
    cs_uint32 radmx_cmposer_lookup_err_en :  1 ; /* bits 17:17 */
    cs_uint32 elastic_buf_ovrflow_en :  1 ; /* bits 18:18 */
    cs_uint32 elastic_buf_underflow_en :  1 ; /* bits 19:19 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr_en :  1 ; /* bits 20:20 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr_ovr_en :  1 ; /* bits 21:21 */
    cs_uint32 link_down_en         :  1 ; /* bits 22:22 */
    cs_uint32 cfg_aer_rc_err_msi_en :  1 ; /* bits 23:23 */
    cs_uint32 cfg_pme_msi_en       :  1 ; /* bits 24:24 */
    cs_uint32 hp_pme_en            :  1 ; /* bits 25:25 */
    cs_uint32 hp_msi_en            :  1 ; /* bits 26:26 */
    cs_uint32 cfg_ur_resp_en       :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_0_t;





#define PCIE_SATA_PCIE_GLBL_INTERRUPT_1          0xf00a0008
#define PCIE_SATA_PCIE_GLBL_INTERRUPT_1_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 cfg_ur_resp          :  1 ; /* bits 27:27 */
    cs_uint32 hp_msi               :  1 ; /* bits 26:26 */
    cs_uint32 hp_pme               :  1 ; /* bits 25:25 */
    cs_uint32 cfg_pme_msi          :  1 ; /* bits 24:24 */
    cs_uint32 cfg_aer_rc_err_msi   :  1 ; /* bits 23:23 */
    cs_uint32 link_down            :  1 ; /* bits 22:22 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr :  1 ; /* bits 21:21 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr :  1 ; /* bits 20:20 */
    cs_uint32 elastic_buf_underflow :  1 ; /* bits 19:19 */
    cs_uint32 elastic_buf_ovrflow  :  1 ; /* bits 18:18 */
    cs_uint32 radmx_cmposer_lookup_err :  1 ; /* bits 17:17 */
    cs_uint32 gm_cmposer_lookup_err :  1 ; /* bits 16:16 */
    cs_uint32 radm_pm_pme          :  1 ; /* bits 15:15 */
    cs_uint32 radm_pm_to_ack       :  1 ; /* bits 14:14 */
    cs_uint32 radm_fatal_err       :  1 ; /* bits 13:13 */
    cs_uint32 radm_nonfatal_err    :  1 ; /* bits 12:12 */
    cs_uint32 radm_correctable_err :  1 ; /* bits 11:11 */
    cs_uint32 hp_int               :  1 ; /* bits 10:10 */
    cs_uint32 xmlh_link_up         :  1 ; /* bits 9:9 */
    cs_uint32 msi_ctr_int          :  1 ; /* bits 8:8 */
    cs_uint32 radm_intd_deasserted :  1 ; /* bits 7:7 */
    cs_uint32 radm_intd_asserted   :  1 ; /* bits 6:6 */
    cs_uint32 radm_intc_deasserted :  1 ; /* bits 5:5 */
    cs_uint32 radm_intc_asserted   :  1 ; /* bits 4:4 */
    cs_uint32 radm_intb_deasserted :  1 ; /* bits 3:3 */
    cs_uint32 radm_intb_asserted   :  1 ; /* bits 2:2 */
    cs_uint32 radm_inta_deasserted :  1 ; /* bits 1:1 */
    cs_uint32 radm_inta_asserted   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_inta_asserted   :  1 ; /* bits 0:0 */
    cs_uint32 radm_inta_deasserted :  1 ; /* bits 1:1 */
    cs_uint32 radm_intb_asserted   :  1 ; /* bits 2:2 */
    cs_uint32 radm_intb_deasserted :  1 ; /* bits 3:3 */
    cs_uint32 radm_intc_asserted   :  1 ; /* bits 4:4 */
    cs_uint32 radm_intc_deasserted :  1 ; /* bits 5:5 */
    cs_uint32 radm_intd_asserted   :  1 ; /* bits 6:6 */
    cs_uint32 radm_intd_deasserted :  1 ; /* bits 7:7 */
    cs_uint32 msi_ctr_int          :  1 ; /* bits 8:8 */
    cs_uint32 xmlh_link_up         :  1 ; /* bits 9:9 */
    cs_uint32 hp_int               :  1 ; /* bits 10:10 */
    cs_uint32 radm_correctable_err :  1 ; /* bits 11:11 */
    cs_uint32 radm_nonfatal_err    :  1 ; /* bits 12:12 */
    cs_uint32 radm_fatal_err       :  1 ; /* bits 13:13 */
    cs_uint32 radm_pm_to_ack       :  1 ; /* bits 14:14 */
    cs_uint32 radm_pm_pme          :  1 ; /* bits 15:15 */
    cs_uint32 gm_cmposer_lookup_err :  1 ; /* bits 16:16 */
    cs_uint32 radmx_cmposer_lookup_err :  1 ; /* bits 17:17 */
    cs_uint32 elastic_buf_ovrflow  :  1 ; /* bits 18:18 */
    cs_uint32 elastic_buf_underflow :  1 ; /* bits 19:19 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr :  1 ; /* bits 20:20 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr :  1 ; /* bits 21:21 */
    cs_uint32 link_down            :  1 ; /* bits 22:22 */
    cs_uint32 cfg_aer_rc_err_msi   :  1 ; /* bits 23:23 */
    cs_uint32 cfg_pme_msi          :  1 ; /* bits 24:24 */
    cs_uint32 hp_pme               :  1 ; /* bits 25:25 */
    cs_uint32 hp_msi               :  1 ; /* bits 26:26 */
    cs_uint32 cfg_ur_resp          :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_INTERRUPT_1_t;





#define PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_1   0xf00a000c
#define PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 cfg_ur_resp_en       :  1 ; /* bits 27:27 */
    cs_uint32 hp_msi_en            :  1 ; /* bits 26:26 */
    cs_uint32 hp_pme_en            :  1 ; /* bits 25:25 */
    cs_uint32 cfg_pme_msi_en       :  1 ; /* bits 24:24 */
    cs_uint32 cfg_aer_rc_err_msi_en :  1 ; /* bits 23:23 */
    cs_uint32 link_down_en         :  1 ; /* bits 22:22 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr_ovr_en :  1 ; /* bits 21:21 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr_en :  1 ; /* bits 20:20 */
    cs_uint32 elastic_buf_underflow_en :  1 ; /* bits 19:19 */
    cs_uint32 elastic_buf_ovrflow_en :  1 ; /* bits 18:18 */
    cs_uint32 radmx_cmposer_lookup_err_en :  1 ; /* bits 17:17 */
    cs_uint32 gm_cmposer_lookup_err_en :  1 ; /* bits 16:16 */
    cs_uint32 radm_pm_pme_en       :  1 ; /* bits 15:15 */
    cs_uint32 radm_pm_to_ack_en    :  1 ; /* bits 14:14 */
    cs_uint32 radm_fatal_err_en    :  1 ; /* bits 13:13 */
    cs_uint32 radm_nonfatal_err_en :  1 ; /* bits 12:12 */
    cs_uint32 radm_correctable_err_en :  1 ; /* bits 11:11 */
    cs_uint32 hp_int_en            :  1 ; /* bits 10:10 */
    cs_uint32 xmlh_link_up_int_en  :  1 ; /* bits 9:9 */
    cs_uint32 msi_ctrl_int_en      :  1 ; /* bits 8:8 */
    cs_uint32 radm_intd_deasserted_en :  1 ; /* bits 7:7 */
    cs_uint32 radm_intd_asserted_en :  1 ; /* bits 6:6 */
    cs_uint32 radm_intc_deasserted_en :  1 ; /* bits 5:5 */
    cs_uint32 radm_intc_asserted_en :  1 ; /* bits 4:4 */
    cs_uint32 radm_intb_deasserted_en :  1 ; /* bits 3:3 */
    cs_uint32 radm_intb_asserted_en :  1 ; /* bits 2:2 */
    cs_uint32 radm_inta_deasserted_en :  1 ; /* bits 1:1 */
    cs_uint32 radm_inta_asserted_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_inta_asserted_en :  1 ; /* bits 0:0 */
    cs_uint32 radm_inta_deasserted_en :  1 ; /* bits 1:1 */
    cs_uint32 radm_intb_asserted_en :  1 ; /* bits 2:2 */
    cs_uint32 radm_intb_deasserted_en :  1 ; /* bits 3:3 */
    cs_uint32 radm_intc_asserted_en :  1 ; /* bits 4:4 */
    cs_uint32 radm_intc_deasserted_en :  1 ; /* bits 5:5 */
    cs_uint32 radm_intd_asserted_en :  1 ; /* bits 6:6 */
    cs_uint32 radm_intd_deasserted_en :  1 ; /* bits 7:7 */
    cs_uint32 msi_ctrl_int_en      :  1 ; /* bits 8:8 */
    cs_uint32 xmlh_link_up_int_en  :  1 ; /* bits 9:9 */
    cs_uint32 hp_int_en            :  1 ; /* bits 10:10 */
    cs_uint32 radm_correctable_err_en :  1 ; /* bits 11:11 */
    cs_uint32 radm_nonfatal_err_en :  1 ; /* bits 12:12 */
    cs_uint32 radm_fatal_err_en    :  1 ; /* bits 13:13 */
    cs_uint32 radm_pm_to_ack_en    :  1 ; /* bits 14:14 */
    cs_uint32 radm_pm_pme_en       :  1 ; /* bits 15:15 */
    cs_uint32 gm_cmposer_lookup_err_en :  1 ; /* bits 16:16 */
    cs_uint32 radmx_cmposer_lookup_err_en :  1 ; /* bits 17:17 */
    cs_uint32 elastic_buf_ovrflow_en :  1 ; /* bits 18:18 */
    cs_uint32 elastic_buf_underflow_en :  1 ; /* bits 19:19 */
    cs_uint32 rx_dec_10b_8b_err_cnt_roll_ovr_en :  1 ; /* bits 20:20 */
    cs_uint32 rx_dis_par_err_cnt_roll_ovr_ovr_en :  1 ; /* bits 21:21 */
    cs_uint32 link_down_en         :  1 ; /* bits 22:22 */
    cs_uint32 cfg_aer_rc_err_msi_en :  1 ; /* bits 23:23 */
    cs_uint32 cfg_pme_msi_en       :  1 ; /* bits 24:24 */
    cs_uint32 hp_pme_en            :  1 ; /* bits 25:25 */
    cs_uint32 hp_msi_en            :  1 ; /* bits 26:26 */
    cs_uint32 cfg_ur_resp_en       :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_1_t;





#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_RESP_MISC_INFO 0xf00a0010
#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_RESP_MISC_INFO_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 axi_wr_resp_TD_value :  1 ; /* bits 5:5 */
    cs_uint32 axi_wr_resp_EP_value :  1 ; /* bits 4:4 */
    cs_uint32 axi_wr_resp_bad_eot  :  1 ; /* bits 3:3 */
    cs_uint32 TD_value             :  1 ; /* bits 2:2 */
    cs_uint32 EP_value             :  1 ; /* bits 1:1 */
    cs_uint32 axi_rd_resp_bad_eot  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rd_resp_bad_eot  :  1 ; /* bits 0:0 */
    cs_uint32 EP_value             :  1 ; /* bits 1:1 */
    cs_uint32 TD_value             :  1 ; /* bits 2:2 */
    cs_uint32 axi_wr_resp_bad_eot  :  1 ; /* bits 3:3 */
    cs_uint32 axi_wr_resp_EP_value :  1 ; /* bits 4:4 */
    cs_uint32 axi_wr_resp_TD_value :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_MASTER_RESP_MISC_INFO_t;





#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RESP_ERR_MAP 0xf00a0014
#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RESP_ERR_MAP_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 CPL_aborted          :  1 ; /* bits 5:5 */
    cs_uint32 CPL_ECRC             :  1 ; /* bits 4:4 */
    cs_uint32 CPL_poisoned         :  1 ; /* bits 3:3 */
    cs_uint32 cpl_ca               :  1 ; /* bits 2:2 */
    cs_uint32 cpl_crs              :  1 ; /* bits 1:1 */
    cs_uint32 cpl_ur               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpl_ur               :  1 ; /* bits 0:0 */
    cs_uint32 cpl_crs              :  1 ; /* bits 1:1 */
    cs_uint32 cpl_ca               :  1 ; /* bits 2:2 */
    cs_uint32 CPL_poisoned         :  1 ; /* bits 3:3 */
    cs_uint32 CPL_ECRC             :  1 ; /* bits 4:4 */
    cs_uint32 CPL_aborted          :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RESP_ERR_MAP_t;





#define PCIE_SATA_PCIE_GLBL_AXI_MSTR_SLV_RESP_ERR_LOW_PW_MAP 0xf00a0018
#define PCIE_SATA_PCIE_GLBL_AXI_MSTR_SLV_RESP_ERR_LOW_PW_MAP_dft 0x0000000c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 slv_csysreq          :  1 ; /* bits 3:3 */
    cs_uint32 mstr_csysreq         :  1 ; /* bits 2:2 */
    cs_uint32 decode_err           :  1 ; /* bits 1:1 */
    cs_uint32 slave_err            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 slave_err            :  1 ; /* bits 0:0 */
    cs_uint32 decode_err           :  1 ; /* bits 1:1 */
    cs_uint32 mstr_csysreq         :  1 ; /* bits 2:2 */
    cs_uint32 slv_csysreq          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_MSTR_SLV_RESP_ERR_LOW_PW_MAP_t;





#define PCIE_SATA_PCIE_GLBL_CORE_CONFIG_REG      0xf00a001c
#define PCIE_SATA_PCIE_GLBL_CORE_CONFIG_REG_dft  0x00000020




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 link_down_rst        :  1 ; /* bits 6:6 */
    cs_uint32 axi_ur_err_mask      :  1 ; /* bits 5:5 */
    cs_uint32 diag_ctrl_bus        :  3 ; /* bits 4:2 */
    cs_uint32 app_init_rst         :  1 ; /* bits 1:1 */
    cs_uint32 app_ltssm_enable     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 app_ltssm_enable     :  1 ; /* bits 0:0 */
    cs_uint32 app_init_rst         :  1 ; /* bits 1:1 */
    cs_uint32 diag_ctrl_bus        :  3 ; /* bits 4:2 */
    cs_uint32 axi_ur_err_mask      :  1 ; /* bits 5:5 */
    cs_uint32 link_down_rst        :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_CONFIG_REG_t;





#define PCIE_SATA_PCIE_GLBL_PM_INFO_RESET_VOLT_LOW_PWR_STATUS 0xf00a0020
#define PCIE_SATA_PCIE_GLBL_PM_INFO_RESET_VOLT_LOW_PWR_STATUS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 slv_cactive          :  1 ; /* bits 23:23 */
    cs_uint32 mstr_cactive         :  1 ; /* bits 22:22 */
    cs_uint32 slv_csysack          :  1 ; /* bits 21:21 */
    cs_uint32 mstr_csysack         :  1 ; /* bits 20:20 */
    cs_uint32 rtlh_rfc_upd         :  1 ; /* bits 19:19 */
    cs_uint32 rdlh_link_up         :  1 ; /* bits 18:18 */
    cs_uint32 link_req_rst_not     :  1 ; /* bits 17:17 */
    cs_uint32 clk_req_n            :  1 ; /* bits 16:16 */
    cs_uint32 pm_pme_en            :  1 ; /* bits 15:15 */
    cs_uint32 aux_pm_en            :  1 ; /* bits 14:14 */
    cs_uint32 pm_dstate            :  3 ; /* bits 13:11 */
    cs_uint32 pm_status            :  1 ; /* bits 10:10 */
    cs_uint32 xmlh_ltssm_state     :  6 ; /* bits 9:4 */
    cs_uint32 pm_curnt_state       :  3 ; /* bits 3:1 */
    cs_uint32 pm_xtlh_block_tlp    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pm_xtlh_block_tlp    :  1 ; /* bits 0:0 */
    cs_uint32 pm_curnt_state       :  3 ; /* bits 3:1 */
    cs_uint32 xmlh_ltssm_state     :  6 ; /* bits 9:4 */
    cs_uint32 pm_status            :  1 ; /* bits 10:10 */
    cs_uint32 pm_dstate            :  3 ; /* bits 13:11 */
    cs_uint32 aux_pm_en            :  1 ; /* bits 14:14 */
    cs_uint32 pm_pme_en            :  1 ; /* bits 15:15 */
    cs_uint32 clk_req_n            :  1 ; /* bits 16:16 */
    cs_uint32 link_req_rst_not     :  1 ; /* bits 17:17 */
    cs_uint32 rdlh_link_up         :  1 ; /* bits 18:18 */
    cs_uint32 rtlh_rfc_upd         :  1 ; /* bits 19:19 */
    cs_uint32 mstr_csysack         :  1 ; /* bits 20:20 */
    cs_uint32 slv_csysack          :  1 ; /* bits 21:21 */
    cs_uint32 mstr_cactive         :  1 ; /* bits 22:22 */
    cs_uint32 slv_cactive          :  1 ; /* bits 23:23 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_PM_INFO_RESET_VOLT_LOW_PWR_STATUS_t;





#define PCIE_SATA_PCIE_GLBL_RTLH_INFO            0xf00a0024
#define PCIE_SATA_PCIE_GLBL_RTLH_INFO_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rtlh_rfc_data        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rtlh_rfc_data        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RTLH_INFO_t;





#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_WR_MISC_INFO 0xf00a0028
#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_WR_MISC_INFO_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 mstr_awmisc_info_tlp_type :  5 ; /* bits 23:19 */
    cs_uint32 mstr_awmisc_info_tlp_tc :  3 ; /* bits 18:16 */
    cs_uint32 mstr_awmisc_info_tlp_attr :  2 ; /* bits 15:14 */
    cs_uint32 mstr_awmisc_info_tlp_fun_num :  3 ; /* bits 13:11 */
    cs_uint32 mstr_awmisc_info_tlp_rom :  1 ; /* bits 10:10 */
    cs_uint32 mstr_awmisc_info_tlp_io :  1 ; /* bits 9:9 */
    cs_uint32 mstr_awmisc_info_bar_num :  3 ; /* bits 8:6 */
    cs_uint32 mstr_awmisc_info_response_sts :  3 ; /* bits 5:3 */
    cs_uint32 mstr_awmisc_info_byte_offset :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mstr_awmisc_info_byte_offset :  3 ; /* bits 2:0 */
    cs_uint32 mstr_awmisc_info_response_sts :  3 ; /* bits 5:3 */
    cs_uint32 mstr_awmisc_info_bar_num :  3 ; /* bits 8:6 */
    cs_uint32 mstr_awmisc_info_tlp_io :  1 ; /* bits 9:9 */
    cs_uint32 mstr_awmisc_info_tlp_rom :  1 ; /* bits 10:10 */
    cs_uint32 mstr_awmisc_info_tlp_fun_num :  3 ; /* bits 13:11 */
    cs_uint32 mstr_awmisc_info_tlp_attr :  2 ; /* bits 15:14 */
    cs_uint32 mstr_awmisc_info_tlp_tc :  3 ; /* bits 18:16 */
    cs_uint32 mstr_awmisc_info_tlp_type :  5 ; /* bits 23:19 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_MASTER_WR_MISC_INFO_t;





#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_RD_MISC_INFO 0xf00a002c
#define PCIE_SATA_PCIE_GLBL_AXI_MASTER_RD_MISC_INFO_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 mstr_armisc_info_tlp_type :  5 ; /* bits 23:19 */
    cs_uint32 mstr_armisc_info_tlp_tc :  3 ; /* bits 18:16 */
    cs_uint32 mstr_armisc_info_tlp_attr :  2 ; /* bits 15:14 */
    cs_uint32 mstr_armisc_info_tlp_fun_num :  3 ; /* bits 13:11 */
    cs_uint32 mstr_armisc_info_tlp_rom :  1 ; /* bits 10:10 */
    cs_uint32 mstr_armisc_info_tlp_io :  1 ; /* bits 9:9 */
    cs_uint32 mstr_armisc_info_bar_num :  3 ; /* bits 8:6 */
    cs_uint32 mstr_armisc_info_response_sts :  3 ; /* bits 5:3 */
    cs_uint32 mstr_armisc_info_byte_offset :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mstr_armisc_info_byte_offset :  3 ; /* bits 2:0 */
    cs_uint32 mstr_armisc_info_response_sts :  3 ; /* bits 5:3 */
    cs_uint32 mstr_armisc_info_bar_num :  3 ; /* bits 8:6 */
    cs_uint32 mstr_armisc_info_tlp_io :  1 ; /* bits 9:9 */
    cs_uint32 mstr_armisc_info_tlp_rom :  1 ; /* bits 10:10 */
    cs_uint32 mstr_armisc_info_tlp_fun_num :  3 ; /* bits 13:11 */
    cs_uint32 mstr_armisc_info_tlp_attr :  2 ; /* bits 15:14 */
    cs_uint32 mstr_armisc_info_tlp_tc :  3 ; /* bits 18:16 */
    cs_uint32 mstr_armisc_info_tlp_type :  5 ; /* bits 23:19 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_MASTER_RD_MISC_INFO_t;





#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_BRESP_MISC_INFO 0xf00a0030
#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_BRESP_MISC_INFO_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 21 ;
    cs_uint32 slv_bmisc_info_non_posted :  1 ; /* bits 10:10 */
    cs_uint32 slv_bmisc_info_trans_sts :  3 ; /* bits 9:7 */
    cs_uint32 slv_bmisc_info_trans_attr :  2 ; /* bits 6:5 */
    cs_uint32 slv_bmisc_info_trans_tc :  3 ; /* bits 4:2 */
    cs_uint32 slv_bmisc_info_trans_td :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 slv_bmisc_info_trans_td :  1 ; /* bits 1:1 */
    cs_uint32 slv_bmisc_info_trans_tc :  3 ; /* bits 4:2 */
    cs_uint32 slv_bmisc_info_trans_attr :  2 ; /* bits 6:5 */
    cs_uint32 slv_bmisc_info_trans_sts :  3 ; /* bits 9:7 */
    cs_uint32 slv_bmisc_info_non_posted :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd2               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_SLAVE_BRESP_MISC_INFO_t;





#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RD_RESP_MISC_INFO_COMP_TIMEOUT 0xf00a0034
#define PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RD_RESP_MISC_INFO_COMP_TIMEOUT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 radm_timeout_cpl_tag :  8 ; /* bits 31:24 */
    cs_uint32 radm_timeout_cpl_len : 12 ; /* bits 23:12 */
    cs_uint32 radm_cpl_timeout     :  1 ; /* bits 11:11 */
    cs_uint32 slv_rmisc_info_non_posted :  1 ; /* bits 10:10 */
    cs_uint32 slv_rmisc_info_trans_sts :  3 ; /* bits 9:7 */
    cs_uint32 slv_rmisc_info_trans_attr :  2 ; /* bits 6:5 */
    cs_uint32 slv_rmisc_info_trans_tc :  3 ; /* bits 4:2 */
    cs_uint32 slv_rmisc_info_trans_td :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 slv_rmisc_info_trans_td :  1 ; /* bits 1:1 */
    cs_uint32 slv_rmisc_info_trans_tc :  3 ; /* bits 4:2 */
    cs_uint32 slv_rmisc_info_trans_attr :  2 ; /* bits 6:5 */
    cs_uint32 slv_rmisc_info_trans_sts :  3 ; /* bits 9:7 */
    cs_uint32 slv_rmisc_info_non_posted :  1 ; /* bits 10:10 */
    cs_uint32 radm_cpl_timeout     :  1 ; /* bits 11:11 */
    cs_uint32 radm_timeout_cpl_len : 12 ; /* bits 23:12 */
    cs_uint32 radm_timeout_cpl_tag :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RD_RESP_MISC_INFO_COMP_TIMEOUT_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_0         0xf00a0038
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_0_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 xdlh_xtlh_data       : 16 ; /* bits 31:16 */
    cs_uint32 xdlh_xtlh_halt       :  1 ; /* bits 15:15 */
    cs_uint32 rtcheck_rtfcgen_vc   :  3 ; /* bits 14:12 */
    cs_uint32 rtfcgen_fctype       :  2 ; /* bits 11:10 */
    cs_uint32 rtfcgen_incr_enable  :  1 ; /* bits 9:9 */
    cs_uint32 rtfcgen_incr_amt     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rtfcgen_incr_amt     :  9 ; /* bits 8:0 */
    cs_uint32 rtfcgen_incr_enable  :  1 ; /* bits 9:9 */
    cs_uint32 rtfcgen_fctype       :  2 ; /* bits 11:10 */
    cs_uint32 rtcheck_rtfcgen_vc   :  3 ; /* bits 14:12 */
    cs_uint32 xdlh_xtlh_halt       :  1 ; /* bits 15:15 */
    cs_uint32 xdlh_xtlh_data       : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_0_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_1         0xf00a003c
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_1_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 xdlh_xmlh_data       : 10 ; /* bits 31:22 */
    cs_uint32 xmlh_xdlh_halt       :  1 ; /* bits 21:21 */
    cs_uint32 lcrc_err_asserted    :  1 ; /* bits 20:20 */
    cs_uint32 ecrc_err_asserted    :  1 ; /* bits 19:19 */
    cs_uint32 xtlh_xdlh_sot        :  1 ; /* bits 18:18 */
    cs_uint32 xtlh_xdlh_eot        :  1 ; /* bits 17:17 */
    cs_uint32 xtlh_xdlh_badeot     :  1 ; /* bits 16:16 */
    cs_uint32 xdlh_xtlh_data       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xdlh_xtlh_data       : 16 ; /* bits 15:0 */
    cs_uint32 xtlh_xdlh_badeot     :  1 ; /* bits 16:16 */
    cs_uint32 xtlh_xdlh_eot        :  1 ; /* bits 17:17 */
    cs_uint32 xtlh_xdlh_sot        :  1 ; /* bits 18:18 */
    cs_uint32 ecrc_err_asserted    :  1 ; /* bits 19:19 */
    cs_uint32 lcrc_err_asserted    :  1 ; /* bits 20:20 */
    cs_uint32 xmlh_xdlh_halt       :  1 ; /* bits 21:21 */
    cs_uint32 xdlh_xmlh_data       : 10 ; /* bits 31:22 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_1_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_2         0xf00a0040
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_2_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rdlh_xdlh_req_acknack_seqnum :  7 ; /* bits 31:25 */
    cs_uint32 xdlh_xmlh_eot        :  1 ; /* bits 24:24 */
    cs_uint32 xdlh_xmlh_stp        :  1 ; /* bits 23:23 */
    cs_uint32 xdlh_xmlh_sdp        :  1 ; /* bits 22:22 */
    cs_uint32 xdlh_xmlh_data       : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 xdlh_xmlh_data       : 22 ; /* bits 21:0 */
    cs_uint32 xdlh_xmlh_sdp        :  1 ; /* bits 22:22 */
    cs_uint32 xdlh_xmlh_stp        :  1 ; /* bits 23:23 */
    cs_uint32 xdlh_xmlh_eot        :  1 ; /* bits 24:24 */
    cs_uint32 rdlh_xdlh_req_acknack_seqnum :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_2_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_3         0xf00a0044
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_3_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rmlh_rdlh_pkt_end    :  1 ; /* bits 31:31 */
    cs_uint32 rmlh_rdlh_pkt_edb    :  1 ; /* bits 30:30 */
    cs_uint32 rmlh_rdlh_pkt_dv     :  1 ; /* bits 29:29 */
    cs_uint32 rmlh_rdlh_pkt_err    :  1 ; /* bits 28:28 */
    cs_uint32 rdlh_rtlh_tlp_sot    :  1 ; /* bits 27:27 */
    cs_uint32 rdlh_rtlh_tlp_eot    :  1 ; /* bits 26:26 */
    cs_uint32 rdlh_rtlh_tlp_dv     :  1 ; /* bits 25:25 */
    cs_uint32 xdlh_xmlh_start_link_retrain :  1 ; /* bits 24:24 */
    cs_uint32 rtlh_req_link_retrain :  1 ; /* bits 23:23 */
    cs_uint32 cfg_link_retrain     :  1 ; /* bits 22:22 */
    cs_uint32 rdlh_xdlh_rcvd_nack  :  1 ; /* bits 21:21 */
    cs_uint32 rdlh_xdlh_rcvd_ack   :  1 ; /* bits 20:20 */
    cs_uint32 rdlh_xdlh_rcvd_acknack_seqnum : 12 ; /* bits 19:8 */
    cs_uint32 rdlh_xdlh_req2send_ack :  1 ; /* bits 7:7 */
    cs_uint32 rdlh_xdlh_req2send_ack_due2dup :  1 ; /* bits 6:6 */
    cs_uint32 rdlh_xdlh_req2send_nack :  1 ; /* bits 5:5 */
    cs_uint32 rdlh_xdlh_req_acknack_seqnum :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rdlh_xdlh_req_acknack_seqnum :  5 ; /* bits 4:0 */
    cs_uint32 rdlh_xdlh_req2send_nack :  1 ; /* bits 5:5 */
    cs_uint32 rdlh_xdlh_req2send_ack_due2dup :  1 ; /* bits 6:6 */
    cs_uint32 rdlh_xdlh_req2send_ack :  1 ; /* bits 7:7 */
    cs_uint32 rdlh_xdlh_rcvd_acknack_seqnum : 12 ; /* bits 19:8 */
    cs_uint32 rdlh_xdlh_rcvd_ack   :  1 ; /* bits 20:20 */
    cs_uint32 rdlh_xdlh_rcvd_nack  :  1 ; /* bits 21:21 */
    cs_uint32 cfg_link_retrain     :  1 ; /* bits 22:22 */
    cs_uint32 rtlh_req_link_retrain :  1 ; /* bits 23:23 */
    cs_uint32 xdlh_xmlh_start_link_retrain :  1 ; /* bits 24:24 */
    cs_uint32 rdlh_rtlh_tlp_dv     :  1 ; /* bits 25:25 */
    cs_uint32 rdlh_rtlh_tlp_eot    :  1 ; /* bits 26:26 */
    cs_uint32 rdlh_rtlh_tlp_sot    :  1 ; /* bits 27:27 */
    cs_uint32 rmlh_rdlh_pkt_err    :  1 ; /* bits 28:28 */
    cs_uint32 rmlh_rdlh_pkt_dv     :  1 ; /* bits 29:29 */
    cs_uint32 rmlh_rdlh_pkt_edb    :  1 ; /* bits 30:30 */
    cs_uint32 rmlh_rdlh_pkt_end    :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_3_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_4         0xf00a0048
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_4_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 flt_q_header_4_3     :  2 ; /* bits 31:30 */
    cs_uint32 flt_q_header_2_0     :  3 ; /* bits 29:27 */
    cs_uint32 cpl_mlf_err          :  1 ; /* bits 26:26 */
    cs_uint32 flt_q_cpl_abort      :  1 ; /* bits 25:25 */
    cs_uint32 flt_q_cpl_last       :  1 ; /* bits 24:24 */
    cs_uint32 cpl_ur_err           :  1 ; /* bits 23:23 */
    cs_uint32 cpl_ca_err           :  1 ; /* bits 22:22 */
    cs_uint32 unexpected_cpl_err   :  1 ; /* bits 21:21 */
    cs_uint32 xdlh_nodllp_pending  :  1 ; /* bits 20:20 */
    cs_uint32 xdlh_xmt_pme_ack     :  1 ; /* bits 19:19 */
    cs_uint32 xdlh_not_expecting_ack :  1 ; /* bits 18:18 */
    cs_uint32 xadm_had_enough_credit :  1 ; /* bits 17:17 */
    cs_uint32 xadm_notlp_pending   :  1 ; /* bits 16:16 */
    cs_uint32 xadm_no_fc_credit    :  1 ; /* bits 15:15 */
    cs_uint32 rmlh_inskip_rcv      :  1 ; /* bits 14:14 */
    cs_uint32 rmlh_ts_rcv_err      :  1 ; /* bits 13:13 */
    cs_uint32 rmlh_ts1_rcvd        :  1 ; /* bits 12:12 */
    cs_uint32 rmlh_ts2_rcvd        :  1 ; /* bits 11:11 */
    cs_uint32 rmlh_ts_lane_num_is_k237 :  1 ; /* bits 10:10 */
    cs_uint32 rmlh_deskew_alignment_err :  1 ; /* bits 9:9 */
    cs_uint32 rmlh_ts_link_num_is_k237 :  1 ; /* bits 8:8 */
    cs_uint32 rmlh_rcvd_lane_rev   :  1 ; /* bits 7:7 */
    cs_uint32 rmlh_rcvd_idle       :  2 ; /* bits 6:5 */
    cs_uint32 rmlh_rcvd_eidle_set  :  1 ; /* bits 4:4 */
    cs_uint32 rmlh_lanes_rcving    :  1 ; /* bits 3:3 */
    cs_uint32 rmlh_rdlh_nak        :  1 ; /* bits 2:2 */
    cs_uint32 rmlh_rdlh_dllp_start :  1 ; /* bits 1:1 */
    cs_uint32 rmlh_rdlh_tlp_start  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rmlh_rdlh_tlp_start  :  1 ; /* bits 0:0 */
    cs_uint32 rmlh_rdlh_dllp_start :  1 ; /* bits 1:1 */
    cs_uint32 rmlh_rdlh_nak        :  1 ; /* bits 2:2 */
    cs_uint32 rmlh_lanes_rcving    :  1 ; /* bits 3:3 */
    cs_uint32 rmlh_rcvd_eidle_set  :  1 ; /* bits 4:4 */
    cs_uint32 rmlh_rcvd_idle       :  2 ; /* bits 6:5 */
    cs_uint32 rmlh_rcvd_lane_rev   :  1 ; /* bits 7:7 */
    cs_uint32 rmlh_ts_link_num_is_k237 :  1 ; /* bits 8:8 */
    cs_uint32 rmlh_deskew_alignment_err :  1 ; /* bits 9:9 */
    cs_uint32 rmlh_ts_lane_num_is_k237 :  1 ; /* bits 10:10 */
    cs_uint32 rmlh_ts2_rcvd        :  1 ; /* bits 11:11 */
    cs_uint32 rmlh_ts1_rcvd        :  1 ; /* bits 12:12 */
    cs_uint32 rmlh_ts_rcv_err      :  1 ; /* bits 13:13 */
    cs_uint32 rmlh_inskip_rcv      :  1 ; /* bits 14:14 */
    cs_uint32 xadm_no_fc_credit    :  1 ; /* bits 15:15 */
    cs_uint32 xadm_notlp_pending   :  1 ; /* bits 16:16 */
    cs_uint32 xadm_had_enough_credit :  1 ; /* bits 17:17 */
    cs_uint32 xdlh_not_expecting_ack :  1 ; /* bits 18:18 */
    cs_uint32 xdlh_xmt_pme_ack     :  1 ; /* bits 19:19 */
    cs_uint32 xdlh_nodllp_pending  :  1 ; /* bits 20:20 */
    cs_uint32 unexpected_cpl_err   :  1 ; /* bits 21:21 */
    cs_uint32 cpl_ca_err           :  1 ; /* bits 22:22 */
    cs_uint32 cpl_ur_err           :  1 ; /* bits 23:23 */
    cs_uint32 flt_q_cpl_last       :  1 ; /* bits 24:24 */
    cs_uint32 flt_q_cpl_abort      :  1 ; /* bits 25:25 */
    cs_uint32 cpl_mlf_err          :  1 ; /* bits 26:26 */
    cs_uint32 flt_q_header_2_0     :  3 ; /* bits 29:27 */
    cs_uint32 flt_q_header_4_3     :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_4_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_5         0xf00a004c
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_5_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rtlh_radm_data       : 27 ; /* bits 31:5 */
    cs_uint32 rtlh_radm_dwen       :  1 ; /* bits 4:4 */
    cs_uint32 rtlh_radm_eot        :  1 ; /* bits 3:3 */
    cs_uint32 rtlh_radm_dllp_err   :  1 ; /* bits 2:2 */
    cs_uint32 rtlh_radm_malform_tlp_err :  1 ; /* bits 1:1 */
    cs_uint32 int_rtlh_radm_ecrc_err :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 int_rtlh_radm_ecrc_err :  1 ; /* bits 0:0 */
    cs_uint32 rtlh_radm_malform_tlp_err :  1 ; /* bits 1:1 */
    cs_uint32 rtlh_radm_dllp_err   :  1 ; /* bits 2:2 */
    cs_uint32 rtlh_radm_eot        :  1 ; /* bits 3:3 */
    cs_uint32 rtlh_radm_dwen       :  1 ; /* bits 4:4 */
    cs_uint32 rtlh_radm_data       : 27 ; /* bits 31:5 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_5_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_6         0xf00a0050
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_6_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 form_filt_hdr        : 26 ; /* bits 31:6 */
    cs_uint32 form_filt_dv         :  1 ; /* bits 5:5 */
    cs_uint32 rtlh_radm_data       :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rtlh_radm_data       :  5 ; /* bits 4:0 */
    cs_uint32 form_filt_dv         :  1 ; /* bits 5:5 */
    cs_uint32 form_filt_hdr        : 26 ; /* bits 31:6 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_6_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_7         0xf00a0054
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_7_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_7_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_8         0xf00a0058
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_8_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_8_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_9         0xf00a005c
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_9_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 form_filt_hdr        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_9_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_10        0xf00a0060
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_10_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pm_dev_num           :  1 ; /* bits 31:31 */
    cs_uint32 pm_bus_num           :  8 ; /* bits 30:23 */
    cs_uint32 arb_reqs             :  4 ; /* bits 22:19 */
    cs_uint32 fc_cds_pass          :  4 ; /* bits 18:15 */
    cs_uint32 grant_ack            :  4 ; /* bits 14:11 */
    cs_uint32 active_grant         :  4 ; /* bits 10:7 */
    cs_uint32 form_filt_hv         :  1 ; /* bits 6:6 */
    cs_uint32 form_filt_hdr        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 form_filt_hdr        :  6 ; /* bits 5:0 */
    cs_uint32 form_filt_hv         :  1 ; /* bits 6:6 */
    cs_uint32 active_grant         :  4 ; /* bits 10:7 */
    cs_uint32 grant_ack            :  4 ; /* bits 14:11 */
    cs_uint32 fc_cds_pass          :  4 ; /* bits 18:15 */
    cs_uint32 arb_reqs             :  4 ; /* bits 22:19 */
    cs_uint32 pm_bus_num           :  8 ; /* bits 30:23 */
    cs_uint32 pm_dev_num           :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_10_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_11        0xf00a0064
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_11_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lbc_cdm_data         :  3 ; /* bits 31:29 */
    cs_uint32 lbc_cdm_cs           :  1 ; /* bits 28:28 */
    cs_uint32 lbc_cdm_wr           :  4 ; /* bits 27:24 */
    cs_uint32 cdm_lbc_ack          :  1 ; /* bits 23:23 */
    cs_uint32 radm_rcvd_wreq_poisoned :  1 ; /* bits 22:22 */
    cs_uint32 radm_rcvd_cpl_poisoned :  1 ; /* bits 21:21 */
    cs_uint32 radm_mlf_tlp_err     :  1 ; /* bits 20:20 */
    cs_uint32 radm_ecrc_err        :  1 ; /* bits 19:19 */
    cs_uint32 radm_rcvd_req_ur     :  1 ; /* bits 18:18 */
    cs_uint32 radm_rcvd_req_ca     :  1 ; /* bits 17:17 */
    cs_uint32 radm_rcvd_cpl_ca     :  1 ; /* bits 16:16 */
    cs_uint32 radm_rcvd_cpl_ur     :  1 ; /* bits 15:15 */
    cs_uint32 radm_unexp_cpl_err   :  1 ; /* bits 14:14 */
    cs_uint32 radm_qoverflow       :  1 ; /* bits 13:13 */
    cs_uint32 radm_cpl_timeout     :  1 ; /* bits 12:12 */
    cs_uint32 int_xadm_fc_prot_err :  1 ; /* bits 11:11 */
    cs_uint32 rmlh_rcvd_err        :  1 ; /* bits 10:10 */
    cs_uint32 rtlh_fc_prot_err     :  1 ; /* bits 9:9 */
    cs_uint32 rdlh_prot_err        :  1 ; /* bits 8:8 */
    cs_uint32 rdlh_bad_tlp_err     :  1 ; /* bits 7:7 */
    cs_uint32 rdlh_bad_dllp_err    :  1 ; /* bits 6:6 */
    cs_uint32 xdlh_replay_num_rlover_err :  1 ; /* bits 5:5 */
    cs_uint32 xdlh_replay_timeout_err :  1 ; /* bits 4:4 */
    cs_uint32 pm_dev_num           :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pm_dev_num           :  4 ; /* bits 3:0 */
    cs_uint32 xdlh_replay_timeout_err :  1 ; /* bits 4:4 */
    cs_uint32 xdlh_replay_num_rlover_err :  1 ; /* bits 5:5 */
    cs_uint32 rdlh_bad_dllp_err    :  1 ; /* bits 6:6 */
    cs_uint32 rdlh_bad_tlp_err     :  1 ; /* bits 7:7 */
    cs_uint32 rdlh_prot_err        :  1 ; /* bits 8:8 */
    cs_uint32 rtlh_fc_prot_err     :  1 ; /* bits 9:9 */
    cs_uint32 rmlh_rcvd_err        :  1 ; /* bits 10:10 */
    cs_uint32 int_xadm_fc_prot_err :  1 ; /* bits 11:11 */
    cs_uint32 radm_cpl_timeout     :  1 ; /* bits 12:12 */
    cs_uint32 radm_qoverflow       :  1 ; /* bits 13:13 */
    cs_uint32 radm_unexp_cpl_err   :  1 ; /* bits 14:14 */
    cs_uint32 radm_rcvd_cpl_ur     :  1 ; /* bits 15:15 */
    cs_uint32 radm_rcvd_cpl_ca     :  1 ; /* bits 16:16 */
    cs_uint32 radm_rcvd_req_ca     :  1 ; /* bits 17:17 */
    cs_uint32 radm_rcvd_req_ur     :  1 ; /* bits 18:18 */
    cs_uint32 radm_ecrc_err        :  1 ; /* bits 19:19 */
    cs_uint32 radm_mlf_tlp_err     :  1 ; /* bits 20:20 */
    cs_uint32 radm_rcvd_cpl_poisoned :  1 ; /* bits 21:21 */
    cs_uint32 radm_rcvd_wreq_poisoned :  1 ; /* bits 22:22 */
    cs_uint32 cdm_lbc_ack          :  1 ; /* bits 23:23 */
    cs_uint32 lbc_cdm_wr           :  4 ; /* bits 27:24 */
    cs_uint32 lbc_cdm_cs           :  1 ; /* bits 28:28 */
    cs_uint32 lbc_cdm_data         :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_11_t;





#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_12        0xf00a0068
#define PCIE_SATA_PCIE_GLBL_CORE_DEBUG_12_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 lbc_cdm_addr         :  3 ; /* bits 31:29 */
    cs_uint32 lbc_cdm_data         : 29 ; /* bits 28:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lbc_cdm_data         : 29 ; /* bits 28:0 */
    cs_uint32 lbc_cdm_addr         :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORE_DEBUG_12_t;





#define PCIE_SATA_PCIE_GLBL_CMU_OK_CORE_DEBUG_13 0xf00a006c
#define PCIE_SATA_PCIE_GLBL_CMU_OK_CORE_DEBUG_13_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 phy_cmu_ok           :  1 ; /* bits 29:29 */
    cs_uint32 lbc_cdm_addr         : 29 ; /* bits 28:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lbc_cdm_addr         : 29 ; /* bits 28:0 */
    cs_uint32 phy_cmu_ok           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CMU_OK_CORE_DEBUG_13_t;





#define PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_0    0xf00a0070
#define PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cxpl_debug_info_0    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cxpl_debug_info_0    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_0_t;





#define PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_1    0xf00a0074
#define PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cxpl_debug_info_1    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cxpl_debug_info_1    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_1_t;





#define PCIE_SATA_PCIE_GLBL_PHY_RX_10B_8B_DEC_ERR_CNT 0xf00a0078
#define PCIE_SATA_PCIE_GLBL_PHY_RX_10B_8B_DEC_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_10b_8b_dec_err_cnt : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_10b_8b_dec_err_cnt : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_PHY_RX_10B_8B_DEC_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_PHY_RX_DISPARITY_ERR_CNT 0xf00a007c
#define PCIE_SATA_PCIE_GLBL_PHY_RX_DISPARITY_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_dis_parity_err_cnt : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_dis_parity_err_cnt : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_PHY_RX_DISPARITY_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_START_ADDR 0xf00a0080
#define PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_START_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rc_cfg_start_addr    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rc_cfg_start_addr    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_START_ADDR_t;





#define PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_END_ADDR 0xf00a0084
#define PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_END_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rc_cfg_end_addr      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rc_cfg_end_addr      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_END_ADDR_t;





#define PCIE_SATA_PCIE_GLBL_FPGAD_ID             0xf00a0088
#define PCIE_SATA_PCIE_GLBL_FPGAD_ID_dft         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_FPGAD_ID_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTA_ASSERT_INT_CNT 0xf00a008c
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTA_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 inta_assert_int_cnt  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 inta_assert_int_cnt  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTA_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTA_DE_ASSERT_INT_CNT 0xf00a0090
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTA_DE_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 inta_de_assert_int_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 inta_de_assert_int_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTA_DE_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTB_ASSERT_INT_CNT 0xf00a0094
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTB_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intb_assert_int_cnt  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intb_assert_int_cnt  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTB_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTB_DE_ASSERT_INT_CNT 0xf00a0098
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTB_DE_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intb_de_assert_int_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intb_de_assert_int_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTB_DE_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTC_ASSERT_INT_CNT 0xf00a009c
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTC_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intc_assert_int_cnt  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intc_assert_int_cnt  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTC_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTC_DE_ASSERT_INT_CNT 0xf00a00a0
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTC_DE_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intc_de_assert_int_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intc_de_assert_int_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTC_DE_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTD_ASSERT_INT_CNT 0xf00a00a4
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTD_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intd_assert_int_cnt  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intd_assert_int_cnt  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTD_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_INTD_DE_ASSERT_INT_CNT 0xf00a00a8
#define PCIE_SATA_PCIE_GLBL_DEBUG_INTD_DE_ASSERT_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 intd_de_assert_int_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intd_de_assert_int_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_INTD_DE_ASSERT_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_DEBUG_HOT_PLUG_INT_CNT 0xf00a00ac
#define PCIE_SATA_PCIE_GLBL_DEBUG_HOT_PLUG_INT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 hot_plug_int_cnt     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hot_plug_int_cnt     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_DEBUG_HOT_PLUG_INT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_ELCTRO_MECH_POWER_MANAGEMENT 0xf00a00b0
#define PCIE_SATA_PCIE_GLBL_ELCTRO_MECH_POWER_MANAGEMENT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 apps_pm_xmt_turnoff  :  1 ; /* bits 11:11 */
    cs_uint32 sys_cmd_cpled_int    :  1 ; /* bits 10:10 */
    cs_uint32 sys_pre_det_chged    :  1 ; /* bits 9:9 */
    cs_uint32 sys_mrl_sensor_chged :  1 ; /* bits 8:8 */
    cs_uint32 sys_pwr_fault_det    :  1 ; /* bits 7:7 */
    cs_uint32 sys_mrl_sensor_state :  1 ; /* bits 6:6 */
    cs_uint32 sys_atten_button_pressed :  1 ; /* bits 5:5 */
    cs_uint32 sys_pre_det_state    :  1 ; /* bits 4:4 */
    cs_uint32 sys_aux_pwr_det      :  1 ; /* bits 3:3 */
    cs_uint32 app_req_entr_l1      :  1 ; /* bits 2:2 */
    cs_uint32 app_req_exit_l1      :  1 ; /* bits 1:1 */
    cs_uint32 app_ready_entr_l23   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 app_ready_entr_l23   :  1 ; /* bits 0:0 */
    cs_uint32 app_req_exit_l1      :  1 ; /* bits 1:1 */
    cs_uint32 app_req_entr_l1      :  1 ; /* bits 2:2 */
    cs_uint32 sys_aux_pwr_det      :  1 ; /* bits 3:3 */
    cs_uint32 sys_pre_det_state    :  1 ; /* bits 4:4 */
    cs_uint32 sys_atten_button_pressed :  1 ; /* bits 5:5 */
    cs_uint32 sys_mrl_sensor_state :  1 ; /* bits 6:6 */
    cs_uint32 sys_pwr_fault_det    :  1 ; /* bits 7:7 */
    cs_uint32 sys_mrl_sensor_chged :  1 ; /* bits 8:8 */
    cs_uint32 sys_pre_det_chged    :  1 ; /* bits 9:9 */
    cs_uint32 sys_cmd_cpled_int    :  1 ; /* bits 10:10 */
    cs_uint32 apps_pm_xmt_turnoff  :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_ELCTRO_MECH_POWER_MANAGEMENT_t;





#define PCIE_SATA_PCIE_GLBL_FATAL_ERR_CNT        0xf00a00b4
#define PCIE_SATA_PCIE_GLBL_FATAL_ERR_CNT_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 radm_fatal_err_cnt   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_fatal_err_cnt   :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_FATAL_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_NON_FATAL_ERR_CNT    0xf00a00b8
#define PCIE_SATA_PCIE_GLBL_NON_FATAL_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 radm_non_fatal_err_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_non_fatal_err_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_NON_FATAL_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_CORR_ERR_CNT         0xf00a00bc
#define PCIE_SATA_PCIE_GLBL_CORR_ERR_CNT_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 radm_correct_err_cnt :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 radm_correct_err_cnt :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_CORR_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_31_0_LSB 0xf00a00c0
#define PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_31_0_LSB_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msi_addr_31_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msi_addr_31_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_31_0_LSB_t;





#define PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_63_32_MSB 0xf00a00c4
#define PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_63_32_MSB_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msi_addr_63_32       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msi_addr_63_32       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_63_32_MSB_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TS1_ORDER_SET_CNT 0xf00a00c8
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TS1_ORDER_SET_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_ts1_order_set_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_ts1_order_set_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_TS1_ORDER_SET_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TS2_ORDER_SET_CNT 0xf00a00cc
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TS2_ORDER_SET_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_ts2_order_set_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_ts2_order_set_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_TS2_ORDER_SET_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_SKIP_ORDER_SET_CNT 0xf00a00d0
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_SKIP_ORDER_SET_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_skip_order_set_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_skip_order_set_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_SKIP_ORDER_SET_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_ELEC_IDLE_ORDER_SET_CNT 0xf00a00d4
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_ELEC_IDLE_ORDER_SET_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_elec_idle_order_set_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_elec_idle_order_set_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_ELEC_IDLE_ORDER_SET_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_LOG_IDLE_SYMB_CNT 0xf00a00d8
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_LOG_IDLE_SYMB_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_log_idle_sym :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_log_idle_sym :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_LOG_IDLE_SYMB_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_DLLP_PKT_CNT 0xf00a00dc
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_DLLP_PKT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_dllp_pkt_cnt_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_dllp_pkt_cnt_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_DLLP_PKT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TLP_PKT_CNT  0xf00a00e0
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_TLP_PKT_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_tlp_pkt_cnt_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_tlp_pkt_cnt_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_TLP_PKT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_LCRC_ERR_CNT 0xf00a00e4
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_LCRC_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_lcrc_err     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_lcrc_err     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_LCRC_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_ECRC_ERR_CNT 0xf00a00e8
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_ECRC_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_ecrc_err     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_ecrc_err     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_ECRC_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_ERR_CNT 0xf00a00ec
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_cxpl_err     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_cxpl_err     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_UR_ERR_CNT 0xf00a00f0
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_UR_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_cxpl_ur_err  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_cxpl_ur_err  :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_UR_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_RX_RCVD_REQ_ERR_CNT  0xf00a00f4
#define PCIE_SATA_PCIE_GLBL_RX_RCVD_REQ_ERR_CNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_rcvd_req_err_incr :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_rcvd_req_err_incr :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_RX_RCVD_REQ_ERR_CNT_t;





#define PCIE_SATA_PCIE_GLBL_TX_DLLP_PKT_CNT      0xf00a00f8
#define PCIE_SATA_PCIE_GLBL_TX_DLLP_PKT_CNT_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_dllp_cnt_incr     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_dllp_cnt_incr     :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_TX_DLLP_PKT_CNT_t;





#define PCIE_SATA_PCIE_GLBL_TX_TLP_PKT_CNT       0xf00a00fc
#define PCIE_SATA_PCIE_GLBL_TX_TLP_PKT_CNT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_tlp_cnt_incr      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_tlp_cnt_incr      :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_PCIE_GLBL_TX_TLP_PKT_CNT_t;



    
  
  
  
#define PCIE_SATA_PCIE_GLBL_STRIDE               1024
#define PCIE_SATA_PCIE_GLBL_COUNT                3
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* PCIE_GLBL */

typedef struct {
  PCIE_SATA_PCIE_GLBL_INTERRUPT_0_t        INTERRUPT_0;                   /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_0_t INTERRUPT_ENABLE_0;            /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  PCIE_SATA_PCIE_GLBL_INTERRUPT_1_t        INTERRUPT_1;                   /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  PCIE_SATA_PCIE_GLBL_INTERRUPT_ENABLE_1_t INTERRUPT_ENABLE_1;            /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  PCIE_SATA_PCIE_GLBL_AXI_MASTER_RESP_MISC_INFO_t AXI_MASTER_RESP_MISC_INFO;     /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RESP_ERR_MAP_t AXI_SLAVE_RESP_ERR_MAP;        /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  PCIE_SATA_PCIE_GLBL_AXI_MSTR_SLV_RESP_ERR_LOW_PW_MAP_t AXI_MSTR_SLV_RESP_ERR_LOW_PW_MAP; /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  PCIE_SATA_PCIE_GLBL_CORE_CONFIG_REG_t    CORE_CONFIG_REG;               /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  PCIE_SATA_PCIE_GLBL_PM_INFO_RESET_VOLT_LOW_PWR_STATUS_t PM_INFO_RESET_VOLT_LOW_PWR_STATUS; /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  PCIE_SATA_PCIE_GLBL_RTLH_INFO_t          RTLH_INFO;                     /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  PCIE_SATA_PCIE_GLBL_AXI_MASTER_WR_MISC_INFO_t AXI_MASTER_WR_MISC_INFO;       /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  PCIE_SATA_PCIE_GLBL_AXI_MASTER_RD_MISC_INFO_t AXI_MASTER_RD_MISC_INFO;       /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  PCIE_SATA_PCIE_GLBL_AXI_SLAVE_BRESP_MISC_INFO_t AXI_SLAVE_BRESP_MISC_INFO;     /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  PCIE_SATA_PCIE_GLBL_AXI_SLAVE_RD_RESP_MISC_INFO_COMP_TIMEOUT_t AXI_SLAVE_RD_RESP_MISC_INFO_COMP_TIMEOUT; /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_0_t       CORE_DEBUG_0;                  /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_1_t       CORE_DEBUG_1;                  /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_2_t       CORE_DEBUG_2;                  /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_3_t       CORE_DEBUG_3;                  /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_4_t       CORE_DEBUG_4;                  /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_5_t       CORE_DEBUG_5;                  /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_6_t       CORE_DEBUG_6;                  /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_7_t       CORE_DEBUG_7;                  /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_8_t       CORE_DEBUG_8;                  /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_9_t       CORE_DEBUG_9;                  /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_10_t      CORE_DEBUG_10;                 /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_11_t      CORE_DEBUG_11;                 /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  PCIE_SATA_PCIE_GLBL_CORE_DEBUG_12_t      CORE_DEBUG_12;                 /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  PCIE_SATA_PCIE_GLBL_CMU_OK_CORE_DEBUG_13_t CMU_OK_CORE_DEBUG_13;          /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_0_t  CXPL_DEBUG_INFO_0;             /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  PCIE_SATA_PCIE_GLBL_CXPL_DEBUG_INFO_1_t  CXPL_DEBUG_INFO_1;             /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  PCIE_SATA_PCIE_GLBL_PHY_RX_10B_8B_DEC_ERR_CNT_t PHY_RX_10B_8B_DEC_ERR_CNT;     /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  PCIE_SATA_PCIE_GLBL_PHY_RX_DISPARITY_ERR_CNT_t PHY_RX_DISPARITY_ERR_CNT;      /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_START_ADDR_t PCIE_CONTR_CFG_START_ADDR;     /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  PCIE_SATA_PCIE_GLBL_PCIE_CONTR_CFG_END_ADDR_t PCIE_CONTR_CFG_END_ADDR;       /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  PCIE_SATA_PCIE_GLBL_FPGAD_ID_t           FPGAD_ID;                      /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTA_ASSERT_INT_CNT_t DEBUG_INTA_ASSERT_INT_CNT;     /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTA_DE_ASSERT_INT_CNT_t DEBUG_INTA_DE_ASSERT_INT_CNT;  /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTB_ASSERT_INT_CNT_t DEBUG_INTB_ASSERT_INT_CNT;     /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTB_DE_ASSERT_INT_CNT_t DEBUG_INTB_DE_ASSERT_INT_CNT;  /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTC_ASSERT_INT_CNT_t DEBUG_INTC_ASSERT_INT_CNT;     /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTC_DE_ASSERT_INT_CNT_t DEBUG_INTC_DE_ASSERT_INT_CNT;  /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTD_ASSERT_INT_CNT_t DEBUG_INTD_ASSERT_INT_CNT;     /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_INTD_DE_ASSERT_INT_CNT_t DEBUG_INTD_DE_ASSERT_INT_CNT;  /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  PCIE_SATA_PCIE_GLBL_DEBUG_HOT_PLUG_INT_CNT_t DEBUG_HOT_PLUG_INT_CNT;        /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  PCIE_SATA_PCIE_GLBL_ELCTRO_MECH_POWER_MANAGEMENT_t ELCTRO_MECH_POWER_MANAGEMENT;  /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  PCIE_SATA_PCIE_GLBL_FATAL_ERR_CNT_t      FATAL_ERR_CNT;                 /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  PCIE_SATA_PCIE_GLBL_NON_FATAL_ERR_CNT_t  NON_FATAL_ERR_CNT;             /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  PCIE_SATA_PCIE_GLBL_CORR_ERR_CNT_t       CORR_ERR_CNT;                  /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_31_0_LSB_t MSI_TARGET_ADDRESS_31_0_LSB;   /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  PCIE_SATA_PCIE_GLBL_MSI_TARGET_ADDRESS_63_32_MSB_t MSI_TARGET_ADDRESS_63_32_MSB;  /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_TS1_ORDER_SET_CNT_t RX_RCVD_TS1_ORDER_SET_CNT;     /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_TS2_ORDER_SET_CNT_t RX_RCVD_TS2_ORDER_SET_CNT;     /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_SKIP_ORDER_SET_CNT_t RX_RCVD_SKIP_ORDER_SET_CNT;    /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_ELEC_IDLE_ORDER_SET_CNT_t RX_RCVD_ELEC_IDLE_ORDER_SET_CNT; /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_LOG_IDLE_SYMB_CNT_t RX_RCVD_LOG_IDLE_SYMB_CNT;     /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_DLLP_PKT_CNT_t RX_RCVD_DLLP_PKT_CNT;          /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_TLP_PKT_CNT_t RX_RCVD_TLP_PKT_CNT;           /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_LCRC_ERR_CNT_t RX_RCVD_LCRC_ERR_CNT;          /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_ECRC_ERR_CNT_t RX_RCVD_ECRC_ERR_CNT;          /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_ERR_CNT_t RX_RCVD_CXPL_ERR_CNT;          /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_CXPL_UR_ERR_CNT_t RX_RCVD_CXPL_UR_ERR_CNT;       /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  PCIE_SATA_PCIE_GLBL_RX_RCVD_REQ_ERR_CNT_t RX_RCVD_REQ_ERR_CNT;           /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  PCIE_SATA_PCIE_GLBL_TX_DLLP_PKT_CNT_t    TX_DLLP_PKT_CNT;               /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  PCIE_SATA_PCIE_GLBL_TX_TLP_PKT_CNT_t     TX_TLP_PKT_CNT;                /* addr: 0x000000fc */ 
} PCIE_SATA_PCIE_GLBL_t;

  

/*
 * SATA2_CTRL[0..3]
 */
  



#define PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL1     0xf00a0c00
#define PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL1_dft 0x0000027c




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 phy_rx_data_vld_mctrl :  1 ; /* bits 31:31 */
    cs_uint32 cp_detect            :  1 ; /* bits 30:30 */
    cs_uint32 mp_switch            :  1 ; /* bits 29:29 */
    cs_uint32 phy_soc_div_mctrl    :  1 ; /* bits 28:28 */
    cs_uint32 clk_soc_div          :  2 ; /* bits 27:26 */
    cs_uint32 delay_sig_det        :  5 ; /* bits 25:21 */
    cs_uint32 phy_rate_mctrl       :  1 ; /* bits 20:20 */
    cs_uint32 phy_slumber_mctrl    :  1 ; /* bits 19:19 */
    cs_uint32 phy_partial_mctrl    :  1 ; /* bits 18:18 */
    cs_uint32 phy_tx_enb_mctrl     :  1 ; /* bits 17:17 */
    cs_uint32 phy_rate             :  2 ; /* bits 16:15 */
    cs_uint32 phy_partial_slumber  :  2 ; /* bits 14:13 */
    cs_uint32 not_used1            :  2 ; /* bits 12:11 */
    cs_uint32 phy_bit_sliprq       :  1 ; /* bits 10:10 */
    cs_uint32 phy_data_width       :  1 ; /* bits 9:9 */
    cs_uint32 phy_pol_inv          :  1 ; /* bits 8:8 */
    cs_uint32 phy_tx_comp          :  1 ; /* bits 7:7 */
    cs_uint32 phy_tx_enb           :  2 ; /* bits 6:5 */
    cs_uint32 ctrl_rx_data_vld     :  2 ; /* bits 4:3 */
    cs_uint32 ctrl_spd_mode        :  1 ; /* bits 2:2 */
    cs_uint32 ctrl_calibrated      :  1 ; /* bits 1:1 */
    cs_uint32 ctrl_rx_err          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_rx_err          :  1 ; /* bits 0:0 */
    cs_uint32 ctrl_calibrated      :  1 ; /* bits 1:1 */
    cs_uint32 ctrl_spd_mode        :  1 ; /* bits 2:2 */
    cs_uint32 ctrl_rx_data_vld     :  2 ; /* bits 4:3 */
    cs_uint32 phy_tx_enb           :  2 ; /* bits 6:5 */
    cs_uint32 phy_tx_comp          :  1 ; /* bits 7:7 */
    cs_uint32 phy_pol_inv          :  1 ; /* bits 8:8 */
    cs_uint32 phy_data_width       :  1 ; /* bits 9:9 */
    cs_uint32 phy_bit_sliprq       :  1 ; /* bits 10:10 */
    cs_uint32 not_used1            :  2 ; /* bits 12:11 */
    cs_uint32 phy_partial_slumber  :  2 ; /* bits 14:13 */
    cs_uint32 phy_rate             :  2 ; /* bits 16:15 */
    cs_uint32 phy_tx_enb_mctrl     :  1 ; /* bits 17:17 */
    cs_uint32 phy_partial_mctrl    :  1 ; /* bits 18:18 */
    cs_uint32 phy_slumber_mctrl    :  1 ; /* bits 19:19 */
    cs_uint32 phy_rate_mctrl       :  1 ; /* bits 20:20 */
    cs_uint32 delay_sig_det        :  5 ; /* bits 25:21 */
    cs_uint32 clk_soc_div          :  2 ; /* bits 27:26 */
    cs_uint32 phy_soc_div_mctrl    :  1 ; /* bits 28:28 */
    cs_uint32 mp_switch            :  1 ; /* bits 29:29 */
    cs_uint32 cp_detect            :  1 ; /* bits 30:30 */
    cs_uint32 phy_rx_data_vld_mctrl :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL1_t;





#define PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL_STAT 0xf00a0c04
#define PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL_STAT_dft 0x000007fe




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 21 ;
    cs_uint32 cp_pod               :  1 ; /* bits 10:10 */
    cs_uint32 act_led              :  1 ; /* bits 9:9 */
    cs_uint32 tx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 rx_enable            :  1 ; /* bits 7:7 */
    cs_uint32 tx_enable            :  1 ; /* bits 6:6 */
    cs_uint32 phy_reset            :  1 ; /* bits 5:5 */
    cs_uint32 slumber_mode         :  1 ; /* bits 4:4 */
    cs_uint32 partial_mode         :  1 ; /* bits 3:3 */
    cs_uint32 far_felb             :  1 ; /* bits 2:2 */
    cs_uint32 near_felb            :  1 ; /* bits 1:1 */
    cs_uint32 spd_sel              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 spd_sel              :  1 ; /* bits 0:0 */
    cs_uint32 near_felb            :  1 ; /* bits 1:1 */
    cs_uint32 far_felb             :  1 ; /* bits 2:2 */
    cs_uint32 partial_mode         :  1 ; /* bits 3:3 */
    cs_uint32 slumber_mode         :  1 ; /* bits 4:4 */
    cs_uint32 phy_reset            :  1 ; /* bits 5:5 */
    cs_uint32 tx_enable            :  1 ; /* bits 6:6 */
    cs_uint32 rx_enable            :  1 ; /* bits 7:7 */
    cs_uint32 tx_data_vld          :  1 ; /* bits 8:8 */
    cs_uint32 act_led              :  1 ; /* bits 9:9 */
    cs_uint32 cp_pod               :  1 ; /* bits 10:10 */
    cs_uint32 rsrvd1               : 21 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL_STAT_t;



    
  
  
  
#define PCIE_SATA_SATA2_CTRL_STRIDE              128
#define PCIE_SATA_SATA2_CTRL_COUNT               4
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SATA2_CTRL */

typedef struct {
  PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL1_t   SATA_CORE_CTRL1;               /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  PCIE_SATA_SATA2_CTRL_SATA_CORE_CTRL_STAT_t SATA_CORE_CTRL_STAT;           /* addr: 0x00000004 */ 
} PCIE_SATA_SATA2_CTRL_t;

  

/*
 * SATA2_PHY[0..3]
 */
  



#define PCIE_SATA_SATA2_PHY_SATA_CORE_PHY_STAT   0xf00a0e00
#define PCIE_SATA_SATA2_PHY_SATA_CORE_PHY_STAT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 runlen_err_stretch   :  1 ; /* bits 20:20 */
    cs_uint32 lane_ok_stretch      :  1 ; /* bits 19:19 */
    cs_uint32 cmu_ok               :  1 ; /* bits 18:18 */
    cs_uint32 not_used1            :  1 ; /* bits 17:17 */
    cs_uint32 lane_ok              :  1 ; /* bits 16:16 */
    cs_uint32 runlen_err           :  1 ; /* bits 15:15 */
    cs_uint32 not_used             :  3 ; /* bits 14:12 */
    cs_uint32 dec_disp_err         :  2 ; /* bits 11:10 */
    cs_uint32 dec_err              :  2 ; /* bits 9:8 */
    cs_uint32 rx_locked            :  2 ; /* bits 7:6 */
    cs_uint32 k28p5_det            :  2 ; /* bits 5:4 */
    cs_uint32 bslip_ack            :  1 ; /* bits 3:3 */
    cs_uint32 cominit_det          :  1 ; /* bits 2:2 */
    cs_uint32 comwake_det          :  1 ; /* bits 1:1 */
    cs_uint32 sig_level            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sig_level            :  1 ; /* bits 0:0 */
    cs_uint32 comwake_det          :  1 ; /* bits 1:1 */
    cs_uint32 cominit_det          :  1 ; /* bits 2:2 */
    cs_uint32 bslip_ack            :  1 ; /* bits 3:3 */
    cs_uint32 k28p5_det            :  2 ; /* bits 5:4 */
    cs_uint32 rx_locked            :  2 ; /* bits 7:6 */
    cs_uint32 dec_err              :  2 ; /* bits 9:8 */
    cs_uint32 dec_disp_err         :  2 ; /* bits 11:10 */
    cs_uint32 not_used             :  3 ; /* bits 14:12 */
    cs_uint32 runlen_err           :  1 ; /* bits 15:15 */
    cs_uint32 lane_ok              :  1 ; /* bits 16:16 */
    cs_uint32 not_used1            :  1 ; /* bits 17:17 */
    cs_uint32 cmu_ok               :  1 ; /* bits 18:18 */
    cs_uint32 lane_ok_stretch      :  1 ; /* bits 19:19 */
    cs_uint32 runlen_err_stretch   :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SATA2_PHY_SATA_CORE_PHY_STAT_t;



    
  
  
  
#define PCIE_SATA_SATA2_PHY_STRIDE               128
#define PCIE_SATA_SATA2_PHY_COUNT                4
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SATA2_PHY */

typedef struct {
  PCIE_SATA_SATA2_PHY_SATA_CORE_PHY_STAT_t SATA_CORE_PHY_STAT;            /* addr: 0x00000000 */ 
} PCIE_SATA_SATA2_PHY_t;

  

/*
 * SNOW_PHY[0..3]
 */
  



#define PCIE_SATA_SNOW_PHY_CMU_REG3_REG2_REG1_REG0 0xf00a1000
#define PCIE_SATA_SNOW_PHY_CMU_REG3_REG2_REG1_REG0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 soc1_div_o           :  4 ; /* bits 31:28 */
    cs_uint32 soc0_div_o           :  4 ; /* bits 27:24 */
    cs_uint32 cmu_pd_txclk_div_o   :  1 ; /* bits 23:23 */
    cs_uint32 pll_ctrl_ovr_o       :  3 ; /* bits 22:20 */
    cs_uint32 ssc_en_o             :  1 ; /* bits 19:19 */
    cs_uint32 ssc_gen_en_o         :  1 ; /* bits 18:18 */
    cs_uint32 pcs_rate_o           :  2 ; /* bits 17:16 */
    cs_uint32 ssc_clk_div_o        :  2 ; /* bits 15:14 */
    cs_uint32 gcfsm_clk_div_o      :  2 ; /* bits 13:12 */
    cs_uint32 pll_ctrl_num_cycles_o_9_6 :  4 ; /* bits 11:8 */
    cs_uint32 pll_ctrl_num_cycles_o_5 :  6 ; /* bits 7:2 */
    cs_uint32 pll_ctrl_good_state_o :  1 ; /* bits 1:1 */
    cs_uint32 cmu_master_cdn_o     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cmu_master_cdn_o     :  1 ; /* bits 0:0 */
    cs_uint32 pll_ctrl_good_state_o :  1 ; /* bits 1:1 */
    cs_uint32 pll_ctrl_num_cycles_o_5 :  6 ; /* bits 7:2 */
    cs_uint32 pll_ctrl_num_cycles_o_9_6 :  4 ; /* bits 11:8 */
    cs_uint32 gcfsm_clk_div_o      :  2 ; /* bits 13:12 */
    cs_uint32 ssc_clk_div_o        :  2 ; /* bits 15:14 */
    cs_uint32 pcs_rate_o           :  2 ; /* bits 17:16 */
    cs_uint32 ssc_gen_en_o         :  1 ; /* bits 18:18 */
    cs_uint32 ssc_en_o             :  1 ; /* bits 19:19 */
    cs_uint32 pll_ctrl_ovr_o       :  3 ; /* bits 22:20 */
    cs_uint32 cmu_pd_txclk_div_o   :  1 ; /* bits 23:23 */
    cs_uint32 soc0_div_o           :  4 ; /* bits 27:24 */
    cs_uint32 soc1_div_o           :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG3_REG2_REG1_REG0_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG7_REG6_REG5_REG4 0xf00a1004
#define PCIE_SATA_SNOW_PHY_CMU_REG7_REG6_REG5_REG4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ssc_gen_match_val_o_11_4 :  8 ; /* bits 31:24 */
    cs_uint32 ssc_gen_match_val_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 ssc_fcntl_o_19_16    :  4 ; /* bits 19:16 */
    cs_uint32 ssc_fcntl_o_15_8     :  8 ; /* bits 15:8 */
    cs_uint32 ssc_fcntl_o_7_0      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssc_fcntl_o_7_0      :  8 ; /* bits 7:0 */
    cs_uint32 ssc_fcntl_o_15_8     :  8 ; /* bits 15:8 */
    cs_uint32 ssc_fcntl_o_19_16    :  4 ; /* bits 19:16 */
    cs_uint32 ssc_gen_match_val_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 ssc_gen_match_val_o_11_4 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG7_REG6_REG5_REG4_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG11_REG10_REG9_REG8 0xf00a1008
#define PCIE_SATA_SNOW_PHY_CMU_REG11_REG10_REG9_REG8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tbus_addr_ovr_o_7_0  :  8 ; /* bits 31:24 */
    cs_uint32 ssc_gen_inc_val_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 ssc_gen_inc_val_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 ssc_gen_match_val_o_19_12 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ssc_gen_match_val_o_19_12 :  8 ; /* bits 7:0 */
    cs_uint32 ssc_gen_inc_val_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 ssc_gen_inc_val_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 tbus_addr_ovr_o_7_0  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG11_REG10_REG9_REG8_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG15_REG14_REG13_REG12 0xf00a100c
#define PCIE_SATA_SNOW_PHY_CMU_REG15_REG14_REG13_REG12_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_out_ovr_o_15_8   :  8 ; /* bits 31:24 */
    cs_uint32 msm_out_ovr_o_7_0    :  8 ; /* bits 23:16 */
    cs_uint32 amux_ovr_o_8_1       :  8 ; /* bits 15:8 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 msm_in_ovr_o_5_0     :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_in_ovr_o_5_0     :  6 ; /* bits 5:0 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 amux_ovr_o_8_1       :  8 ; /* bits 15:8 */
    cs_uint32 msm_out_ovr_o_7_0    :  8 ; /* bits 23:16 */
    cs_uint32 msm_out_ovr_o_15_8   :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG15_REG14_REG13_REG12_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG19_REG18_REG17_REG16 0xf00a1010
#define PCIE_SATA_SNOW_PHY_CMU_REG19_REG18_REG17_REG16_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  1 ; /* bits 31:31 */
    cs_uint32 cmu_in_ovr_o_2_0     :  3 ; /* bits 30:28 */
    cs_uint32 gcfsm_ovr_o_27_24    :  4 ; /* bits 27:24 */
    cs_uint32 gcfsm_ovr_o_23_16    :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_ovr_o_15_8     :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_ovr_o_7_0      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_ovr_o_7_0      :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_ovr_o_15_8     :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_ovr_o_23_16    :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_ovr_o_27_24    :  4 ; /* bits 27:24 */
    cs_uint32 cmu_in_ovr_o_2_0     :  3 ; /* bits 30:28 */
    cs_uint32 reserved             :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG19_REG18_REG17_REG16_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG23_REG22_REG21_REG20 0xf00a1014
#define PCIE_SATA_SNOW_PHY_CMU_REG23_REG22_REG21_REG20_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_31_24 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_7_0 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_7_0 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_31_24 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG23_REG22_REG21_REG20_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG27_REG26_REG25_REG24 0xf00a1018
#define PCIE_SATA_SNOW_PHY_CMU_REG27_REG26_REG25_REG24_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_63_56 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_39_32 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_39_32 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_63_56 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG27_REG26_REG25_REG24_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG31_REG30_REG29_REG28 0xf00a101c
#define PCIE_SATA_SNOW_PHY_CMU_REG31_REG30_REG29_REG28_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_95_88 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_71_64 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_71_64 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_95_88 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG31_REG30_REG29_REG28_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG35_REG34_REG33_REG32 0xf00a1020
#define PCIE_SATA_SNOW_PHY_CMU_REG35_REG34_REG33_REG32_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_127_120 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_103_96 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_103_96 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_127_120 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG35_REG34_REG33_REG32_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG39_REG38_REG37_REG36 0xf00a1024
#define PCIE_SATA_SNOW_PHY_CMU_REG39_REG38_REG37_REG36_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_31_24 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_7_0  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_7_0  :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_31_24 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG39_REG38_REG37_REG36_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG43_REG42_REG41_REG40 0xf00a1028
#define PCIE_SATA_SNOW_PHY_CMU_REG43_REG42_REG41_REG40_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_63_56 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_39_32 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_39_32 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_63_56 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG43_REG42_REG41_REG40_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG47_REG46_REG45_REG44 0xf00a102c
#define PCIE_SATA_SNOW_PHY_CMU_REG47_REG46_REG45_REG44_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_95_88 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_71_64 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_71_64 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_95_88 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG47_REG46_REG45_REG44_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG51_REG50_REG49_REG48 0xf00a1030
#define PCIE_SATA_SNOW_PHY_CMU_REG51_REG50_REG49_REG48_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_127_120 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_103_96 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_103_96 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_127_120 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG51_REG50_REG49_REG48_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG55_REG54_REG53_REG52 0xf00a1034
#define PCIE_SATA_SNOW_PHY_CMU_REG55_REG54_REG53_REG52_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_159_152 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_151_144 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_143_136 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_135_128 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_135_128 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_143_136 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_151_144 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_159_152 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG55_REG54_REG53_REG52_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG59_REG58_REG57_REG56 0xf00a1038
#define PCIE_SATA_SNOW_PHY_CMU_REG59_REG58_REG57_REG56_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_191_184 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_183_176 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_175_168 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_167_160 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_167_160 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_175_168 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_183_176 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_191_184 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG59_REG58_REG57_REG56_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG63_REG62_REG61_REG60 0xf00a103c
#define PCIE_SATA_SNOW_PHY_CMU_REG63_REG62_REG61_REG60_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_31_24 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_7_0  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_7_0  :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_23_16 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_31_24 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG63_REG62_REG61_REG60_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG67_REG66_REG65_REG64 0xf00a1040
#define PCIE_SATA_SNOW_PHY_CMU_REG67_REG66_REG65_REG64_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_63_56 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_39_32 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_39_32 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_47_40 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_55_48 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_63_56 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG67_REG66_REG65_REG64_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG71_REG70_REG69_REG68 0xf00a1044
#define PCIE_SATA_SNOW_PHY_CMU_REG71_REG70_REG69_REG68_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_95_88 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_71_64 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_71_64 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_95_88 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG71_REG70_REG69_REG68_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG75_REG74_REG73_REG72 0xf00a1048
#define PCIE_SATA_SNOW_PHY_CMU_REG75_REG74_REG73_REG72_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_95_88 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_71_64 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_71_64 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_79_72 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_87_80 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_95_88 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG75_REG74_REG73_REG72_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG79_REG78_REG77_REG76 0xf00a104c
#define PCIE_SATA_SNOW_PHY_CMU_REG79_REG78_REG77_REG76_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_127_120 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_103_96 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_103_96 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_111_104 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_119_112 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_127_120 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG79_REG78_REG77_REG76_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG83_REG82_REG81_REG80 0xf00a1050
#define PCIE_SATA_SNOW_PHY_CMU_REG83_REG82_REG81_REG80_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_191_184 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_183_176 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_175_168 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_167_160 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_167_160 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_175_168 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_183_176 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_191_184 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG83_REG82_REG81_REG80_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG87_REG86_REG85_REG84 0xf00a1054
#define PCIE_SATA_SNOW_PHY_CMU_REG87_REG86_REG85_REG84_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_223_216 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_215_208 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_207_200 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_199_192 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_199_192 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_207_200 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_215_208 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_223_216 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG87_REG86_REG85_REG84_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG91_REG90_REG89_REG88 0xf00a1058
#define PCIE_SATA_SNOW_PHY_CMU_REG91_REG90_REG89_REG88_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_255_248 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_247_240 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_239_232 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_231_224 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_231_224 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_239_232 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_247_240 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_255_248 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG91_REG90_REG89_REG88_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG95_REG94_REG93_REG92 0xf00a105c
#define PCIE_SATA_SNOW_PHY_CMU_REG95_REG94_REG93_REG92_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_data_o_287_280 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_data_o_279_272 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_271_264 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_263_256 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_263_256 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_data_o_271_264 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_data_o_279_272 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_data_o_287_280 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG95_REG94_REG93_REG92_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG99_REG98_REG97_REG96 0xf00a1060
#define PCIE_SATA_SNOW_PHY_CMU_REG99_REG98_REG97_REG96_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_cm_ctrl_o_29_22  :  8 ; /* bits 31:24 */
    cs_uint32 pma_cm_ctrl_o_21_14  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_13_6   :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_5_0    :  6 ; /* bits 7:2 */
    cs_uint32 msm_func_data_o_289_288 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_data_o_289_288 :  2 ; /* bits 1:0 */
    cs_uint32 pma_cm_ctrl_o_5_0    :  6 ; /* bits 7:2 */
    cs_uint32 pma_cm_ctrl_o_13_6   :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_21_14  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_29_22  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG99_REG98_REG97_REG96_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG103_REG102_REG101_REG100 0xf00a1064
#define PCIE_SATA_SNOW_PHY_CMU_REG103_REG102_REG101_REG100_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_cm_ctrl_o_61_54  :  8 ; /* bits 31:24 */
    cs_uint32 pma_cm_ctrl_o_53_46  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_45_38  :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_37_30  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_cm_ctrl_o_37_30  :  8 ; /* bits 7:0 */
    cs_uint32 pma_cm_ctrl_o_45_38  :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_53_46  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_61_54  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG103_REG102_REG101_REG100_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG107_REG106_REG105_REG104 0xf00a1068
#define PCIE_SATA_SNOW_PHY_CMU_REG107_REG106_REG105_REG104_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_cm_ctrl_o_93_86  :  8 ; /* bits 31:24 */
    cs_uint32 pma_cm_ctrl_o_85_78  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_77_70  :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_69_62  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_cm_ctrl_o_69_62  :  8 ; /* bits 7:0 */
    cs_uint32 pma_cm_ctrl_o_77_70  :  8 ; /* bits 15:8 */
    cs_uint32 pma_cm_ctrl_o_85_78  :  8 ; /* bits 23:16 */
    cs_uint32 pma_cm_ctrl_o_93_86  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG107_REG106_REG105_REG104_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG111_REG110_REG109_REG108 0xf00a106c
#define PCIE_SATA_SNOW_PHY_CMU_REG111_REG110_REG109_REG108_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cmu_pma_data_ovr_o_6_0 :  7 ; /* bits 31:25 */
    cs_uint32 gcfsm_cmu_out_ovr_en_o :  1 ; /* bits 24:24 */
    cs_uint32 reserved             :  2 ; /* bits 23:22 */
    cs_uint32 cmu_out_ovr_o_1_0    :  2 ; /* bits 21:20 */
    cs_uint32 tbus_hold            :  1 ; /* bits 19:19 */
    cs_uint32 ck_soc_div_ovr_o_2_0 :  3 ; /* bits 18:16 */
    cs_uint32 reserv               :  2 ; /* bits 15:14 */
    cs_uint32 cdr_refdiv_o_1_0     :  2 ; /* bits 13:12 */
    cs_uint32 cdr_refclk_sel_o_1_0 :  2 ; /* bits 11:10 */
    cs_uint32 pma_refclk_sel_o_1_0 :  2 ; /* bits 9:8 */
    cs_uint32 ssc_gen_updown_en_o  :  1 ; /* bits 7:7 */
    cs_uint32 ssc_gen_fracsyn_en_o :  1 ; /* bits 6:6 */
    cs_uint32 pma_cm_ctrl_o_99_94  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_cm_ctrl_o_99_94  :  6 ; /* bits 5:0 */
    cs_uint32 ssc_gen_fracsyn_en_o :  1 ; /* bits 6:6 */
    cs_uint32 ssc_gen_updown_en_o  :  1 ; /* bits 7:7 */
    cs_uint32 pma_refclk_sel_o_1_0 :  2 ; /* bits 9:8 */
    cs_uint32 cdr_refclk_sel_o_1_0 :  2 ; /* bits 11:10 */
    cs_uint32 cdr_refdiv_o_1_0     :  2 ; /* bits 13:12 */
    cs_uint32 reserv               :  2 ; /* bits 15:14 */
    cs_uint32 ck_soc_div_ovr_o_2_0 :  3 ; /* bits 18:16 */
    cs_uint32 tbus_hold            :  1 ; /* bits 19:19 */
    cs_uint32 cmu_out_ovr_o_1_0    :  2 ; /* bits 21:20 */
    cs_uint32 reserved             :  2 ; /* bits 23:22 */
    cs_uint32 gcfsm_cmu_out_ovr_en_o :  1 ; /* bits 24:24 */
    cs_uint32 gcfsm_cmu_pma_data_ovr_o_6_0 :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG111_REG110_REG109_REG108_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG114_REG113_REG112 0xf00a1070
#define PCIE_SATA_SNOW_PHY_CMU_REG114_REG113_REG112_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 gcfsm_cmu_pma_cal_ovr_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cmu_pma_cal_ovr_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cmu_pma_read_ovr_o :  1 ; /* bits 7:7 */
    cs_uint32 gcfsm_cmu_pma_go_ovr_o :  1 ; /* bits 6:6 */
    cs_uint32 gcfsm_cmu_pma_latch_ovr_o :  1 ; /* bits 5:5 */
    cs_uint32 gcfsm_cmu_pma_data_ovr_o_11_7 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cmu_pma_data_ovr_o_11_7 :  5 ; /* bits 4:0 */
    cs_uint32 gcfsm_cmu_pma_latch_ovr_o :  1 ; /* bits 5:5 */
    cs_uint32 gcfsm_cmu_pma_go_ovr_o :  1 ; /* bits 6:6 */
    cs_uint32 gcfsm_cmu_pma_read_ovr_o :  1 ; /* bits 7:7 */
    cs_uint32 gcfsm_cmu_pma_cal_ovr_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cmu_pma_cal_ovr_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG114_REG113_REG112_t;





#define PCIE_SATA_SNOW_PHY_CMU_REG255_REG239     0xf00a1074
#define PCIE_SATA_SNOW_PHY_CMU_REG255_REG239_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 tbus_data_smpl_11_8  :  4 ; /* bits 11:8 */
    cs_uint32 tbus_data_smpl_7_0   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tbus_data_smpl_7_0   :  8 ; /* bits 7:0 */
    cs_uint32 tbus_data_smpl_11_8  :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_CMU_REG255_REG239_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG3_REG2_REG1_REG0 0xf00a1078
#define PCIE_SATA_SNOW_PHY_LANE0_REG3_REG2_REG1_REG0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rxclk_lb_ena_o       :  1 ; /* bits 31:31 */
    cs_uint32 nes_lb_ena_o         :  1 ; /* bits 30:30 */
    cs_uint32 sym_align_align_pos_o_5_0 :  6 ; /* bits 29:24 */
    cs_uint32 cktrans_en_o         :  1 ; /* bits 23:23 */
    cs_uint32 dmux_txb_sel_o_2_0   :  3 ; /* bits 22:20 */
    cs_uint32 reg0_word_o          :  1 ; /* bits 19:19 */
    cs_uint32 reg0_bit_o           :  1 ; /* bits 18:18 */
    cs_uint32 reg0_pol_o_1_0       :  2 ; /* bits 17:16 */
    cs_uint32 neim_lb_ena_o        :  1 ; /* bits 15:15 */
    cs_uint32 fes_lb_ena_o         :  1 ; /* bits 14:14 */
    cs_uint32 reg1_word_o          :  1 ; /* bits 13:13 */
    cs_uint32 reg1_bit_o           :  1 ; /* bits 12:12 */
    cs_uint32 reg1_pol_o           :  1 ; /* bits 11:11 */
    cs_uint32 treg1_word_o         :  1 ; /* bits 10:10 */
    cs_uint32 treg1_bit_o          :  1 ; /* bits 9:9 */
    cs_uint32 treg1_pol_o          :  1 ; /* bits 8:8 */
    cs_uint32 dmux_txa_sel_o_1_0   :  2 ; /* bits 7:6 */
    cs_uint32 treg0_word_o         :  1 ; /* bits 5:5 */
    cs_uint32 treg0_bit_o          :  1 ; /* bits 4:4 */
    cs_uint32 treg0_pol_o          :  1 ; /* bits 3:3 */
    cs_uint32 rx_src_o             :  1 ; /* bits 2:2 */
    cs_uint32 rx_clk_src_o         :  1 ; /* bits 1:1 */
    cs_uint32 tx_clk_src_o         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_clk_src_o         :  1 ; /* bits 0:0 */
    cs_uint32 rx_clk_src_o         :  1 ; /* bits 1:1 */
    cs_uint32 rx_src_o             :  1 ; /* bits 2:2 */
    cs_uint32 treg0_pol_o          :  1 ; /* bits 3:3 */
    cs_uint32 treg0_bit_o          :  1 ; /* bits 4:4 */
    cs_uint32 treg0_word_o         :  1 ; /* bits 5:5 */
    cs_uint32 dmux_txa_sel_o_1_0   :  2 ; /* bits 7:6 */
    cs_uint32 treg1_pol_o          :  1 ; /* bits 8:8 */
    cs_uint32 treg1_bit_o          :  1 ; /* bits 9:9 */
    cs_uint32 treg1_word_o         :  1 ; /* bits 10:10 */
    cs_uint32 reg1_pol_o           :  1 ; /* bits 11:11 */
    cs_uint32 reg1_bit_o           :  1 ; /* bits 12:12 */
    cs_uint32 reg1_word_o          :  1 ; /* bits 13:13 */
    cs_uint32 fes_lb_ena_o         :  1 ; /* bits 14:14 */
    cs_uint32 neim_lb_ena_o        :  1 ; /* bits 15:15 */
    cs_uint32 reg0_pol_o_1_0       :  2 ; /* bits 17:16 */
    cs_uint32 reg0_bit_o           :  1 ; /* bits 18:18 */
    cs_uint32 reg0_word_o          :  1 ; /* bits 19:19 */
    cs_uint32 dmux_txb_sel_o_2_0   :  3 ; /* bits 22:20 */
    cs_uint32 cktrans_en_o         :  1 ; /* bits 23:23 */
    cs_uint32 sym_align_align_pos_o_5_0 :  6 ; /* bits 29:24 */
    cs_uint32 nes_lb_ena_o         :  1 ; /* bits 30:30 */
    cs_uint32 rxclk_lb_ena_o       :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG3_REG2_REG1_REG0_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG7_REG6_REG5_REG4 0xf00a107c
#define PCIE_SATA_SNOW_PHY_LANE0_REG7_REG6_REG5_REG4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_ctrl_o_13_6       :  8 ; /* bits 31:24 */
    cs_uint32 tx_ctrl_o_5_2        :  4 ; /* bits 23:20 */
    cs_uint32 tx_pcie_slew_ctrl_ena :  1 ; /* bits 19:19 */
    cs_uint32 tx_ctrl_o_0          :  1 ; /* bits 18:18 */
    cs_uint32 dfe_sigdet_1_0       :  2 ; /* bits 17:16 */
    cs_uint32 reserved             :  1 ; /* bits 15:15 */
    cs_uint32 ln_out_ovr_1_0       :  2 ; /* bits 14:13 */
    cs_uint32 pma_ln_sd_bwsel      :  1 ; /* bits 12:12 */
    cs_uint32 regp_ovr_3_0         :  4 ; /* bits 11:8 */
    cs_uint32 bchk_ck_src_o        :  1 ; /* bits 7:7 */
    cs_uint32 bchk_src_o_1_0       :  2 ; /* bits 6:5 */
    cs_uint32 bchk_clr_o           :  1 ; /* bits 4:4 */
    cs_uint32 bchk_en_o            :  1 ; /* bits 3:3 */
    cs_uint32 sigdet_ovr_o_1_0     :  2 ; /* bits 2:1 */
    cs_uint32 soc_ck_en_o          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 soc_ck_en_o          :  1 ; /* bits 0:0 */
    cs_uint32 sigdet_ovr_o_1_0     :  2 ; /* bits 2:1 */
    cs_uint32 bchk_en_o            :  1 ; /* bits 3:3 */
    cs_uint32 bchk_clr_o           :  1 ; /* bits 4:4 */
    cs_uint32 bchk_src_o_1_0       :  2 ; /* bits 6:5 */
    cs_uint32 bchk_ck_src_o        :  1 ; /* bits 7:7 */
    cs_uint32 regp_ovr_3_0         :  4 ; /* bits 11:8 */
    cs_uint32 pma_ln_sd_bwsel      :  1 ; /* bits 12:12 */
    cs_uint32 ln_out_ovr_1_0       :  2 ; /* bits 14:13 */
    cs_uint32 reserved             :  1 ; /* bits 15:15 */
    cs_uint32 dfe_sigdet_1_0       :  2 ; /* bits 17:16 */
    cs_uint32 tx_ctrl_o_0          :  1 ; /* bits 18:18 */
    cs_uint32 tx_pcie_slew_ctrl_ena :  1 ; /* bits 19:19 */
    cs_uint32 tx_ctrl_o_5_2        :  4 ; /* bits 23:20 */
    cs_uint32 tx_ctrl_o_13_6       :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG7_REG6_REG5_REG4_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG8            0xf00a1080
#define PCIE_SATA_SNOW_PHY_LANE0_REG8_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 tx_ctrl_o_21_14      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_ctrl_o_21_14      :  8 ; /* bits 7:0 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG8_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG19_REG18_REG17_REG16 0xf00a1084
#define PCIE_SATA_SNOW_PHY_LANE0_REG19_REG18_REG17_REG16_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_ln_ctrl_o_29_22  :  8 ; /* bits 31:24 */
    cs_uint32 pma_ln_ctrl_o_21_14  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_13_6   :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_5_0    :  6 ; /* bits 7:2 */
    cs_uint32 sym_align_mode_o_1_0 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sym_align_mode_o_1_0 :  2 ; /* bits 1:0 */
    cs_uint32 pma_ln_ctrl_o_5_0    :  6 ; /* bits 7:2 */
    cs_uint32 pma_ln_ctrl_o_13_6   :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_21_14  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_29_22  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG19_REG18_REG17_REG16_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG23_REG22_REG21_REG20 0xf00a1088
#define PCIE_SATA_SNOW_PHY_LANE0_REG23_REG22_REG21_REG20_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_ln_ctrl_o_61_54  :  8 ; /* bits 31:24 */
    cs_uint32 pma_ln_ctrl_o_53_46  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_45_38  :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_37_30  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_ln_ctrl_o_37_30  :  8 ; /* bits 7:0 */
    cs_uint32 pma_ln_ctrl_o_45_38  :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_53_46  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_61_54  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG23_REG22_REG21_REG20_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG27_REG26_REG25_REG24 0xf00a108c
#define PCIE_SATA_SNOW_PHY_LANE0_REG27_REG26_REG25_REG24_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pma_ln_ctrl_o_93_86  :  8 ; /* bits 31:24 */
    cs_uint32 pma_ln_ctrl_o_85_78  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_77_70  :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_69_62  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_ln_ctrl_o_69_62  :  8 ; /* bits 7:0 */
    cs_uint32 pma_ln_ctrl_o_77_70  :  8 ; /* bits 15:8 */
    cs_uint32 pma_ln_ctrl_o_85_78  :  8 ; /* bits 23:16 */
    cs_uint32 pma_ln_ctrl_o_93_86  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG27_REG26_REG25_REG24_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG31_REG30_REG29_REG28 0xf00a1090
#define PCIE_SATA_SNOW_PHY_LANE0_REG31_REG30_REG29_REG28_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_ovr_o_23_16    :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_ovr_o_15_8     :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_ovr_o_7_0      :  8 ; /* bits 15:8 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 cmu_ck_en_o          :  1 ; /* bits 6:6 */
    cs_uint32 pma_ln_ctrl_o_99_94  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pma_ln_ctrl_o_99_94  :  6 ; /* bits 5:0 */
    cs_uint32 cmu_ck_en_o          :  1 ; /* bits 6:6 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 gcfsm_ovr_o_7_0      :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_ovr_o_15_8     :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_ovr_o_23_16    :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG31_REG30_REG29_REG28_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG35_REG34_REG33_REG32 0xf00a1094
#define PCIE_SATA_SNOW_PHY_LANE0_REG35_REG34_REG33_REG32_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_rate_ovr_o_2_0   :  3 ; /* bits 31:29 */
    cs_uint32 msm_out_ovr_o_18_14  :  5 ; /* bits 28:24 */
    cs_uint32 msm_out_ovr_o_13_6   :  8 ; /* bits 23:16 */
    cs_uint32 msm_in_ovr_o_5_0     :  6 ; /* bits 15:10 */
    cs_uint32 msm_in_ovr_o_5_4     :  2 ; /* bits 9:8 */
    cs_uint32 msm_in_ovr_o_3_0     :  4 ; /* bits 7:4 */
    cs_uint32 gcfsm_ovr_o_27_24    :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_ovr_o_27_24    :  4 ; /* bits 3:0 */
    cs_uint32 msm_in_ovr_o_3_0     :  4 ; /* bits 7:4 */
    cs_uint32 msm_in_ovr_o_5_4     :  2 ; /* bits 9:8 */
    cs_uint32 msm_in_ovr_o_5_0     :  6 ; /* bits 15:10 */
    cs_uint32 msm_out_ovr_o_13_6   :  8 ; /* bits 23:16 */
    cs_uint32 msm_out_ovr_o_18_14  :  5 ; /* bits 28:24 */
    cs_uint32 msm_rate_ovr_o_2_0   :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG35_REG34_REG33_REG32_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG39_REG38_REG37_REG36 0xf00a1098
#define PCIE_SATA_SNOW_PHY_LANE0_REG39_REG38_REG37_REG36_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cdr_ctrl_out_ovr_o_20_13 :  8 ; /* bits 31:24 */
    cs_uint32 cdr_ctrl_out_ovr_o_12_5 :  8 ; /* bits 23:16 */
    cs_uint32 cdr_ctrl_out_ovr_o_4_0 :  5 ; /* bits 15:11 */
    cs_uint32 msm_term_ovr_o_6_4   :  3 ; /* bits 10:8 */
    cs_uint32 msm_term_ovr_o_3_0   :  4 ; /* bits 7:4 */
    cs_uint32 msm_rate_ovr_o_6_3   :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_rate_ovr_o_6_3   :  4 ; /* bits 3:0 */
    cs_uint32 msm_term_ovr_o_3_0   :  4 ; /* bits 7:4 */
    cs_uint32 msm_term_ovr_o_6_4   :  3 ; /* bits 10:8 */
    cs_uint32 cdr_ctrl_out_ovr_o_4_0 :  5 ; /* bits 15:11 */
    cs_uint32 cdr_ctrl_out_ovr_o_12_5 :  8 ; /* bits 23:16 */
    cs_uint32 cdr_ctrl_out_ovr_o_20_13 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG39_REG38_REG37_REG36_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG43_REG42_REG41_REG40 0xf00a109c
#define PCIE_SATA_SNOW_PHY_LANE0_REG43_REG42_REG41_REG40_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_out_b_ovr_o_1_0  :  2 ; /* bits 31:30 */
    cs_uint32 ln_in_ovr_o_14_9     :  6 ; /* bits 29:24 */
    cs_uint32 ln_in_ovr_o_8_1      :  8 ; /* bits 23:16 */
    cs_uint32 ln_in_ovr_o_0        :  1 ; /* bits 15:15 */
    cs_uint32 locked_ovr_o_1_0     :  2 ; /* bits 14:13 */
    cs_uint32 rxdet_status_ovr_o_1_0 :  2 ; /* bits 12:11 */
    cs_uint32 txdetectrx_ovr_o_1_0 :  2 ; /* bits 10:9 */
    cs_uint32 cdr_ctrl_out_ovr_o_29 :  1 ; /* bits 8:8 */
    cs_uint32 cdr_ctrl_out_ovr_o_28_21 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cdr_ctrl_out_ovr_o_28_21 :  8 ; /* bits 7:0 */
    cs_uint32 cdr_ctrl_out_ovr_o_29 :  1 ; /* bits 8:8 */
    cs_uint32 txdetectrx_ovr_o_1_0 :  2 ; /* bits 10:9 */
    cs_uint32 rxdet_status_ovr_o_1_0 :  2 ; /* bits 12:11 */
    cs_uint32 locked_ovr_o_1_0     :  2 ; /* bits 14:13 */
    cs_uint32 ln_in_ovr_o_0        :  1 ; /* bits 15:15 */
    cs_uint32 ln_in_ovr_o_8_1      :  8 ; /* bits 23:16 */
    cs_uint32 ln_in_ovr_o_14_9     :  6 ; /* bits 29:24 */
    cs_uint32 msm_out_b_ovr_o_1_0  :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG43_REG42_REG41_REG40_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG47_REG46_REG45_REG44 0xf00a10a0
#define PCIE_SATA_SNOW_PHY_LANE0_REG47_REG46_REG45_REG44_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dfe_tap1_15_8        :  8 ; /* bits 31:24 */
    cs_uint32 dfe_tap1_7_0         :  8 ; /* bits 23:16 */
    cs_uint32 reserved             :  1 ; /* bits 15:15 */
    cs_uint32 dfe_att_ctrl         :  1 ; /* bits 14:14 */
    cs_uint32 dfe_offset_ctrl      :  1 ; /* bits 13:13 */
    cs_uint32 dfe_ovr_latch        :  1 ; /* bits 12:12 */
    cs_uint32 dfe_ovr_load_en_3_0  :  4 ; /* bits 11:8 */
    cs_uint32 dfe_ovr_load_4_0     :  5 ; /* bits 7:3 */
    cs_uint32 dfe_ovr_en           :  1 ; /* bits 2:2 */
    cs_uint32 dfe_en               :  1 ; /* bits 1:1 */
    cs_uint32 ddfe_wait_en         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ddfe_wait_en         :  1 ; /* bits 0:0 */
    cs_uint32 dfe_en               :  1 ; /* bits 1:1 */
    cs_uint32 dfe_ovr_en           :  1 ; /* bits 2:2 */
    cs_uint32 dfe_ovr_load_4_0     :  5 ; /* bits 7:3 */
    cs_uint32 dfe_ovr_load_en_3_0  :  4 ; /* bits 11:8 */
    cs_uint32 dfe_ovr_latch        :  1 ; /* bits 12:12 */
    cs_uint32 dfe_offset_ctrl      :  1 ; /* bits 13:13 */
    cs_uint32 dfe_att_ctrl         :  1 ; /* bits 14:14 */
    cs_uint32 reserved             :  1 ; /* bits 15:15 */
    cs_uint32 dfe_tap1_7_0         :  8 ; /* bits 23:16 */
    cs_uint32 dfe_tap1_15_8        :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG47_REG46_REG45_REG44_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG51_REG50_REG49_REG48 0xf00a10a4
#define PCIE_SATA_SNOW_PHY_LANE0_REG51_REG50_REG49_REG48_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bist_chk_pream0_o_7_0 :  8 ; /* bits 31:24 */
    cs_uint32 bist_rx_clock_enable :  1 ; /* bits 23:23 */
    cs_uint32 bist_tx_clock_enable :  1 ; /* bits 22:22 */
    cs_uint32 bist_chk_lfsr_length_o_2_0 :  3 ; /* bits 21:19 */
    cs_uint32 bist_chk_data_mode_o :  1 ; /* bits 18:18 */
    cs_uint32 bist_gen_err_o       :  1 ; /* bits 17:17 */
    cs_uint32 bist_gen_mode8b_o    :  1 ; /* bits 16:16 */
    cs_uint32 dfe_tap2_15_8        :  8 ; /* bits 15:8 */
    cs_uint32 dfe_tap2_7_0         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dfe_tap2_7_0         :  8 ; /* bits 7:0 */
    cs_uint32 dfe_tap2_15_8        :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_mode8b_o    :  1 ; /* bits 16:16 */
    cs_uint32 bist_gen_err_o       :  1 ; /* bits 17:17 */
    cs_uint32 bist_chk_data_mode_o :  1 ; /* bits 18:18 */
    cs_uint32 bist_chk_lfsr_length_o_2_0 :  3 ; /* bits 21:19 */
    cs_uint32 bist_tx_clock_enable :  1 ; /* bits 22:22 */
    cs_uint32 bist_rx_clock_enable :  1 ; /* bits 23:23 */
    cs_uint32 bist_chk_pream0_o_7_0 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG51_REG50_REG49_REG48_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG55_REG54_REG53_REG52 0xf00a10a8
#define PCIE_SATA_SNOW_PHY_LANE0_REG55_REG54_REG53_REG52_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bist_chk_udp_o_23_16 :  8 ; /* bits 31:24 */
    cs_uint32 bist_chk_pream1_o_9_8 :  2 ; /* bits 23:22 */
    cs_uint32 reserved             :  6 ; /* bits 21:16 */
    cs_uint32 bist_chk_pream1_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_en_o        :  1 ; /* bits 7:7 */
    cs_uint32 bist_gen_word_o      :  1 ; /* bits 6:6 */
    cs_uint32 bist_gen_cdn_o       :  1 ; /* bits 5:5 */
    cs_uint32 bist_chk_insert_length_o_2_0 :  3 ; /* bits 4:2 */
    cs_uint32 bist_chk_pream0_o_9_8 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_chk_pream0_o_9_8 :  2 ; /* bits 1:0 */
    cs_uint32 bist_chk_insert_length_o_2_0 :  3 ; /* bits 4:2 */
    cs_uint32 bist_gen_cdn_o       :  1 ; /* bits 5:5 */
    cs_uint32 bist_gen_word_o      :  1 ; /* bits 6:6 */
    cs_uint32 bist_gen_en_o        :  1 ; /* bits 7:7 */
    cs_uint32 bist_chk_pream1_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 reserved             :  6 ; /* bits 21:16 */
    cs_uint32 bist_chk_pream1_o_9_8 :  2 ; /* bits 23:22 */
    cs_uint32 bist_chk_udp_o_23_16 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG55_REG54_REG53_REG52_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG59_REG58_REG57_REG56 0xf00a10ac
#define PCIE_SATA_SNOW_PHY_LANE0_REG59_REG58_REG57_REG56_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bist_chk_udp_o_31_24 :  8 ; /* bits 31:24 */
    cs_uint32 reserved             :  1 ; /* bits 23:23 */
    cs_uint32 bist_gen_insert_count_o_2_0 :  3 ; /* bits 22:20 */
    cs_uint32 bist_gen_send_pream_o :  1 ; /* bits 19:19 */
    cs_uint32 bist_gen_clk_sel_o_2_0 :  3 ; /* bits 18:16 */
    cs_uint32 bist_chk_udp_o_7_0   :  8 ; /* bits 15:8 */
    cs_uint32 bist_chk_udp_o_15_8  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_chk_udp_o_15_8  :  8 ; /* bits 7:0 */
    cs_uint32 bist_chk_udp_o_7_0   :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_clk_sel_o_2_0 :  3 ; /* bits 18:16 */
    cs_uint32 bist_gen_send_pream_o :  1 ; /* bits 19:19 */
    cs_uint32 bist_gen_insert_count_o_2_0 :  3 ; /* bits 22:20 */
    cs_uint32 reserved             :  1 ; /* bits 23:23 */
    cs_uint32 bist_chk_udp_o_31_24 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG59_REG58_REG57_REG56_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG63_REG62_REG61_REG60 0xf00a10b0
#define PCIE_SATA_SNOW_PHY_LANE0_REG63_REG62_REG61_REG60_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bist_chk_insert_word_o_23_16 :  8 ; /* bits 31:24 */
    cs_uint32 bist_chk_insert_word_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 bist_chk_insert_word_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 bist_chk_udp_o_39_32 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_chk_udp_o_39_32 :  8 ; /* bits 7:0 */
    cs_uint32 bist_chk_insert_word_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 bist_chk_insert_word_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 bist_chk_insert_word_o_23_16 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG63_REG62_REG61_REG60_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG67_REG66_REG65_REG64 0xf00a10b4
#define PCIE_SATA_SNOW_PHY_LANE0_REG67_REG66_REG65_REG64_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 bist_gen_en_low_o_15_8 :  8 ; /* bits 31:24 */
    cs_uint32 bist_gen_en_low_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 bist_chk_insert_word_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 bist_chk_insert_word_o_31_24 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_chk_insert_word_o_31_24 :  8 ; /* bits 7:0 */
    cs_uint32 bist_chk_insert_word_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_en_low_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 bist_gen_en_low_o_15_8 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG67_REG66_REG65_REG64_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG71_REG70_REG69_REG68 0xf00a10b8
#define PCIE_SATA_SNOW_PHY_LANE0_REG71_REG70_REG69_REG68_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  4 ; /* bits 31:28 */
    cs_uint32 bist_gen_insert_delay_o_11_8 :  4 ; /* bits 27:24 */
    cs_uint32 bist_gen_insert_delay_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 bist_gen_en_high_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_en_high_o_7_0 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_gen_en_high_o_7_0 :  8 ; /* bits 7:0 */
    cs_uint32 bist_gen_en_high_o_15_8 :  8 ; /* bits 15:8 */
    cs_uint32 bist_gen_insert_delay_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 bist_gen_insert_delay_o_11_8 :  4 ; /* bits 27:24 */
    cs_uint32 reserved             :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG71_REG70_REG69_REG68_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG73_REG72     0xf00a10bc
#define PCIE_SATA_SNOW_PHY_LANE0_REG73_REG72_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 bist_chk_error_15_8  :  8 ; /* bits 15:8 */
    cs_uint32 bist_chk_error_7_0   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bist_chk_error_7_0   :  8 ; /* bits 7:0 */
    cs_uint32 bist_chk_error_15_8  :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG73_REG72_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG77_REG76_REG75_REG74 0xf00a10c0
#define PCIE_SATA_SNOW_PHY_LANE0_REG77_REG76_REG75_REG74_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_lane_pma_cal_or_o_15_8 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_lane_pma_cal_ovr_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_lane_pma_read_ovr_o :  1 ; /* bits 15:15 */
    cs_uint32 gcfsm_lane_pma_go_ovr_o :  1 ; /* bits 14:14 */
    cs_uint32 gcfsm_lane_pma_latch_ovr_o :  1 ; /* bits 13:13 */
    cs_uint32 gcfsm_lane_pma_data_ovr_o_11_7 :  5 ; /* bits 12:8 */
    cs_uint32 gcfsm_lane_pma_data_ovr_o_6_0 :  7 ; /* bits 7:1 */
    cs_uint32 gcfsm_lane_out_ovr_en_o :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_lane_out_ovr_en_o :  1 ; /* bits 0:0 */
    cs_uint32 gcfsm_lane_pma_data_ovr_o_6_0 :  7 ; /* bits 7:1 */
    cs_uint32 gcfsm_lane_pma_data_ovr_o_11_7 :  5 ; /* bits 12:8 */
    cs_uint32 gcfsm_lane_pma_latch_ovr_o :  1 ; /* bits 13:13 */
    cs_uint32 gcfsm_lane_pma_go_ovr_o :  1 ; /* bits 14:14 */
    cs_uint32 gcfsm_lane_pma_read_ovr_o :  1 ; /* bits 15:15 */
    cs_uint32 gcfsm_lane_pma_cal_ovr_o_7_0 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_lane_pma_cal_or_o_15_8 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG77_REG76_REG75_REG74_t;





#define PCIE_SATA_SNOW_PHY_LANE0_REG81_REG80_REG79_REG78 0xf00a10c4
#define PCIE_SATA_SNOW_PHY_LANE0_REG81_REG80_REG79_REG78_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserv               :  1 ; /* bits 31:31 */
    cs_uint32 ahb_pma_ln_tx_rt_set_o_1_0 :  2 ; /* bits 30:29 */
    cs_uint32 ahb_pma_ln_tx_dtlev_o_2_0 :  3 ; /* bits 28:26 */
    cs_uint32 ahb_pma_ln_tx_cmlev_o_1_0 :  2 ; /* bits 25:24 */
    cs_uint32 ahb_pma_ln_tx_tlev_o_2_0 :  3 ; /* bits 23:21 */
    cs_uint32 ahb_pma_ln_tx_sr_set_o_2_0 :  3 ; /* bits 20:18 */
    cs_uint32 ahb_beacon_ena_ovr_o :  1 ; /* bits 17:17 */
    cs_uint32 ahb_beacon_ena_ovr_ena_o :  1 ; /* bits 16:16 */
    cs_uint32 ahb_jtag_ovr_o_6_0   :  7 ; /* bits 15:9 */
    cs_uint32 ahb_jtag_ovr_ena_o   :  1 ; /* bits 8:8 */
    cs_uint32 reserved             :  4 ; /* bits 7:4 */
    cs_uint32 rx_att_boost_norm_o_1_0 :  2 ; /* bits 3:2 */
    cs_uint32 rx_att_boost_cal_o_1_0 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_att_boost_cal_o_1_0 :  2 ; /* bits 1:0 */
    cs_uint32 rx_att_boost_norm_o_1_0 :  2 ; /* bits 3:2 */
    cs_uint32 reserved             :  4 ; /* bits 7:4 */
    cs_uint32 ahb_jtag_ovr_ena_o   :  1 ; /* bits 8:8 */
    cs_uint32 ahb_jtag_ovr_o_6_0   :  7 ; /* bits 15:9 */
    cs_uint32 ahb_beacon_ena_ovr_ena_o :  1 ; /* bits 16:16 */
    cs_uint32 ahb_beacon_ena_ovr_o :  1 ; /* bits 17:17 */
    cs_uint32 ahb_pma_ln_tx_sr_set_o_2_0 :  3 ; /* bits 20:18 */
    cs_uint32 ahb_pma_ln_tx_tlev_o_2_0 :  3 ; /* bits 23:21 */
    cs_uint32 ahb_pma_ln_tx_cmlev_o_1_0 :  2 ; /* bits 25:24 */
    cs_uint32 ahb_pma_ln_tx_dtlev_o_2_0 :  3 ; /* bits 28:26 */
    cs_uint32 ahb_pma_ln_tx_rt_set_o_1_0 :  2 ; /* bits 30:29 */
    cs_uint32 reserv               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_LANE0_REG81_REG80_REG79_REG78_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG3_REG2_REG1_REG0 0xf00a10c8
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG3_REG2_REG1_REG0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 oob_det_blen_min_o_6_0 :  7 ; /* bits 31:25 */
    cs_uint32 qd_clk_src_o         :  1 ; /* bits 24:24 */
    cs_uint32 reserved_12_9        :  4 ; /* bits 23:20 */
    cs_uint32 oob_div_en_o_1_0     :  2 ; /* bits 19:18 */
    cs_uint32 mode_8b_o_1_0        :  2 ; /* bits 17:16 */
    cs_uint32 ebuf_en_o            :  1 ; /* bits 15:15 */
    cs_uint32 quad_en_o            :  1 ; /* bits 14:14 */
    cs_uint32 sapis_en_o           :  1 ; /* bits 13:13 */
    cs_uint32 pipe_en_o            :  1 ; /* bits 12:12 */
    cs_uint32 reserved_5_2         :  4 ; /* bits 11:8 */
    cs_uint32 dec_en_o             :  1 ; /* bits 7:7 */
    cs_uint32 enc_en_o             :  1 ; /* bits 6:6 */
    cs_uint32 rld_en_o             :  1 ; /* bits 5:5 */
    cs_uint32 l3_master_cdn_o      :  1 ; /* bits 4:4 */
    cs_uint32 l2_master_cdn_o      :  1 ; /* bits 3:3 */
    cs_uint32 l1_master_cdn_o      :  1 ; /* bits 2:2 */
    cs_uint32 l0_master_cdn_o      :  1 ; /* bits 1:1 */
    cs_uint32 lc_master_cdn_o      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 lc_master_cdn_o      :  1 ; /* bits 0:0 */
    cs_uint32 l0_master_cdn_o      :  1 ; /* bits 1:1 */
    cs_uint32 l1_master_cdn_o      :  1 ; /* bits 2:2 */
    cs_uint32 l2_master_cdn_o      :  1 ; /* bits 3:3 */
    cs_uint32 l3_master_cdn_o      :  1 ; /* bits 4:4 */
    cs_uint32 rld_en_o             :  1 ; /* bits 5:5 */
    cs_uint32 enc_en_o             :  1 ; /* bits 6:6 */
    cs_uint32 dec_en_o             :  1 ; /* bits 7:7 */
    cs_uint32 reserved_5_2         :  4 ; /* bits 11:8 */
    cs_uint32 pipe_en_o            :  1 ; /* bits 12:12 */
    cs_uint32 sapis_en_o           :  1 ; /* bits 13:13 */
    cs_uint32 quad_en_o            :  1 ; /* bits 14:14 */
    cs_uint32 ebuf_en_o            :  1 ; /* bits 15:15 */
    cs_uint32 mode_8b_o_1_0        :  2 ; /* bits 17:16 */
    cs_uint32 oob_div_en_o_1_0     :  2 ; /* bits 19:18 */
    cs_uint32 reserved_12_9        :  4 ; /* bits 23:20 */
    cs_uint32 qd_clk_src_o         :  1 ; /* bits 24:24 */
    cs_uint32 oob_det_blen_min_o_6_0 :  7 ; /* bits 31:25 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG3_REG2_REG1_REG0_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG7_REG6_REG5_REG4 0xf00a10cc
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG7_REG6_REG5_REG4_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 oob_det_comwake_max_o_3_0 :  4 ; /* bits 31:28 */
    cs_uint32 oob_det_comwake_min_o_6_3 :  4 ; /* bits 27:24 */
    cs_uint32 oob_det_comwake_min_o_2_0 :  3 ; /* bits 23:21 */
    cs_uint32 oob_det_cominit_max_o_6_2 :  5 ; /* bits 20:16 */
    cs_uint32 oob_det_cominit_max_o_1_0 :  2 ; /* bits 15:14 */
    cs_uint32 oob_det_cominit_min_o_6_1 :  6 ; /* bits 13:8 */
    cs_uint32 oob_det_cominit_min_o_0 :  1 ; /* bits 7:7 */
    cs_uint32 oob_det_blen_max_o_6_0 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 oob_det_blen_max_o_6_0 :  7 ; /* bits 6:0 */
    cs_uint32 oob_det_cominit_min_o_0 :  1 ; /* bits 7:7 */
    cs_uint32 oob_det_cominit_min_o_6_1 :  6 ; /* bits 13:8 */
    cs_uint32 oob_det_cominit_max_o_1_0 :  2 ; /* bits 15:14 */
    cs_uint32 oob_det_cominit_max_o_6_2 :  5 ; /* bits 20:16 */
    cs_uint32 oob_det_comwake_min_o_2_0 :  3 ; /* bits 23:21 */
    cs_uint32 oob_det_comwake_min_o_6_3 :  4 ; /* bits 27:24 */
    cs_uint32 oob_det_comwake_max_o_3_0 :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG7_REG6_REG5_REG4_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG11_REG10_REG9_REG8 0xf00a10d0
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG11_REG10_REG9_REG8_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cdr_ctrl_start_len_o_3_0 :  4 ; /* bits 31:28 */
    cs_uint32 cdr_ctrl_cycle_len_o_7_4 :  4 ; /* bits 27:24 */
    cs_uint32 cdr_ctrl_cycle_len_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 cdr_ctrl_dly_lane_o_9_6 :  4 ; /* bits 19:16 */
    cs_uint32 cdr_ctrl_dly_lane_o_5_0 :  6 ; /* bits 15:10 */
    cs_uint32 cdr_ctrl_dly_cdr_o_6_5 :  2 ; /* bits 9:8 */
    cs_uint32 cdr_ctrl_dly_cdr_o_4_0 :  5 ; /* bits 7:3 */
    cs_uint32 oob_det_comwake_mas_o_6_4 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 oob_det_comwake_mas_o_6_4 :  3 ; /* bits 2:0 */
    cs_uint32 cdr_ctrl_dly_cdr_o_4_0 :  5 ; /* bits 7:3 */
    cs_uint32 cdr_ctrl_dly_cdr_o_6_5 :  2 ; /* bits 9:8 */
    cs_uint32 cdr_ctrl_dly_lane_o_5_0 :  6 ; /* bits 15:10 */
    cs_uint32 cdr_ctrl_dly_lane_o_9_6 :  4 ; /* bits 19:16 */
    cs_uint32 cdr_ctrl_cycle_len_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 cdr_ctrl_cycle_len_o_7_4 :  4 ; /* bits 27:24 */
    cs_uint32 cdr_ctrl_start_len_o_3_0 :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG11_REG10_REG9_REG8_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG15_REG14_REG13_REG12 0xf00a10d4
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG15_REG14_REG13_REG12_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 sym_lock_num_o_2_0   :  3 ; /* bits 31:29 */
    cs_uint32 sym_align_word_o_9_5 :  5 ; /* bits 28:24 */
    cs_uint32 sym_align_word_o_4_0 :  5 ; /* bits 23:19 */
    cs_uint32 rld_maxlen_o_6_4     :  3 ; /* bits 18:16 */
    cs_uint32 rld_maxlen_o_3_0     :  4 ; /* bits 15:12 */
    cs_uint32 cdr_ctrl_div_en_o_1_0 :  2 ; /* bits 11:10 */
    cs_uint32 cdr_ctrl_min_bounce_o_2_1 :  2 ; /* bits 9:8 */
    cs_uint32 cdr_ctrl_min_bounce_o_0 :  1 ; /* bits 7:7 */
    cs_uint32 cdr_ctrl_max_diff_o_4_0 :  5 ; /* bits 6:2 */
    cs_uint32 cdr_ctrl_int_fil_o_1_0 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cdr_ctrl_int_fil_o_1_0 :  2 ; /* bits 1:0 */
    cs_uint32 cdr_ctrl_max_diff_o_4_0 :  5 ; /* bits 6:2 */
    cs_uint32 cdr_ctrl_min_bounce_o_0 :  1 ; /* bits 7:7 */
    cs_uint32 cdr_ctrl_min_bounce_o_2_1 :  2 ; /* bits 9:8 */
    cs_uint32 cdr_ctrl_div_en_o_1_0 :  2 ; /* bits 11:10 */
    cs_uint32 rld_maxlen_o_3_0     :  4 ; /* bits 15:12 */
    cs_uint32 rld_maxlen_o_6_4     :  3 ; /* bits 18:16 */
    cs_uint32 sym_align_word_o_4_0 :  5 ; /* bits 23:19 */
    cs_uint32 sym_align_word_o_9_5 :  5 ; /* bits 28:24 */
    cs_uint32 sym_lock_num_o_2_0   :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG15_REG14_REG13_REG12_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG19_REG18_REG17_REG16 0xf00a10d8
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG19_REG18_REG17_REG16_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ebuf_fifo_mid_o_0    :  1 ; /* bits 31:31 */
    cs_uint32 ebuf_symb1_0_9_3     :  7 ; /* bits 30:24 */
    cs_uint32 ebuf_symb1_0_2_0     :  3 ; /* bits 23:21 */
    cs_uint32 ebuf_symb0_0_9_5     :  5 ; /* bits 20:16 */
    cs_uint32 ebuf_symb0_0_4_0     :  5 ; /* bits 15:11 */
    cs_uint32 gcfsm_fiv_eno_1_0    :  2 ; /* bits 10:9 */
    cs_uint32 p2s_rbuf_autofix_o   :  1 ; /* bits 8:8 */
    cs_uint32 p2s_rbuf_ptr_diff_o_2_0 :  3 ; /* bits 7:5 */
    cs_uint32 sym_unlock_num_o_3_0 :  4 ; /* bits 4:1 */
    cs_uint32 sym_lock_num_o_3     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 sym_lock_num_o_3     :  1 ; /* bits 0:0 */
    cs_uint32 sym_unlock_num_o_3_0 :  4 ; /* bits 4:1 */
    cs_uint32 p2s_rbuf_ptr_diff_o_2_0 :  3 ; /* bits 7:5 */
    cs_uint32 p2s_rbuf_autofix_o   :  1 ; /* bits 8:8 */
    cs_uint32 gcfsm_fiv_eno_1_0    :  2 ; /* bits 10:9 */
    cs_uint32 ebuf_symb0_0_4_0     :  5 ; /* bits 15:11 */
    cs_uint32 ebuf_symb0_0_9_5     :  5 ; /* bits 20:16 */
    cs_uint32 ebuf_symb1_0_2_0     :  3 ; /* bits 23:21 */
    cs_uint32 ebuf_symb1_0_9_3     :  7 ; /* bits 30:24 */
    cs_uint32 ebuf_fifo_mid_o_0    :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG19_REG18_REG17_REG16_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG23_REG22_REG21_REG20 0xf00a10dc
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG23_REG22_REG21_REG20_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  6 ; /* bits 31:26 */
    cs_uint32 ebuf_symb1_n_o_9_8   :  2 ; /* bits 25:24 */
    cs_uint32 ebuf_symb1_n_o_7_0   :  8 ; /* bits 23:16 */
    cs_uint32 ebuf_mode_o_1_0      :  2 ; /* bits 15:14 */
    cs_uint32 ebuf_fifo_empty_o_4_0 :  5 ; /* bits 13:9 */
    cs_uint32 ebuf_fifo_full_o_4   :  1 ; /* bits 8:8 */
    cs_uint32 ebuf_fifo_full_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 ebuf_fifo_mid_o_4_1  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ebuf_fifo_mid_o_4_1  :  4 ; /* bits 3:0 */
    cs_uint32 ebuf_fifo_full_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 ebuf_fifo_full_o_4   :  1 ; /* bits 8:8 */
    cs_uint32 ebuf_fifo_empty_o_4_0 :  5 ; /* bits 13:9 */
    cs_uint32 ebuf_mode_o_1_0      :  2 ; /* bits 15:14 */
    cs_uint32 ebuf_symb1_n_o_7_0   :  8 ; /* bits 23:16 */
    cs_uint32 ebuf_symb1_n_o_9_8   :  2 ; /* bits 25:24 */
    cs_uint32 reserved             :  6 ; /* bits 31:26 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG23_REG22_REG21_REG20_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG51_REG50_REG49_REG48 0xf00a10e0
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG51_REG50_REG49_REG48_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_23_16 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 quad_if_in_ovr_o_6_0 :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 quad_if_in_ovr_o_6_0 :  7 ; /* bits 6:0 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 gcfsm_cycle_len_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_23_16 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG51_REG50_REG49_REG48_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG55_REG54_REG53_REG52 0xf00a10e4
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG55_REG54_REG53_REG52_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_55_48 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_47_40 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_31_24 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_31_24 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_47_40 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_55_48 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG55_REG54_REG53_REG52_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG59_REG58_REG57_REG56 0xf00a10e8
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG59_REG58_REG57_REG56_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_87_80 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_79_72 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_71_64 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_63_56 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_63_56 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_71_64 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_79_72 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_87_80 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG59_REG58_REG57_REG56_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG63_REG62_REG61_REG60 0xf00a10ec
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG63_REG62_REG61_REG60_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 gcfsm_cycle_len_o_119_112 :  8 ; /* bits 31:24 */
    cs_uint32 gcfsm_cycle_len_o_111_104 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_103_96 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_95_88 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_95_88 :  8 ; /* bits 7:0 */
    cs_uint32 gcfsm_cycle_len_o_103_96 :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_111_104 :  8 ; /* bits 23:16 */
    cs_uint32 gcfsm_cycle_len_o_119_112 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG63_REG62_REG61_REG60_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG67_REG66_REG65_REG64 0xf00a10f0
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG67_REG66_REG65_REG64_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_23_16 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_7_0  :  8 ; /* bits 15:8 */
    cs_uint32 gcfsm_cycle_len_o_127_120 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gcfsm_cycle_len_o_127_120 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_7_0  :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_15_8 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_23_16 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG67_REG66_REG65_REG64_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG71_REG70_REG69_REG68 0xf00a10f4
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG71_REG70_REG69_REG68_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_55_48 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_47_40 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_31_24 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_31_24 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_39_32 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_47_40 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_55_48 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG71_REG70_REG69_REG68_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG75_REG74_REG73_REG72 0xf00a10f8
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG75_REG74_REG73_REG72_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_87_80 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_79_72 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_71_64 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_63_56 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_63_56 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_71_64 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_79_72 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_87_80 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG75_REG74_REG73_REG72_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG79_REG78_REG77_REG76 0xf00a10fc
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG79_REG78_REG77_REG76_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_119_112 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_111_104 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_103_96 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_95_88 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_95_88 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_103_96 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_111_104 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_119_112 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG79_REG78_REG77_REG76_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG83_REG82_REG81_REG80 0xf00a1100
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG83_REG82_REG81_REG80_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_151_144 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_143_136 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_135_128 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_127_120 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_127_120 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_135_128 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_143_136 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_151_144 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG83_REG82_REG81_REG80_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG87_REG86_REG85_REG84 0xf00a1104
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG87_REG86_REG85_REG84_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 msm_func_info_o_183_176 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_175_168 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_167_160 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_159_152 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_159_152 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_167_160 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_175_168 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_183_176 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG87_REG86_REG85_REG84_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG91_REG90_REG89_REG88 0xf00a1108
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG91_REG90_REG89_REG88_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_7_0 :  8 ; /* bits 31:24 */
    cs_uint32 msm_func_info_o_207_200 :  8 ; /* bits 23:16 */
    cs_uint32 msm_func_info_o_199_192 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_191_184 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 msm_func_info_o_191_184 :  8 ; /* bits 7:0 */
    cs_uint32 msm_func_info_o_199_192 :  8 ; /* bits 15:8 */
    cs_uint32 msm_func_info_o_207_200 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_7_0 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG91_REG90_REG89_REG88_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG95_REG94_REG93_REG92 0xf00a110c
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG95_REG94_REG93_REG92_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_39_32 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_31_24 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_23_16 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_15_8 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_15_8 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_23_16 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_31_24 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_39_32 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG95_REG94_REG93_REG92_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG99_REG98_REG97_REG96 0xf00a1110
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG99_REG98_REG97_REG96_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_71_64 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_63_56 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_55_48 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_47_40 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_47_40 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_55_48 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_63_56 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_71_64 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG99_REG98_REG97_REG96_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG103_REG102_REG101_REG100 0xf00a1114
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG103_REG102_REG101_REG100_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_103_96 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_95_88 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_87_80 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_79_72 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_79_72 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_87_80 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_95_88 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_103_96 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG103_REG102_REG101_REG100_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG107_REG106_REG105_REG104 0xf00a1118
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG107_REG106_REG105_REG104_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_135_128 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_127_120 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_119_112 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_111_104 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_111_104 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_119_112 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_127_120 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_135_128 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG107_REG106_REG105_REG104_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG111_REG110_REG109_REG108 0xf00a111c
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG111_REG110_REG109_REG108_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_167_160 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_159_152 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_151_144 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_143_136 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_143_136 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_151_144 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_159_152 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_167_160 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG111_REG110_REG109_REG108_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG115_REG114_REG113_REG112 0xf00a1120
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG115_REG114_REG113_REG112_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_199_192 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_191_184 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_183_176 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_175_168 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_175_168 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_183_176 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_191_184 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_199_192 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG115_REG114_REG113_REG112_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG119_REG118_REG117_REG116 0xf00a1124
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG119_REG118_REG117_REG116_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_231_224 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_223_216 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_215_208 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_207_200 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_207_200 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_215_208 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_223_216 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_231_224 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG119_REG118_REG117_REG116_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG123_REG122_REG121_REG120 0xf00a1128
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG123_REG122_REG121_REG120_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dbank_ahb_data_o_263_256 :  8 ; /* bits 31:24 */
    cs_uint32 dbank_ahb_data_o_255_248 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_247_240 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_239_232 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_239_232 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_247_240 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_255_248 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_263_256 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG123_REG122_REG121_REG120_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG127_REG126_REG125_REG124 0xf00a112c
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG127_REG126_REG125_REG124_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 start_delay_o_5_0    :  6 ; /* bits 31:26 */
    cs_uint32 dbank_ahb_data_o_289_288 :  2 ; /* bits 25:24 */
    cs_uint32 dbank_ahb_data_o_287_280 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_279_272 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_271_264 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dbank_ahb_data_o_271_264 :  8 ; /* bits 7:0 */
    cs_uint32 dbank_ahb_data_o_279_272 :  8 ; /* bits 15:8 */
    cs_uint32 dbank_ahb_data_o_287_280 :  8 ; /* bits 23:16 */
    cs_uint32 dbank_ahb_data_o_289_288 :  2 ; /* bits 25:24 */
    cs_uint32 start_delay_o_5_0    :  6 ; /* bits 31:26 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG127_REG126_REG125_REG124_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG131_REG130_REG129_REG128 0xf00a1130
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG131_REG130_REG129_REG128_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_predrv_dly_11_o_2_0 :  3 ; /* bits 31:29 */
    cs_uint32 tx_predrv_dly_01_o_2_0 :  3 ; /* bits 28:26 */
    cs_uint32 tx_predrv_dly_00_o_2_1 :  2 ; /* bits 25:24 */
    cs_uint32 tx_predrv_dly_00_o_0 :  1 ; /* bits 23:23 */
    cs_uint32 tx_predrv_sr_11_o_1_0 :  2 ; /* bits 22:21 */
    cs_uint32 tx_predrv_sr_01_o_1_0 :  2 ; /* bits 20:19 */
    cs_uint32 tx_predrv_sr_00_o_1_0 :  2 ; /* bits 18:17 */
    cs_uint32 rx_bias_11_o_2       :  1 ; /* bits 16:16 */
    cs_uint32 rx_bias_11_o_1_0     :  2 ; /* bits 15:14 */
    cs_uint32 rx_bias_01_o_2_0     :  3 ; /* bits 13:11 */
    cs_uint32 rx_bias_00_o_2_0     :  3 ; /* bits 10:8 */
    cs_uint32 start_delay_o_13_6   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 start_delay_o_13_6   :  8 ; /* bits 7:0 */
    cs_uint32 rx_bias_00_o_2_0     :  3 ; /* bits 10:8 */
    cs_uint32 rx_bias_01_o_2_0     :  3 ; /* bits 13:11 */
    cs_uint32 rx_bias_11_o_1_0     :  2 ; /* bits 15:14 */
    cs_uint32 rx_bias_11_o_2       :  1 ; /* bits 16:16 */
    cs_uint32 tx_predrv_sr_00_o_1_0 :  2 ; /* bits 18:17 */
    cs_uint32 tx_predrv_sr_01_o_1_0 :  2 ; /* bits 20:19 */
    cs_uint32 tx_predrv_sr_11_o_1_0 :  2 ; /* bits 22:21 */
    cs_uint32 tx_predrv_dly_00_o_0 :  1 ; /* bits 23:23 */
    cs_uint32 tx_predrv_dly_00_o_2_1 :  2 ; /* bits 25:24 */
    cs_uint32 tx_predrv_dly_01_o_2_0 :  3 ; /* bits 28:26 */
    cs_uint32 tx_predrv_dly_11_o_2_0 :  3 ; /* bits 31:29 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG131_REG130_REG129_REG128_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG135_REG134_REG133_REG132 0xf00a1134
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG135_REG134_REG133_REG132_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dfe_att_cycle_len_o_3_0 :  4 ; /* bits 31:28 */
    cs_uint32 dfe_count_length_o_18_15 :  4 ; /* bits 27:24 */
    cs_uint32 dfe_count_length_o_14_7 :  8 ; /* bits 23:16 */
    cs_uint32 dfe_count_length_o_6_0 :  7 ; /* bits 15:9 */
    cs_uint32 dfe_count_run_o_3    :  1 ; /* bits 8:8 */
    cs_uint32 dfe_count_run_o_2_0  :  3 ; /* bits 7:5 */
    cs_uint32 dfe_init_cwrun_o_3_0repeat_o :  4 ; /* bits 4:1 */
    cs_uint32 dfe_init_repeat_o    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dfe_init_repeat_o    :  1 ; /* bits 0:0 */
    cs_uint32 dfe_init_cwrun_o_3_0repeat_o :  4 ; /* bits 4:1 */
    cs_uint32 dfe_count_run_o_2_0  :  3 ; /* bits 7:5 */
    cs_uint32 dfe_count_run_o_3    :  1 ; /* bits 8:8 */
    cs_uint32 dfe_count_length_o_6_0 :  7 ; /* bits 15:9 */
    cs_uint32 dfe_count_length_o_14_7 :  8 ; /* bits 23:16 */
    cs_uint32 dfe_count_length_o_18_15 :  4 ; /* bits 27:24 */
    cs_uint32 dfe_att_cycle_len_o_3_0 :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG135_REG134_REG133_REG132_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG139_REG138_REG137_REG136 0xf00a1138
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG139_REG138_REG137_REG136_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved_16_13       :  4 ; /* bits 31:28 */
    cs_uint32 dfe_tap2_cycle_len_o_7_4 :  4 ; /* bits 27:24 */
    cs_uint32 dfe_tap2_cycle_len_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 dfe_tap1_cycle_len_o_7_4 :  4 ; /* bits 19:16 */
    cs_uint32 dfe_tap1_cycle_len_o_3_0 :  4 ; /* bits 15:12 */
    cs_uint32 dfe_boost_cycle_len_o_7_4 :  4 ; /* bits 11:8 */
    cs_uint32 dfe_boost_cycle_len_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 dfe_att_cycle_len_o_7_4 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dfe_att_cycle_len_o_7_4 :  4 ; /* bits 3:0 */
    cs_uint32 dfe_boost_cycle_len_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 dfe_boost_cycle_len_o_7_4 :  4 ; /* bits 11:8 */
    cs_uint32 dfe_tap1_cycle_len_o_3_0 :  4 ; /* bits 15:12 */
    cs_uint32 dfe_tap1_cycle_len_o_7_4 :  4 ; /* bits 19:16 */
    cs_uint32 dfe_tap2_cycle_len_o_3_0 :  4 ; /* bits 23:20 */
    cs_uint32 dfe_tap2_cycle_len_o_7_4 :  4 ; /* bits 27:24 */
    cs_uint32 reserved_16_13       :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG139_REG138_REG137_REG136_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG143_REG142_REG141_REG140 0xf00a113c
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG143_REG142_REG141_REG140_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  2 ; /* bits 31:30 */
    cs_uint32 dfe_tap2_bounce_o_3_0 :  4 ; /* bits 29:26 */
    cs_uint32 dfe_tap1_bounce_o_3_2 :  2 ; /* bits 25:24 */
    cs_uint32 dfe_tap1_bounce_o_1_0 :  2 ; /* bits 23:22 */
    cs_uint32 dfe_boost_bounce_o_3_0 :  4 ; /* bits 21:18 */
    cs_uint32 dfe_att_bounce_o_3_2 :  2 ; /* bits 17:16 */
    cs_uint32 dfe_att_bounce_o_1_0 :  2 ; /* bits 15:14 */
    cs_uint32 dfe_tap2_start_o_4_0 :  5 ; /* bits 13:9 */
    cs_uint32 dfe_tap1_start_o_4   :  1 ; /* bits 8:8 */
    cs_uint32 dfe_tap1_start_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 dfe_boost_start_o_3_0 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dfe_boost_start_o_3_0 :  4 ; /* bits 3:0 */
    cs_uint32 dfe_tap1_start_o_3_0 :  4 ; /* bits 7:4 */
    cs_uint32 dfe_tap1_start_o_4   :  1 ; /* bits 8:8 */
    cs_uint32 dfe_tap2_start_o_4_0 :  5 ; /* bits 13:9 */
    cs_uint32 dfe_att_bounce_o_1_0 :  2 ; /* bits 15:14 */
    cs_uint32 dfe_att_bounce_o_3_2 :  2 ; /* bits 17:16 */
    cs_uint32 dfe_boost_bounce_o_3_0 :  4 ; /* bits 21:18 */
    cs_uint32 dfe_tap1_bounce_o_1_0 :  2 ; /* bits 23:22 */
    cs_uint32 dfe_tap1_bounce_o_3_2 :  2 ; /* bits 25:24 */
    cs_uint32 dfe_tap2_bounce_o_3_0 :  4 ; /* bits 29:26 */
    cs_uint32 reserved             :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG143_REG142_REG141_REG140_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG147_REG146_REG145_REG144 0xf00a1140
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG147_REG146_REG145_REG144_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dfe_offset2_h_o_5_0  :  6 ; /* bits 31:26 */
    cs_uint32 dfe_offset2_l_o_5_4  :  2 ; /* bits 25:24 */
    cs_uint32 dfe_offset2_h_o_3_0  :  4 ; /* bits 23:20 */
    cs_uint32 dfe_offset1_h_o_5_2  :  4 ; /* bits 19:16 */
    cs_uint32 dfe_offset1_h_o_1_0  :  2 ; /* bits 15:14 */
    cs_uint32 dfe_offset1_l_o_5_0  :  6 ; /* bits 13:8 */
    cs_uint32 dfe_shift_o_3_0      :  4 ; /* bits 7:4 */
    cs_uint32 dfe_fin_side_o_3_0   :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dfe_fin_side_o_3_0   :  4 ; /* bits 3:0 */
    cs_uint32 dfe_shift_o_3_0      :  4 ; /* bits 7:4 */
    cs_uint32 dfe_offset1_l_o_5_0  :  6 ; /* bits 13:8 */
    cs_uint32 dfe_offset1_h_o_1_0  :  2 ; /* bits 15:14 */
    cs_uint32 dfe_offset1_h_o_5_2  :  4 ; /* bits 19:16 */
    cs_uint32 dfe_offset2_h_o_3_0  :  4 ; /* bits 23:20 */
    cs_uint32 dfe_offset2_l_o_5_4  :  2 ; /* bits 25:24 */
    cs_uint32 dfe_offset2_h_o_5_0  :  6 ; /* bits 31:26 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG147_REG146_REG145_REG144_t;





#define PCIE_SATA_SNOW_PHY_COM_LANE_REG150_REG149_REG148 0xf00a1144
#define PCIE_SATA_SNOW_PHY_COM_LANE_REG150_REG149_REG148_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 reserved             :  8 ; /* bits 31:24 */
    cs_uint32 dfe_att_start_o_4_0  :  5 ; /* bits 23:19 */
    cs_uint32 ln_refclkdiv_en_o    :  1 ; /* bits 18:18 */
    cs_uint32 ln_cmuref_en_o       :  1 ; /* bits 17:17 */
    cs_uint32 cdr_ctrl_sigdet_low_min_o_8 :  1 ; /* bits 16:16 */
    cs_uint32 cdr_ctrl_sigdet_low_min_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 jtag_ctrl_o_7_0      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 jtag_ctrl_o_7_0      :  8 ; /* bits 7:0 */
    cs_uint32 cdr_ctrl_sigdet_low_min_o_7_0 :  8 ; /* bits 15:8 */
    cs_uint32 cdr_ctrl_sigdet_low_min_o_8 :  1 ; /* bits 16:16 */
    cs_uint32 ln_cmuref_en_o       :  1 ; /* bits 17:17 */
    cs_uint32 ln_refclkdiv_en_o    :  1 ; /* bits 18:18 */
    cs_uint32 dfe_att_start_o_4_0  :  5 ; /* bits 23:19 */
    cs_uint32 reserved             :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} PCIE_SATA_SNOW_PHY_COM_LANE_REG150_REG149_REG148_t;



    
  
  
  
#define PCIE_SATA_SNOW_PHY_STRIDE                16384
#define PCIE_SATA_SNOW_PHY_COUNT                 4
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SNOW_PHY */

typedef struct {
  PCIE_SATA_SNOW_PHY_CMU_REG3_REG2_REG1_REG0_t CMU_REG3_REG2_REG1_REG0;       /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG7_REG6_REG5_REG4_t CMU_REG7_REG6_REG5_REG4;       /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG11_REG10_REG9_REG8_t CMU_REG11_REG10_REG9_REG8;     /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG15_REG14_REG13_REG12_t CMU_REG15_REG14_REG13_REG12;   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG19_REG18_REG17_REG16_t CMU_REG19_REG18_REG17_REG16;   /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG23_REG22_REG21_REG20_t CMU_REG23_REG22_REG21_REG20;   /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG27_REG26_REG25_REG24_t CMU_REG27_REG26_REG25_REG24;   /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG31_REG30_REG29_REG28_t CMU_REG31_REG30_REG29_REG28;   /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG35_REG34_REG33_REG32_t CMU_REG35_REG34_REG33_REG32;   /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  PCIE_SATA_SNOW_PHY_CMU_REG39_REG38_REG37_REG36_t CMU_REG39_REG38_REG37_REG36;   /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG43_REG42_REG41_REG40_t CMU_REG43_REG42_REG41_REG40;   /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG47_REG46_REG45_REG44_t CMU_REG47_REG46_REG45_REG44;   /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG51_REG50_REG49_REG48_t CMU_REG51_REG50_REG49_REG48;   /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG55_REG54_REG53_REG52_t CMU_REG55_REG54_REG53_REG52;   /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG59_REG58_REG57_REG56_t CMU_REG59_REG58_REG57_REG56;   /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG63_REG62_REG61_REG60_t CMU_REG63_REG62_REG61_REG60;   /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG67_REG66_REG65_REG64_t CMU_REG67_REG66_REG65_REG64;   /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG71_REG70_REG69_REG68_t CMU_REG71_REG70_REG69_REG68;   /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG75_REG74_REG73_REG72_t CMU_REG75_REG74_REG73_REG72;   /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG79_REG78_REG77_REG76_t CMU_REG79_REG78_REG77_REG76;   /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG83_REG82_REG81_REG80_t CMU_REG83_REG82_REG81_REG80;   /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG87_REG86_REG85_REG84_t CMU_REG87_REG86_REG85_REG84;   /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG91_REG90_REG89_REG88_t CMU_REG91_REG90_REG89_REG88;   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG95_REG94_REG93_REG92_t CMU_REG95_REG94_REG93_REG92;   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG99_REG98_REG97_REG96_t CMU_REG99_REG98_REG97_REG96;   /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG103_REG102_REG101_REG100_t CMU_REG103_REG102_REG101_REG100; /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG107_REG106_REG105_REG104_t CMU_REG107_REG106_REG105_REG104; /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG111_REG110_REG109_REG108_t CMU_REG111_REG110_REG109_REG108; /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG114_REG113_REG112_t CMU_REG114_REG113_REG112;      /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  PCIE_SATA_SNOW_PHY_CMU_REG255_REG239_t   CMU_REG255_REG239;             /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG3_REG2_REG1_REG0_t LANE0_REG3_REG2_REG1_REG0;     /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG7_REG6_REG5_REG4_t LANE0_REG7_REG6_REG5_REG4;     /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG8_t          LANE0_REG8;                    /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG19_REG18_REG17_REG16_t LANE0_REG19_REG18_REG17_REG16; /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG23_REG22_REG21_REG20_t LANE0_REG23_REG22_REG21_REG20; /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG27_REG26_REG25_REG24_t LANE0_REG27_REG26_REG25_REG24; /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG31_REG30_REG29_REG28_t LANE0_REG31_REG30_REG29_REG28; /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG35_REG34_REG33_REG32_t LANE0_REG35_REG34_REG33_REG32; /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG39_REG38_REG37_REG36_t LANE0_REG39_REG38_REG37_REG36; /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG43_REG42_REG41_REG40_t LANE0_REG43_REG42_REG41_REG40; /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG47_REG46_REG45_REG44_t LANE0_REG47_REG46_REG45_REG44; /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG51_REG50_REG49_REG48_t LANE0_REG51_REG50_REG49_REG48; /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG55_REG54_REG53_REG52_t LANE0_REG55_REG54_REG53_REG52; /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG59_REG58_REG57_REG56_t LANE0_REG59_REG58_REG57_REG56; /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG63_REG62_REG61_REG60_t LANE0_REG63_REG62_REG61_REG60; /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG67_REG66_REG65_REG64_t LANE0_REG67_REG66_REG65_REG64; /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG71_REG70_REG69_REG68_t LANE0_REG71_REG70_REG69_REG68; /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG73_REG72_t   LANE0_REG73_REG72;             /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG77_REG76_REG75_REG74_t LANE0_REG77_REG76_REG75_REG74; /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  PCIE_SATA_SNOW_PHY_LANE0_REG81_REG80_REG79_REG78_t LANE0_REG81_REG80_REG79_REG78; /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG3_REG2_REG1_REG0_t COM_LANE_REG3_REG2_REG1_REG0;  /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG7_REG6_REG5_REG4_t COM_LANE_REG7_REG6_REG5_REG4;  /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG11_REG10_REG9_REG8_t COM_LANE_REG11_REG10_REG9_REG8; /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG15_REG14_REG13_REG12_t COM_LANE_REG15_REG14_REG13_REG12; /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG19_REG18_REG17_REG16_t COM_LANE_REG19_REG18_REG17_REG16; /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG23_REG22_REG21_REG20_t COM_LANE_REG23_REG22_REG21_REG20; /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG51_REG50_REG49_REG48_t COM_LANE_REG51_REG50_REG49_REG48; /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG55_REG54_REG53_REG52_t COM_LANE_REG55_REG54_REG53_REG52; /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG59_REG58_REG57_REG56_t COM_LANE_REG59_REG58_REG57_REG56; /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG63_REG62_REG61_REG60_t COM_LANE_REG63_REG62_REG61_REG60; /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG67_REG66_REG65_REG64_t COM_LANE_REG67_REG66_REG65_REG64; /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG71_REG70_REG69_REG68_t COM_LANE_REG71_REG70_REG69_REG68; /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG75_REG74_REG73_REG72_t COM_LANE_REG75_REG74_REG73_REG72; /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG79_REG78_REG77_REG76_t COM_LANE_REG79_REG78_REG77_REG76; /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG83_REG82_REG81_REG80_t COM_LANE_REG83_REG82_REG81_REG80; /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG87_REG86_REG85_REG84_t COM_LANE_REG87_REG86_REG85_REG84; /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG91_REG90_REG89_REG88_t COM_LANE_REG91_REG90_REG89_REG88; /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG95_REG94_REG93_REG92_t COM_LANE_REG95_REG94_REG93_REG92; /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG99_REG98_REG97_REG96_t COM_LANE_REG99_REG98_REG97_REG96; /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG103_REG102_REG101_REG100_t COM_LANE_REG103_REG102_REG101_REG100; /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG107_REG106_REG105_REG104_t COM_LANE_REG107_REG106_REG105_REG104; /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG111_REG110_REG109_REG108_t COM_LANE_REG111_REG110_REG109_REG108; /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG115_REG114_REG113_REG112_t COM_LANE_REG115_REG114_REG113_REG112; /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG119_REG118_REG117_REG116_t COM_LANE_REG119_REG118_REG117_REG116; /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG123_REG122_REG121_REG120_t COM_LANE_REG123_REG122_REG121_REG120; /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG127_REG126_REG125_REG124_t COM_LANE_REG127_REG126_REG125_REG124; /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG131_REG130_REG129_REG128_t COM_LANE_REG131_REG130_REG129_REG128; /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG135_REG134_REG133_REG132_t COM_LANE_REG135_REG134_REG133_REG132; /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG139_REG138_REG137_REG136_t COM_LANE_REG139_REG138_REG137_REG136; /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG143_REG142_REG141_REG140_t COM_LANE_REG143_REG142_REG141_REG140; /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG147_REG146_REG145_REG144_t COM_LANE_REG147_REG146_REG145_REG144; /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  PCIE_SATA_SNOW_PHY_COM_LANE_REG150_REG149_REG148_t COM_LANE_REG150_REG149_REG148; /* addr: 0x00000144 */ 
} PCIE_SATA_SNOW_PHY_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* PCIE_SATA */

typedef struct {
  PCIE_SATA_PCIE_GLBL_t                    PCIE_GLBL;                     /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[2945];                 
  PCIE_SATA_SATA2_CTRL_t                   SATA2_CTRL;                    /* addr: 0x00000c00 */ 
  cs_uint32                                rsrvd2[509];                  
  PCIE_SATA_SATA2_PHY_t                    SATA2_PHY;                     /* addr: 0x00000e00 */ 
  cs_uint32                                rsrvd3[511];                  
  PCIE_SATA_SNOW_PHY_t                     SNOW_PHY;                      /* addr: 0x00001000 */ 
} PCIE_SATA_t;


/*
 * SDRAM
 */
  



#define SDRAM_DENALI_CTL_000                     0xf0500000
#define SDRAM_DENALI_CTL_000_dft                 0x20410000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 version0             : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 dram_class0          :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 start0               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 start0               :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 dram_class0          :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 version0             : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_000_t;





#define SDRAM_DENALI_CTL_001                     0xf0500004
#define SDRAM_DENALI_CTL_001_dft                 0x00010b0f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE61           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 MAX_CS_REG1          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 MAX_COL_REG1         :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 MAX_ROW_REG1         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 MAX_ROW_REG1         :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 MAX_COL_REG1         :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 MAX_CS_REG1          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 OBSOLETE61           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_001_t;





#define SDRAM_DENALI_CTL_010                     0xf0500008
#define SDRAM_DENALI_CTL_010_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TRST_PWRON0          :  8 ; /* bits 31:24 */
    cs_uint32 TINIT0               : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TINIT0               : 24 ; /* bits 23:0 */
    cs_uint32 TRST_PWRON0          :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_010_t;





#define SDRAM_DENALI_CTL_011                     0xf050000c
#define SDRAM_DENALI_CTL_011_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE21           :  8 ; /* bits 31:24 */
    cs_uint32 TRST_PWRON1          : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TRST_PWRON1          : 24 ; /* bits 23:0 */
    cs_uint32 OBSOLETE21           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_011_t;





#define SDRAM_DENALI_CTL_020                     0xf0500010
#define SDRAM_DENALI_CTL_020_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 CKE_INACTIVE0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CKE_INACTIVE0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_020_t;





#define SDRAM_DENALI_CTL_021                     0xf0500014
#define SDRAM_DENALI_CTL_021_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 WRLAT1               :  5 ; /* bits 28:24 */
    cs_uint32 OBSOLETE31           :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 CASLAT_LIN1          :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 INITAREF1            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 INITAREF1            :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 CASLAT_LIN1          :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 OBSOLETE31           :  8 ; /* bits 23:16 */
    cs_uint32 WRLAT1               :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_021_t;





#define SDRAM_DENALI_CTL_030                     0xf0500018
#define SDRAM_DENALI_CTL_030_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TRC0                 :  8 ; /* bits 31:24 */
    cs_uint32 TRRD0                :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 TBST_INT_INTERVAL0   :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TCCD0                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TCCD0                :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TBST_INT_INTERVAL0   :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 TRRD0                :  8 ; /* bits 23:16 */
    cs_uint32 TRC0                 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_030_t;





#define SDRAM_DENALI_CTL_031                     0xf050001c
#define SDRAM_DENALI_CTL_031_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  4 ;
    cs_uint32 TRTP1                :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 TRP1                 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 TWTR1                :  4 ; /* bits 11:8 */
    cs_uint32 TRAS_MIN1            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TRAS_MIN1            :  8 ; /* bits 7:0 */
    cs_uint32 TWTR1                :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 TRP1                 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 TRTP1                :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd3               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_031_t;





#define SDRAM_DENALI_CTL_040                     0xf0500020
#define SDRAM_DENALI_CTL_040_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE20           : 16 ; /* bits 31:16 */
    cs_uint32 TMOD0                :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TMRD0                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TMRD0                :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TMOD0                :  8 ; /* bits 15:8 */
    cs_uint32 OBSOLETE20           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_040_t;





#define SDRAM_DENALI_CTL_041                     0xf0500024
#define SDRAM_DENALI_CTL_041_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 AP1                  :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 TCKESR1              :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 TCKE1                :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 WRITEINTERP1         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WRITEINTERP1         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TCKE1                :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 TCKESR1              :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 AP1                  :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_041_t;





#define SDRAM_DENALI_CTL_050                     0xf0500028
#define SDRAM_DENALI_CTL_050_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 TWR_INT0             :  5 ; /* bits 28:24 */
    cs_uint32 TRCD_INT0            :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 TRAS_LOCKOUT0        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 CONCURRENTAP0        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CONCURRENTAP0        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TRAS_LOCKOUT0        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 TRCD_INT0            :  8 ; /* bits 23:16 */
    cs_uint32 TWR_INT0             :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_050_t;





#define SDRAM_DENALI_CTL_051                     0xf050002c
#define SDRAM_DENALI_CTL_051_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 NO_CMD_INIT1         :  1 ; /* bits 24:24 */
    cs_uint32 TDLL1                : 16 ; /* bits 23:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TDAL1                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDAL1                :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TDLL1                : 16 ; /* bits 23:8 */
    cs_uint32 NO_CMD_INIT1         :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_051_t;





#define SDRAM_DENALI_CTL_060                     0xf0500030
#define SDRAM_DENALI_CTL_060_dft                 0x00000002




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TCPD0                : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 TFAW0                :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 BSTLEN0              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BSTLEN0              :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 TFAW0                :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 TCPD0                : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_060_t;





#define SDRAM_DENALI_CTL_061                     0xf0500034
#define SDRAM_DENALI_CTL_061_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 AUTO_REFRESH_MODE1   :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 AREFRESH1            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 REG_DIMM_ENABLE1     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TRP_AB1              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TRP_AB1              :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 REG_DIMM_ENABLE1     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 AREFRESH1            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 AUTO_REFRESH_MODE1   :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_061_t;





#define SDRAM_DENALI_CTL_070                     0xf0500038
#define SDRAM_DENALI_CTL_070_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TREF0                :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 TRFC0                : 10 ; /* bits 17:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TREF_ENABLE0         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TREF_ENABLE0         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TRFC0                : 10 ; /* bits 17:8 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 TREF0                :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_070_t;





#define SDRAM_DENALI_CTL_071                     0xf050003c
#define SDRAM_DENALI_CTL_071_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TPDEX1               : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 POWER_DOWN1          :  1 ; /* bits 8:8 */
    cs_uint32 TREF1                :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TREF1                :  8 ; /* bits 7:0 */
    cs_uint32 POWER_DOWN1          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TPDEX1               : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_071_t;





#define SDRAM_DENALI_CTL_080                     0xf0500040
#define SDRAM_DENALI_CTL_080_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TXSR0                : 16 ; /* bits 31:16 */
    cs_uint32 TXPDLL0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TXPDLL0              : 16 ; /* bits 15:0 */
    cs_uint32 TXSR0                : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_080_t;





#define SDRAM_DENALI_CTL_081                     0xf0500044
#define SDRAM_DENALI_CTL_081_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 PWRUP_SREFRESH_EXIT1 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 SREFRESH1            :  1 ; /* bits 16:16 */
    cs_uint32 TXSNR1               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TXSNR1               : 16 ; /* bits 15:0 */
    cs_uint32 SREFRESH1            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 PWRUP_SREFRESH_EXIT1 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_081_t;





#define SDRAM_DENALI_CTL_090                     0xf0500048
#define SDRAM_DENALI_CTL_090_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 MR0_DATA_00          :  8 ; /* bits 31:24 */
    cs_uint32 OBSOLETE20           :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 CKE_DELAY0           :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 ENABLE_QUICK_SREFRESH0 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ENABLE_QUICK_SREFRESH0 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 CKE_DELAY0           :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 OBSOLETE20           :  8 ; /* bits 23:16 */
    cs_uint32 MR0_DATA_00          :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_090_t;





#define SDRAM_DENALI_CTL_091                     0xf050004c
#define SDRAM_DENALI_CTL_091_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE51           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 MR1_DATA_01          : 15 ; /* bits 22:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 MR0_DATA_01          :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 MR0_DATA_01          :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 MR1_DATA_01          : 15 ; /* bits 22:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 OBSOLETE51           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_091_t;





#define SDRAM_DENALI_CTL_100                     0xf0500050
#define SDRAM_DENALI_CTL_100_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 MR3_DATA_00          : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 MR2_DATA_00          : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 MR2_DATA_00          : 15 ; /* bits 14:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 MR3_DATA_00          : 15 ; /* bits 30:16 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_100_t;





#define SDRAM_DENALI_CTL_101                     0xf0500054
#define SDRAM_DENALI_CTL_101_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 BIST_DATA_CHECK1     :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ADDR_SPACE1          :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 BIST_RESULT1         :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 BIST_GO1             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_GO1             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 BIST_RESULT1         :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 ADDR_SPACE1          :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 BIST_DATA_CHECK1     :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_101_t;





#define SDRAM_DENALI_CTL_110                     0xf0500058
#define SDRAM_DENALI_CTL_110_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_START_ADDRESS0  : 24 ; /* bits 31:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 BIST_ADDR_CHECK0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_ADDR_CHECK0     :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 BIST_START_ADDRESS0  : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_110_t;





#define SDRAM_DENALI_CTL_111                     0xf050005c
#define SDRAM_DENALI_CTL_111_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE21           : 24 ; /* bits 31:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 BIST_START_ADDRESS1  :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_START_ADDRESS1  :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 OBSOLETE21           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_111_t;





#define SDRAM_DENALI_CTL_120                     0xf0500060
#define SDRAM_DENALI_CTL_120_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_DATA_MASK0      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_DATA_MASK0      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_120_t;





#define SDRAM_DENALI_CTL_121                     0xf0500064
#define SDRAM_DENALI_CTL_121_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_DATA_MASK1      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_DATA_MASK1      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_121_t;





#define SDRAM_DENALI_CTL_130                     0xf0500068
#define SDRAM_DENALI_CTL_130_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 ZQCL0                : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQINIT0              : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ZQINIT0              : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQCL0                : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_130_t;





#define SDRAM_DENALI_CTL_131                     0xf050006c
#define SDRAM_DENALI_CTL_131_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 REFRESH_PER_ZQ1      :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 ZQCS1                : 12 ; /* bits 19:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQ_REQ1              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ZQ_REQ1              :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQCS1                : 12 ; /* bits 19:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 REFRESH_PER_ZQ1      :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_131_t;





#define SDRAM_DENALI_CTL_140                     0xf0500070
#define SDRAM_DENALI_CTL_140_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  5 ;
    cs_uint32 ADDR_PINS0           :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 EIGHT_BANK_MODE0     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 ZQ_IN_PROGRESS0      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQ_ON_SREF_EXIT0     :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ZQ_ON_SREF_EXIT0     :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQ_IN_PROGRESS0      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 EIGHT_BANK_MODE0     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 ADDR_PINS0           :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_140_t;





#define SDRAM_DENALI_CTL_141                     0xf0500074
#define SDRAM_DENALI_CTL_141_dft                 0x00000a00




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  5 ;
    cs_uint32 COMMAND_AGE_COUNT1   :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 AGE_COUNT1           :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 APREBIT1             :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 COLUMN_SIZE1         :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 COLUMN_SIZE1         :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 APREBIT1             :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 AGE_COUNT1           :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 COMMAND_AGE_COUNT1   :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_141_t;





#define SDRAM_DENALI_CTL_150                     0xf0500078
#define SDRAM_DENALI_CTL_150_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 PRIORITY_EN0         :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 PLACEMENT_EN0        :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 BANK_SPLIT_EN0       :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 ADDR_CMP_EN0         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR_CMP_EN0         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 BANK_SPLIT_EN0       :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 PLACEMENT_EN0        :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 PRIORITY_EN0         :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_150_t;





#define SDRAM_DENALI_CTL_151                     0xf050007c
#define SDRAM_DENALI_CTL_151_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  4 ;
    cs_uint32 BURST_ON_FLY_BIT1    :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 SWAP_PORT_RW_SAME_EN1 :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 SWAP_EN1             :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RW_SAME_EN1          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RW_SAME_EN1          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 SWAP_EN1             :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 SWAP_PORT_RW_SAME_EN1 :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 BURST_ON_FLY_BIT1    :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd4               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_151_t;





#define SDRAM_DENALI_CTL_160                     0xf0500080
#define SDRAM_DENALI_CTL_160_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 RESYNC_DLL0          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 Q_FULLNESS0          :  3 ; /* bits 18:16 */
    cs_uint32 OBSOLETE10           :  8 ; /* bits 15:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 REDUC0               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 REDUC0               :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 OBSOLETE10           :  8 ; /* bits 15:8 */
    cs_uint32 Q_FULLNESS0          :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 RESYNC_DLL0          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_160_t;





#define SDRAM_DENALI_CTL_161                     0xf0500084
#define SDRAM_DENALI_CTL_161_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 INT_STATUS1          : 22 ; /* bits 29:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RESYNC_DLL_PER_AREF_EN1 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RESYNC_DLL_PER_AREF_EN1 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 INT_STATUS1          : 22 ; /* bits 29:8 */
    cs_uint32 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_161_t;





#define SDRAM_DENALI_CTL_170                     0xf0500088
#define SDRAM_DENALI_CTL_170_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 INT_MASK0            : 16 ; /* bits 31:16 */
    cs_uint32 OBSOLETE00           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OBSOLETE00           : 16 ; /* bits 15:0 */
    cs_uint32 INT_MASK0            : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_170_t;





#define SDRAM_DENALI_CTL_171                     0xf050008c
#define SDRAM_DENALI_CTL_171_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE21           : 24 ; /* bits 31:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 INT_MASK1            :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 INT_MASK1            :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 OBSOLETE21           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_171_t;





#define SDRAM_DENALI_CTL_180                     0xf0500090
#define SDRAM_DENALI_CTL_180_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 OUT_OF_RANGE_ADDR0   : 31 ; /* bits 30:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OUT_OF_RANGE_ADDR0   : 31 ; /* bits 30:0 */
    cs_uint32 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_180_t;





#define SDRAM_DENALI_CTL_181                     0xf0500094
#define SDRAM_DENALI_CTL_181_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE31           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 OUT_OF_RANGE_TYPE1   :  6 ; /* bits 13:8 */
    cs_uint32 OUT_OF_RANGE_LENGTH1 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OUT_OF_RANGE_LENGTH1 :  8 ; /* bits 7:0 */
    cs_uint32 OUT_OF_RANGE_TYPE1   :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 OBSOLETE31           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_181_t;





#define SDRAM_DENALI_CTL_190                     0xf0500098
#define SDRAM_DENALI_CTL_190_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_EXP_DATA0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_EXP_DATA0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_190_t;





#define SDRAM_DENALI_CTL_191                     0xf050009c
#define SDRAM_DENALI_CTL_191_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_EXP_DATA1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_EXP_DATA1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_191_t;





#define SDRAM_DENALI_CTL_200                     0xf05000a0
#define SDRAM_DENALI_CTL_200_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_EXP_DATA0       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_EXP_DATA0       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_200_t;





#define SDRAM_DENALI_CTL_201                     0xf05000a4
#define SDRAM_DENALI_CTL_201_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_EXP_DATA1       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_EXP_DATA1       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_201_t;





#define SDRAM_DENALI_CTL_210                     0xf05000a8
#define SDRAM_DENALI_CTL_210_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_FAIL_DATA0      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_FAIL_DATA0      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_210_t;





#define SDRAM_DENALI_CTL_211                     0xf05000ac
#define SDRAM_DENALI_CTL_211_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_FAIL_DATA1      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_FAIL_DATA1      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_211_t;





#define SDRAM_DENALI_CTL_220                     0xf05000b0
#define SDRAM_DENALI_CTL_220_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_FAIL_DATA0      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_FAIL_DATA0      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_220_t;





#define SDRAM_DENALI_CTL_221                     0xf05000b4
#define SDRAM_DENALI_CTL_221_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 BIST_FAIL_DATA1      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_FAIL_DATA1      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_221_t;





#define SDRAM_DENALI_CTL_230                     0xf05000b8
#define SDRAM_DENALI_CTL_230_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 BIST_FAIL_ADDR0      : 31 ; /* bits 30:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 BIST_FAIL_ADDR0      : 31 ; /* bits 30:0 */
    cs_uint32 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_230_t;





#define SDRAM_DENALI_CTL_231                     0xf05000bc
#define SDRAM_DENALI_CTL_231_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 PORT_CMD_ERROR_ADDR1 : 31 ; /* bits 30:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PORT_CMD_ERROR_ADDR1 : 31 ; /* bits 30:0 */
    cs_uint32 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_231_t;





#define SDRAM_DENALI_CTL_240                     0xf05000c0
#define SDRAM_DENALI_CTL_240_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE20           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 PORT_CMD_ERROR_TYPE0 :  2 ; /* bits 9:8 */
    cs_uint32 OBSOLETE00           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OBSOLETE00           :  8 ; /* bits 7:0 */
    cs_uint32 PORT_CMD_ERROR_TYPE0 :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 OBSOLETE20           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_240_t;





#define SDRAM_DENALI_CTL_241                     0xf05000c4
#define SDRAM_DENALI_CTL_241_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  5 ;
    cs_uint32 R2W_SAMECS_DLY1      :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 R2R_SAMECS_DLY1      :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 ADD_ODT_CLK_W2R_SAMECS1 :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ADD_ODT_CLK_R2W_SAMECS1 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADD_ODT_CLK_R2W_SAMECS1 :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ADD_ODT_CLK_W2R_SAMECS1 :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 R2R_SAMECS_DLY1      :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 R2W_SAMECS_DLY1      :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_241_t;





#define SDRAM_DENALI_CTL_250                     0xf05000c8
#define SDRAM_DENALI_CTL_250_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 OCD_ADJUST_PUP_CS_00 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 OCD_ADJUST_PDN_CS_00 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 W2W_SAMECS_DLY0      :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 W2R_SAMECS_DLY0      :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 W2R_SAMECS_DLY0      :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 W2W_SAMECS_DLY0      :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 OCD_ADJUST_PDN_CS_00 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 OCD_ADJUST_PUP_CS_00 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_250_t;





#define SDRAM_DENALI_CTL_251                     0xf05000cc
#define SDRAM_DENALI_CTL_251_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 SWLVL_EXIT1          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 SWLVL_START1         :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 SWLVL_LOAD1          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 SW_LEVELING_MODE1    :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SW_LEVELING_MODE1    :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 SWLVL_LOAD1          :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 SWLVL_START1         :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 SWLVL_EXIT1          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_251_t;





#define SDRAM_DENALI_CTL_260                     0xf05000d0
#define SDRAM_DENALI_CTL_260_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 SWLVL_RESP_10        :  8 ; /* bits 31:24 */
    cs_uint32 SWLVL_RESP_00        :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 LVL_STATUS0          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 SWLVL_OP_DONE0       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SWLVL_OP_DONE0       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 LVL_STATUS0          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 SWLVL_RESP_00        :  8 ; /* bits 23:16 */
    cs_uint32 SWLVL_RESP_10        :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_260_t;





#define SDRAM_DENALI_CTL_261                     0xf05000d4
#define SDRAM_DENALI_CTL_261_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 WRLVL_CS1            :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 WRLVL_REQ1           :  1 ; /* bits 16:16 */
    cs_uint32 SWLVL_RESP_31        :  8 ; /* bits 15:8 */
    cs_uint32 SWLVL_RESP_21        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 SWLVL_RESP_21        :  8 ; /* bits 7:0 */
    cs_uint32 SWLVL_RESP_31        :  8 ; /* bits 15:8 */
    cs_uint32 WRLVL_REQ1           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 WRLVL_CS1            :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_261_t;





#define SDRAM_DENALI_CTL_270                     0xf05000d8
#define SDRAM_DENALI_CTL_270_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 WRLVL_REFRESH_INTERVAL0 :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 WRLVL_EN0            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 WLMRD0               :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 WLDQSEN0             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WLDQSEN0             :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 WLMRD0               :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 WRLVL_EN0            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 WRLVL_REFRESH_INTERVAL0 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_270_t;





#define SDRAM_DENALI_CTL_271                     0xf05000dc
#define SDRAM_DENALI_CTL_271_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 WRLVL_REG_EN1        :  1 ; /* bits 24:24 */
    cs_uint32 OBSOLETE41           : 16 ; /* bits 23:8 */
    cs_uint32 WRLVL_REFRESH_INTERVAL1 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WRLVL_REFRESH_INTERVAL1 :  8 ; /* bits 7:0 */
    cs_uint32 OBSOLETE41           : 16 ; /* bits 23:8 */
    cs_uint32 WRLVL_REG_EN1        :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_271_t;





#define SDRAM_DENALI_CTL_280                     0xf05000e0
#define SDRAM_DENALI_CTL_280_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 WRLVL_DELAY_10       : 16 ; /* bits 31:16 */
    cs_uint32 WRLVL_DELAY_00       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WRLVL_DELAY_00       : 16 ; /* bits 15:0 */
    cs_uint32 WRLVL_DELAY_10       : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_280_t;





#define SDRAM_DENALI_CTL_281                     0xf05000e4
#define SDRAM_DENALI_CTL_281_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 WRLVL_DELAY_31       : 16 ; /* bits 31:16 */
    cs_uint32 WRLVL_DELAY_21       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WRLVL_DELAY_21       : 16 ; /* bits 15:0 */
    cs_uint32 WRLVL_DELAY_31       : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_281_t;





#define SDRAM_DENALI_CTL_290                     0xf05000e8
#define SDRAM_DENALI_CTL_290_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 RDLVL_EDGE0          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 RDLVL_CS0            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_GATE_REQ0      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_REQ0           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_REQ0           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_GATE_REQ0      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_CS0            :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 RDLVL_EDGE0          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_290_t;





#define SDRAM_DENALI_CTL_291                     0xf05000ec
#define SDRAM_DENALI_CTL_291_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE71           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 RDLVL_GATE_REG_EN1   :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_REG_EN1        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_BEGIN_DELAY_EN1 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_BEGIN_DELAY_EN1 :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_REG_EN1        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_GATE_REG_EN1   :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 OBSOLETE71           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_291_t;





#define SDRAM_DENALI_CTL_300                     0xf05000f0
#define SDRAM_DENALI_CTL_300_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_END_DELAY_00   : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_BEGIN_DELAY_00 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_BEGIN_DELAY_00 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_END_DELAY_00   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_300_t;





#define SDRAM_DENALI_CTL_301                     0xf05000f4
#define SDRAM_DENALI_CTL_301_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_OFFSET_DELAY_01 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_MIDPOINT_DELAY_01 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_MIDPOINT_DELAY_01 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_OFFSET_DELAY_01 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_301_t;





#define SDRAM_DENALI_CTL_310                     0xf05000f8
#define SDRAM_DENALI_CTL_310_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_GATE_DELAY_00  :  8 ; /* bits 31:24 */
    cs_uint32 RDLVL_DELAY_00       : 16 ; /* bits 23:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_OFFSET_DIR_00  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_OFFSET_DIR_00  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_DELAY_00       : 16 ; /* bits 23:8 */
    cs_uint32 RDLVL_GATE_DELAY_00  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_310_t;





#define SDRAM_DENALI_CTL_311                     0xf05000fc
#define SDRAM_DENALI_CTL_311_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
    cs_uint32 RDLVL_BEGIN_DELAY_11 : 16 ; /* bits 23:8 */
    cs_uint32 RDLVL_GATE_DELAY_01  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_GATE_DELAY_01  :  8 ; /* bits 7:0 */
    cs_uint32 RDLVL_BEGIN_DELAY_11 : 16 ; /* bits 23:8 */
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_311_t;





#define SDRAM_DENALI_CTL_320                     0xf0500100
#define SDRAM_DENALI_CTL_320_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_MIDPOINT_DELAY_10 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_END_DELAY_10   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_END_DELAY_10   : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_MIDPOINT_DELAY_10 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_320_t;





#define SDRAM_DENALI_CTL_321                     0xf0500104
#define SDRAM_DENALI_CTL_321_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_OFFSET_DIR_11  :  1 ; /* bits 16:16 */
    cs_uint32 RDLVL_OFFSET_DELAY_11 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_OFFSET_DELAY_11 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_OFFSET_DIR_11  :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_321_t;





#define SDRAM_DENALI_CTL_330                     0xf0500108
#define SDRAM_DENALI_CTL_330_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_GATE_DELAY_10  : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_DELAY_10       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_DELAY_10       : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_GATE_DELAY_10  : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_330_t;





#define SDRAM_DENALI_CTL_331                     0xf050010c
#define SDRAM_DENALI_CTL_331_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_END_DELAY_21   : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_BEGIN_DELAY_21 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_BEGIN_DELAY_21 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_END_DELAY_21   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_331_t;





#define SDRAM_DENALI_CTL_340                     0xf0500110
#define SDRAM_DENALI_CTL_340_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_OFFSET_DELAY_20 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_MIDPOINT_DELAY_20 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_MIDPOINT_DELAY_20 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_OFFSET_DELAY_20 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_340_t;





#define SDRAM_DENALI_CTL_341                     0xf0500114
#define SDRAM_DENALI_CTL_341_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
    cs_uint32 RDLVL_DELAY_21       : 16 ; /* bits 23:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_OFFSET_DIR_21  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_OFFSET_DIR_21  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_DELAY_21       : 16 ; /* bits 23:8 */
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_341_t;





#define SDRAM_DENALI_CTL_350                     0xf0500118
#define SDRAM_DENALI_CTL_350_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_BEGIN_DELAY_30 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_GATE_DELAY_20  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_GATE_DELAY_20  : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_BEGIN_DELAY_30 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_350_t;





#define SDRAM_DENALI_CTL_351                     0xf050011c
#define SDRAM_DENALI_CTL_351_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_MIDPOINT_DELAY_31 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_END_DELAY_31   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_END_DELAY_31   : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_MIDPOINT_DELAY_31 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_351_t;





#define SDRAM_DENALI_CTL_360                     0xf0500120
#define SDRAM_DENALI_CTL_360_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_DELAY_30       :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_OFFSET_DIR_30  :  1 ; /* bits 16:16 */
    cs_uint32 RDLVL_OFFSET_DELAY_30 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_OFFSET_DELAY_30 : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_OFFSET_DIR_30  :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_DELAY_30       :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_360_t;





#define SDRAM_DENALI_CTL_361                     0xf0500124
#define SDRAM_DENALI_CTL_361_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
    cs_uint32 RDLVL_GATE_DELAY_31  : 16 ; /* bits 23:8 */
    cs_uint32 RDLVL_DELAY_31       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_DELAY_31       :  8 ; /* bits 7:0 */
    cs_uint32 RDLVL_GATE_DELAY_31  : 16 ; /* bits 23:8 */
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_361_t;





#define SDRAM_DENALI_CTL_370                     0xf0500128
#define SDRAM_DENALI_CTL_370_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI0_W_PRIORITY0     :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI0_R_PRIORITY0     :  2 ; /* bits 17:16 */
    cs_uint32 AXI0_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI0_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 15:0 */
    cs_uint32 AXI0_R_PRIORITY0     :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI0_W_PRIORITY0     :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_370_t;





#define SDRAM_DENALI_CTL_371                     0xf050012c
#define SDRAM_DENALI_CTL_371_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI1_R_PRIORITY1     :  2 ; /* bits 25:24 */
    cs_uint32 AXI1_EN_SIZE_LT_WIDTH_INSTR1 : 16 ; /* bits 23:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI0_FIFO_TYPE_REG1  :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI0_FIFO_TYPE_REG1  :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI1_EN_SIZE_LT_WIDTH_INSTR1 : 16 ; /* bits 23:8 */
    cs_uint32 AXI1_R_PRIORITY1     :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_371_t;





#define SDRAM_DENALI_CTL_380                     0xf0500130
#define SDRAM_DENALI_CTL_380_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 AXI2_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI1_FIFO_TYPE_REG0  :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI1_W_PRIORITY0     :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI1_W_PRIORITY0     :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI1_FIFO_TYPE_REG0  :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI2_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_380_t;





#define SDRAM_DENALI_CTL_381                     0xf0500134
#define SDRAM_DENALI_CTL_381_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE61           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  6 ;
    cs_uint32 AXI2_FIFO_TYPE_REG1  :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI2_W_PRIORITY1     :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI2_R_PRIORITY1     :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI2_R_PRIORITY1     :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI2_W_PRIORITY1     :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI2_FIFO_TYPE_REG1  :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd3               :  6 ;
    cs_uint32 OBSOLETE61           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_381_t;





#define SDRAM_DENALI_CTL_390                     0xf0500138
#define SDRAM_DENALI_CTL_390_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 AXI3_W_PRIORITY0     :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI3_R_PRIORITY0     :  2 ; /* bits 17:16 */
    cs_uint32 AXI3_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI3_EN_SIZE_LT_WIDTH_INSTR0 : 16 ; /* bits 15:0 */
    cs_uint32 AXI3_R_PRIORITY0     :  2 ; /* bits 17:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI3_W_PRIORITY0     :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_390_t;





#define SDRAM_DENALI_CTL_391                     0xf050013c
#define SDRAM_DENALI_CTL_391_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 AXI0_BDW_OVFLOW1     :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 AXI0_BDW1            :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 ARB_CMD_Q_THRESHOLD1 :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 AXI3_FIFO_TYPE_REG1  :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI3_FIFO_TYPE_REG1  :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 ARB_CMD_Q_THRESHOLD1 :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 AXI0_BDW1            :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 AXI0_BDW_OVFLOW1     :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_391_t;





#define SDRAM_DENALI_CTL_400                     0xf0500140
#define SDRAM_DENALI_CTL_400_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 AXI1_CURRENT_BDW0    :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 AXI1_BDW_OVFLOW0     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 AXI1_BDW0            :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 AXI0_CURRENT_BDW0    :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI0_CURRENT_BDW0    :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 AXI1_BDW0            :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 AXI1_BDW_OVFLOW0     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 AXI1_CURRENT_BDW0    :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_400_t;





#define SDRAM_DENALI_CTL_401                     0xf0500144
#define SDRAM_DENALI_CTL_401_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 AXI3_BDW1            :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 AXI2_CURRENT_BDW1    :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 AXI2_BDW_OVFLOW1     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 AXI2_BDW1            :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI2_BDW1            :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 AXI2_BDW_OVFLOW1     :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 AXI2_CURRENT_BDW1    :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 AXI3_BDW1            :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_401_t;





#define SDRAM_DENALI_CTL_410                     0xf0500148
#define SDRAM_DENALI_CTL_410_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 MEM_RST_VALID0       :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 CKE_STATUS0          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 AXI3_CURRENT_BDW0    :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI3_BDW_OVFLOW0     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 AXI3_BDW_OVFLOW0     :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 AXI3_CURRENT_BDW0    :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 CKE_STATUS0          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 MEM_RST_VALID0       :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_410_t;





#define SDRAM_DENALI_CTL_411                     0xf050014c
#define SDRAM_DENALI_CTL_411_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 TDFI_PHY_WRLAT1      :  5 ; /* bits 28:24 */
    cs_uint32 DLL_RST_ADJ_DLY1     :  8 ; /* bits 23:16 */
    cs_uint32 DLL_RST_DELAY1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DLL_RST_DELAY1       : 16 ; /* bits 15:0 */
    cs_uint32 DLL_RST_ADJ_DLY1     :  8 ; /* bits 23:16 */
    cs_uint32 TDFI_PHY_WRLAT1      :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_411_t;





#define SDRAM_DENALI_CTL_420                     0xf0500150
#define SDRAM_DENALI_CTL_420_dft                 0x00000600




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE30           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 TDFI_RDDATA_EN0      :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 TDFI_PHY_RDLAT0      :  6 ; /* bits 13:8 */
    cs_uint32 OBSOLETE00           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OBSOLETE00           :  8 ; /* bits 7:0 */
    cs_uint32 TDFI_PHY_RDLAT0      :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 TDFI_RDDATA_EN0      :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 OBSOLETE30           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_420_t;





#define SDRAM_DENALI_CTL_421                     0xf0500154
#define SDRAM_DENALI_CTL_421_dft                 0x00000400




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_CTRLUPD_MAX1    : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 TDFI_CTRLUPD_MIN1    :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 DRAM_CLK_DISABLE1    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DRAM_CLK_DISABLE1    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TDFI_CTRLUPD_MIN1    :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 TDFI_CTRLUPD_MAX1    : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_421_t;





#define SDRAM_DENALI_CTL_430                     0xf0500158
#define SDRAM_DENALI_CTL_430_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_PHYUPD_TYPE10   : 16 ; /* bits 31:16 */
    cs_uint32 TDFI_PHYUPD_TYPE00   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_PHYUPD_TYPE00   : 16 ; /* bits 15:0 */
    cs_uint32 TDFI_PHYUPD_TYPE10   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_430_t;





#define SDRAM_DENALI_CTL_431                     0xf050015c
#define SDRAM_DENALI_CTL_431_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_PHYUPD_TYPE31   : 16 ; /* bits 31:16 */
    cs_uint32 TDFI_PHYUPD_TYPE21   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_PHYUPD_TYPE21   : 16 ; /* bits 15:0 */
    cs_uint32 TDFI_PHYUPD_TYPE31   : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_431_t;





#define SDRAM_DENALI_CTL_440                     0xf0500160
#define SDRAM_DENALI_CTL_440_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 WRLAT_ADJ0           :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 RDLAT_ADJ0           :  6 ; /* bits 21:16 */
    cs_uint32 TDFI_PHYUPD_RESP0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_PHYUPD_RESP0    : 16 ; /* bits 15:0 */
    cs_uint32 RDLAT_ADJ0           :  6 ; /* bits 21:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 WRLAT_ADJ0           :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_440_t;





#define SDRAM_DENALI_CTL_441                     0xf0500164
#define SDRAM_DENALI_CTL_441_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_WRLVL_DLL1      :  8 ; /* bits 31:24 */
    cs_uint32 TDFI_WRLVL_EN1       :  8 ; /* bits 23:16 */
    cs_uint32 DFI_WRLVL_MAX_DELAY1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DFI_WRLVL_MAX_DELAY1 : 16 ; /* bits 15:0 */
    cs_uint32 TDFI_WRLVL_EN1       :  8 ; /* bits 23:16 */
    cs_uint32 TDFI_WRLVL_DLL1      :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_441_t;





#define SDRAM_DENALI_CTL_450                     0xf0500168
#define SDRAM_DENALI_CTL_450_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 TDFI_WRLVL_WW0       : 10 ; /* bits 25:16 */
    cs_uint32 TDFI_WRLVL_RESPLAT0  :  8 ; /* bits 15:8 */
    cs_uint32 TDFI_WRLVL_LOAD0     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_WRLVL_LOAD0     :  8 ; /* bits 7:0 */
    cs_uint32 TDFI_WRLVL_RESPLAT0  :  8 ; /* bits 15:8 */
    cs_uint32 TDFI_WRLVL_WW0       : 10 ; /* bits 25:16 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_450_t;





#define SDRAM_DENALI_CTL_451                     0xf050016c
#define SDRAM_DENALI_CTL_451_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_WRLVL_RESP1     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_WRLVL_RESP1     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_451_t;





#define SDRAM_DENALI_CTL_460                     0xf0500170
#define SDRAM_DENALI_CTL_460_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_WRLVL_MAX0      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_WRLVL_MAX0      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_460_t;





#define SDRAM_DENALI_CTL_461                     0xf0500174
#define SDRAM_DENALI_CTL_461_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_GATE_MAX_DELAY1 : 16 ; /* bits 31:16 */
    cs_uint32 RDLVL_MAX_DELAY1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_MAX_DELAY1     : 16 ; /* bits 15:0 */
    cs_uint32 RDLVL_GATE_MAX_DELAY1 : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_461_t;





#define SDRAM_DENALI_CTL_470                     0xf0500178
#define SDRAM_DENALI_CTL_470_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_RDLVL_RESPLAT0  :  8 ; /* bits 31:24 */
    cs_uint32 TDFI_RDLVL_LOAD0     :  8 ; /* bits 23:16 */
    cs_uint32 TDFI_RDLVL_DLL0      :  8 ; /* bits 15:8 */
    cs_uint32 TDFI_RDLVL_EN0       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_RDLVL_EN0       :  8 ; /* bits 7:0 */
    cs_uint32 TDFI_RDLVL_DLL0      :  8 ; /* bits 15:8 */
    cs_uint32 TDFI_RDLVL_LOAD0     :  8 ; /* bits 23:16 */
    cs_uint32 TDFI_RDLVL_RESPLAT0  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_470_t;





#define SDRAM_DENALI_CTL_471                     0xf050017c
#define SDRAM_DENALI_CTL_471_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE51           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 TDFI_RDLVL_RR1       : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_RDLVL_RR1       : 10 ; /* bits 9:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 OBSOLETE51           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_471_t;





#define SDRAM_DENALI_CTL_480                     0xf0500180
#define SDRAM_DENALI_CTL_480_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_RDLVL_RESP0     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_RDLVL_RESP0     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_480_t;





#define SDRAM_DENALI_CTL_481                     0xf0500184
#define SDRAM_DENALI_CTL_481_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_RESP_MASK1     : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_RESP_MASK1     : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_481_t;





#define SDRAM_DENALI_CTL_490                     0xf0500188
#define SDRAM_DENALI_CTL_490_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_GATE_RESP_MASK0 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_GATE_RESP_MASK0 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_490_t;





#define SDRAM_DENALI_CTL_491                     0xf050018c
#define SDRAM_DENALI_CTL_491_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 RDLVL_GATE_PREAMBLE_CHECK_EN1 :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_GATE_EN1       :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_EN1            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_EN1            :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 RDLVL_GATE_EN1       :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 RDLVL_GATE_PREAMBLE_CHECK_EN1 :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 OBSOLETE41           :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_491_t;





#define SDRAM_DENALI_CTL_500                     0xf0500190
#define SDRAM_DENALI_CTL_500_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_RDLVL_MAX0      : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_RDLVL_MAX0      : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_500_t;





#define SDRAM_DENALI_CTL_501                     0xf0500194
#define SDRAM_DENALI_CTL_501_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE31           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 RDLVL_GATE_DQ_ZERO_COUNT1 :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 RDLVL_DQ_ZERO_COUNT1 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_DQ_ZERO_COUNT1 :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 RDLVL_GATE_DQ_ZERO_COUNT1 :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 OBSOLETE31           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_501_t;





#define SDRAM_DENALI_CTL_510                     0xf0500198
#define SDRAM_DENALI_CTL_510_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 RDLVL_REFRESH_INTERVAL0 :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 RDLVL_ERROR_STATUS0  : 18 ; /* bits 17:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_ERROR_STATUS0  : 18 ; /* bits 17:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 RDLVL_REFRESH_INTERVAL0 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_510_t;





#define SDRAM_DENALI_CTL_511                     0xf050019c
#define SDRAM_DENALI_CTL_511_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 ODT_ALT_EN1          :  1 ; /* bits 24:24 */
    cs_uint32 RDLVL_GATE_REFRESH_INTERVAL1 : 16 ; /* bits 23:8 */
    cs_uint32 RDLVL_REFRESH_INTERVAL1 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 RDLVL_REFRESH_INTERVAL1 :  8 ; /* bits 7:0 */
    cs_uint32 RDLVL_GATE_REFRESH_INTERVAL1 : 16 ; /* bits 23:8 */
    cs_uint32 ODT_ALT_EN1          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_511_t;





#define SDRAM_DENALI_CTL_520                     0xf05001a0
#define SDRAM_DENALI_CTL_520_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 SREFRESH_EXIT_NO_REFRESH0 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 TRAS_MAX0            : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TRAS_MAX0            : 17 ; /* bits 16:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 SREFRESH_EXIT_NO_REFRESH0 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_520_t;





#define SDRAM_DENALI_CTL_521                     0xf05001a4
#define SDRAM_DENALI_CTL_521_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 WRITE_MODEREG1       : 26 ; /* bits 25:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 WRITE_MODEREG1       : 26 ; /* bits 25:0 */
    cs_uint32 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_521_t;





#define SDRAM_DENALI_CTL_530                     0xf05001a8
#define SDRAM_DENALI_CTL_530_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 INHIBIT_DRAM_CMD0    :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 MRSINGLE_DATA_00     : 15 ; /* bits 22:8 */
    cs_uint32 MRW_STATUS0          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 MRW_STATUS0          :  8 ; /* bits 7:0 */
    cs_uint32 MRSINGLE_DATA_00     : 15 ; /* bits 22:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 INHIBIT_DRAM_CMD0    :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_530_t;





#define SDRAM_DENALI_CTL_531                     0xf05001ac
#define SDRAM_DENALI_CTL_531_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 UPDATE_ERROR_STATUS1 :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 INT_ACK1             : 21 ; /* bits 20:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 INT_ACK1             : 21 ; /* bits 20:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 UPDATE_ERROR_STATUS1 :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_531_t;





#define SDRAM_DENALI_CTL_540                     0xf05001b0
#define SDRAM_DENALI_CTL_540_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TDFI_CTRLUPD_INTERVAL0 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_CTRLUPD_INTERVAL0 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_540_t;





#define SDRAM_DENALI_CTL_541                     0xf05001b4
#define SDRAM_DENALI_CTL_541_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 PORT_CMD_ERROR_ID1   : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 OUT_OF_RANGE_SOURCE_ID1 : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 OUT_OF_RANGE_SOURCE_ID1 : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 PORT_CMD_ERROR_ID1   : 14 ; /* bits 29:16 */
    cs_uint32 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_541_t;





#define SDRAM_DENALI_CTL_550                     0xf05001b8
#define SDRAM_DENALI_CTL_550_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TINIT30              : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 PORT_DATA_ERROR_ID0  : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PORT_DATA_ERROR_ID0  : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 TINIT30              : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_550_t;





#define SDRAM_DENALI_CTL_551                     0xf05001bc
#define SDRAM_DENALI_CTL_551_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 TINIT41              : 24 ; /* bits 31:8 */
    cs_uint32 TINIT31              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TINIT31              :  8 ; /* bits 7:0 */
    cs_uint32 TINIT41              : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_551_t;





#define SDRAM_DENALI_CTL_560                     0xf05001c0
#define SDRAM_DENALI_CTL_560_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 NO_AUTO_MRR_INIT0    :  1 ; /* bits 24:24 */
    cs_uint32 TINIT50              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TINIT50              : 24 ; /* bits 23:0 */
    cs_uint32 NO_AUTO_MRR_INIT0    :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_560_t;





#define SDRAM_DENALI_CTL_561                     0xf05001c4
#define SDRAM_DENALI_CTL_561_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE41           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 PWRDN_SHIFT_DELAY1   :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 TMRR1                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TMRR1                :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 PWRDN_SHIFT_DELAY1   :  6 ; /* bits 13:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 OBSOLETE41           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_561_t;





#define SDRAM_DENALI_CTL_570                     0xf05001c8
#define SDRAM_DENALI_CTL_570_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 PERIPHERAL_MRR_DATA0 :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 READ_MODEREG0        : 17 ; /* bits 16:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 READ_MODEREG0        : 17 ; /* bits 16:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 PERIPHERAL_MRR_DATA0 :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_570_t;





#define SDRAM_DENALI_CTL_571                     0xf05001cc
#define SDRAM_DENALI_CTL_571_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 MR8_DATA_01          :  8 ; /* bits 31:24 */
    cs_uint32 REFRESH_PER_AUTO_TEMPCHK1 :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 AUTO_TEMPCHK_VAL1    :  4 ; /* bits 11:8 */
    cs_uint32 PERIPHERAL_MRR_DATA1 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 PERIPHERAL_MRR_DATA1 :  8 ; /* bits 7:0 */
    cs_uint32 AUTO_TEMPCHK_VAL1    :  4 ; /* bits 11:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 REFRESH_PER_AUTO_TEMPCHK1 :  8 ; /* bits 23:16 */
    cs_uint32 MR8_DATA_01          :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_571_t;





#define SDRAM_DENALI_CTL_580                     0xf05001d0
#define SDRAM_DENALI_CTL_580_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 ZQRESET0             : 12 ; /* bits 27:16 */
    cs_uint32 MR17_DATA_00         :  8 ; /* bits 15:8 */
    cs_uint32 MR16_DATA_00         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 MR16_DATA_00         :  8 ; /* bits 7:0 */
    cs_uint32 MR17_DATA_00         :  8 ; /* bits 15:8 */
    cs_uint32 ZQRESET0             : 12 ; /* bits 27:16 */
    cs_uint32 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_580_t;





#define SDRAM_DENALI_CTL_581                     0xf05001d4
#define SDRAM_DENALI_CTL_581_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  6 ;
    cs_uint32 TDQSCK_MAX1          :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 CONTROLLER_BUSY1     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 LPDDR2_S41           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 NO_ZQ_INIT1          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NO_ZQ_INIT1          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  7 ;
    cs_uint32 LPDDR2_S41           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 CONTROLLER_BUSY1     :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 TDQSCK_MAX1          :  2 ; /* bits 25:24 */
    cs_uint32 rsrvd4               :  6 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_581_t;





#define SDRAM_DENALI_CTL_590                     0xf05001d8
#define SDRAM_DENALI_CTL_590_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  7 ;
    cs_uint32 DISABLE_NARROW_WRAP0 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 WRLVL_ERROR_STATUS0  : 10 ; /* bits 17:8 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 TDQSCK_MIN0          :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDQSCK_MIN0          :  2 ; /* bits 1:0 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 WRLVL_ERROR_STATUS0  : 10 ; /* bits 17:8 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 DISABLE_NARROW_WRAP0 :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd3               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_590_t;





#define SDRAM_DENALI_CTL_591                     0xf05001dc
#define SDRAM_DENALI_CTL_591_dft                 0x00000002




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 OBSOLETE51           : 16 ; /* bits 31:16 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 EN_1T_TIMING1        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 TDFI_CTRL_DELAY1     :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 TDFI_CTRL_DELAY1     :  4 ; /* bits 3:0 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 EN_1T_TIMING1        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  7 ;
    cs_uint32 OBSOLETE51           : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_DENALI_CTL_591_t;





#define SDRAM_PHY_CTL_64_0                       0xf0500200
#define SDRAM_PHY_CTL_64_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  3 ;
    cs_uint32 ctrl_HCKE            :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 ctrl_FNC_FB          :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 mode_RUN             :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  3 ;
    cs_uint32 mode_HIGHZ           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 mode_MUX             :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 mode_NAND            :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 mode_SCAN            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mode_PHY             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mode_PHY             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mode_SCAN            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 mode_NAND            :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 mode_MUX             :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 mode_HIGHZ           :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd5               :  3 ;
    cs_uint32 mode_RUN             :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 ctrl_FNC_FB          :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 ctrl_HCKE            :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd8               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_64_0_t;





#define SDRAM_PHY_CTL_64_1                       0xf0500204
#define SDRAM_PHY_CTL_64_1_dft                   0x00011000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd6               : 11 ;
    cs_uint32 ctrl_CMOSRCV         :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd5               :  3 ;
    cs_uint32 ctrl_SHGATE          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 ctrl_DFDQS           :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_READ_WIDTH      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_DDR3            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_LPDDR2          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_LPDDR2          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_DDR3            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_READ_WIDTH      :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_DFDQS           :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 ctrl_SHGATE          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd5               :  3 ;
    cs_uint32 ctrl_CMOSRCV         :  1 ; /* bits 20:20 */
    cs_uint32 rsrvd6               : 11 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_64_1_t;





#define SDRAM_PHY_CTL_65_0                       0xf0500208
#define SDRAM_PHY_CTL_65_0_dft                   0x00000e38




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ctrl_DCC             : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_DCC             : 12 ; /* bits 11:0 */
    cs_uint32 rsrvd1               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_65_0_t;





#define SDRAM_PHY_CTL_65_1                       0xf050020c
#define SDRAM_PHY_CTL_65_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 override_en_DLL_ON   :  1 ; /* bits 31:31 */
    cs_uint32 override_en_START    :  1 ; /* bits 30:30 */
    cs_uint32 override_en_CKSTOP   :  1 ; /* bits 29:29 */
    cs_uint32 override_en_ZQ_START :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 gas0_VALIDADJ        :  2 ; /* bits 13:12 */
    cs_uint32 gas0_READADJ         :  4 ; /* bits 11:8 */
    cs_uint32 gas0_GATEADJ         :  4 ; /* bits 7:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 gas0_RD_DISABLE      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gas0_RD_DISABLE      :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 gas0_GATEADJ         :  4 ; /* bits 7:4 */
    cs_uint32 gas0_READADJ         :  4 ; /* bits 11:8 */
    cs_uint32 gas0_VALIDADJ        :  2 ; /* bits 13:12 */
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 override_en_ZQ_START :  1 ; /* bits 28:28 */
    cs_uint32 override_en_CKSTOP   :  1 ; /* bits 29:29 */
    cs_uint32 override_en_START    :  1 ; /* bits 30:30 */
    cs_uint32 override_en_DLL_ON   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_65_1_t;





#define SDRAM_PHY_CTL_66_0                       0xf0500210
#define SDRAM_PHY_CTL_66_0_dft                   0x10108010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ctrl_INC             :  8 ; /* bits 31:24 */
    cs_uint32 ctrl_START_POINT     :  8 ; /* bits 23:16 */
    cs_uint32 ctrl_REF             :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_HALF            :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_DLL_ON          :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_START           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_START           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_DLL_ON          :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_HALF            :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_REF             :  4 ; /* bits 15:12 */
    cs_uint32 ctrl_START_POINT     :  8 ; /* bits 23:16 */
    cs_uint32 ctrl_INC             :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_66_0_t;





#define SDRAM_PHY_CTL_66_1                       0xf0500214
#define SDRAM_PHY_CTL_66_1_dft                   0x00000020




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  2 ;
    cs_uint32 ctrl_LOCK_VALUE      : 10 ; /* bits 29:20 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_LOCKED          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_FLOCK           :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_CLOCK           :  1 ; /* bits 8:8 */
    cs_uint32 ctrl_FORCE           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_FORCE           :  8 ; /* bits 7:0 */
    cs_uint32 ctrl_CLOCK           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_FLOCK           :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_LOCKED          :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_LOCK_VALUE      : 10 ; /* bits 29:20 */
    cs_uint32 rsrvd4               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_66_1_t;





#define SDRAM_PHY_CTL_67_0                       0xf0500218
#define SDRAM_PHY_CTL_67_0_dft                   0x00000401




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 ctrl_OFFSETD         :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_OFFSETC         :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 ctrl_SHIFTC          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_CKDIS           :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_CKSTOP          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_CKSTOP          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_CKDIS           :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_SHIFTC          :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  5 ;
    cs_uint32 ctrl_OFFSETC         :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_OFFSETD         :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd5               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_67_0_t;





#define SDRAM_PHY_CTL_67_1                       0xf050021c
#define SDRAM_PHY_CTL_67_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 ctrl_PD              :  5 ; /* bits 12:8 */
    cs_uint32 ctrl_PULLD_DQ        :  4 ; /* bits 7:4 */
    cs_uint32 ctrl_PULLD_DQS       :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_PULLD_DQS       :  4 ; /* bits 3:0 */
    cs_uint32 ctrl_PULLD_DQ        :  4 ; /* bits 7:4 */
    cs_uint32 ctrl_PD              :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_67_1_t;





#define SDRAM_PHY_CTL_68_0                       0xf0500220
#define SDRAM_PHY_CTL_68_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_OFFSETR3        :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_OFFSETR2        :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_OFFSETR1        :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ctrl_OFFSETR0        :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_OFFSETR0        :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ctrl_OFFSETR1        :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_OFFSETR2        :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_OFFSETR3        :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_68_0_t;





#define SDRAM_PHY_CTL_68_1                       0xf0500224
#define SDRAM_PHY_CTL_68_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_OFFSETW3        :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_OFFSETW2        :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_OFFSETW1        :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ctrl_OFFSETW0        :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_OFFSETW0        :  7 ; /* bits 6:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 ctrl_OFFSETW1        :  7 ; /* bits 14:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_OFFSETW2        :  7 ; /* bits 22:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_OFFSETW3        :  7 ; /* bits 30:24 */
    cs_uint32 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_68_1_t;





#define SDRAM_PHY_CTL_69_0                       0xf0500228
#define SDRAM_PHY_CTL_69_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ctrl_FB_CNT0         :  8 ; /* bits 31:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_FB_OKY          :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_FB_ERR          :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_FB_START        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_FB_START        :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_FB_ERR          :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_FB_OKY          :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_FB_CNT0         :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_69_0_t;





#define SDRAM_PHY_CTL_69_1                       0xf050022c
#define SDRAM_PHY_CTL_69_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ctrl_FB_CNT4         :  8 ; /* bits 31:24 */
    cs_uint32 ctrl_FB_CNT3         :  8 ; /* bits 23:16 */
    cs_uint32 ctrl_FB_CNT2         :  8 ; /* bits 15:8 */
    cs_uint32 ctrl_FB_CNT1         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_FB_CNT1         :  8 ; /* bits 7:0 */
    cs_uint32 ctrl_FB_CNT2         :  8 ; /* bits 15:8 */
    cs_uint32 ctrl_FB_CNT3         :  8 ; /* bits 23:16 */
    cs_uint32 ctrl_FB_CNT4         :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_69_1_t;





#define SDRAM_PHY_CTL_70_0                       0xf0500230
#define SDRAM_PHY_CTL_70_0_dft                   0x04252000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd8               :  3 ;
    cs_uint32 ctrl_ZQ_END          :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 ctrl_ZQ_MODE_DDS     :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 ctrl_ZQ_MODE_TERM    :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 ctrl_ZQ_FORCE_IMPN   :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_ZQ_FORCE_IMPP   :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_ZQ_MODE_NOTERM  :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_ZQ_FORCE        :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_ZQ_START        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_ZQ_START        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_ZQ_FORCE        :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_ZQ_MODE_NOTERM  :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_ZQ_FORCE_IMPP   :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               :  1 ;
    cs_uint32 ctrl_ZQ_FORCE_IMPN   :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd5               :  1 ;
    cs_uint32 ctrl_ZQ_MODE_TERM    :  3 ; /* bits 22:20 */
    cs_uint32 rsrvd6               :  1 ;
    cs_uint32 ctrl_ZQ_MODE_DDS     :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd7               :  1 ;
    cs_uint32 ctrl_ZQ_END          :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd8               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_70_0_t;





#define SDRAM_PHY_CTL_70_1                       0xf0500234
#define SDRAM_PHY_CTL_70_1_dft                   0x00003000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               : 17 ;
    cs_uint32 ctrl_ZQ_DIV          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_ZQ_NMON         :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_ZQ_PMON         :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_ZQ_ERROR        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_ZQ_ERROR        :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_ZQ_PMON         :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 ctrl_ZQ_NMON         :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 ctrl_ZQ_DIV          :  3 ; /* bits 14:12 */
    cs_uint32 rsrvd4               : 17 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_70_1_t;





#define SDRAM_PHY_CTL_71_0                       0xf0500238
#define SDRAM_PHY_CTL_71_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_IO_CAS          :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_IO_RAS          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ctrl_IO_ADCT         : 22 ; /* bits 21:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_IO_ADCT         : 22 ; /* bits 21:0 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ctrl_IO_RAS          :  1 ; /* bits 24:24 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_IO_CAS          :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd3               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_71_0_t;





#define SDRAM_PHY_CTL_71_1                       0xf050023c
#define SDRAM_PHY_CTL_71_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  4 ;
    cs_uint32 ctrl_IO_RDQS         :  4 ; /* bits 27:24 */
    cs_uint32 ctrl_IO_WDQS         :  4 ; /* bits 23:20 */
    cs_uint32 ctrl_IO_DM           :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 ctrl_IO_DATA_EN      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_IO_CK           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_IO_CKE          :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_IO_WEN          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_IO_WEN          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 ctrl_IO_CKE          :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 ctrl_IO_CK           :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 ctrl_IO_DATA_EN      :  1 ; /* bits 12:12 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 ctrl_IO_DM           :  4 ; /* bits 19:16 */
    cs_uint32 ctrl_IO_WDQS         :  4 ; /* bits 23:20 */
    cs_uint32 ctrl_IO_RDQS         :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd5               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_71_1_t;





#define SDRAM_PHY_CTL_72_0                       0xf0500240
#define SDRAM_PHY_CTL_72_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ctrl_IO_WDATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_IO_WDATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_72_0_t;





#define SDRAM_PHY_CTL_72_1                       0xf0500244
#define SDRAM_PHY_CTL_72_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ctrl_IO_RDATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ctrl_IO_RDATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_72_1_t;





#define SDRAM_PHY_CTL_74                         0xf0500250
#define SDRAM_PHY_CTL_74_dft                     0x00a40010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  8 ;
    cs_uint32 mon_weight_long_term :  4 ; /* bits 23:20 */
    cs_uint32 mon_weight_short_term :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd4               :  2 ;
    cs_uint32 mon_read_mode        :  2 ; /* bits 13:12 */
    cs_uint32 rsrvd3               :  2 ;
    cs_uint32 mon_group            :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 mon_bl8_size         :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mon_clear_on_read    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mon_clear_on_read    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 mon_bl8_size         :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 mon_group            :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd3               :  2 ;
    cs_uint32 mon_read_mode        :  2 ; /* bits 13:12 */
    cs_uint32 rsrvd4               :  2 ;
    cs_uint32 mon_weight_short_term :  4 ; /* bits 19:16 */
    cs_uint32 mon_weight_long_term :  4 ; /* bits 23:20 */
    cs_uint32 rsrvd5               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_74_t;





#define SDRAM_PHY_CTL_75                         0xf0500258
#define SDRAM_PHY_CTL_75_dft                     0x00000f08




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 20 ;
    cs_uint32 nb_axi3_rd_en        :  1 ; /* bits 11:11 */
    cs_uint32 nb_axi2_rd_en        :  1 ; /* bits 10:10 */
    cs_uint32 nb_axi1_rd_en        :  1 ; /* bits 9:9 */
    cs_uint32 nb_axi0_rd_en        :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 nb_axi3_wr_en        :  1 ; /* bits 3:3 */
    cs_uint32 nb_axi2_wr_en        :  1 ; /* bits 2:2 */
    cs_uint32 nb_axi1_wr_en        :  1 ; /* bits 1:1 */
    cs_uint32 nb_axi0_wr_en        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi0_wr_en        :  1 ; /* bits 0:0 */
    cs_uint32 nb_axi1_wr_en        :  1 ; /* bits 1:1 */
    cs_uint32 nb_axi2_wr_en        :  1 ; /* bits 2:2 */
    cs_uint32 nb_axi3_wr_en        :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               :  4 ;
    cs_uint32 nb_axi0_rd_en        :  1 ; /* bits 8:8 */
    cs_uint32 nb_axi1_rd_en        :  1 ; /* bits 9:9 */
    cs_uint32 nb_axi2_rd_en        :  1 ; /* bits 10:10 */
    cs_uint32 nb_axi3_rd_en        :  1 ; /* bits 11:11 */
    cs_uint32 rsrvd2               : 20 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_75_t;





#define SDRAM_PHY_CTL_76_0                       0xf0500260
#define SDRAM_PHY_CTL_76_0_dft                   0x08060402




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi0_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi0_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi0_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi0_wr_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi0_wr_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi0_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi0_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi0_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_76_0_t;





#define SDRAM_PHY_CTL_76_1                       0xf0500264
#define SDRAM_PHY_CTL_76_1_dft                   0x06040200




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi0_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi0_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi0_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi0_rd_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi0_rd_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi0_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi0_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi0_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_76_1_t;





#define SDRAM_PHY_CTL_77_0                       0xf0500268
#define SDRAM_PHY_CTL_77_0_dft                   0x08060402




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi1_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi1_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi1_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi1_wr_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi1_wr_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi1_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi1_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi1_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_77_0_t;





#define SDRAM_PHY_CTL_77_1                       0xf050026c
#define SDRAM_PHY_CTL_77_1_dft                   0x06040200




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi1_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi1_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi1_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi1_rd_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi1_rd_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi1_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi1_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi1_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_77_1_t;





#define SDRAM_PHY_CTL_78_0                       0xf0500270
#define SDRAM_PHY_CTL_78_0_dft                   0x08060402




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi2_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi2_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi2_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi2_wr_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi2_wr_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi2_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi2_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi2_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_78_0_t;





#define SDRAM_PHY_CTL_78_1                       0xf0500274
#define SDRAM_PHY_CTL_78_1_dft                   0x06040200




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi2_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi2_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi2_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi2_rd_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi2_rd_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi2_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi2_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi2_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_78_1_t;





#define SDRAM_PHY_CTL_79_0                       0xf0500278
#define SDRAM_PHY_CTL_79_0_dft                   0x08060402




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi3_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi3_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi3_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi3_wr_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi3_wr_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi3_wr_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi3_wr_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi3_wr_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_79_0_t;





#define SDRAM_PHY_CTL_79_1                       0xf050027c
#define SDRAM_PHY_CTL_79_1_dft                   0x06040200




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 nb_axi3_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi3_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi3_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi3_rd_threshold0 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 nb_axi3_rd_threshold0 :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 nb_axi3_rd_threshold1 :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 nb_axi3_rd_threshold2 :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 nb_axi3_rd_threshold3 :  5 ; /* bits 28:24 */
    cs_uint32 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_79_1_t;





#define SDRAM_PHY_CTL_80                         0xf0500280
#define SDRAM_PHY_CTL_80_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_80_t;





#define SDRAM_PHY_CTL_81                         0xf0500288
#define SDRAM_PHY_CTL_81_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_81_t;





#define SDRAM_PHY_CTL_82                         0xf0500290
#define SDRAM_PHY_CTL_82_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_82_t;





#define SDRAM_PHY_CTL_83                         0xf0500298
#define SDRAM_PHY_CTL_83_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_83_t;





#define SDRAM_PHY_CTL_84                         0xf05002a0
#define SDRAM_PHY_CTL_84_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_84_t;





#define SDRAM_PHY_CTL_85                         0xf05002a8
#define SDRAM_PHY_CTL_85_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_85_t;





#define SDRAM_PHY_CTL_86                         0xf05002b0
#define SDRAM_PHY_CTL_86_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_86_t;





#define SDRAM_PHY_CTL_87                         0xf05002b8
#define SDRAM_PHY_CTL_87_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_87_t;





#define SDRAM_PHY_CTL_88                         0xf05002c0
#define SDRAM_PHY_CTL_88_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_88_t;





#define SDRAM_PHY_CTL_89                         0xf05002c8
#define SDRAM_PHY_CTL_89_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_89_t;





#define SDRAM_PHY_CTL_90                         0xf05002d0
#define SDRAM_PHY_CTL_90_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_90_t;





#define SDRAM_PHY_CTL_91                         0xf05002d8
#define SDRAM_PHY_CTL_91_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_91_t;





#define SDRAM_PHY_CTL_92                         0xf05002e0
#define SDRAM_PHY_CTL_92_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_92_t;





#define SDRAM_PHY_CTL_93                         0xf05002e8
#define SDRAM_PHY_CTL_93_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_93_t;





#define SDRAM_PHY_CTL_94                         0xf05002f0
#define SDRAM_PHY_CTL_94_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_94_t;





#define SDRAM_PHY_CTL_95                         0xf05002f8
#define SDRAM_PHY_CTL_95_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_mon_read_data    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_95_t;





#define SDRAM_PHY_CTL_96                         0xf0500300
#define SDRAM_PHY_CTL_96_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  8 ;
    cs_uint32 train_rlat           :  4 ; /* bits 23:20 */
    cs_uint32 train_wlat           :  4 ; /* bits 19:16 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 train_rd_mode        :  1 ; /* bits 4:4 */
    cs_uint32 train_clr_buf        :  1 ; /* bits 3:3 */
    cs_uint32 train_mrr_mpr_en     :  1 ; /* bits 2:2 */
    cs_uint32 train_capture_en     :  1 ; /* bits 1:1 */
    cs_uint32 train_dfi_en         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_dfi_en         :  1 ; /* bits 0:0 */
    cs_uint32 train_capture_en     :  1 ; /* bits 1:1 */
    cs_uint32 train_mrr_mpr_en     :  1 ; /* bits 2:2 */
    cs_uint32 train_clr_buf        :  1 ; /* bits 3:3 */
    cs_uint32 train_rd_mode        :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 11 ;
    cs_uint32 train_wlat           :  4 ; /* bits 19:16 */
    cs_uint32 train_rlat           :  4 ; /* bits 23:20 */
    cs_uint32 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_96_t;





#define SDRAM_PHY_CTL_97_0                       0xf0500308
#define SDRAM_PHY_CTL_97_0_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               :  8 ;
    cs_uint32 train_data_mask      :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 train_bank_addr      :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 train_cmd            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_cmd            :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 train_bank_addr      :  3 ; /* bits 10:8 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 train_data_mask      :  8 ; /* bits 23:16 */
    cs_uint32 rsrvd3               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_97_0_t;





#define SDRAM_PHY_CTL_97_1                       0xf050030c
#define SDRAM_PHY_CTL_97_1_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 train_addr           : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_addr           : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_97_1_t;





#define SDRAM_PHY_CTL_98                         0xf0500310
#define SDRAM_PHY_CTL_98_dft                     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_cmd            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_cmd            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_98_t;





#define SDRAM_PHY_CTL_100_0                      0xf0500320
#define SDRAM_PHY_CTL_100_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data0_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data0_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_100_0_t;





#define SDRAM_PHY_CTL_100_1                      0xf0500324
#define SDRAM_PHY_CTL_100_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data0_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data0_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_100_1_t;





#define SDRAM_PHY_CTL_101_0                      0xf0500328
#define SDRAM_PHY_CTL_101_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data1_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data1_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_101_0_t;





#define SDRAM_PHY_CTL_101_1                      0xf050032c
#define SDRAM_PHY_CTL_101_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data1_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data1_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_101_1_t;





#define SDRAM_PHY_CTL_102_0                      0xf0500330
#define SDRAM_PHY_CTL_102_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data2_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data2_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_102_0_t;





#define SDRAM_PHY_CTL_102_1                      0xf0500334
#define SDRAM_PHY_CTL_102_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data2_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data2_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_102_1_t;





#define SDRAM_PHY_CTL_103_0                      0xf0500338
#define SDRAM_PHY_CTL_103_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data3_0        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data3_0        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_103_0_t;





#define SDRAM_PHY_CTL_103_1                      0xf050033c
#define SDRAM_PHY_CTL_103_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 train_data3_1        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 train_data3_1        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SDRAM_PHY_CTL_103_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SDRAM */

typedef struct {
  SDRAM_DENALI_CTL_000_t                   DENALI_CTL_000;                /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  SDRAM_DENALI_CTL_001_t                   DENALI_CTL_001;                /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  SDRAM_DENALI_CTL_010_t                   DENALI_CTL_010;                /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  SDRAM_DENALI_CTL_011_t                   DENALI_CTL_011;                /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  SDRAM_DENALI_CTL_020_t                   DENALI_CTL_020;                /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  SDRAM_DENALI_CTL_021_t                   DENALI_CTL_021;                /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  SDRAM_DENALI_CTL_030_t                   DENALI_CTL_030;                /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  SDRAM_DENALI_CTL_031_t                   DENALI_CTL_031;                /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  SDRAM_DENALI_CTL_040_t                   DENALI_CTL_040;                /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  SDRAM_DENALI_CTL_041_t                   DENALI_CTL_041;                /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  SDRAM_DENALI_CTL_050_t                   DENALI_CTL_050;                /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  SDRAM_DENALI_CTL_051_t                   DENALI_CTL_051;                /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  SDRAM_DENALI_CTL_060_t                   DENALI_CTL_060;                /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  SDRAM_DENALI_CTL_061_t                   DENALI_CTL_061;                /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  SDRAM_DENALI_CTL_070_t                   DENALI_CTL_070;                /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  SDRAM_DENALI_CTL_071_t                   DENALI_CTL_071;                /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  SDRAM_DENALI_CTL_080_t                   DENALI_CTL_080;                /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  SDRAM_DENALI_CTL_081_t                   DENALI_CTL_081;                /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  SDRAM_DENALI_CTL_090_t                   DENALI_CTL_090;                /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  SDRAM_DENALI_CTL_091_t                   DENALI_CTL_091;                /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  SDRAM_DENALI_CTL_100_t                   DENALI_CTL_100;                /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  SDRAM_DENALI_CTL_101_t                   DENALI_CTL_101;                /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  SDRAM_DENALI_CTL_110_t                   DENALI_CTL_110;                /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  SDRAM_DENALI_CTL_111_t                   DENALI_CTL_111;                /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  SDRAM_DENALI_CTL_120_t                   DENALI_CTL_120;                /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  SDRAM_DENALI_CTL_121_t                   DENALI_CTL_121;                /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  SDRAM_DENALI_CTL_130_t                   DENALI_CTL_130;                /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  SDRAM_DENALI_CTL_131_t                   DENALI_CTL_131;                /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  SDRAM_DENALI_CTL_140_t                   DENALI_CTL_140;                /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  SDRAM_DENALI_CTL_141_t                   DENALI_CTL_141;                /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  SDRAM_DENALI_CTL_150_t                   DENALI_CTL_150;                /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  SDRAM_DENALI_CTL_151_t                   DENALI_CTL_151;                /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  SDRAM_DENALI_CTL_160_t                   DENALI_CTL_160;                /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  SDRAM_DENALI_CTL_161_t                   DENALI_CTL_161;                /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  SDRAM_DENALI_CTL_170_t                   DENALI_CTL_170;                /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  SDRAM_DENALI_CTL_171_t                   DENALI_CTL_171;                /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  SDRAM_DENALI_CTL_180_t                   DENALI_CTL_180;                /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  SDRAM_DENALI_CTL_181_t                   DENALI_CTL_181;                /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  SDRAM_DENALI_CTL_190_t                   DENALI_CTL_190;                /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  SDRAM_DENALI_CTL_191_t                   DENALI_CTL_191;                /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  SDRAM_DENALI_CTL_200_t                   DENALI_CTL_200;                /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  SDRAM_DENALI_CTL_201_t                   DENALI_CTL_201;                /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  SDRAM_DENALI_CTL_210_t                   DENALI_CTL_210;                /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  SDRAM_DENALI_CTL_211_t                   DENALI_CTL_211;                /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  SDRAM_DENALI_CTL_220_t                   DENALI_CTL_220;                /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  SDRAM_DENALI_CTL_221_t                   DENALI_CTL_221;                /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  SDRAM_DENALI_CTL_230_t                   DENALI_CTL_230;                /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  SDRAM_DENALI_CTL_231_t                   DENALI_CTL_231;                /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  SDRAM_DENALI_CTL_240_t                   DENALI_CTL_240;                /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  SDRAM_DENALI_CTL_241_t                   DENALI_CTL_241;                /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  SDRAM_DENALI_CTL_250_t                   DENALI_CTL_250;                /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  SDRAM_DENALI_CTL_251_t                   DENALI_CTL_251;                /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  SDRAM_DENALI_CTL_260_t                   DENALI_CTL_260;                /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  SDRAM_DENALI_CTL_261_t                   DENALI_CTL_261;                /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  SDRAM_DENALI_CTL_270_t                   DENALI_CTL_270;                /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  SDRAM_DENALI_CTL_271_t                   DENALI_CTL_271;                /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  SDRAM_DENALI_CTL_280_t                   DENALI_CTL_280;                /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  SDRAM_DENALI_CTL_281_t                   DENALI_CTL_281;                /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  SDRAM_DENALI_CTL_290_t                   DENALI_CTL_290;                /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  SDRAM_DENALI_CTL_291_t                   DENALI_CTL_291;                /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  SDRAM_DENALI_CTL_300_t                   DENALI_CTL_300;                /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  SDRAM_DENALI_CTL_301_t                   DENALI_CTL_301;                /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  SDRAM_DENALI_CTL_310_t                   DENALI_CTL_310;                /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  SDRAM_DENALI_CTL_311_t                   DENALI_CTL_311;                /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  SDRAM_DENALI_CTL_320_t                   DENALI_CTL_320;                /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  SDRAM_DENALI_CTL_321_t                   DENALI_CTL_321;                /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  SDRAM_DENALI_CTL_330_t                   DENALI_CTL_330;                /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  SDRAM_DENALI_CTL_331_t                   DENALI_CTL_331;                /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  SDRAM_DENALI_CTL_340_t                   DENALI_CTL_340;                /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  SDRAM_DENALI_CTL_341_t                   DENALI_CTL_341;                /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  SDRAM_DENALI_CTL_350_t                   DENALI_CTL_350;                /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  SDRAM_DENALI_CTL_351_t                   DENALI_CTL_351;                /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  SDRAM_DENALI_CTL_360_t                   DENALI_CTL_360;                /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  SDRAM_DENALI_CTL_361_t                   DENALI_CTL_361;                /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  SDRAM_DENALI_CTL_370_t                   DENALI_CTL_370;                /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  SDRAM_DENALI_CTL_371_t                   DENALI_CTL_371;                /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  SDRAM_DENALI_CTL_380_t                   DENALI_CTL_380;                /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  SDRAM_DENALI_CTL_381_t                   DENALI_CTL_381;                /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  SDRAM_DENALI_CTL_390_t                   DENALI_CTL_390;                /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  SDRAM_DENALI_CTL_391_t                   DENALI_CTL_391;                /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  SDRAM_DENALI_CTL_400_t                   DENALI_CTL_400;                /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  SDRAM_DENALI_CTL_401_t                   DENALI_CTL_401;                /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  SDRAM_DENALI_CTL_410_t                   DENALI_CTL_410;                /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  SDRAM_DENALI_CTL_411_t                   DENALI_CTL_411;                /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  SDRAM_DENALI_CTL_420_t                   DENALI_CTL_420;                /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  SDRAM_DENALI_CTL_421_t                   DENALI_CTL_421;                /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  SDRAM_DENALI_CTL_430_t                   DENALI_CTL_430;                /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  SDRAM_DENALI_CTL_431_t                   DENALI_CTL_431;                /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  SDRAM_DENALI_CTL_440_t                   DENALI_CTL_440;                /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  SDRAM_DENALI_CTL_441_t                   DENALI_CTL_441;                /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  SDRAM_DENALI_CTL_450_t                   DENALI_CTL_450;                /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  SDRAM_DENALI_CTL_451_t                   DENALI_CTL_451;                /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  SDRAM_DENALI_CTL_460_t                   DENALI_CTL_460;                /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  SDRAM_DENALI_CTL_461_t                   DENALI_CTL_461;                /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  SDRAM_DENALI_CTL_470_t                   DENALI_CTL_470;                /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  SDRAM_DENALI_CTL_471_t                   DENALI_CTL_471;                /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  SDRAM_DENALI_CTL_480_t                   DENALI_CTL_480;                /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  SDRAM_DENALI_CTL_481_t                   DENALI_CTL_481;                /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  SDRAM_DENALI_CTL_490_t                   DENALI_CTL_490;                /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  SDRAM_DENALI_CTL_491_t                   DENALI_CTL_491;                /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  SDRAM_DENALI_CTL_500_t                   DENALI_CTL_500;                /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  SDRAM_DENALI_CTL_501_t                   DENALI_CTL_501;                /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  SDRAM_DENALI_CTL_510_t                   DENALI_CTL_510;                /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  SDRAM_DENALI_CTL_511_t                   DENALI_CTL_511;                /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  SDRAM_DENALI_CTL_520_t                   DENALI_CTL_520;                /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  SDRAM_DENALI_CTL_521_t                   DENALI_CTL_521;                /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  SDRAM_DENALI_CTL_530_t                   DENALI_CTL_530;                /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  SDRAM_DENALI_CTL_531_t                   DENALI_CTL_531;                /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  SDRAM_DENALI_CTL_540_t                   DENALI_CTL_540;                /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  SDRAM_DENALI_CTL_541_t                   DENALI_CTL_541;                /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  SDRAM_DENALI_CTL_550_t                   DENALI_CTL_550;                /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  SDRAM_DENALI_CTL_551_t                   DENALI_CTL_551;                /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  SDRAM_DENALI_CTL_560_t                   DENALI_CTL_560;                /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  SDRAM_DENALI_CTL_561_t                   DENALI_CTL_561;                /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  SDRAM_DENALI_CTL_570_t                   DENALI_CTL_570;                /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  SDRAM_DENALI_CTL_571_t                   DENALI_CTL_571;                /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  SDRAM_DENALI_CTL_580_t                   DENALI_CTL_580;                /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  SDRAM_DENALI_CTL_581_t                   DENALI_CTL_581;                /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  SDRAM_DENALI_CTL_590_t                   DENALI_CTL_590;                /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  SDRAM_DENALI_CTL_591_t                   DENALI_CTL_591;                /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[35];                 
  SDRAM_PHY_CTL_64_0_t                     PHY_CTL_64_0;                  /* addr: 0x00000200 */ 
  cs_uint32                                rsrvd121[3];                  
  SDRAM_PHY_CTL_64_1_t                     PHY_CTL_64_1;                  /* addr: 0x00000204 */ 
  cs_uint32                                rsrvd122[3];                  
  SDRAM_PHY_CTL_65_0_t                     PHY_CTL_65_0;                  /* addr: 0x00000208 */ 
  cs_uint32                                rsrvd123[3];                  
  SDRAM_PHY_CTL_65_1_t                     PHY_CTL_65_1;                  /* addr: 0x0000020c */ 
  cs_uint32                                rsrvd124[3];                  
  SDRAM_PHY_CTL_66_0_t                     PHY_CTL_66_0;                  /* addr: 0x00000210 */ 
  cs_uint32                                rsrvd125[3];                  
  SDRAM_PHY_CTL_66_1_t                     PHY_CTL_66_1;                  /* addr: 0x00000214 */ 
  cs_uint32                                rsrvd126[3];                  
  SDRAM_PHY_CTL_67_0_t                     PHY_CTL_67_0;                  /* addr: 0x00000218 */ 
  cs_uint32                                rsrvd127[3];                  
  SDRAM_PHY_CTL_67_1_t                     PHY_CTL_67_1;                  /* addr: 0x0000021c */ 
  cs_uint32                                rsrvd128[3];                  
  SDRAM_PHY_CTL_68_0_t                     PHY_CTL_68_0;                  /* addr: 0x00000220 */ 
  cs_uint32                                rsrvd129[3];                  
  SDRAM_PHY_CTL_68_1_t                     PHY_CTL_68_1;                  /* addr: 0x00000224 */ 
  cs_uint32                                rsrvd130[3];                  
  SDRAM_PHY_CTL_69_0_t                     PHY_CTL_69_0;                  /* addr: 0x00000228 */ 
  cs_uint32                                rsrvd131[3];                  
  SDRAM_PHY_CTL_69_1_t                     PHY_CTL_69_1;                  /* addr: 0x0000022c */ 
  cs_uint32                                rsrvd132[3];                  
  SDRAM_PHY_CTL_70_0_t                     PHY_CTL_70_0;                  /* addr: 0x00000230 */ 
  cs_uint32                                rsrvd133[3];                  
  SDRAM_PHY_CTL_70_1_t                     PHY_CTL_70_1;                  /* addr: 0x00000234 */ 
  cs_uint32                                rsrvd134[3];                  
  SDRAM_PHY_CTL_71_0_t                     PHY_CTL_71_0;                  /* addr: 0x00000238 */ 
  cs_uint32                                rsrvd135[3];                  
  SDRAM_PHY_CTL_71_1_t                     PHY_CTL_71_1;                  /* addr: 0x0000023c */ 
  cs_uint32                                rsrvd136[3];                  
  SDRAM_PHY_CTL_72_0_t                     PHY_CTL_72_0;                  /* addr: 0x00000240 */ 
  cs_uint32                                rsrvd137[3];                  
  SDRAM_PHY_CTL_72_1_t                     PHY_CTL_72_1;                  /* addr: 0x00000244 */ 
  cs_uint32                                rsrvd138[11];                 
  SDRAM_PHY_CTL_74_t                       PHY_CTL_74;                    /* addr: 0x00000250 */ 
  cs_uint32                                rsrvd139[7];                  
  SDRAM_PHY_CTL_75_t                       PHY_CTL_75;                    /* addr: 0x00000258 */ 
  cs_uint32                                rsrvd140[7];                  
  SDRAM_PHY_CTL_76_0_t                     PHY_CTL_76_0;                  /* addr: 0x00000260 */ 
  cs_uint32                                rsrvd141[3];                  
  SDRAM_PHY_CTL_76_1_t                     PHY_CTL_76_1;                  /* addr: 0x00000264 */ 
  cs_uint32                                rsrvd142[3];                  
  SDRAM_PHY_CTL_77_0_t                     PHY_CTL_77_0;                  /* addr: 0x00000268 */ 
  cs_uint32                                rsrvd143[3];                  
  SDRAM_PHY_CTL_77_1_t                     PHY_CTL_77_1;                  /* addr: 0x0000026c */ 
  cs_uint32                                rsrvd144[3];                  
  SDRAM_PHY_CTL_78_0_t                     PHY_CTL_78_0;                  /* addr: 0x00000270 */ 
  cs_uint32                                rsrvd145[3];                  
  SDRAM_PHY_CTL_78_1_t                     PHY_CTL_78_1;                  /* addr: 0x00000274 */ 
  cs_uint32                                rsrvd146[3];                  
  SDRAM_PHY_CTL_79_0_t                     PHY_CTL_79_0;                  /* addr: 0x00000278 */ 
  cs_uint32                                rsrvd147[3];                  
  SDRAM_PHY_CTL_79_1_t                     PHY_CTL_79_1;                  /* addr: 0x0000027c */ 
  cs_uint32                                rsrvd148[3];                  
  SDRAM_PHY_CTL_80_t                       PHY_CTL_80;                    /* addr: 0x00000280 */ 
  cs_uint32                                rsrvd149[7];                  
  SDRAM_PHY_CTL_81_t                       PHY_CTL_81;                    /* addr: 0x00000288 */ 
  cs_uint32                                rsrvd150[7];                  
  SDRAM_PHY_CTL_82_t                       PHY_CTL_82;                    /* addr: 0x00000290 */ 
  cs_uint32                                rsrvd151[7];                  
  SDRAM_PHY_CTL_83_t                       PHY_CTL_83;                    /* addr: 0x00000298 */ 
  cs_uint32                                rsrvd152[7];                  
  SDRAM_PHY_CTL_84_t                       PHY_CTL_84;                    /* addr: 0x000002a0 */ 
  cs_uint32                                rsrvd153[7];                  
  SDRAM_PHY_CTL_85_t                       PHY_CTL_85;                    /* addr: 0x000002a8 */ 
  cs_uint32                                rsrvd154[7];                  
  SDRAM_PHY_CTL_86_t                       PHY_CTL_86;                    /* addr: 0x000002b0 */ 
  cs_uint32                                rsrvd155[7];                  
  SDRAM_PHY_CTL_87_t                       PHY_CTL_87;                    /* addr: 0x000002b8 */ 
  cs_uint32                                rsrvd156[7];                  
  SDRAM_PHY_CTL_88_t                       PHY_CTL_88;                    /* addr: 0x000002c0 */ 
  cs_uint32                                rsrvd157[7];                  
  SDRAM_PHY_CTL_89_t                       PHY_CTL_89;                    /* addr: 0x000002c8 */ 
  cs_uint32                                rsrvd158[7];                  
  SDRAM_PHY_CTL_90_t                       PHY_CTL_90;                    /* addr: 0x000002d0 */ 
  cs_uint32                                rsrvd159[7];                  
  SDRAM_PHY_CTL_91_t                       PHY_CTL_91;                    /* addr: 0x000002d8 */ 
  cs_uint32                                rsrvd160[7];                  
  SDRAM_PHY_CTL_92_t                       PHY_CTL_92;                    /* addr: 0x000002e0 */ 
  cs_uint32                                rsrvd161[7];                  
  SDRAM_PHY_CTL_93_t                       PHY_CTL_93;                    /* addr: 0x000002e8 */ 
  cs_uint32                                rsrvd162[7];                  
  SDRAM_PHY_CTL_94_t                       PHY_CTL_94;                    /* addr: 0x000002f0 */ 
  cs_uint32                                rsrvd163[7];                  
  SDRAM_PHY_CTL_95_t                       PHY_CTL_95;                    /* addr: 0x000002f8 */ 
  cs_uint32                                rsrvd164[7];                  
  SDRAM_PHY_CTL_96_t                       PHY_CTL_96;                    /* addr: 0x00000300 */ 
  cs_uint32                                rsrvd165[7];                  
  SDRAM_PHY_CTL_97_0_t                     PHY_CTL_97_0;                  /* addr: 0x00000308 */ 
  cs_uint32                                rsrvd166[3];                  
  SDRAM_PHY_CTL_97_1_t                     PHY_CTL_97_1;                  /* addr: 0x0000030c */ 
  cs_uint32                                rsrvd167[3];                  
  SDRAM_PHY_CTL_98_t                       PHY_CTL_98;                    /* addr: 0x00000310 */ 
  cs_uint32                                rsrvd168[15];                 
  SDRAM_PHY_CTL_100_0_t                    PHY_CTL_100_0;                 /* addr: 0x00000320 */ 
  cs_uint32                                rsrvd169[3];                  
  SDRAM_PHY_CTL_100_1_t                    PHY_CTL_100_1;                 /* addr: 0x00000324 */ 
  cs_uint32                                rsrvd170[3];                  
  SDRAM_PHY_CTL_101_0_t                    PHY_CTL_101_0;                 /* addr: 0x00000328 */ 
  cs_uint32                                rsrvd171[3];                  
  SDRAM_PHY_CTL_101_1_t                    PHY_CTL_101_1;                 /* addr: 0x0000032c */ 
  cs_uint32                                rsrvd172[3];                  
  SDRAM_PHY_CTL_102_0_t                    PHY_CTL_102_0;                 /* addr: 0x00000330 */ 
  cs_uint32                                rsrvd173[3];                  
  SDRAM_PHY_CTL_102_1_t                    PHY_CTL_102_1;                 /* addr: 0x00000334 */ 
  cs_uint32                                rsrvd174[3];                  
  SDRAM_PHY_CTL_103_0_t                    PHY_CTL_103_0;                 /* addr: 0x00000338 */ 
  cs_uint32                                rsrvd175[3];                  
  SDRAM_PHY_CTL_103_1_t                    PHY_CTL_103_1;                 /* addr: 0x0000033c */ 
} SDRAM_t;

  

/*
 * TRNG
 */
  



#define TRNG_CNTL                                0xf0600000
#define TRNG_CNTL_dft                            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rand_reseed          :  1 ; /* bits 31:31 */
    cs_uint32 nonce_reseed         :  1 ; /* bits 30:30 */
    cs_uint32 nonce_reseed_ld      :  1 ; /* bits 29:29 */
    cs_uint32 nonce_seed_select    :  1 ; /* bits 28:28 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 gen_new_random       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 gen_new_random       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 nonce_seed_select    :  1 ; /* bits 28:28 */
    cs_uint32 nonce_reseed_ld      :  1 ; /* bits 29:29 */
    cs_uint32 nonce_reseed         :  1 ; /* bits 30:30 */
    cs_uint32 rand_reseed          :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_CNTL_t;





#define TRNG_IRQ_INTERRUPT                       0xf0600004
#define TRNG_IRQ_INTERRUPT_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 irq_stat_bit         :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               : 27 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 irq_stat_bit         :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_IRQ_INTERRUPT_t;





#define TRNG_IRQ_INTENABLE                       0xf0600008
#define TRNG_IRQ_INTENABLE_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  4 ;
    cs_uint32 irq_en_bit           :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd1               : 27 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 irq_en_bit           :  1 ; /* bits 27:27 */
    cs_uint32 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_IRQ_INTENABLE_t;





#define TRNG_DATA0                               0xf060000c
#define TRNG_DATA0_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data0                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data0                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_DATA0_t;





#define TRNG_DATA1                               0xf0600010
#define TRNG_DATA1_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data1                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data1                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_DATA1_t;





#define TRNG_DATA2                               0xf0600014
#define TRNG_DATA2_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data2                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data2                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_DATA2_t;





#define TRNG_DATA3                               0xf0600018
#define TRNG_DATA3_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data3                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data3                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} TRNG_DATA3_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* TRNG */

typedef struct {
  TRNG_CNTL_t                              CNTL;                          /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  TRNG_IRQ_INTERRUPT_t                     IRQ_INTERRUPT;                 /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  TRNG_IRQ_INTENABLE_t                     IRQ_INTENABLE;                 /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  TRNG_DATA0_t                             DATA0;                         /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  TRNG_DATA1_t                             DATA1;                         /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  TRNG_DATA2_t                             DATA2;                         /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  TRNG_DATA3_t                             DATA3;                         /* addr: 0x00000018 */ 
} TRNG_t;

  

/*
 * RTC
 */
  



#define RTC_RTCON                                0xf4920000
#define RTC_RTCON_dft                            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 oscen                :  1 ; /* bits 3:3 */
    cs_uint32 clkrst               :  1 ; /* bits 2:2 */
    cs_uint32 rtcen                :  1 ; /* bits 1:1 */
    cs_uint32 startb               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 startb               :  1 ; /* bits 0:0 */
    cs_uint32 rtcen                :  1 ; /* bits 1:1 */
    cs_uint32 clkrst               :  1 ; /* bits 2:2 */
    cs_uint32 oscen                :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_RTCON_t;





#define RTC_RTCALM                               0xf4920004
#define RTC_RTCALM_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 almen                :  1 ; /* bits 7:7 */
    cs_uint32 yearen               :  1 ; /* bits 6:6 */
    cs_uint32 monen                :  1 ; /* bits 5:5 */
    cs_uint32 dayen                :  1 ; /* bits 4:4 */
    cs_uint32 dateen               :  1 ; /* bits 3:3 */
    cs_uint32 houren               :  1 ; /* bits 2:2 */
    cs_uint32 minen                :  1 ; /* bits 1:1 */
    cs_uint32 secen                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 secen                :  1 ; /* bits 0:0 */
    cs_uint32 minen                :  1 ; /* bits 1:1 */
    cs_uint32 houren               :  1 ; /* bits 2:2 */
    cs_uint32 dateen               :  1 ; /* bits 3:3 */
    cs_uint32 dayen                :  1 ; /* bits 4:4 */
    cs_uint32 monen                :  1 ; /* bits 5:5 */
    cs_uint32 yearen               :  1 ; /* bits 6:6 */
    cs_uint32 almen                :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_RTCALM_t;





#define RTC_ALMSEC                               0xf4920008
#define RTC_ALMSEC_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 secdata              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 secdata              :  7 ; /* bits 6:0 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMSEC_t;





#define RTC_ALMMIN                               0xf492000c
#define RTC_ALMMIN_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 mindata              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mindata              :  7 ; /* bits 6:0 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMMIN_t;





#define RTC_ALMHOUR                              0xf4920010
#define RTC_ALMHOUR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 hourdata             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hourdata             :  6 ; /* bits 5:0 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMHOUR_t;





#define RTC_ALMDATE                              0xf4920014
#define RTC_ALMDATE_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 datedata             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 datedata             :  6 ; /* bits 5:0 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMDATE_t;





#define RTC_ALMDAY                               0xf4920018
#define RTC_ALMDAY_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  5 ; /* bits 7:3 */
    cs_uint32 daydata              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 daydata              :  3 ; /* bits 2:0 */
    cs_uint32 reserved             :  5 ; /* bits 7:3 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMDAY_t;





#define RTC_ALMMON                               0xf492001c
#define RTC_ALMMON_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  3 ; /* bits 7:5 */
    cs_uint32 mondata              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mondata              :  5 ; /* bits 4:0 */
    cs_uint32 reserved             :  3 ; /* bits 7:5 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMMON_t;





#define RTC_ALMYEAR                              0xf4920020
#define RTC_ALMYEAR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 yeardata             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 yeardata             : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_ALMYEAR_t;





#define RTC_BCDSEC                               0xf4920024
#define RTC_BCDSEC_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 secdata              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 secdata              :  7 ; /* bits 6:0 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDSEC_t;





#define RTC_BCDMIN                               0xf4920028
#define RTC_BCDMIN_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 mindata              :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mindata              :  7 ; /* bits 6:0 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDMIN_t;





#define RTC_BCDHOUR                              0xf492002c
#define RTC_BCDHOUR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 hourdata             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 hourdata             :  6 ; /* bits 5:0 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDHOUR_t;





#define RTC_BCDDATE                              0xf4920030
#define RTC_BCDDATE_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 datedata             :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 datedata             :  6 ; /* bits 5:0 */
    cs_uint32 reserved             :  2 ; /* bits 7:6 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDDATE_t;





#define RTC_BCDDAY                               0xf4920034
#define RTC_BCDDAY_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  5 ; /* bits 7:3 */
    cs_uint32 daydata              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 daydata              :  3 ; /* bits 2:0 */
    cs_uint32 reserved             :  5 ; /* bits 7:3 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDDAY_t;





#define RTC_BCDMON                               0xf4920038
#define RTC_BCDMON_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  3 ; /* bits 7:5 */
    cs_uint32 mondata              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mondata              :  5 ; /* bits 4:0 */
    cs_uint32 reserved             :  3 ; /* bits 7:5 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDMON_t;





#define RTC_BCDYEAR                              0xf492003c
#define RTC_BCDYEAR_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 yeardata             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 yeardata             : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_BCDYEAR_t;





#define RTC_RTCIM                                0xf4920040
#define RTC_RTCIM_dft                            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 primode              :  1 ; /* bits 6:6 */
    cs_uint32 pes                  :  3 ; /* bits 5:3 */
    cs_uint32 peimode              :  1 ; /* bits 2:2 */
    cs_uint32 intmode              :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 intmode              :  2 ; /* bits 1:0 */
    cs_uint32 peimode              :  1 ; /* bits 2:2 */
    cs_uint32 pes                  :  3 ; /* bits 5:3 */
    cs_uint32 primode              :  1 ; /* bits 6:6 */
    cs_uint32 reserved             :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_RTCIM_t;





#define RTC_RTCPEND                              0xf4920044
#define RTC_RTCPEND_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 pend                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pend                 :  1 ; /* bits 0:0 */
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_RTCPEND_t;





#define RTC_PRIPEND                              0xf4920048
#define RTC_PRIPEND_dft                          0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 pend                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pend                 :  1 ; /* bits 0:0 */
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_PRIPEND_t;





#define RTC_WKUPPEND                             0xf492004c
#define RTC_WKUPPEND_dft                         0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 wkuppend             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wkuppend             :  1 ; /* bits 0:0 */
    cs_uint32 reserved             :  7 ; /* bits 7:1 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RTC_WKUPPEND_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* RTC */

typedef struct {
  RTC_RTCON_t                              RTCON;                         /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  RTC_RTCALM_t                             RTCALM;                        /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  RTC_ALMSEC_t                             ALMSEC;                        /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  RTC_ALMMIN_t                             ALMMIN;                        /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  RTC_ALMHOUR_t                            ALMHOUR;                       /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  RTC_ALMDATE_t                            ALMDATE;                       /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  RTC_ALMDAY_t                             ALMDAY;                        /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  RTC_ALMMON_t                             ALMMON;                        /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  RTC_ALMYEAR_t                            ALMYEAR;                       /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  RTC_BCDSEC_t                             BCDSEC;                        /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  RTC_BCDMIN_t                             BCDMIN;                        /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  RTC_BCDHOUR_t                            BCDHOUR;                       /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  RTC_BCDDATE_t                            BCDDATE;                       /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  RTC_BCDDAY_t                             BCDDAY;                        /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  RTC_BCDMON_t                             BCDMON;                        /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  RTC_BCDYEAR_t                            BCDYEAR;                       /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  RTC_RTCIM_t                              RTCIM;                         /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  RTC_RTCPEND_t                            RTCPEND;                       /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  RTC_PRIPEND_t                            PRIPEND;                       /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  RTC_WKUPPEND_t                           WKUPPEND;                      /* addr: 0x0000004c */ 
} RTC_t;

  

/*
 * CIR_PWRCTRL
 */
  
  
/*
 * CIR
 */
  



#define CIR_PWRCTRL_CIR_ID                       0xf4921000
#define CIR_PWRCTRL_CIR_ID_dft                   0x00010401




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cir_dev_id           : 24 ; /* bits 31:8 */
    cs_uint32 cir_rev_id           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_rev_id           :  8 ; /* bits 7:0 */
    cs_uint32 cir_dev_id           : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_ID_t;





#define CIR_PWRCTRL_CIR_RXCTRL0                  0xf4921004
#define CIR_PWRCTRL_CIR_RXCTRL0_dft              0x3480f736




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 baud_div             : 16 ; /* bits 31:16 */
    cs_uint32 head_hi_t            :  4 ; /* bits 15:12 */
    cs_uint32 head_lo_t            :  4 ; /* bits 11:8 */
    cs_uint32 reserved_7           :  1 ; /* bits 7:7 */
    cs_uint32 rc5_extend           :  1 ; /* bits 6:6 */
    cs_uint32 rc5_stopBit_en       :  1 ; /* bits 5:5 */
    cs_uint32 cir_protocol         :  1 ; /* bits 4:4 */
    cs_uint32 reserved_3           :  1 ; /* bits 3:3 */
    cs_uint32 pos                  :  1 ; /* bits 2:2 */
    cs_uint32 demod_en             :  1 ; /* bits 1:1 */
    cs_uint32 fst_por_ok           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 fst_por_ok           :  1 ; /* bits 0:0 */
    cs_uint32 demod_en             :  1 ; /* bits 1:1 */
    cs_uint32 pos                  :  1 ; /* bits 2:2 */
    cs_uint32 reserved_3           :  1 ; /* bits 3:3 */
    cs_uint32 cir_protocol         :  1 ; /* bits 4:4 */
    cs_uint32 rc5_stopBit_en       :  1 ; /* bits 5:5 */
    cs_uint32 rc5_extend           :  1 ; /* bits 6:6 */
    cs_uint32 reserved_7           :  1 ; /* bits 7:7 */
    cs_uint32 head_lo_t            :  4 ; /* bits 11:8 */
    cs_uint32 head_hi_t            :  4 ; /* bits 15:12 */
    cs_uint32 baud_div             : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_RXCTRL0_t;





#define CIR_PWRCTRL_CIR_RXCTRL1                  0xf4921008
#define CIR_PWRCTRL_CIR_RXCTRL1_dft              0x0000001f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 pwrKeyIRQCpu         :  1 ; /* bits 7:7 */
    cs_uint32 data_compare         :  1 ; /* bits 6:6 */
    cs_uint32 data_len_b           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data_len_b           :  6 ; /* bits 5:0 */
    cs_uint32 data_compare         :  1 ; /* bits 6:6 */
    cs_uint32 pwrKeyIRQCpu         :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_RXCTRL1_t;





#define CIR_PWRCTRL_CIR_INT_STATUS               0xf492100c
#define CIR_PWRCTRL_CIR_INT_STATUS_dft           0x00000008




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 first_por            :  1 ; /* bits 3:3 */
    cs_uint32 repeat_sts           :  1 ; /* bits 2:2 */
    cs_uint32 cir_dat_int          :  1 ; /* bits 1:1 */
    cs_uint32 pwrkey_int_sts       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pwrkey_int_sts       :  1 ; /* bits 0:0 */
    cs_uint32 cir_dat_int          :  1 ; /* bits 1:1 */
    cs_uint32 repeat_sts           :  1 ; /* bits 2:2 */
    cs_uint32 first_por            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_INT_STATUS_t;





#define CIR_PWRCTRL_CIR_INT_ENABLE               0xf4921010
#define CIR_PWRCTRL_CIR_INT_ENABLE_dft           0x0000000f




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 first_por            :  1 ; /* bits 3:3 */
    cs_uint32 repeat_int_en        :  1 ; /* bits 2:2 */
    cs_uint32 dat_int_en           :  1 ; /* bits 1:1 */
    cs_uint32 pwrkey_int_en        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pwrkey_int_en        :  1 ; /* bits 0:0 */
    cs_uint32 dat_int_en           :  1 ; /* bits 1:1 */
    cs_uint32 repeat_int_en        :  1 ; /* bits 2:2 */
    cs_uint32 first_por            :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_INT_ENABLE_t;





#define CIR_PWRCTRL_CIR_RXDATA                   0xf4921014
#define CIR_PWRCTRL_CIR_RXDATA_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data_reg1            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data_reg1            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_RXDATA_t;





#define CIR_PWRCTRL_CIR_RXDATA_EXT               0xf4921018
#define CIR_PWRCTRL_CIR_RXDATA_EXT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 data_reg2            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data_reg2            : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_RXDATA_EXT_t;





#define CIR_PWRCTRL_CIR_PWRKEY                   0xf492101c
#define CIR_PWRCTRL_CIR_PWRKEY_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 pwr_code1            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pwr_code1            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_PWRKEY_t;





#define CIR_PWRCTRL_CIR_PWRKEY_EXT               0xf4921020
#define CIR_PWRCTRL_CIR_PWRKEY_EXT_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 pwr_code2            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 pwr_code2            : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_CIR_PWRKEY_EXT_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* CIR */

typedef struct {
  CIR_PWRCTRL_CIR_ID_t                     ID;                            /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  CIR_PWRCTRL_CIR_RXCTRL0_t                RXCTRL0;                       /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  CIR_PWRCTRL_CIR_RXCTRL1_t                RXCTRL1;                       /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  CIR_PWRCTRL_CIR_INT_STATUS_t             INT_STATUS;                    /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  CIR_PWRCTRL_CIR_INT_ENABLE_t             INT_ENABLE;                    /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  CIR_PWRCTRL_CIR_RXDATA_t                 RXDATA;                        /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  CIR_PWRCTRL_CIR_RXDATA_EXT_t             RXDATA_EXT;                    /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  CIR_PWRCTRL_CIR_PWRKEY_t                 PWRKEY;                        /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  CIR_PWRCTRL_CIR_PWRKEY_EXT_t             PWRKEY_EXT;                    /* addr: 0x00000020 */ 
} CIR_PWRCTRL_CIR_t;

  

/*
 * PWR
 */
  



#define CIR_PWRCTRL_PWR_CTRL0                    0xf4921024
#define CIR_PWRCTRL_PWR_CTRL0_dft                0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 reserved             :  6 ; /* bits 7:2 */
    cs_uint32 shut_dn_count        :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 shut_dn_count        :  2 ; /* bits 1:0 */
    cs_uint32 reserved             :  6 ; /* bits 7:2 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_PWR_CTRL0_t;





#define CIR_PWRCTRL_PWR_CTRL1                    0xf4921028
#define CIR_PWRCTRL_PWR_CTRL1_dft                0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 pwr_int_clear        :  1 ; /* bits 2:2 */
    cs_uint32 sysInitFinish        :  1 ; /* bits 1:1 */
    cs_uint32 swShutdnEn           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 swShutdnEn           :  1 ; /* bits 0:0 */
    cs_uint32 sysInitFinish        :  1 ; /* bits 1:1 */
    cs_uint32 pwr_int_clear        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_PWR_CTRL1_t;





#define CIR_PWRCTRL_PWR_INT_STATUS               0xf492102c
#define CIR_PWRCTRL_PWR_INT_STATUS_dft           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 push_btn_wake        :  1 ; /* bits 2:2 */
    cs_uint32 rtc_wake             :  1 ; /* bits 1:1 */
    cs_uint32 cir_pwr_on           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_pwr_on           :  1 ; /* bits 0:0 */
    cs_uint32 rtc_wake             :  1 ; /* bits 1:1 */
    cs_uint32 push_btn_wake        :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_PWR_INT_STATUS_t;





#define CIR_PWRCTRL_PWR_INT_ENABLE               0xf4921030
#define CIR_PWRCTRL_PWR_INT_ENABLE_dft           0x00000007




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 push_btn_wake_en     :  1 ; /* bits 2:2 */
    cs_uint32 rtc_wake_en          :  1 ; /* bits 1:1 */
    cs_uint32 cir_pwr_on_en        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cir_pwr_on_en        :  1 ; /* bits 0:0 */
    cs_uint32 rtc_wake_en          :  1 ; /* bits 1:1 */
    cs_uint32 push_btn_wake_en     :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} CIR_PWRCTRL_PWR_INT_ENABLE_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* PWR */

typedef struct {
  CIR_PWRCTRL_PWR_CTRL0_t                  CTRL0;                         /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  CIR_PWRCTRL_PWR_CTRL1_t                  CTRL1;                         /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  CIR_PWRCTRL_PWR_INT_STATUS_t             INT_STATUS;                    /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  CIR_PWRCTRL_PWR_INT_ENABLE_t             INT_ENABLE;                    /* addr: 0x0000000c */ 
} CIR_PWRCTRL_PWR_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* CIR_PWRCTRL */

typedef struct {
  CIR_PWRCTRL_CIR_t                        CIR;                           /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[19];                   
  CIR_PWRCTRL_PWR_t                        PWR;                           /* addr: 0x00000024 */ 
} CIR_PWRCTRL_t;


/*
 * SPDIF
 */
  



#define SPDIF_DATA                               0xf4927000
#define SPDIF_DATA_dft                           0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 pac                  :  2 ; /* bits 29:28 */
    cs_uint32 fp                   :  1 ; /* bits 27:27 */
    cs_uint32 c                    :  1 ; /* bits 26:26 */
    cs_uint32 u                    :  1 ; /* bits 25:25 */
    cs_uint32 v                    :  1 ; /* bits 24:24 */
    cs_uint32 audio_data           : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 audio_data           : 24 ; /* bits 23:0 */
    cs_uint32 v                    :  1 ; /* bits 24:24 */
    cs_uint32 u                    :  1 ; /* bits 25:25 */
    cs_uint32 c                    :  1 ; /* bits 26:26 */
    cs_uint32 fp                   :  1 ; /* bits 27:27 */
    cs_uint32 pac                  :  2 ; /* bits 29:28 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_DATA_t;





#define SPDIF_CONFIGURATION                      0xf4927004
#define SPDIF_CONFIGURATION_dft                  0x00110000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 burst_repetition_period : 12 ; /* bits 31:20 */
    cs_uint32 sf                   :  2 ; /* bits 19:18 */
    cs_uint32 pcm                  :  1 ; /* bits 17:17 */
    cs_uint32 vv                   :  1 ; /* bits 16:16 */
    cs_uint32 pause_repetition_period :  6 ; /* bits 15:10 */
    cs_uint32 data_enable          :  1 ; /* bits 9:9 */
    cs_uint32 enable               :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 pd                   :  1 ; /* bits 4:4 */
    cs_uint32 cd                   :  1 ; /* bits 3:3 */
    cs_uint32 ud                   :  1 ; /* bits 2:2 */
    cs_uint32 vd                   :  1 ; /* bits 1:1 */
    cs_uint32 bsd                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bsd                  :  1 ; /* bits 0:0 */
    cs_uint32 vd                   :  1 ; /* bits 1:1 */
    cs_uint32 ud                   :  1 ; /* bits 2:2 */
    cs_uint32 cd                   :  1 ; /* bits 3:3 */
    cs_uint32 pd                   :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  3 ;
    cs_uint32 enable               :  1 ; /* bits 8:8 */
    cs_uint32 data_enable          :  1 ; /* bits 9:9 */
    cs_uint32 pause_repetition_period :  6 ; /* bits 15:10 */
    cs_uint32 vv                   :  1 ; /* bits 16:16 */
    cs_uint32 pcm                  :  1 ; /* bits 17:17 */
    cs_uint32 sf                   :  2 ; /* bits 19:18 */
    cs_uint32 burst_repetition_period : 12 ; /* bits 31:20 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CONFIGURATION_t;





#define SPDIF_IRQ_INTERRUPT                      0xf4927008
#define SPDIF_IRQ_INTERRUPT_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               : 14 ;
    cs_uint32 bei                  :  1 ; /* bits 17:17 */
    cs_uint32 ffi                  :  1 ; /* bits 16:16 */
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 bee                  :  1 ; /* bits 1:1 */
    cs_uint32 ffe                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ffe                  :  1 ; /* bits 0:0 */
    cs_uint32 bee                  :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 ffi                  :  1 ; /* bits 16:16 */
    cs_uint32 bei                  :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_IRQ_INTERRUPT_t;





#define SPDIF_IP_CORE_VER                        0xf4927010
#define SPDIF_IP_CORE_VER_dft                    0xda0f0300




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 core_family          :  8 ; /* bits 31:24 */
    cs_uint32 core_id              :  8 ; /* bits 23:16 */
    cs_uint32 core_ver             :  8 ; /* bits 15:8 */
    cs_uint32 core_rel             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 core_rel             :  8 ; /* bits 7:0 */
    cs_uint32 core_ver             :  8 ; /* bits 15:8 */
    cs_uint32 core_id              :  8 ; /* bits 23:16 */
    cs_uint32 core_family          :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_IP_CORE_VER_t;





#define SPDIF_NUM_SAMP                           0xf4927014
#define SPDIF_NUM_SAMP_dft                       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 empty                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 num_samp             : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 num_samp             : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 empty                :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_NUM_SAMP_t;





#define SPDIF_FIFO_MAX_LEN                       0xf4927018
#define SPDIF_FIFO_MAX_LEN_dft                   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 len                  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 len                  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_FIFO_MAX_LEN_t;





#define SPDIF_FIFO_LOWER_LIMIT                   0xf492701c
#define SPDIF_FIFO_LOWER_LIMIT_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 limit                : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 limit                : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_FIFO_LOWER_LIMIT_t;





#define SPDIF_INTERNAL_MASTER_CLOCK_FREQUENCY    0xf4927020
#define SPDIF_INTERNAL_MASTER_CLOCK_FREQUENCY_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cs                   :  1 ; /* bits 31:31 */
    cs_uint32 i                    : 11 ; /* bits 30:20 */
    cs_uint32 q                    : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 q                    : 20 ; /* bits 19:0 */
    cs_uint32 i                    : 11 ; /* bits 30:20 */
    cs_uint32 cs                   :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_INTERNAL_MASTER_CLOCK_FREQUENCY_t;





#define SPDIF_CHANNEL1_STATUS0                   0xf4927080
#define SPDIF_CHANNEL1_STATUS0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS0_t;





#define SPDIF_CHANNEL1_STATUS1                   0xf4927084
#define SPDIF_CHANNEL1_STATUS1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS1_t;





#define SPDIF_CHANNEL1_STATUS2                   0xf4927088
#define SPDIF_CHANNEL1_STATUS2_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS2_t;





#define SPDIF_CHANNEL1_STATUS3                   0xf492708c
#define SPDIF_CHANNEL1_STATUS3_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS3_t;





#define SPDIF_CHANNEL1_STATUS4                   0xf4927090
#define SPDIF_CHANNEL1_STATUS4_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS4_t;





#define SPDIF_CHANNEL1_STATUS5                   0xf4927094
#define SPDIF_CHANNEL1_STATUS5_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_STATUS5_t;





#define SPDIF_CHANNEL2_STATUS0                   0xf49270a0
#define SPDIF_CHANNEL2_STATUS0_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS0_t;





#define SPDIF_CHANNEL2_STATUS1                   0xf49270a4
#define SPDIF_CHANNEL2_STATUS1_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS1_t;





#define SPDIF_CHANNEL2_STATUS2                   0xf49270a8
#define SPDIF_CHANNEL2_STATUS2_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS2_t;





#define SPDIF_CHANNEL2_STATUS3                   0xf49270ac
#define SPDIF_CHANNEL2_STATUS3_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS3_t;





#define SPDIF_CHANNEL2_STATUS4                   0xf49270b0
#define SPDIF_CHANNEL2_STATUS4_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS4_t;





#define SPDIF_CHANNEL2_STATUS5                   0xf49270b4
#define SPDIF_CHANNEL2_STATUS5_dft               0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 stat                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_STATUS5_t;





#define SPDIF_CHANNEL1_USER0                     0xf49270c0
#define SPDIF_CHANNEL1_USER0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER0_t;





#define SPDIF_CHANNEL1_USER1                     0xf49270c4
#define SPDIF_CHANNEL1_USER1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER1_t;





#define SPDIF_CHANNEL1_USER2                     0xf49270c8
#define SPDIF_CHANNEL1_USER2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER2_t;





#define SPDIF_CHANNEL1_USER3                     0xf49270cc
#define SPDIF_CHANNEL1_USER3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER3_t;





#define SPDIF_CHANNEL1_USER4                     0xf49270d0
#define SPDIF_CHANNEL1_USER4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER4_t;





#define SPDIF_CHANNEL1_USER5                     0xf49270d4
#define SPDIF_CHANNEL1_USER5_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL1_USER5_t;





#define SPDIF_CHANNEL2_USER0                     0xf49270e0
#define SPDIF_CHANNEL2_USER0_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER0_t;





#define SPDIF_CHANNEL2_USER1                     0xf49270e4
#define SPDIF_CHANNEL2_USER1_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER1_t;





#define SPDIF_CHANNEL2_USER2                     0xf49270e8
#define SPDIF_CHANNEL2_USER2_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER2_t;





#define SPDIF_CHANNEL2_USER3                     0xf49270ec
#define SPDIF_CHANNEL2_USER3_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER3_t;





#define SPDIF_CHANNEL2_USER4                     0xf49270f0
#define SPDIF_CHANNEL2_USER4_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER4_t;





#define SPDIF_CHANNEL2_USER5                     0xf49270f4
#define SPDIF_CHANNEL2_USER5_dft                 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 user                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} SPDIF_CHANNEL2_USER5_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* SPDIF */

typedef struct {
  SPDIF_DATA_t                             DATA;                          /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  SPDIF_CONFIGURATION_t                    CONFIGURATION;                 /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  SPDIF_IRQ_INTERRUPT_t                    IRQ_INTERRUPT;                 /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[7];                    
  SPDIF_IP_CORE_VER_t                      IP_CORE_VER;                   /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd4[3];                    
  SPDIF_NUM_SAMP_t                         NUM_SAMP;                      /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd5[3];                    
  SPDIF_FIFO_MAX_LEN_t                     FIFO_MAX_LEN;                  /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd6[3];                    
  SPDIF_FIFO_LOWER_LIMIT_t                 FIFO_LOWER_LIMIT;              /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd7[3];                    
  SPDIF_INTERNAL_MASTER_CLOCK_FREQUENCY_t  INTERNAL_MASTER_CLOCK_FREQUENCY; /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd8[95];                   
  SPDIF_CHANNEL1_STATUS0_t                 CHANNEL1_STATUS0;              /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd9[3];                    
  SPDIF_CHANNEL1_STATUS1_t                 CHANNEL1_STATUS1;              /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd10[3];                   
  SPDIF_CHANNEL1_STATUS2_t                 CHANNEL1_STATUS2;              /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd11[3];                   
  SPDIF_CHANNEL1_STATUS3_t                 CHANNEL1_STATUS3;              /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd12[3];                   
  SPDIF_CHANNEL1_STATUS4_t                 CHANNEL1_STATUS4;              /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd13[3];                   
  SPDIF_CHANNEL1_STATUS5_t                 CHANNEL1_STATUS5;              /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd14[11];                  
  SPDIF_CHANNEL2_STATUS0_t                 CHANNEL2_STATUS0;              /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd15[3];                   
  SPDIF_CHANNEL2_STATUS1_t                 CHANNEL2_STATUS1;              /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd16[3];                   
  SPDIF_CHANNEL2_STATUS2_t                 CHANNEL2_STATUS2;              /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd17[3];                   
  SPDIF_CHANNEL2_STATUS3_t                 CHANNEL2_STATUS3;              /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd18[3];                   
  SPDIF_CHANNEL2_STATUS4_t                 CHANNEL2_STATUS4;              /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd19[3];                   
  SPDIF_CHANNEL2_STATUS5_t                 CHANNEL2_STATUS5;              /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd20[11];                  
  SPDIF_CHANNEL1_USER0_t                   CHANNEL1_USER0;                /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd21[3];                   
  SPDIF_CHANNEL1_USER1_t                   CHANNEL1_USER1;                /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd22[3];                   
  SPDIF_CHANNEL1_USER2_t                   CHANNEL1_USER2;                /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd23[3];                   
  SPDIF_CHANNEL1_USER3_t                   CHANNEL1_USER3;                /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd24[3];                   
  SPDIF_CHANNEL1_USER4_t                   CHANNEL1_USER4;                /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd25[3];                   
  SPDIF_CHANNEL1_USER5_t                   CHANNEL1_USER5;                /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd26[11];                  
  SPDIF_CHANNEL2_USER0_t                   CHANNEL2_USER0;                /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd27[3];                   
  SPDIF_CHANNEL2_USER1_t                   CHANNEL2_USER1;                /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd28[3];                   
  SPDIF_CHANNEL2_USER2_t                   CHANNEL2_USER2;                /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd29[3];                   
  SPDIF_CHANNEL2_USER3_t                   CHANNEL2_USER3;                /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd30[3];                   
  SPDIF_CHANNEL2_USER4_t                   CHANNEL2_USER4;                /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd31[3];                   
  SPDIF_CHANNEL2_USER5_t                   CHANNEL2_USER5;                /* addr: 0x000000f4 */ 
} SPDIF_t;

  

/*
 * ROMOTP
 */
  



#define OTP_CTL                                  0xf5008800
#define OTP_CTL_dft                              0x161240c8




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 NP2                  :  8 ; /* bits 31:24 */
    cs_uint32 NP1                  :  6 ; /* bits 23:18 */
    cs_uint32 AXIOPEN              :  1 ; /* bits 17:17 */
    cs_uint32 AXIPREVENT           :  1 ; /* bits 16:16 */
    cs_uint32 TZPCDECPROT_RTC      :  1 ; /* bits 15:15 */
    cs_uint32 TZPCDECPROT_QMPB     :  1 ; /* bits 14:14 */
    cs_uint32 TZPCDECPROT_SPARE1   :  1 ; /* bits 13:13 */
    cs_uint32 TZPCDECPROT_SPARE0   :  1 ; /* bits 12:12 */
    cs_uint32 CLKCNT               : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CLKCNT               : 12 ; /* bits 11:0 */
    cs_uint32 TZPCDECPROT_SPARE0   :  1 ; /* bits 12:12 */
    cs_uint32 TZPCDECPROT_SPARE1   :  1 ; /* bits 13:13 */
    cs_uint32 TZPCDECPROT_QMPB     :  1 ; /* bits 14:14 */
    cs_uint32 TZPCDECPROT_RTC      :  1 ; /* bits 15:15 */
    cs_uint32 AXIPREVENT           :  1 ; /* bits 16:16 */
    cs_uint32 AXIOPEN              :  1 ; /* bits 17:17 */
    cs_uint32 NP1                  :  6 ; /* bits 23:18 */
    cs_uint32 NP2                  :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} OTP_CTL_t;





#define OTP_PROG                                 0xf5008804
#define OTP_PROG_dft                             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 SEL                  :  3 ; /* bits 30:28 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 LOCK                 :  1 ; /* bits 25:25 */
    cs_uint32 FAIL                 :  1 ; /* bits 24:24 */
    cs_uint32 DATA                 :  1 ; /* bits 23:23 */
    cs_uint32 MAXADDR              : 10 ; /* bits 22:13 */
    cs_uint32 ADDR                 : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ADDR                 : 13 ; /* bits 12:0 */
    cs_uint32 MAXADDR              : 10 ; /* bits 22:13 */
    cs_uint32 DATA                 :  1 ; /* bits 23:23 */
    cs_uint32 FAIL                 :  1 ; /* bits 24:24 */
    cs_uint32 LOCK                 :  1 ; /* bits 25:25 */
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 SEL                  :  3 ; /* bits 30:28 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} OTP_PROG_t;

#define     SEL_READ                                      0x0
#define     SEL_WRITE                                     0x1
#define     SEL_ZERO                                      0x2
#define     SEL_BLANKCHECK                                0x3
#define     SEL_TESTDEC                                   0x4
#define     SEL_WRTEST                                    0x5
#define     SEL_PGMLOCK                                   0x6
#define     SEL_RST                                       0x7


    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* ROMOTP */

typedef struct {
  OTP_CTL_t                                CTL;                           /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  OTP_PROG_t                               PROG;                          /* addr: 0x00000004 */ 
} ROMOTP_t;

  

/*
 * CRYPTO
 */
  



#define CRYPTO_REG_INTE_0_0                      0xf6600000
#define CRYPTO_REG_INTE_0_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_0_0_t;





#define CRYPTO_REG_INTR_0_0                      0xf6600004
#define CRYPTO_REG_INTR_0_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_0_0_t;





#define CRYPTO_REG_INTE_0_1                      0xf6640000
#define CRYPTO_REG_INTE_0_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_0_1_t;





#define CRYPTO_REG_INTR_0_1                      0xf6640004
#define CRYPTO_REG_INTR_0_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_0_1_t;





#define CRYPTO_REG_INTE_0_2                      0xf6680000
#define CRYPTO_REG_INTE_0_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_0_2_t;





#define CRYPTO_REG_INTR_0_2                      0xf6680004
#define CRYPTO_REG_INTR_0_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_0_2_t;





#define CRYPTO_REG_INTE_1_0                      0xf6700000
#define CRYPTO_REG_INTE_1_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_1_0_t;





#define CRYPTO_REG_INTR_1_0                      0xf6700004
#define CRYPTO_REG_INTR_1_0_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_1_0_t;





#define CRYPTO_REG_INTE_1_1                      0xf6740000
#define CRYPTO_REG_INTE_1_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_1_1_t;





#define CRYPTO_REG_INTR_1_1                      0xf6740004
#define CRYPTO_REG_INTR_1_1_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_1_1_t;





#define CRYPTO_REG_INTE_1_2                      0xf6780000
#define CRYPTO_REG_INTE_1_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0_intE            :  1 ; /* bits 0:0 */
    cs_uint32 CMD1_intE            :  1 ; /* bits 1:1 */
    cs_uint32 CMD2_intE            :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT_intE            :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA_intE         :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL_intE            :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTE_1_2_t;





#define CRYPTO_REG_INTR_1_2                      0xf6780004
#define CRYPTO_REG_INTR_1_2_dft                  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CMD0                 :  1 ; /* bits 0:0 */
    cs_uint32 CMD1                 :  1 ; /* bits 1:1 */
    cs_uint32 CMD2                 :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 STAT                 :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd2               :  3 ;
    cs_uint32 RC4_DMA              :  1 ; /* bits 8:8 */
    cs_uint32 rsrvd3               : 22 ;
    cs_uint32 GLBL                 :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} CRYPTO_REG_INTR_1_2_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* CRYPTO */

typedef struct {
  CRYPTO_REG_INTE_0_0_t                    INTE_0_0;                      /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  CRYPTO_REG_INTR_0_0_t                    INTR_0_0;                      /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[262139];               
  CRYPTO_REG_INTE_0_1_t                    INTE_0_1;                      /* addr: 0x00040000 */ 
  cs_uint32                                rsrvd3[3];                    
  CRYPTO_REG_INTR_0_1_t                    INTR_0_1;                      /* addr: 0x00040004 */ 
  cs_uint32                                rsrvd4[262139];               
  CRYPTO_REG_INTE_0_2_t                    INTE_0_2;                      /* addr: 0x00080000 */ 
  cs_uint32                                rsrvd5[3];                    
  CRYPTO_REG_INTR_0_2_t                    INTR_0_2;                      /* addr: 0x00080004 */ 
  cs_uint32                                rsrvd6[524283];               
  CRYPTO_REG_INTE_1_0_t                    INTE_1_0;                      /* addr: 0x00100000 */ 
  cs_uint32                                rsrvd7[3];                    
  CRYPTO_REG_INTR_1_0_t                    INTR_1_0;                      /* addr: 0x00100004 */ 
  cs_uint32                                rsrvd8[262139];               
  CRYPTO_REG_INTE_1_1_t                    INTE_1_1;                      /* addr: 0x00140000 */ 
  cs_uint32                                rsrvd9[3];                    
  CRYPTO_REG_INTR_1_1_t                    INTR_1_1;                      /* addr: 0x00140004 */ 
  cs_uint32                                rsrvd10[262139];              
  CRYPTO_REG_INTE_1_2_t                    INTE_1_2;                      /* addr: 0x00180000 */ 
  cs_uint32                                rsrvd11[3];                   
  CRYPTO_REG_INTR_1_2_t                    INTR_1_2;                      /* addr: 0x00180004 */ 
} CRYPTO_t;

  

/*
 * RECIRC_TOP
 */
  
  
/*
 * RECIR
 */
  
  
/*
 * R_DMA
 */
  



#define RECIRC_TOP_RECIR_R_DMA_RXDMA_CONTROL     0xf6800000
#define RECIRC_TOP_RECIR_R_DMA_RXDMA_CONTROL_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 rx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 rx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXDMA_CONTROL_t;





#define RECIRC_TOP_RECIR_R_DMA_TXDMA_CONTROL     0xf6800004
#define RECIRC_TOP_RECIR_R_DMA_TXDMA_CONTROL_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 tx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_dma_enable        :  1 ; /* bits 0:0 */
    cs_uint32 tx_check_own         :  1 ; /* bits 1:1 */
    cs_uint32 tx_burst_len         :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXDMA_CONTROL_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_CONTROL      0xf6800008
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_CONTROL_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq0_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_CONTROL_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_CONTROL      0xf680000c
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_CONTROL_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq1_en              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_en              :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_CONTROL_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_READ  0xf6800010
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_READ_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_READ_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_READ  0xf6800014
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_READ_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_drop_msb_clr :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_READ_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_READ  0xf6800018
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_READ_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq0_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_READ_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_READ  0xf680001c
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_READ_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 txq1_msb_clr         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_msb_clr         :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_READ_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_BASE_DEPTH   0xf6800020
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_BASE_DEPTH_dft 0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_BASE_DEPTH_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_BASE_DEPTH   0xf6800024
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_BASE_DEPTH_dft 0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_BASE_DEPTH_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_WPTR         0xf6800028
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_WPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_WPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_RPTR         0xf680002c
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_RPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_RPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_WPTR         0xf6800030
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_WPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_WPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_RPTR         0xf6800034
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_RPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_RPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_BASE_DEPTH   0xf6800038
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_BASE_DEPTH_dft 0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_BASE_DEPTH_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_BASE_DEPTH   0xf680003c
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_BASE_DEPTH_dft 0x00000003




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 base                 : 28 ; /* bits 31:4 */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                :  4 ; /* bits 3:0 */
    cs_uint32 base                 : 28 ; /* bits 31:4 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_BASE_DEPTH_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_WPTR         0xf6800040
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_WPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_WPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_RPTR         0xf6800044
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_RPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_RPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_WPTR         0xf6800048
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_WPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_WPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_RPTR         0xf680004c
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_RPTR_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 index                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 index                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_RPTR_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_THRESHOLD 0xf6800050
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_THRESHOLD_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_THRESHOLD_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_THRESHOLD 0xf6800054
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_THRESHOLD_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 19 ;
    cs_uint32 depth                : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 depth                : 13 ; /* bits 12:0 */
    cs_uint32 rsrvd1               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_THRESHOLD_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT       0xf6800058
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT       0xf680005c
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_DROP_PKTCNT 0xf6800060
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_DROP_PKTCNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_DROP_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_DROP_PKTCNT 0xf6800064
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_DROP_PKTCNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_DROP_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT       0xf6800068
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT       0xf680006c
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 counter              : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 counter              : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_START        0xf6800070
#define RECIRC_TOP_RECIR_R_DMA_BMC0_START_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_start           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_start           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_START_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_SOURCE_ADDR  0xf6800074
#define RECIRC_TOP_RECIR_R_DMA_BMC0_SOURCE_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_SOURCE_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_DESTINATION_ADDR 0xf6800078
#define RECIRC_TOP_RECIR_R_DMA_BMC0_DESTINATION_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_DESTINATION_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_COPY_BYTE    0xf680007c
#define RECIRC_TOP_RECIR_R_DMA_BMC0_COPY_BYTE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 size                 : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 size                 : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_COPY_BYTE_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_START        0xf6800080
#define RECIRC_TOP_RECIR_R_DMA_BMC1_START_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_start           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_start           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_START_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_SOURCE_ADDR  0xf6800084
#define RECIRC_TOP_RECIR_R_DMA_BMC1_SOURCE_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_SOURCE_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_DESTINATION_ADDR 0xf6800088
#define RECIRC_TOP_RECIR_R_DMA_BMC1_DESTINATION_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_DESTINATION_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_COPY_BYTE    0xf680008c
#define RECIRC_TOP_RECIR_R_DMA_BMC1_COPY_BYTE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 size                 : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 size                 : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_COPY_BYTE_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_START        0xf6800090
#define RECIRC_TOP_RECIR_R_DMA_BMC2_START_dft    0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc2_start           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc2_start           :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_START_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_SOURCE_ADDR  0xf6800094
#define RECIRC_TOP_RECIR_R_DMA_BMC2_SOURCE_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_SOURCE_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_DESTINATION_ADDR 0xf6800098
#define RECIRC_TOP_RECIR_R_DMA_BMC2_DESTINATION_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_DESTINATION_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_COPY_BYTE    0xf680009c
#define RECIRC_TOP_RECIR_R_DMA_BMC2_COPY_BYTE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 size                 : 30 ; /* bits 29:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 size                 : 30 ; /* bits 29:0 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_COPY_BYTE_t;





#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_0 0xf68000a0
#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 BMC2_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 BMC2_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_0_t;





#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_0 0xf68000a4
#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 BMC2_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 BMC2_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_0_t;





#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_1 0xf68000a8
#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 BMC2_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi      :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi      :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi      :  1 ; /* bits 2:2 */
    cs_uint32 TXQ0_INTERRUPTi      :  1 ; /* bits 3:3 */
    cs_uint32 TXQ1_INTERRUPTi      :  1 ; /* bits 4:4 */
    cs_uint32 BMC0_INTERRUPTi      :  1 ; /* bits 5:5 */
    cs_uint32 BMC1_INTERRUPTi      :  1 ; /* bits 6:6 */
    cs_uint32 BMC2_INTERRUPTi      :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_RX_READ_DESCi :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DESCi :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DATAi :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_1_t;





#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_1 0xf68000ac
#define RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 BMC2_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 DESC_INTERRUPTi_en   :  1 ; /* bits 0:0 */
    cs_uint32 RXQ0_INTERRUPTi_en   :  1 ; /* bits 1:1 */
    cs_uint32 RXQ1_INTERRUPTi_en   :  1 ; /* bits 2:2 */
    cs_uint32 TXQ0_INTERRUPTi_en   :  1 ; /* bits 3:3 */
    cs_uint32 TXQ1_INTERRUPTi_en   :  1 ; /* bits 4:4 */
    cs_uint32 BMC0_INTERRUPTi_en   :  1 ; /* bits 5:5 */
    cs_uint32 BMC1_INTERRUPTi_en   :  1 ; /* bits 6:6 */
    cs_uint32 BMC2_INTERRUPTi_en   :  1 ; /* bits 7:7 */
    cs_uint32 AXI_INT_RX_READ_DESCi_en :  1 ; /* bits 8:8 */
    cs_uint32 AXI_INT_TX_READ_DESCi_en :  1 ; /* bits 9:9 */
    cs_uint32 AXI_INT_TX_READ_DATAi_en :  1 ; /* bits 10:10 */
    cs_uint32 AXI_INT_RX_WRITE_DESCi_en :  1 ; /* bits 11:11 */
    cs_uint32 AXI_INT_RX_WRITE_DATAi_en :  1 ; /* bits 12:12 */
    cs_uint32 AXI_INT_TX_WRITE_DESCi_en :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_1_t;





#define RECIRC_TOP_RECIR_R_DMA_DESC_INTERRUPT    0xf68000b0
#define RECIRC_TOP_RECIR_R_DMA_DESC_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_des_err           :  1 ; /* bits 0:0 */
    cs_uint32 tx_des_err           :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DESC_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_DESC_INTENABLE    0xf68000b4
#define RECIRC_TOP_RECIR_R_DMA_DESC_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_desc_err_en       :  1 ; /* bits 0:0 */
    cs_uint32 tx_desc_err_en       :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DESC_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_INTERRUPT    0xf68000b8
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ0_INTENABLE    0xf68000bc
#define RECIRC_TOP_RECIR_R_DMA_RXQ0_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq0_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq0_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq0_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq0_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ0_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_INTERRUPT    0xf68000c0
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof             :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full            :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_RXQ1_INTENABLE    0xf68000c4
#define RECIRC_TOP_RECIR_R_DMA_RXQ1_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxq1_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 rxq1_full_en         :  1 ; /* bits 1:1 */
    cs_uint32 rxq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 rxq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rxq1_full_drop_overrun_en :  1 ; /* bits 4:4 */
    cs_uint32 rxq1_full_drop_cntmsb_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RXQ1_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_INTERRUPT    0xf68000c8
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq0_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq0_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq0_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq0_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq0_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ0_INTENABLE    0xf68000cc
#define RECIRC_TOP_RECIR_R_DMA_TXQ0_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq0_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq0_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq0_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq0_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq0_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq0_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ0_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_INTERRUPT    0xf68000d0
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 txq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq1_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq1_eof             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_eof             :  1 ; /* bits 0:0 */
    cs_uint32 txq1_empty           :  1 ; /* bits 1:1 */
    cs_uint32 txq1_overrun         :  1 ; /* bits 2:2 */
    cs_uint32 txq1_cntmsb          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_TXQ1_INTENABLE    0xf68000d4
#define RECIRC_TOP_RECIR_R_DMA_TXQ1_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 txq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 txq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq1_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq1_eof_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txq1_eof_en          :  1 ; /* bits 0:0 */
    cs_uint32 txq1_empty_en        :  1 ; /* bits 1:1 */
    cs_uint32 txq1_overrun_en      :  1 ; /* bits 2:2 */
    cs_uint32 txq1_cntmsb_en       :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TXQ1_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_INTERRUPT    0xf68000d8
#define RECIRC_TOP_RECIR_R_DMA_BMC0_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_fin             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_fin             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC0_INTENABLE    0xf68000dc
#define RECIRC_TOP_RECIR_R_DMA_BMC0_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc0_fin_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc0_fin_en          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC0_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_INTERRUPT    0xf68000e0
#define RECIRC_TOP_RECIR_R_DMA_BMC1_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_fin             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_fin             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC1_INTENABLE    0xf68000e4
#define RECIRC_TOP_RECIR_R_DMA_BMC1_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc1_fin_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc1_fin_en          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC1_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_INTERRUPT    0xf68000e8
#define RECIRC_TOP_RECIR_R_DMA_BMC2_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc2_fin             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc2_fin             :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_DMA_BMC2_INTENABLE    0xf68000ec
#define RECIRC_TOP_RECIR_R_DMA_BMC2_INTENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 bmc2_fin_en          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 bmc2_fin_en          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_BMC2_INTENABLE_t;





#define RECIRC_TOP_RECIR_R_DMA_RX_FDES_ADDR      0xf68000f0
#define RECIRC_TOP_RECIR_R_DMA_RX_FDES_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RX_FDES_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_RX_CDES_ADDR      0xf68000f4
#define RECIRC_TOP_RECIR_R_DMA_RX_CDES_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RX_CDES_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD0      0xf68000f8
#define RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD0_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD0_t;





#define RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD1      0xf68000fc
#define RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD1_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD1_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_FDES_ADDR      0xf6800100
#define RECIRC_TOP_RECIR_R_DMA_TX_FDES_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_fdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_FDES_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_CDES_ADDR      0xf6800104
#define RECIRC_TOP_RECIR_R_DMA_TX_CDES_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_cdaddr            : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_CDES_ADDR_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD0      0xf6800108
#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD0_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD0_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD1      0xf680010c
#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD1_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD1_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD2      0xf6800110
#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD2_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD2_t;





#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD3      0xf6800114
#define RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD3_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 data                 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD3_t;





#define RECIRC_TOP_RECIR_R_DMA_DEBUG_0           0xf6800118
#define RECIRC_TOP_RECIR_R_DMA_DEBUG_0_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd4               :  7 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rxsch_cs             :  4 ; /* bits 3:0 */
    cs_uint32 rxfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 rxbuf_cs             :  2 ; /* bits 9:8 */
    cs_uint32 rsrvd2               :  2 ;
    cs_uint32 rxfer_cs             :  4 ; /* bits 15:12 */
    cs_uint32 rxfout_cs            :  3 ; /* bits 18:16 */
    cs_uint32 rsrvd3               :  1 ;
    cs_uint32 dmarx_cs             :  5 ; /* bits 24:20 */
    cs_uint32 rsrvd4               :  7 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DEBUG_0_t;





#define RECIRC_TOP_RECIR_R_DMA_DEBUG_1           0xf680011c
#define RECIRC_TOP_RECIR_R_DMA_DEBUG_1_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd5               :  5 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 mux_cs               :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 sp_cs                :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 rr1_cs               :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               :  3 ;
    cs_uint32 rr0_cs               :  5 ; /* bits 20:16 */
    cs_uint32 rsrvd4               :  3 ;
    cs_uint32 txfer_cs             :  3 ; /* bits 26:24 */
    cs_uint32 rsrvd5               :  5 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DEBUG_1_t;





#define RECIRC_TOP_RECIR_R_DMA_DEBUG_2           0xf6800120
#define RECIRC_TOP_RECIR_R_DMA_DEBUG_2_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd3               : 19 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 txfout_cs            :  3 ; /* bits 2:0 */
    cs_uint32 rsrvd1               :  1 ;
    cs_uint32 txfin_cs             :  3 ; /* bits 6:4 */
    cs_uint32 rsrvd2               :  1 ;
    cs_uint32 dmatx_cs             :  5 ; /* bits 12:8 */
    cs_uint32 rsrvd3               : 19 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DEBUG_2_t;





#define RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_0       0xf6800124
#define RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_0_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare0           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_0_t;





#define RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_1       0xf6800128
#define RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_1_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 dma_spare1           : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_1_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* R_DMA */

typedef struct {
  RECIRC_TOP_RECIR_R_DMA_RXDMA_CONTROL_t   RXDMA_CONTROL;                 /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  RECIRC_TOP_RECIR_R_DMA_TXDMA_CONTROL_t   TXDMA_CONTROL;                 /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  RECIRC_TOP_RECIR_R_DMA_TXQ0_CONTROL_t    TXQ0_CONTROL;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  RECIRC_TOP_RECIR_R_DMA_TXQ1_CONTROL_t    TXQ1_CONTROL;                  /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_READ_t RXQ0_PKTCNT_READ;              /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_READ_t RXQ1_PKTCNT_READ;              /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_READ_t TXQ0_PKTCNT_READ;              /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_READ_t TXQ1_PKTCNT_READ;              /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  RECIRC_TOP_RECIR_R_DMA_RXQ0_BASE_DEPTH_t RXQ0_BASE_DEPTH;               /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  RECIRC_TOP_RECIR_R_DMA_RXQ1_BASE_DEPTH_t RXQ1_BASE_DEPTH;               /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_WPTR_t       RXQ0_WPTR;                     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_RPTR_t       RXQ0_RPTR;                     /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_WPTR_t       RXQ1_WPTR;                     /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_RPTR_t       RXQ1_RPTR;                     /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_BASE_DEPTH_t TXQ0_BASE_DEPTH;               /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_BASE_DEPTH_t TXQ1_BASE_DEPTH;               /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_WPTR_t       TXQ0_WPTR;                     /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_RPTR_t       TXQ0_RPTR;                     /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_WPTR_t       TXQ1_WPTR;                     /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_RPTR_t       TXQ1_RPTR;                     /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_THRESHOLD_t RXQ0_FULL_THRESHOLD;           /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_THRESHOLD_t RXQ1_FULL_THRESHOLD;           /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_PKTCNT_t     RXQ0_PKTCNT;                   /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_PKTCNT_t     RXQ1_PKTCNT;                   /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_FULL_DROP_PKTCNT_t RXQ0_FULL_DROP_PKTCNT;         /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_FULL_DROP_PKTCNT_t RXQ1_FULL_DROP_PKTCNT;         /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_PKTCNT_t     TXQ0_PKTCNT;                   /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_PKTCNT_t     TXQ1_PKTCNT;                   /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_START_t      BMC0_START;                    /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_SOURCE_ADDR_t BMC0_SOURCE_ADDR;              /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_DESTINATION_ADDR_t BMC0_DESTINATION_ADDR;         /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_COPY_BYTE_t  BMC0_COPY_BYTE;                /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_START_t      BMC1_START;                    /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_SOURCE_ADDR_t BMC1_SOURCE_ADDR;              /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_DESTINATION_ADDR_t BMC1_DESTINATION_ADDR;         /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_COPY_BYTE_t  BMC1_COPY_BYTE;                /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_START_t      BMC2_START;                    /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_SOURCE_ADDR_t BMC2_SOURCE_ADDR;              /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_DESTINATION_ADDR_t BMC2_DESTINATION_ADDR;         /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_COPY_BYTE_t  BMC2_COPY_BYTE;                /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_0_t RECIR_DMA_INTERRUPT_0;         /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_0_t RECIR_DMA_INTENABLE_0;         /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTERRUPT_1_t RECIR_DMA_INTERRUPT_1;         /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  RECIRC_TOP_RECIR_R_DMA_RECIR_DMA_INTENABLE_1_t RECIR_DMA_INTENABLE_1;         /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  RECIRC_TOP_RECIR_R_DMA_DESC_INTERRUPT_t  DESC_INTERRUPT;                /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  RECIRC_TOP_RECIR_R_DMA_DESC_INTENABLE_t  DESC_INTENABLE;                /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_INTERRUPT_t  RXQ0_INTERRUPT;                /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ0_INTENABLE_t  RXQ0_INTENABLE;                /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_INTERRUPT_t  RXQ1_INTERRUPT;                /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  RECIRC_TOP_RECIR_R_DMA_RXQ1_INTENABLE_t  RXQ1_INTENABLE;                /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_INTERRUPT_t  TXQ0_INTERRUPT;                /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ0_INTENABLE_t  TXQ0_INTENABLE;                /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_INTERRUPT_t  TXQ1_INTERRUPT;                /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  RECIRC_TOP_RECIR_R_DMA_TXQ1_INTENABLE_t  TXQ1_INTENABLE;                /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_INTERRUPT_t  BMC0_INTERRUPT;                /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC0_INTENABLE_t  BMC0_INTENABLE;                /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_INTERRUPT_t  BMC1_INTERRUPT;                /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC1_INTENABLE_t  BMC1_INTENABLE;                /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_INTERRUPT_t  BMC2_INTERRUPT;                /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  RECIRC_TOP_RECIR_R_DMA_BMC2_INTENABLE_t  BMC2_INTENABLE;                /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  RECIRC_TOP_RECIR_R_DMA_RX_FDES_ADDR_t    RX_FDES_ADDR;                  /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  RECIRC_TOP_RECIR_R_DMA_RX_CDES_ADDR_t    RX_CDES_ADDR;                  /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD0_t    RX_DES_WORD0;                  /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  RECIRC_TOP_RECIR_R_DMA_RX_DES_WORD1_t    RX_DES_WORD1;                  /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_FDES_ADDR_t    TX_FDES_ADDR;                  /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_CDES_ADDR_t    TX_CDES_ADDR;                  /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD0_t    TX_DES_WORD0;                  /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD1_t    TX_DES_WORD1;                  /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD2_t    TX_DES_WORD2;                  /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  RECIRC_TOP_RECIR_R_DMA_TX_DES_WORD3_t    TX_DES_WORD3;                  /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  RECIRC_TOP_RECIR_R_DMA_DEBUG_0_t         DEBUG_0;                       /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  RECIRC_TOP_RECIR_R_DMA_DEBUG_1_t         DEBUG_1;                       /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  RECIRC_TOP_RECIR_R_DMA_DEBUG_2_t         DEBUG_2;                       /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_0_t     DMA_SPARE_0;                   /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  RECIRC_TOP_RECIR_R_DMA_DMA_SPARE_1_t     DMA_SPARE_1;                   /* addr: 0x00000128 */ 
} RECIRC_TOP_RECIR_R_DMA_t;

  

/*
 * R_AXI
 */
  



#define RECIRC_TOP_RECIR_R_AXI_CONFIG            0xf6800300
#define RECIRC_TOP_RECIR_R_AXI_CONFIG_dft        0x000000c0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 axi_read_channel2_arbscheme :  1 ; /* bits 21:21 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel2_arbscheme :  1 ; /* bits 13:13 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  5 ;
    cs_uint32 axi_write_channel2_arbscheme :  1 ; /* bits 13:13 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  5 ;
    cs_uint32 axi_read_channel2_arbscheme :  1 ; /* bits 21:21 */
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_CONFIG_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_ARB_ID       0xf6800304
#define RECIRC_TOP_RECIR_R_AXI_READ_ARB_ID_dft   0x00000024




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 axi_rchannel2_SPpri_or_DRRid :  2 ; /* bits 5:4 */
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_rchannel2_SPpri_or_DRRid :  2 ; /* bits 5:4 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_ARB_ID_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_ARB_ID      0xf6800308
#define RECIRC_TOP_RECIR_R_AXI_WRITE_ARB_ID_dft  0x00000024




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 axi_wchannel2_SPpri_or_DRRid :  2 ; /* bits 5:4 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_wchannel2_SPpri_or_DRRid :  2 ; /* bits 5:4 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_ARB_ID_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL_0_3_DRR_WEIGHT 0xf680030c
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_dft 0x00101010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 axi_rchannel_0_3_DRRweight : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel_0_3_DRRweight : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT 0xf6800310
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_dft 0x00101010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  8 ;
    cs_uint32 axi_wchannel_0_3_DRRweight : 24 ; /* bits 23:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel_0_3_DRRweight : 24 ; /* bits 23:0 */
    cs_uint32 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t;





#define RECIRC_TOP_RECIR_R_AXI_RWID_VALUE        0xf6800314
#define RECIRC_TOP_RECIR_R_AXI_RWID_VALUE_dft    0x00000021




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_RWID_VALUE_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_TIMEOUT_THRESHOLD 0xf6800318
#define RECIRC_TOP_RECIR_R_AXI_READ_TIMEOUT_THRESHOLD_dft 0x88800000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_rchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 rsrvd1               : 20 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 axi_rchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_TIMEOUT_THRESHOLD_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_TIMEOUT_THRESHOLD 0xf680031c
#define RECIRC_TOP_RECIR_R_AXI_WRITE_TIMEOUT_THRESHOLD_dft 0x88800000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 rsrvd1               : 20 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 axi_wchannel2_timeout_threshold :  4 ; /* bits 23:20 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_TIMEOUT_THRESHOLD_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT 0xf6800320
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT 0xf6800324
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT 0xf6800328
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel010_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT 0xf680032c
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT 0xf6800330
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT 0xf6800334
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_ENABLE 0xf6800338
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_ENABLE 0xf680033c
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_ENABLE 0xf6800340
#define RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel010_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE 0xf6800344
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE 0xf6800348
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE 0xf680034c
#define RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel010_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel010_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel010_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel010_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel010_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel010_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECIR_R_AXI_RESERVED          0xf6800350
#define RECIRC_TOP_RECIR_R_AXI_RESERVED_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECIR_R_AXI_RESERVED_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* R_AXI */

typedef struct {
  RECIRC_TOP_RECIR_R_AXI_CONFIG_t          CONFIG;                        /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  RECIRC_TOP_RECIR_R_AXI_READ_ARB_ID_t     READ_ARB_ID;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  RECIRC_TOP_RECIR_R_AXI_WRITE_ARB_ID_t    WRITE_ARB_ID;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t READ_CHANNEL_0_3_DRR_WEIGHT;   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t WRITE_CHANNEL_0_3_DRR_WEIGHT;  /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  RECIRC_TOP_RECIR_R_AXI_RWID_VALUE_t      RWID_VALUE;                    /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  RECIRC_TOP_RECIR_R_AXI_READ_TIMEOUT_THRESHOLD_t READ_TIMEOUT_THRESHOLD;        /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  RECIRC_TOP_RECIR_R_AXI_WRITE_TIMEOUT_THRESHOLD_t WRITE_TIMEOUT_THRESHOLD;       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_t READ_CHANNEL000_INTERRUPT;     /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_t READ_CHANNEL001_INTERRUPT;     /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_t READ_CHANNEL010_INTERRUPT;     /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_t WRITE_CHANNEL000_INTERRUPT;    /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_t WRITE_CHANNEL001_INTERRUPT;    /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_t WRITE_CHANNEL010_INTERRUPT;    /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t READ_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t READ_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  RECIRC_TOP_RECIR_R_AXI_READ_CHANNEL010_INTERRUPT_ENABLE_t READ_CHANNEL010_INTERRUPT_ENABLE; /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t WRITE_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t WRITE_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  RECIRC_TOP_RECIR_R_AXI_WRITE_CHANNEL010_INTERRUPT_ENABLE_t WRITE_CHANNEL010_INTERRUPT_ENABLE; /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  RECIRC_TOP_RECIR_R_AXI_RESERVED_t        RESERVED;                      /* addr: 0x00000050 */ 
} RECIRC_TOP_RECIR_R_AXI_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* RECIR */

typedef struct {
  RECIRC_TOP_RECIR_R_DMA_t                 R_DMA;                         /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[619];                  
  RECIRC_TOP_RECIR_R_AXI_t                 R_AXI;                         /* addr: 0x00000300 */ 
} RECIRC_TOP_RECIR_t;


/*
 * N_AXI
 */
  



#define RECIRC_TOP_N_AXI_CONFIG                  0xf6840000
#define RECIRC_TOP_N_AXI_CONFIG_dft              0x000000c0




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_config_reserved  :  4 ; /* bits 3:0 */
    cs_uint32 axi_write_allow_normal_req_EXOK_response :  1 ; /* bits 4:4 */
    cs_uint32 axi_read_allow_normal_req_EXOK_response :  1 ; /* bits 5:5 */
    cs_uint32 axi_write_channel_fixed_id_option :  1 ; /* bits 6:6 */
    cs_uint32 axi_read_channel_fixed_id_option :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               :  6 ;
    cs_uint32 axi_write_channel1_arbscheme :  1 ; /* bits 14:14 */
    cs_uint32 axi_write_channel0_arbscheme :  1 ; /* bits 15:15 */
    cs_uint32 rsrvd2               :  6 ;
    cs_uint32 axi_read_channel1_arbscheme :  1 ; /* bits 22:22 */
    cs_uint32 axi_read_channel0_arbscheme :  1 ; /* bits 23:23 */
    cs_uint32 axi_write_outtrans_nums :  2 ; /* bits 25:24 */
    cs_uint32 axi_read_outtrans_nums :  2 ; /* bits 27:26 */
    cs_uint32 axi_func_reserved    :  2 ; /* bits 29:28 */
    cs_uint32 axi_xbus_len         :  2 ; /* bits 31:30 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_CONFIG_t;





#define RECIRC_TOP_N_AXI_READ_ARB_ID             0xf6840004
#define RECIRC_TOP_N_AXI_READ_ARB_ID_dft         0x00000004




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 axi_rchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_ARB_ID_t;





#define RECIRC_TOP_N_AXI_WRITE_ARB_ID            0xf6840008
#define RECIRC_TOP_N_AXI_WRITE_ARB_ID_dft        0x00000004




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel0_SPpri_or_DRRid :  2 ; /* bits 1:0 */
    cs_uint32 axi_wchannel1_SPpri_or_DRRid :  2 ; /* bits 3:2 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_ARB_ID_t;





#define RECIRC_TOP_N_AXI_READ_CHANNEL_0_3_DRR_WEIGHT 0xf684000c
#define RECIRC_TOP_N_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_dft 0x00001010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 axi_rchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t;





#define RECIRC_TOP_N_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT 0xf6840010
#define RECIRC_TOP_N_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_dft 0x00001010




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 axi_wchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_wchannel_0_3_DRRweight : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t;





#define RECIRC_TOP_N_AXI_RWID_VALUE              0xf6840014
#define RECIRC_TOP_N_AXI_RWID_VALUE_dft          0x00000021




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_rid              :  4 ; /* bits 3:0 */
    cs_uint32 axi_wid              :  4 ; /* bits 7:4 */
    cs_uint32 axi_id_reserved      : 24 ; /* bits 31:8 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_RWID_VALUE_t;





#define RECIRC_TOP_N_AXI_READ_TIMEOUT_THRESHOLD  0xf6840018
#define RECIRC_TOP_N_AXI_READ_TIMEOUT_THRESHOLD_dft 0x88000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd1               : 24 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 axi_rchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_rchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_TIMEOUT_THRESHOLD_t;





#define RECIRC_TOP_N_AXI_WRITE_TIMEOUT_THRESHOLD 0xf684001c
#define RECIRC_TOP_N_AXI_WRITE_TIMEOUT_THRESHOLD_dft 0x88000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 rsrvd1               : 24 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 axi_wchannel1_timeout_threshold :  4 ; /* bits 27:24 */
    cs_uint32 axi_wchannel0_timeout_threshold :  4 ; /* bits 31:28 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_TIMEOUT_THRESHOLD_t;





#define RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT 0xf6840020
#define RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_t;





#define RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT 0xf6840024
#define RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_t;





#define RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT 0xf6840028
#define RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_int :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_t;





#define RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT 0xf684002c
#define RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_int :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_int :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_int :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_int :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_t;





#define RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_ENABLE 0xf6840030
#define RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel_axi_read_trans_drr_hang_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_ENABLE 0xf6840034
#define RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_read_data_unit_error_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_read_trans_burstlen_mismatch_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_read_trans_exclusive_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_read_trans_cmd_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_read_trans_data_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE 0xf6840038
#define RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 25 ;
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel000_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel000_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel000_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel000_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel000_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel000_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel_axi_write_trans_drr_hang_err_en :  1 ; /* bits 6:6 */
    cs_uint32 rsrvd1               : 25 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE 0xf684003c
#define RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 channel001_axi_write_trans_response_err_int_en :  1 ; /* bits 0:0 */
    cs_uint32 channel001_axi_write_trans_exclusive_err_int_en :  1 ; /* bits 1:1 */
    cs_uint32 channel001_axi_write_trans_cmd_timeout_err_en :  1 ; /* bits 2:2 */
    cs_uint32 channel001_axi_write_trans_data_timeout_err_en :  1 ; /* bits 3:3 */
    cs_uint32 channel001_axi_write_trans_resp_timeout_err_en :  1 ; /* bits 4:4 */
    cs_uint32 channel001_axi_write_trans_culmulate_eof_err_en :  1 ; /* bits 5:5 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_N_AXI_RESERVED                0xf6840040
#define RECIRC_TOP_N_AXI_RESERVED_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 axi_master_reserved  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_N_AXI_RESERVED_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* N_AXI */

typedef struct {
  RECIRC_TOP_N_AXI_CONFIG_t                CONFIG;                        /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  RECIRC_TOP_N_AXI_READ_ARB_ID_t           READ_ARB_ID;                   /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  RECIRC_TOP_N_AXI_WRITE_ARB_ID_t          WRITE_ARB_ID;                  /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  RECIRC_TOP_N_AXI_READ_CHANNEL_0_3_DRR_WEIGHT_t READ_CHANNEL_0_3_DRR_WEIGHT;   /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  RECIRC_TOP_N_AXI_WRITE_CHANNEL_0_3_DRR_WEIGHT_t WRITE_CHANNEL_0_3_DRR_WEIGHT;  /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  RECIRC_TOP_N_AXI_RWID_VALUE_t            RWID_VALUE;                    /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  RECIRC_TOP_N_AXI_READ_TIMEOUT_THRESHOLD_t READ_TIMEOUT_THRESHOLD;        /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  RECIRC_TOP_N_AXI_WRITE_TIMEOUT_THRESHOLD_t WRITE_TIMEOUT_THRESHOLD;       /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_t READ_CHANNEL000_INTERRUPT;     /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_t READ_CHANNEL001_INTERRUPT;     /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_t WRITE_CHANNEL000_INTERRUPT;    /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_t WRITE_CHANNEL001_INTERRUPT;    /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  RECIRC_TOP_N_AXI_READ_CHANNEL000_INTERRUPT_ENABLE_t READ_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  RECIRC_TOP_N_AXI_READ_CHANNEL001_INTERRUPT_ENABLE_t READ_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  RECIRC_TOP_N_AXI_WRITE_CHANNEL000_INTERRUPT_ENABLE_t WRITE_CHANNEL000_INTERRUPT_ENABLE; /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  RECIRC_TOP_N_AXI_WRITE_CHANNEL001_INTERRUPT_ENABLE_t WRITE_CHANNEL001_INTERRUPT_ENABLE; /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  RECIRC_TOP_N_AXI_RESERVED_t              RESERVED;                      /* addr: 0x00000040 */ 
} RECIRC_TOP_N_AXI_t;

  

/*
 * RECPU
 */
  



#define RECIRC_TOP_RECPU_NI_CFG_BURST_SIZE       0xf6840100
#define RECIRC_TOP_RECPU_NI_CFG_BURST_SIZE_dft   0x40404040




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cfg_tx_encap_burst_size :  8 ; /* bits 31:24 */
    cs_uint32 cfg_tx_crypto_burst_size :  8 ; /* bits 23:16 */
    cs_uint32 cfg_rx_encap_burst_size :  8 ; /* bits 15:8 */
    cs_uint32 cfg_rx_crypto_burst_size :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_rx_crypto_burst_size :  8 ; /* bits 7:0 */
    cs_uint32 cfg_rx_encap_burst_size :  8 ; /* bits 15:8 */
    cs_uint32 cfg_tx_crypto_burst_size :  8 ; /* bits 23:16 */
    cs_uint32 cfg_tx_encap_burst_size :  8 ; /* bits 31:24 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CFG_BURST_SIZE_t;





#define RECIRC_TOP_RECPU_NI_RX_CFG_FF_THRESHOLD  0xf6840104
#define RECIRC_TOP_RECPU_NI_RX_CFG_FF_THRESHOLD_dft 0x01000100




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 cfg_encap_ff_threshold : 16 ; /* bits 31:16 */
    cs_uint32 cfg_crypto_ff_threshold : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_crypto_ff_threshold : 16 ; /* bits 15:0 */
    cs_uint32 cfg_encap_ff_threshold : 16 ; /* bits 31:16 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_RX_CFG_FF_THRESHOLD_t;





#define RECIRC_TOP_RECPU_RX_CRYPTO_DST_ADDR      0xf6840108
#define RECIRC_TOP_RECPU_RX_CRYPTO_DST_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_crypto_dst_addr   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_crypto_dst_addr   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RX_CRYPTO_DST_ADDR_t;





#define RECIRC_TOP_RECPU_RX_CRYPTO_DST_FF_STS    0xf684010c
#define RECIRC_TOP_RECPU_RX_CRYPTO_DST_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 crypto_dst_ff_depth  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_dst_ff_depth  :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RX_CRYPTO_DST_FF_STS_t;





#define RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_ADDR   0xf6840110
#define RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crypto_rx_return_addr : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_rx_return_addr : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_ADDR_t;





#define RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_FF_STS 0xf6840114
#define RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 crypto_rx_return_ff_depth :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_rx_return_ff_depth :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_FF_STS_t;





#define RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_COUNT  0xf6840118
#define RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crypto_rx_pkt_count  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_rx_pkt_count  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_COUNT_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTERRUPT 0xf684011c
#define RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_crypto_pkt_arrive_intr :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_crypto_pkt_arrive_intr :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTERRUPT_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTR_ENABLE 0xf6840120
#define RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTR_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_crypto_pkt_arrive_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_crypto_pkt_arrive_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_LENGTH 0xf6840124
#define RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_LENGTH_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 crypto_rx_pkt_len    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_rx_pkt_len    : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_LENGTH_t;





#define RECIRC_TOP_RECPU_TX_CRYPTO_SRC_ADDR      0xf6840128
#define RECIRC_TOP_RECPU_TX_CRYPTO_SRC_ADDR_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_crypto_src_addr   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_crypto_src_addr   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_CRYPTO_SRC_ADDR_t;





#define RECIRC_TOP_RECPU_TX_CRYPTO_CMD           0xf684012c
#define RECIRC_TOP_RECPU_TX_CRYPTO_CMD_dft       0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tx_pkt_size          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_pkt_size          : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_CRYPTO_CMD_t;





#define RECIRC_TOP_RECPU_TX_CRYPTO_SRC_FF_STS    0xf6840130
#define RECIRC_TOP_RECPU_TX_CRYPTO_SRC_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 crypto_src_ff_depth  :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_src_ff_depth  :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_CRYPTO_SRC_FF_STS_t;





#define RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_ADDR   0xf6840134
#define RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crypto_tx_return_addr : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_tx_return_addr : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_ADDR_t;





#define RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_FF_STS 0xf6840138
#define RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 crypto_tx_return_ff_depth :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_tx_return_ff_depth :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_FF_STS_t;





#define RECIRC_TOP_RECPU_CRYPTO_TX_PACKET_COUNT  0xf684013c
#define RECIRC_TOP_RECPU_CRYPTO_TX_PACKET_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crypto_tx_pkt_count  : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_tx_pkt_count  : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_TX_PACKET_COUNT_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTERRUPT 0xf6840140
#define RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 crypto_ni_pkt_transmit_intr :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_ni_pkt_transmit_intr :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTERRUPT_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTR_ENABLE 0xf6840144
#define RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTR_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 crypto_ni_pkt_transmit_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_ni_pkt_transmit_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_ACCESS 0xf6840148
#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 address              :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_ACCESS_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA2 0xf684014c
#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 NI_CRYPTO_DATA       :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_CRYPTO_DATA       :  6 ; /* bits 5:0 */
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA2_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA1 0xf6840150
#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 NI_CRYPTO_DATA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_CRYPTO_DATA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA1_t;





#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA0 0xf6840154
#define RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 NI_CRYPTO_DATA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_CRYPTO_DATA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA0_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_ACCESS 0xf6840158
#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 address              :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_ACCESS_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA2 0xf684015c
#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 CRYPTO_NI_DATA       :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CRYPTO_NI_DATA       :  6 ; /* bits 5:0 */
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA2_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA1 0xf6840160
#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 CRYPTO_NI_DATA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CRYPTO_NI_DATA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA1_t;





#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA0 0xf6840164
#define RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 CRYPTO_NI_DATA       : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 CRYPTO_NI_DATA       : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA0_t;





#define RECIRC_TOP_RECPU_RX_ENCAP_DST_ADDR       0xf6840168
#define RECIRC_TOP_RECPU_RX_ENCAP_DST_ADDR_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rx_encap_dst_addr    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_encap_dst_addr    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RX_ENCAP_DST_ADDR_t;





#define RECIRC_TOP_RECPU_RX_ENCAP_DST_FF_STS     0xf684016c
#define RECIRC_TOP_RECPU_RX_ENCAP_DST_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 encap_dst_ff_depth   :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_dst_ff_depth   :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RX_ENCAP_DST_FF_STS_t;





#define RECIRC_TOP_RECPU_ENCAP_RX_RETURN_ADDR    0xf6840170
#define RECIRC_TOP_RECPU_ENCAP_RX_RETURN_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_rx_return_addr : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_rx_return_addr : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_RX_RETURN_ADDR_t;





#define RECIRC_TOP_RECPU_ENCAP_RX_RETURN_FF_STS  0xf6840174
#define RECIRC_TOP_RECPU_ENCAP_RX_RETURN_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 encap_rx_return_ff_depth :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_rx_return_ff_depth :  6 ; /* bits 5:0 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_RX_RETURN_FF_STS_t;





#define RECIRC_TOP_RECPU_ENCAP_RX_PACKET_COUNT   0xf6840178
#define RECIRC_TOP_RECPU_ENCAP_RX_PACKET_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_rx_pkt_count   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_rx_pkt_count   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_RX_PACKET_COUNT_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTERRUPT 0xf684017c
#define RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_encap_pkt_arrive_intr :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_encap_pkt_arrive_intr :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTERRUPT_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTR_ENABLE 0xf6840180
#define RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTR_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 ni_encap_pkt_arrive_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_encap_pkt_arrive_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_ENCAP_RX_PACKET_LENGTH  0xf6840184
#define RECIRC_TOP_RECPU_ENCAP_RX_PACKET_LENGTH_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 16 ;
    cs_uint32 encap_rx_pkt_len     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_rx_pkt_len     : 16 ; /* bits 15:0 */
    cs_uint32 rsrvd1               : 16 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_RX_PACKET_LENGTH_t;





#define RECIRC_TOP_RECPU_TX_ENCAP_SRC_ADDR       0xf6840188
#define RECIRC_TOP_RECPU_TX_ENCAP_SRC_ADDR_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 tx_encap_src_addr    : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_encap_src_addr    : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_ENCAP_SRC_ADDR_t;





#define RECIRC_TOP_RECPU_TX_ENCAP_CMD            0xf684018c
#define RECIRC_TOP_RECPU_TX_ENCAP_CMD_dft        0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 tx_pkt_size          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_pkt_size          : 14 ; /* bits 13:0 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_ENCAP_CMD_t;





#define RECIRC_TOP_RECPU_TX_ENCAP_SRC_FF_STS     0xf6840190
#define RECIRC_TOP_RECPU_TX_ENCAP_SRC_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 encap_src_ff_depth   :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_src_ff_depth   :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_TX_ENCAP_SRC_FF_STS_t;





#define RECIRC_TOP_RECPU_ENCAP_TX_RETURN_ADDR    0xf6840194
#define RECIRC_TOP_RECPU_ENCAP_TX_RETURN_ADDR_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_tx_return_addr : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_tx_return_addr : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_TX_RETURN_ADDR_t;





#define RECIRC_TOP_RECPU_ENCAP_TX_RETURN_FF_STS  0xf6840198
#define RECIRC_TOP_RECPU_ENCAP_TX_RETURN_FF_STS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 27 ;
    cs_uint32 encap_tx_return_ff_depth :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_tx_return_ff_depth :  5 ; /* bits 4:0 */
    cs_uint32 rsrvd1               : 27 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_TX_RETURN_FF_STS_t;





#define RECIRC_TOP_RECPU_ENCAP_TX_PACKET_COUNT   0xf684019c
#define RECIRC_TOP_RECPU_ENCAP_TX_PACKET_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_tx_pkt_count   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_tx_pkt_count   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_TX_PACKET_COUNT_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTERRUPT 0xf68401a0
#define RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 encap_ni_pkt_transmit_intr :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_ni_pkt_transmit_intr :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTERRUPT_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTR_ENABLE 0xf68401a4
#define RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTR_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 encap_ni_pkt_transmit_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_ni_pkt_transmit_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_ACCESS 0xf68401a8
#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 address              :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_ACCESS_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA2 0xf68401ac
#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 NI_ENCAP_DATA        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_ENCAP_DATA        :  6 ; /* bits 5:0 */
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA2_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA1 0xf68401b0
#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 NI_ENCAP_DATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_ENCAP_DATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA1_t;





#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA0 0xf68401b4
#define RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 NI_ENCAP_DATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 NI_ENCAP_DATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA0_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_ACCESS 0xf68401b8
#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_ACCESS_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 address              :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 address              :  9 ; /* bits 8:0 */
    cs_uint32 rsrvd1               : 20 ;
    cs_uint32 ecc_bypass           :  1 ; /* bits 29:29 */
    cs_uint32 wrd_n                :  1 ; /* bits 30:30 */
    cs_uint32 ACCESS               :  1 ; /* bits 31:31 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_ACCESS_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA2 0xf68401bc
#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 18 ;
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 ENCAP_NI_DATA        :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ENCAP_NI_DATA        :  6 ; /* bits 5:0 */
    cs_uint32 ECC                  :  8 ; /* bits 13:6 */
    cs_uint32 rsrvd1               : 18 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA2_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA1 0xf68401c0
#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ENCAP_NI_DATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ENCAP_NI_DATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA1_t;





#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA0 0xf68401c4
#define RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 ENCAP_NI_DATA        : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ENCAP_NI_DATA        : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA0_t;





#define RECIRC_TOP_RECPU_NI_ADAPT_STATUS         0xf68401c8
#define RECIRC_TOP_RECPU_NI_ADAPT_STATUS_dft     0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 24 ;
    cs_uint32 rx_crypto_data_ff_empty :  1 ; /* bits 7:7 */
    cs_uint32 rx_encap_data_ff_empty :  1 ; /* bits 6:6 */
    cs_uint32 rx_crypto_data_ff_full :  1 ; /* bits 5:5 */
    cs_uint32 rx_encap_data_ff_full :  1 ; /* bits 4:4 */
    cs_uint32 tx_crypto_data_ff_empty :  1 ; /* bits 3:3 */
    cs_uint32 tx_encap_data_ff_empty :  1 ; /* bits 2:2 */
    cs_uint32 tx_crypto_data_ff_full :  1 ; /* bits 1:1 */
    cs_uint32 tx_encap_data_ff_full :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 tx_encap_data_ff_full :  1 ; /* bits 0:0 */
    cs_uint32 tx_crypto_data_ff_full :  1 ; /* bits 1:1 */
    cs_uint32 tx_encap_data_ff_empty :  1 ; /* bits 2:2 */
    cs_uint32 tx_crypto_data_ff_empty :  1 ; /* bits 3:3 */
    cs_uint32 rx_encap_data_ff_full :  1 ; /* bits 4:4 */
    cs_uint32 rx_crypto_data_ff_full :  1 ; /* bits 5:5 */
    cs_uint32 rx_encap_data_ff_empty :  1 ; /* bits 6:6 */
    cs_uint32 rx_crypto_data_ff_empty :  1 ; /* bits 7:7 */
    cs_uint32 rsrvd1               : 24 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_NI_ADAPT_STATUS_t;





#define RECIRC_TOP_RECPU_CFG_RECIRC_CPU          0xf68401cc
#define RECIRC_TOP_RECPU_CFG_RECIRC_CPU_dft      0x00000008




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 cfg_niadapt_data_swap :  1 ; /* bits 3:3 */
    cs_uint32 cfg_rcpu1_nmi_en     :  1 ; /* bits 2:2 */
    cs_uint32 cfg_rcpu0_nmi_en     :  1 ; /* bits 1:1 */
    cs_uint32 cfg_sad_override_en  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_sad_override_en  :  1 ; /* bits 0:0 */
    cs_uint32 cfg_rcpu0_nmi_en     :  1 ; /* bits 1:1 */
    cs_uint32 cfg_rcpu1_nmi_en     :  1 ; /* bits 2:2 */
    cs_uint32 cfg_niadapt_data_swap :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_RECIRC_CPU_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX0_REQ      0xf68401d0
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX0_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_0_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_0_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX0_REQ_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX0_REQ      0xf68401d4
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX0_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_0_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_0_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX0_REQ_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX0_REQ      0xf68401d8
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX0_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_0_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_0_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX0_REQ_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX0_REQ      0xf68401dc
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX0_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_0_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_0_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX0_REQ_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX0_ACK      0xf68401e0
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX0_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_0_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_0_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX0_ACK_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX0_ACK      0xf68401e4
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX0_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_0_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_0_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX0_ACK_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX0_ACK      0xf68401e8
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX0_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_0_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_0_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX0_ACK_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX0_ACK      0xf68401ec
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX0_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_0_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_0_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX0_ACK_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX1_REQ      0xf68401f0
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX1_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_1_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_1_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX1_REQ_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX1_REQ      0xf68401f4
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX1_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_1_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_1_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX1_REQ_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX1_REQ      0xf68401f8
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX1_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_1_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_1_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX1_REQ_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX1_REQ      0xf68401fc
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX1_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_1_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_1_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX1_REQ_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX1_ACK      0xf6840200
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX1_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_1_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_1_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX1_ACK_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX1_ACK      0xf6840204
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX1_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_1_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_1_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX1_ACK_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX1_ACK      0xf6840208
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX1_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_1_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_1_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX1_ACK_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX1_ACK      0xf684020c
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX1_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_1_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_1_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX1_ACK_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX2_REQ      0xf6840210
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX2_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_2_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_2_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX2_REQ_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX2_REQ      0xf6840214
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX2_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_2_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_2_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX2_REQ_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX2_REQ      0xf6840218
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX2_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_2_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_2_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX2_REQ_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX2_REQ      0xf684021c
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX2_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_2_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_2_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX2_REQ_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX2_ACK      0xf6840220
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX2_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_2_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_2_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX2_ACK_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX2_ACK      0xf6840224
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX2_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_2_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_2_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX2_ACK_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX2_ACK      0xf6840228
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX2_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_2_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_2_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX2_ACK_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX2_ACK      0xf684022c
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX2_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_2_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_2_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX2_ACK_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX3_REQ      0xf6840230
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX3_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_3_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_3_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX3_REQ_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX3_REQ      0xf6840234
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX3_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_3_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_3_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX3_REQ_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX3_REQ      0xf6840238
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX3_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_3_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_3_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX3_REQ_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX3_REQ      0xf684023c
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX3_REQ_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_3_req  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_3_req  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX3_REQ_t;





#define RECIRC_TOP_RECPU_CPU_0_MAILBOX3_ACK      0xf6840240
#define RECIRC_TOP_RECPU_CPU_0_MAILBOX3_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_0_mailbox_3_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_0_mailbox_3_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_0_MAILBOX3_ACK_t;





#define RECIRC_TOP_RECPU_CPU_1_MAILBOX3_ACK      0xf6840244
#define RECIRC_TOP_RECPU_CPU_1_MAILBOX3_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_1_mailbox_3_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_1_mailbox_3_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_1_MAILBOX3_ACK_t;





#define RECIRC_TOP_RECPU_CPU_2_MAILBOX3_ACK      0xf6840248
#define RECIRC_TOP_RECPU_CPU_2_MAILBOX3_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_2_mailbox_3_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_2_mailbox_3_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_2_MAILBOX3_ACK_t;





#define RECIRC_TOP_RECPU_CPU_3_MAILBOX3_ACK      0xf684024c
#define RECIRC_TOP_RECPU_CPU_3_MAILBOX3_ACK_dft  0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu_3_mailbox_3_ack  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu_3_mailbox_3_ack  :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU_3_MAILBOX3_ACK_t;





#define RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT  0xf6840250
#define RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu0_mailbox_intr    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu0_mailbox_intr    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_t;





#define RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_ENABLE 0xf6840254
#define RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu0_mailbox_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu0_mailbox_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT  0xf6840258
#define RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu1_mailbox_intr    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu1_mailbox_intr    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_t;





#define RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_ENABLE 0xf684025c
#define RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu1_mailbox_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu1_mailbox_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT  0xf6840260
#define RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu2_mailbox_intr    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu2_mailbox_intr    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_t;





#define RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_ENABLE 0xf6840264
#define RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu2_mailbox_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu2_mailbox_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT  0xf6840268
#define RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu3_mailbox_intr    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu3_mailbox_intr    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_t;





#define RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_ENABLE 0xf684026c
#define RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 cpu3_mailbox_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cpu3_mailbox_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_AXI_TIMEOUT             0xf6840270
#define RECIRC_TOP_RECPU_AXI_TIMEOUT_dft         0x000004e2




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 timeout              : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 timeout              : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_AXI_TIMEOUT_t;





#define RECIRC_TOP_RECPU_AXI_REG_CONFIG          0xf6840274
#define RECIRC_TOP_RECPU_AXI_REG_CONFIG_dft      0x00000001




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 post_enable          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 post_enable          :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_AXI_REG_CONFIG_t;





#define RECIRC_TOP_RECPU_AXI_INT                 0xf6840278
#define RECIRC_TOP_RECPU_AXI_INT_dft             0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoii                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erri            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erri           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erri          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_AXI_INT_t;





#define RECIRC_TOP_RECPU_AXI_IE                  0xf684027c
#define RECIRC_TOP_RECPU_AXI_IE_dft              0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 28 ;
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 itoie                :  1 ; /* bits 0:0 */
    cs_uint32 pdec_erre            :  1 ; /* bits 1:1 */
    cs_uint32 psize_erre           :  1 ; /* bits 2:2 */
    cs_uint32 pwstrb_erre          :  1 ; /* bits 3:3 */
    cs_uint32 rsrvd1               : 28 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_AXI_IE_t;





#define RECIRC_TOP_RECPU_RCPU0_NMI_INTERRUPT     0xf6840280
#define RECIRC_TOP_RECPU_RCPU0_NMI_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rcpu0_nmi_intr       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_nmi_intr       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU0_NMI_INTERRUPT_t;





#define RECIRC_TOP_RECPU_RCPU0_INTR_ENABLE       0xf6840284
#define RECIRC_TOP_RECPU_RCPU0_INTR_ENABLE_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rcpu0_nmi_intr_en    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_nmi_intr_en    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU0_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_RCPU1_NMI_INTERRUPT     0xf6840288
#define RECIRC_TOP_RECPU_RCPU1_NMI_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rcpu1_nmi_intr       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu1_nmi_intr       :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU1_NMI_INTERRUPT_t;





#define RECIRC_TOP_RECPU_RCPU1_INTR_ENABLE       0xf684028c
#define RECIRC_TOP_RECPU_RCPU1_INTR_ENABLE_dft   0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 31 ;
    cs_uint32 rcpu1_nmi_intr_en    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu1_nmi_intr_en    :  1 ; /* bits 0:0 */
    cs_uint32 rsrvd1               : 31 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU1_INTR_ENABLE_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT  0xf6840290
#define RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ddr_intr             :  1 ; /* bits 29:29 */
    cs_uint32 ni_rx_interrupt_8_1  :  1 ; /* bits 28:28 */
    cs_uint32 ni_rx_interrupt_7_1  :  1 ; /* bits 27:27 */
    cs_uint32 ni_rx_interrupt_6_1  :  1 ; /* bits 26:26 */
    cs_uint32 ni_rx_interrupt_5_1  :  1 ; /* bits 25:25 */
    cs_uint32 ni_rx_interrupt_4_1  :  1 ; /* bits 24:24 */
    cs_uint32 ni_rx_interrupt_3_1  :  1 ; /* bits 23:23 */
    cs_uint32 ni_rx_interrupt_2_1  :  1 ; /* bits 22:22 */
    cs_uint32 ni_rx_interrupt_1_1  :  1 ; /* bits 21:21 */
    cs_uint32 ni_rx_interrupt_0_1  :  1 ; /* bits 20:20 */
    cs_uint32 spdif_intr           :  1 ; /* bits 19:19 */
    cs_uint32 lcd_intr             :  1 ; /* bits 18:18 */
    cs_uint32 dma_tso_lso_intr_1   :  1 ; /* bits 17:17 */
    cs_uint32 axi_intr             :  1 ; /* bits 16:16 */
    cs_uint32 channelwrite001_axi_interrupt :  1 ; /* bits 15:15 */
    cs_uint32 channelwrite000_axi_interrupt :  1 ; /* bits 14:14 */
    cs_uint32 channelread001_axi_interrupt :  1 ; /* bits 13:13 */
    cs_uint32 channelread000_axi_interrupt :  1 ; /* bits 12:12 */
    cs_uint32 crypto_tx_pkt_cnt_over :  1 ; /* bits 11:11 */
    cs_uint32 encap_tx_pkt_cnt_over :  1 ; /* bits 10:10 */
    cs_uint32 crypto_rx_pkt_cnt_over :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_pkt_cnt_over :  1 ; /* bits 8:8 */
    cs_uint32 crypto_ni_txf_mem_corr_ecc_err :  1 ; /* bits 7:7 */
    cs_uint32 crypto_ni_txf_mem_ecc_err :  1 ; /* bits 6:6 */
    cs_uint32 encap_ni_txf_mem_corr_ecc_err :  1 ; /* bits 5:5 */
    cs_uint32 encap_ni_txf_mem_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 ni_crypto_rxf_mem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 ni_crypto_rxf_mem_ecc_err :  1 ; /* bits 2:2 */
    cs_uint32 ni_encap_rxf_mem_corr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 ni_encap_rxf_mem_ecc_err :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_encap_rxf_mem_ecc_err :  1 ; /* bits 0:0 */
    cs_uint32 ni_encap_rxf_mem_corr_ecc_err :  1 ; /* bits 1:1 */
    cs_uint32 ni_crypto_rxf_mem_ecc_err :  1 ; /* bits 2:2 */
    cs_uint32 ni_crypto_rxf_mem_corr_ecc_err :  1 ; /* bits 3:3 */
    cs_uint32 encap_ni_txf_mem_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 encap_ni_txf_mem_corr_ecc_err :  1 ; /* bits 5:5 */
    cs_uint32 crypto_ni_txf_mem_ecc_err :  1 ; /* bits 6:6 */
    cs_uint32 crypto_ni_txf_mem_corr_ecc_err :  1 ; /* bits 7:7 */
    cs_uint32 encap_rx_pkt_cnt_over :  1 ; /* bits 8:8 */
    cs_uint32 crypto_rx_pkt_cnt_over :  1 ; /* bits 9:9 */
    cs_uint32 encap_tx_pkt_cnt_over :  1 ; /* bits 10:10 */
    cs_uint32 crypto_tx_pkt_cnt_over :  1 ; /* bits 11:11 */
    cs_uint32 channelread000_axi_interrupt :  1 ; /* bits 12:12 */
    cs_uint32 channelread001_axi_interrupt :  1 ; /* bits 13:13 */
    cs_uint32 channelwrite000_axi_interrupt :  1 ; /* bits 14:14 */
    cs_uint32 channelwrite001_axi_interrupt :  1 ; /* bits 15:15 */
    cs_uint32 axi_intr             :  1 ; /* bits 16:16 */
    cs_uint32 dma_tso_lso_intr_1   :  1 ; /* bits 17:17 */
    cs_uint32 lcd_intr             :  1 ; /* bits 18:18 */
    cs_uint32 spdif_intr           :  1 ; /* bits 19:19 */
    cs_uint32 ni_rx_interrupt_0_1  :  1 ; /* bits 20:20 */
    cs_uint32 ni_rx_interrupt_1_1  :  1 ; /* bits 21:21 */
    cs_uint32 ni_rx_interrupt_2_1  :  1 ; /* bits 22:22 */
    cs_uint32 ni_rx_interrupt_3_1  :  1 ; /* bits 23:23 */
    cs_uint32 ni_rx_interrupt_4_1  :  1 ; /* bits 24:24 */
    cs_uint32 ni_rx_interrupt_5_1  :  1 ; /* bits 25:25 */
    cs_uint32 ni_rx_interrupt_6_1  :  1 ; /* bits 26:26 */
    cs_uint32 ni_rx_interrupt_7_1  :  1 ; /* bits 27:27 */
    cs_uint32 ni_rx_interrupt_8_1  :  1 ; /* bits 28:28 */
    cs_uint32 ddr_intr             :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_ENABLE 0xf6840294
#define RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               :  2 ;
    cs_uint32 ddr_intr_en          :  1 ; /* bits 29:29 */
    cs_uint32 ni_rx_interrupt_8_1_en :  1 ; /* bits 28:28 */
    cs_uint32 ni_rx_interrupt_7_1_en :  1 ; /* bits 27:27 */
    cs_uint32 ni_rx_interrupt_6_1_en :  1 ; /* bits 26:26 */
    cs_uint32 ni_rx_interrupt_5_1_en :  1 ; /* bits 25:25 */
    cs_uint32 ni_rx_interrupt_4_1_en :  1 ; /* bits 24:24 */
    cs_uint32 ni_rx_interrupt_3_1_en :  1 ; /* bits 23:23 */
    cs_uint32 ni_rx_interrupt_2_1_en :  1 ; /* bits 22:22 */
    cs_uint32 ni_rx_interrupt_1_1_en :  1 ; /* bits 21:21 */
    cs_uint32 ni_rx_interrupt_0_1_en :  1 ; /* bits 20:20 */
    cs_uint32 spdif_intr_en        :  1 ; /* bits 19:19 */
    cs_uint32 lcd_intr_en          :  1 ; /* bits 18:18 */
    cs_uint32 dma_tso_lso_intr_1_en :  1 ; /* bits 17:17 */
    cs_uint32 axi_int_en           :  1 ; /* bits 16:16 */
    cs_uint32 channelwrite001_axi_interrupt_en :  1 ; /* bits 15:15 */
    cs_uint32 channelwrite000_axi_interrupt_en :  1 ; /* bits 14:14 */
    cs_uint32 channelread001_axi_interrupt_en :  1 ; /* bits 13:13 */
    cs_uint32 channelread000_axi_interrupt_en :  1 ; /* bits 12:12 */
    cs_uint32 crypto_tx_pkt_cnt_over_intr_en :  1 ; /* bits 11:11 */
    cs_uint32 encap_tx_pkt_cnt_over_intr_en :  1 ; /* bits 10:10 */
    cs_uint32 crypto_rx_pkt_cnt_over_intr_en :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_pkt_cnt_over_intr_en :  1 ; /* bits 8:8 */
    cs_uint32 crypto_ni_txf_mem_corr_ecc_err :  1 ; /* bits 7:7 */
    cs_uint32 crypto_ni_txf_mem_ecc_err :  1 ; /* bits 6:6 */
    cs_uint32 encap_ni_txf_mem_corr_ecc_err :  1 ; /* bits 5:5 */
    cs_uint32 encap_ni_txf_mem_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 ni_crypto_rxf_mem_corr_ecc_err_en :  1 ; /* bits 3:3 */
    cs_uint32 ni_crypto_rxf_mem_ecc_err_en :  1 ; /* bits 2:2 */
    cs_uint32 ni_encap_rxf_mem_corr_ecc_err_en :  1 ; /* bits 1:1 */
    cs_uint32 ni_encap_rxf_mem_ecc_err_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 ni_encap_rxf_mem_ecc_err_en :  1 ; /* bits 0:0 */
    cs_uint32 ni_encap_rxf_mem_corr_ecc_err_en :  1 ; /* bits 1:1 */
    cs_uint32 ni_crypto_rxf_mem_ecc_err_en :  1 ; /* bits 2:2 */
    cs_uint32 ni_crypto_rxf_mem_corr_ecc_err_en :  1 ; /* bits 3:3 */
    cs_uint32 encap_ni_txf_mem_ecc_err :  1 ; /* bits 4:4 */
    cs_uint32 encap_ni_txf_mem_corr_ecc_err :  1 ; /* bits 5:5 */
    cs_uint32 crypto_ni_txf_mem_ecc_err :  1 ; /* bits 6:6 */
    cs_uint32 crypto_ni_txf_mem_corr_ecc_err :  1 ; /* bits 7:7 */
    cs_uint32 encap_rx_pkt_cnt_over_intr_en :  1 ; /* bits 8:8 */
    cs_uint32 crypto_rx_pkt_cnt_over_intr_en :  1 ; /* bits 9:9 */
    cs_uint32 encap_tx_pkt_cnt_over_intr_en :  1 ; /* bits 10:10 */
    cs_uint32 crypto_tx_pkt_cnt_over_intr_en :  1 ; /* bits 11:11 */
    cs_uint32 channelread000_axi_interrupt_en :  1 ; /* bits 12:12 */
    cs_uint32 channelread001_axi_interrupt_en :  1 ; /* bits 13:13 */
    cs_uint32 channelwrite000_axi_interrupt_en :  1 ; /* bits 14:14 */
    cs_uint32 channelwrite001_axi_interrupt_en :  1 ; /* bits 15:15 */
    cs_uint32 axi_int_en           :  1 ; /* bits 16:16 */
    cs_uint32 dma_tso_lso_intr_1_en :  1 ; /* bits 17:17 */
    cs_uint32 lcd_intr_en          :  1 ; /* bits 18:18 */
    cs_uint32 spdif_intr_en        :  1 ; /* bits 19:19 */
    cs_uint32 ni_rx_interrupt_0_1_en :  1 ; /* bits 20:20 */
    cs_uint32 ni_rx_interrupt_1_1_en :  1 ; /* bits 21:21 */
    cs_uint32 ni_rx_interrupt_2_1_en :  1 ; /* bits 22:22 */
    cs_uint32 ni_rx_interrupt_3_1_en :  1 ; /* bits 23:23 */
    cs_uint32 ni_rx_interrupt_4_1_en :  1 ; /* bits 24:24 */
    cs_uint32 ni_rx_interrupt_5_1_en :  1 ; /* bits 25:25 */
    cs_uint32 ni_rx_interrupt_6_1_en :  1 ; /* bits 26:26 */
    cs_uint32 ni_rx_interrupt_7_1_en :  1 ; /* bits 27:27 */
    cs_uint32 ni_rx_interrupt_8_1_en :  1 ; /* bits 28:28 */
    cs_uint32 ddr_intr_en          :  1 ; /* bits 29:29 */
    cs_uint32 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT  0xf6840298
#define RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 crypto_axi_wr_err_txn_cnt_over :  1 ; /* bits 17:17 */
    cs_uint32 encap_axi_wr_err_txn_cnt_over :  1 ; /* bits 16:16 */
    cs_uint32 crypto_tx_retff_full :  1 ; /* bits 15:15 */
    cs_uint32 crypto_rx_retff_full :  1 ; /* bits 14:14 */
    cs_uint32 crypto_tx_retff_empty :  1 ; /* bits 13:13 */
    cs_uint32 crypto_rx_retff_empty :  1 ; /* bits 12:12 */
    cs_uint32 encap_tx_retff_full  :  1 ; /* bits 11:11 */
    cs_uint32 encap_rx_retff_full  :  1 ; /* bits 10:10 */
    cs_uint32 encap_tx_retff_empty :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_retff_empty :  1 ; /* bits 8:8 */
    cs_uint32 tx_crypto_ff_full    :  1 ; /* bits 7:7 */
    cs_uint32 tx_encap_ff_full     :  1 ; /* bits 6:6 */
    cs_uint32 rx_crypto_ff_full    :  1 ; /* bits 5:5 */
    cs_uint32 rx_encap_ff_full     :  1 ; /* bits 4:4 */
    cs_uint32 tx_crypto_ff_empty   :  1 ; /* bits 3:3 */
    cs_uint32 tx_encap_ff_empty    :  1 ; /* bits 2:2 */
    cs_uint32 rx_crypto_ff_empty   :  1 ; /* bits 1:1 */
    cs_uint32 rx_encap_ff_empty    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_encap_ff_empty    :  1 ; /* bits 0:0 */
    cs_uint32 rx_crypto_ff_empty   :  1 ; /* bits 1:1 */
    cs_uint32 tx_encap_ff_empty    :  1 ; /* bits 2:2 */
    cs_uint32 tx_crypto_ff_empty   :  1 ; /* bits 3:3 */
    cs_uint32 rx_encap_ff_full     :  1 ; /* bits 4:4 */
    cs_uint32 rx_crypto_ff_full    :  1 ; /* bits 5:5 */
    cs_uint32 tx_encap_ff_full     :  1 ; /* bits 6:6 */
    cs_uint32 tx_crypto_ff_full    :  1 ; /* bits 7:7 */
    cs_uint32 encap_rx_retff_empty :  1 ; /* bits 8:8 */
    cs_uint32 encap_tx_retff_empty :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_retff_full  :  1 ; /* bits 10:10 */
    cs_uint32 encap_tx_retff_full  :  1 ; /* bits 11:11 */
    cs_uint32 crypto_rx_retff_empty :  1 ; /* bits 12:12 */
    cs_uint32 crypto_tx_retff_empty :  1 ; /* bits 13:13 */
    cs_uint32 crypto_rx_retff_full :  1 ; /* bits 14:14 */
    cs_uint32 crypto_tx_retff_full :  1 ; /* bits 15:15 */
    cs_uint32 encap_axi_wr_err_txn_cnt_over :  1 ; /* bits 16:16 */
    cs_uint32 crypto_axi_wr_err_txn_cnt_over :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_ENABLE 0xf684029c
#define RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 14 ;
    cs_uint32 crypto_axi_wr_err_txn_cnt_over_intr_en :  1 ; /* bits 17:17 */
    cs_uint32 encap_axi_wr_err_txn_cnt_over_intr_en :  1 ; /* bits 16:16 */
    cs_uint32 crypto_tx_retff_full_en :  1 ; /* bits 15:15 */
    cs_uint32 crypto_rx_retff_full_en :  1 ; /* bits 14:14 */
    cs_uint32 crypto_tx_retff_empty_en :  1 ; /* bits 13:13 */
    cs_uint32 crypto_rx_retff_empty_en :  1 ; /* bits 12:12 */
    cs_uint32 encap_tx_retff_full_en :  1 ; /* bits 11:11 */
    cs_uint32 encap_rx_retff_full_en :  1 ; /* bits 10:10 */
    cs_uint32 encap_tx_retff_empty_en :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_retff_empty_en :  1 ; /* bits 8:8 */
    cs_uint32 tx_crypto_ff_full_en :  1 ; /* bits 7:7 */
    cs_uint32 tx_encap_ff_full_en  :  1 ; /* bits 6:6 */
    cs_uint32 rx_crypto_ff_full_en :  1 ; /* bits 5:5 */
    cs_uint32 rx_encap_ff_full_en  :  1 ; /* bits 4:4 */
    cs_uint32 tx_crypto_ff_empty_en :  1 ; /* bits 3:3 */
    cs_uint32 tx_encap_ff_empty_en :  1 ; /* bits 2:2 */
    cs_uint32 rx_crypto_ff_empty_en :  1 ; /* bits 1:1 */
    cs_uint32 rx_encap_ff_empty_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rx_encap_ff_empty_en :  1 ; /* bits 0:0 */
    cs_uint32 rx_crypto_ff_empty_en :  1 ; /* bits 1:1 */
    cs_uint32 tx_encap_ff_empty_en :  1 ; /* bits 2:2 */
    cs_uint32 tx_crypto_ff_empty_en :  1 ; /* bits 3:3 */
    cs_uint32 rx_encap_ff_full_en  :  1 ; /* bits 4:4 */
    cs_uint32 rx_crypto_ff_full_en :  1 ; /* bits 5:5 */
    cs_uint32 tx_encap_ff_full_en  :  1 ; /* bits 6:6 */
    cs_uint32 tx_crypto_ff_full_en :  1 ; /* bits 7:7 */
    cs_uint32 encap_rx_retff_empty_en :  1 ; /* bits 8:8 */
    cs_uint32 encap_tx_retff_empty_en :  1 ; /* bits 9:9 */
    cs_uint32 encap_rx_retff_full_en :  1 ; /* bits 10:10 */
    cs_uint32 encap_tx_retff_full_en :  1 ; /* bits 11:11 */
    cs_uint32 crypto_rx_retff_empty_en :  1 ; /* bits 12:12 */
    cs_uint32 crypto_tx_retff_empty_en :  1 ; /* bits 13:13 */
    cs_uint32 crypto_rx_retff_full_en :  1 ; /* bits 14:14 */
    cs_uint32 crypto_tx_retff_full_en :  1 ; /* bits 15:15 */
    cs_uint32 encap_axi_wr_err_txn_cnt_over_intr_en :  1 ; /* bits 16:16 */
    cs_uint32 crypto_axi_wr_err_txn_cnt_over_intr_en :  1 ; /* bits 17:17 */
    cs_uint32 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT    0xf68402a0
#define RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 recirc_reg_1_intr    :  1 ; /* bits 1:1 */
    cs_uint32 recirc_reg_0_intr    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 recirc_reg_0_intr    :  1 ; /* bits 0:0 */
    cs_uint32 recirc_reg_1_intr    :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_t;





#define RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_ENABLE 0xf68402a4
#define RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 30 ;
    cs_uint32 recirc_reg_1_intr_en :  1 ; /* bits 1:1 */
    cs_uint32 recirc_reg_0_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 recirc_reg_0_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 recirc_reg_1_intr_en :  1 ; /* bits 1:1 */
    cs_uint32 rsrvd1               : 30 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT   0xf68402a8
#define RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 wake_on_lan_intr_2_sync :  1 ; /* bits 2:2 */
    cs_uint32 wake_on_lan_intr_1_sync :  1 ; /* bits 1:1 */
    cs_uint32 wake_on_lan_intr_0_sync :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wake_on_lan_intr_0_sync :  1 ; /* bits 0:0 */
    cs_uint32 wake_on_lan_intr_1_sync :  1 ; /* bits 1:1 */
    cs_uint32 wake_on_lan_intr_2_sync :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_t;





#define RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_ENABLE 0xf68402ac
#define RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_ENABLE_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 29 ;
    cs_uint32 wake_on_lan_2_intr_en :  1 ; /* bits 2:2 */
    cs_uint32 wake_on_lan_1_intr_en :  1 ; /* bits 1:1 */
    cs_uint32 wake_on_lan_0_intr_en :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 wake_on_lan_0_intr_en :  1 ; /* bits 0:0 */
    cs_uint32 wake_on_lan_1_intr_en :  1 ; /* bits 1:1 */
    cs_uint32 wake_on_lan_2_intr_en :  1 ; /* bits 2:2 */
    cs_uint32 rsrvd1               : 29 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_ENABLE_t;





#define RECIRC_TOP_RECPU_ENCAP_AXI_WR_ERR_TXN_COUNT 0xf68402b0
#define RECIRC_TOP_RECPU_ENCAP_AXI_WR_ERR_TXN_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 encap_axi_wr_err_txn_cnt : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 encap_axi_wr_err_txn_cnt : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_ENCAP_AXI_WR_ERR_TXN_COUNT_t;





#define RECIRC_TOP_RECPU_CRYPTO_AXI_WR_ERR_TXN_COUNT 0xf68402b4
#define RECIRC_TOP_RECPU_CRYPTO_AXI_WR_ERR_TXN_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 crypto_axi_wr_err_txn_cnt : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 crypto_axi_wr_err_txn_cnt : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CRYPTO_AXI_WR_ERR_TXN_COUNT_t;





#define RECIRC_TOP_RECPU_CFG_COUNT_MODE          0xf68402b8
#define RECIRC_TOP_RECPU_CFG_COUNT_MODE_dft      0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 26 ;
    cs_uint32 cfg_count_mode_rcpu1_reg :  2 ; /* bits 5:4 */
    cs_uint32 cfg_count_mode_rcpu0_reg :  2 ; /* bits 3:2 */
    cs_uint32 cfg_debug_enable_rcpu1_reg :  1 ; /* bits 1:1 */
    cs_uint32 cfg_debug_enable_rcpu0_reg :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_debug_enable_rcpu0_reg :  1 ; /* bits 0:0 */
    cs_uint32 cfg_debug_enable_rcpu1_reg :  1 ; /* bits 1:1 */
    cs_uint32 cfg_count_mode_rcpu0_reg :  2 ; /* bits 3:2 */
    cs_uint32 cfg_count_mode_rcpu1_reg :  2 ; /* bits 5:4 */
    cs_uint32 rsrvd1               : 26 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_COUNT_MODE_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU0 0xf68402bc
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_1_rcpu0_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_1_rcpu0_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU0_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU0 0xf68402c0
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_mask_1_rcpu0_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_mask_1_rcpu0_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU0_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU0 0xf68402c4
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_2_rcpu0_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_2_rcpu0_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU0_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU0 0xf68402c8
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU0_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_mask_2_rcpu0_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_mask_2_rcpu0_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU0_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU1 0xf68402cc
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_1_rcpu1_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_1_rcpu1_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU1_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU1 0xf68402d0
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_mask_1_rcpu1_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_mask_1_rcpu1_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU1_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU1 0xf68402d4
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_2_rcpu1_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_2_rcpu1_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU1_t;





#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU1 0xf68402d8
#define RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rsrvd1               : 12 ;
    cs_uint32 cfg_reg_stall_trigger_mask_2_rcpu1_reg : 20 ; /* bits 19:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 cfg_reg_stall_trigger_mask_2_rcpu1_reg : 20 ; /* bits 19:0 */
    cs_uint32 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU1_t;





#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_1 0xf68402dc
#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu0_reg_incr_cycle_count_1 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_reg_incr_cycle_count_1 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_1_t;





#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_2 0xf68402e0
#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu0_reg_incr_cycle_count_2 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_reg_incr_cycle_count_2 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_2_t;





#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_FREE_RUN_COUNT 0xf68402e4
#define RECIRC_TOP_RECPU_RCPU0_REG_INCR_FREE_RUN_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu0_reg_incr_free_run_count : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu0_reg_incr_free_run_count : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU0_REG_INCR_FREE_RUN_COUNT_t;





#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_1 0xf68402e8
#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_1_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu1_reg_incr_cycle_count_1 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu1_reg_incr_cycle_count_1 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_1_t;





#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_2 0xf68402ec
#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_2_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu1_reg_incr_cycle_count_2 : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu1_reg_incr_cycle_count_2 : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_2_t;





#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_FREE_RUN_COUNT 0xf68402f0
#define RECIRC_TOP_RECPU_RCPU1_REG_INCR_FREE_RUN_COUNT_dft 0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 rcpu1_reg_incr_free_run_count : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 rcpu1_reg_incr_free_run_count : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_RCPU1_REG_INCR_FREE_RUN_COUNT_t;





#define RECIRC_TOP_RECPU_FPGAB_ID                0xf68402f4
#define RECIRC_TOP_RECPU_FPGAB_ID_dft            0x00000000




typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint32 id                   : 32 ; /* bits 31:0 */
#   endif
  } bf ;
  cs_uint32     wrd ;
} RECIRC_TOP_RECPU_FPGAB_ID_t;



    
  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* RECPU */

typedef struct {
  RECIRC_TOP_RECPU_NI_CFG_BURST_SIZE_t     NI_CFG_BURST_SIZE;             /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[3];                    
  RECIRC_TOP_RECPU_NI_RX_CFG_FF_THRESHOLD_t NI_RX_CFG_FF_THRESHOLD;        /* addr: 0x00000004 */ 
  cs_uint32                                rsrvd2[3];                    
  RECIRC_TOP_RECPU_RX_CRYPTO_DST_ADDR_t    RX_CRYPTO_DST_ADDR;            /* addr: 0x00000008 */ 
  cs_uint32                                rsrvd3[3];                    
  RECIRC_TOP_RECPU_RX_CRYPTO_DST_FF_STS_t  RX_CRYPTO_DST_FF_STS;          /* addr: 0x0000000c */ 
  cs_uint32                                rsrvd4[3];                    
  RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_ADDR_t CRYPTO_RX_RETURN_ADDR;         /* addr: 0x00000010 */ 
  cs_uint32                                rsrvd5[3];                    
  RECIRC_TOP_RECPU_CRYPTO_RX_RETURN_FF_STS_t CRYPTO_RX_RETURN_FF_STS;       /* addr: 0x00000014 */ 
  cs_uint32                                rsrvd6[3];                    
  RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_COUNT_t CRYPTO_RX_PACKET_COUNT;        /* addr: 0x00000018 */ 
  cs_uint32                                rsrvd7[3];                    
  RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTERRUPT_t NI_CRYPTO_PKT_RECEIVE_INTERRUPT; /* addr: 0x0000001c */ 
  cs_uint32                                rsrvd8[3];                    
  RECIRC_TOP_RECPU_NI_CRYPTO_PKT_RECEIVE_INTR_ENABLE_t NI_CRYPTO_PKT_RECEIVE_INTR_ENABLE; /* addr: 0x00000020 */ 
  cs_uint32                                rsrvd9[3];                    
  RECIRC_TOP_RECPU_CRYPTO_RX_PACKET_LENGTH_t CRYPTO_RX_PACKET_LENGTH;       /* addr: 0x00000024 */ 
  cs_uint32                                rsrvd10[3];                   
  RECIRC_TOP_RECPU_TX_CRYPTO_SRC_ADDR_t    TX_CRYPTO_SRC_ADDR;            /* addr: 0x00000028 */ 
  cs_uint32                                rsrvd11[3];                   
  RECIRC_TOP_RECPU_TX_CRYPTO_CMD_t         TX_CRYPTO_CMD;                 /* addr: 0x0000002c */ 
  cs_uint32                                rsrvd12[3];                   
  RECIRC_TOP_RECPU_TX_CRYPTO_SRC_FF_STS_t  TX_CRYPTO_SRC_FF_STS;          /* addr: 0x00000030 */ 
  cs_uint32                                rsrvd13[3];                   
  RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_ADDR_t CRYPTO_TX_RETURN_ADDR;         /* addr: 0x00000034 */ 
  cs_uint32                                rsrvd14[3];                   
  RECIRC_TOP_RECPU_CRYPTO_TX_RETURN_FF_STS_t CRYPTO_TX_RETURN_FF_STS;       /* addr: 0x00000038 */ 
  cs_uint32                                rsrvd15[3];                   
  RECIRC_TOP_RECPU_CRYPTO_TX_PACKET_COUNT_t CRYPTO_TX_PACKET_COUNT;        /* addr: 0x0000003c */ 
  cs_uint32                                rsrvd16[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTERRUPT_t CRYPTO_NI_PKT_TRANSMIT_INTERRUPT; /* addr: 0x00000040 */ 
  cs_uint32                                rsrvd17[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_PKT_TRANSMIT_INTR_ENABLE_t CRYPTO_NI_PKT_TRANSMIT_INTR_ENABLE; /* addr: 0x00000044 */ 
  cs_uint32                                rsrvd18[3];                   
  RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_ACCESS_t NI_CRYPTO_WRFIFO_SW_ACCESS;    /* addr: 0x00000048 */ 
  cs_uint32                                rsrvd19[3];                   
  RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA2_t NI_CRYPTO_WRFIFO_SW_DATA2;     /* addr: 0x0000004c */ 
  cs_uint32                                rsrvd20[3];                   
  RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA1_t NI_CRYPTO_WRFIFO_SW_DATA1;     /* addr: 0x00000050 */ 
  cs_uint32                                rsrvd21[3];                   
  RECIRC_TOP_RECPU_NI_CRYPTO_WRFIFO_SW_DATA0_t NI_CRYPTO_WRFIFO_SW_DATA0;     /* addr: 0x00000054 */ 
  cs_uint32                                rsrvd22[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_ACCESS_t CRYPTO_NI_RDFIFO_SW_ACCESS;    /* addr: 0x00000058 */ 
  cs_uint32                                rsrvd23[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA2_t CRYPTO_NI_RDFIFO_SW_DATA2;     /* addr: 0x0000005c */ 
  cs_uint32                                rsrvd24[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA1_t CRYPTO_NI_RDFIFO_SW_DATA1;     /* addr: 0x00000060 */ 
  cs_uint32                                rsrvd25[3];                   
  RECIRC_TOP_RECPU_CRYPTO_NI_RDFIFO_SW_DATA0_t CRYPTO_NI_RDFIFO_SW_DATA0;     /* addr: 0x00000064 */ 
  cs_uint32                                rsrvd26[3];                   
  RECIRC_TOP_RECPU_RX_ENCAP_DST_ADDR_t     RX_ENCAP_DST_ADDR;             /* addr: 0x00000068 */ 
  cs_uint32                                rsrvd27[3];                   
  RECIRC_TOP_RECPU_RX_ENCAP_DST_FF_STS_t   RX_ENCAP_DST_FF_STS;           /* addr: 0x0000006c */ 
  cs_uint32                                rsrvd28[3];                   
  RECIRC_TOP_RECPU_ENCAP_RX_RETURN_ADDR_t  ENCAP_RX_RETURN_ADDR;          /* addr: 0x00000070 */ 
  cs_uint32                                rsrvd29[3];                   
  RECIRC_TOP_RECPU_ENCAP_RX_RETURN_FF_STS_t ENCAP_RX_RETURN_FF_STS;        /* addr: 0x00000074 */ 
  cs_uint32                                rsrvd30[3];                   
  RECIRC_TOP_RECPU_ENCAP_RX_PACKET_COUNT_t ENCAP_RX_PACKET_COUNT;         /* addr: 0x00000078 */ 
  cs_uint32                                rsrvd31[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTERRUPT_t NI_ENCAP_PKT_RECEIVE_INTERRUPT; /* addr: 0x0000007c */ 
  cs_uint32                                rsrvd32[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_PKT_RECEIVE_INTR_ENABLE_t NI_ENCAP_PKT_RECEIVE_INTR_ENABLE; /* addr: 0x00000080 */ 
  cs_uint32                                rsrvd33[3];                   
  RECIRC_TOP_RECPU_ENCAP_RX_PACKET_LENGTH_t ENCAP_RX_PACKET_LENGTH;        /* addr: 0x00000084 */ 
  cs_uint32                                rsrvd34[3];                   
  RECIRC_TOP_RECPU_TX_ENCAP_SRC_ADDR_t     TX_ENCAP_SRC_ADDR;             /* addr: 0x00000088 */ 
  cs_uint32                                rsrvd35[3];                   
  RECIRC_TOP_RECPU_TX_ENCAP_CMD_t          TX_ENCAP_CMD;                  /* addr: 0x0000008c */ 
  cs_uint32                                rsrvd36[3];                   
  RECIRC_TOP_RECPU_TX_ENCAP_SRC_FF_STS_t   TX_ENCAP_SRC_FF_STS;           /* addr: 0x00000090 */ 
  cs_uint32                                rsrvd37[3];                   
  RECIRC_TOP_RECPU_ENCAP_TX_RETURN_ADDR_t  ENCAP_TX_RETURN_ADDR;          /* addr: 0x00000094 */ 
  cs_uint32                                rsrvd38[3];                   
  RECIRC_TOP_RECPU_ENCAP_TX_RETURN_FF_STS_t ENCAP_TX_RETURN_FF_STS;        /* addr: 0x00000098 */ 
  cs_uint32                                rsrvd39[3];                   
  RECIRC_TOP_RECPU_ENCAP_TX_PACKET_COUNT_t ENCAP_TX_PACKET_COUNT;         /* addr: 0x0000009c */ 
  cs_uint32                                rsrvd40[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTERRUPT_t ENCAP_NI_PKT_TRANSMIT_INTERRUPT; /* addr: 0x000000a0 */ 
  cs_uint32                                rsrvd41[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_PKT_TRANSMIT_INTR_ENABLE_t ENCAP_NI_PKT_TRANSMIT_INTR_ENABLE; /* addr: 0x000000a4 */ 
  cs_uint32                                rsrvd42[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_ACCESS_t NI_ENCAP_WRFIFO_SW_ACCESS;     /* addr: 0x000000a8 */ 
  cs_uint32                                rsrvd43[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA2_t NI_ENCAP_WRFIFO_SW_DATA2;      /* addr: 0x000000ac */ 
  cs_uint32                                rsrvd44[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA1_t NI_ENCAP_WRFIFO_SW_DATA1;      /* addr: 0x000000b0 */ 
  cs_uint32                                rsrvd45[3];                   
  RECIRC_TOP_RECPU_NI_ENCAP_WRFIFO_SW_DATA0_t NI_ENCAP_WRFIFO_SW_DATA0;      /* addr: 0x000000b4 */ 
  cs_uint32                                rsrvd46[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_ACCESS_t ENCAP_NI_RDFIFO_SW_ACCESS;     /* addr: 0x000000b8 */ 
  cs_uint32                                rsrvd47[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA2_t ENCAP_NI_RDFIFO_SW_DATA2;      /* addr: 0x000000bc */ 
  cs_uint32                                rsrvd48[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA1_t ENCAP_NI_RDFIFO_SW_DATA1;      /* addr: 0x000000c0 */ 
  cs_uint32                                rsrvd49[3];                   
  RECIRC_TOP_RECPU_ENCAP_NI_RDFIFO_SW_DATA0_t ENCAP_NI_RDFIFO_SW_DATA0;      /* addr: 0x000000c4 */ 
  cs_uint32                                rsrvd50[3];                   
  RECIRC_TOP_RECPU_NI_ADAPT_STATUS_t       NI_ADAPT_STATUS;               /* addr: 0x000000c8 */ 
  cs_uint32                                rsrvd51[3];                   
  RECIRC_TOP_RECPU_CFG_RECIRC_CPU_t        CFG_RECIRC_CPU;                /* addr: 0x000000cc */ 
  cs_uint32                                rsrvd52[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX0_REQ_t    CPU_0_MAILBOX0_REQ;            /* addr: 0x000000d0 */ 
  cs_uint32                                rsrvd53[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX0_REQ_t    CPU_1_MAILBOX0_REQ;            /* addr: 0x000000d4 */ 
  cs_uint32                                rsrvd54[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX0_REQ_t    CPU_2_MAILBOX0_REQ;            /* addr: 0x000000d8 */ 
  cs_uint32                                rsrvd55[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX0_REQ_t    CPU_3_MAILBOX0_REQ;            /* addr: 0x000000dc */ 
  cs_uint32                                rsrvd56[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX0_ACK_t    CPU_0_MAILBOX0_ACK;            /* addr: 0x000000e0 */ 
  cs_uint32                                rsrvd57[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX0_ACK_t    CPU_1_MAILBOX0_ACK;            /* addr: 0x000000e4 */ 
  cs_uint32                                rsrvd58[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX0_ACK_t    CPU_2_MAILBOX0_ACK;            /* addr: 0x000000e8 */ 
  cs_uint32                                rsrvd59[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX0_ACK_t    CPU_3_MAILBOX0_ACK;            /* addr: 0x000000ec */ 
  cs_uint32                                rsrvd60[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX1_REQ_t    CPU_0_MAILBOX1_REQ;            /* addr: 0x000000f0 */ 
  cs_uint32                                rsrvd61[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX1_REQ_t    CPU_1_MAILBOX1_REQ;            /* addr: 0x000000f4 */ 
  cs_uint32                                rsrvd62[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX1_REQ_t    CPU_2_MAILBOX1_REQ;            /* addr: 0x000000f8 */ 
  cs_uint32                                rsrvd63[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX1_REQ_t    CPU_3_MAILBOX1_REQ;            /* addr: 0x000000fc */ 
  cs_uint32                                rsrvd64[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX1_ACK_t    CPU_0_MAILBOX1_ACK;            /* addr: 0x00000100 */ 
  cs_uint32                                rsrvd65[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX1_ACK_t    CPU_1_MAILBOX1_ACK;            /* addr: 0x00000104 */ 
  cs_uint32                                rsrvd66[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX1_ACK_t    CPU_2_MAILBOX1_ACK;            /* addr: 0x00000108 */ 
  cs_uint32                                rsrvd67[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX1_ACK_t    CPU_3_MAILBOX1_ACK;            /* addr: 0x0000010c */ 
  cs_uint32                                rsrvd68[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX2_REQ_t    CPU_0_MAILBOX2_REQ;            /* addr: 0x00000110 */ 
  cs_uint32                                rsrvd69[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX2_REQ_t    CPU_1_MAILBOX2_REQ;            /* addr: 0x00000114 */ 
  cs_uint32                                rsrvd70[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX2_REQ_t    CPU_2_MAILBOX2_REQ;            /* addr: 0x00000118 */ 
  cs_uint32                                rsrvd71[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX2_REQ_t    CPU_3_MAILBOX2_REQ;            /* addr: 0x0000011c */ 
  cs_uint32                                rsrvd72[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX2_ACK_t    CPU_0_MAILBOX2_ACK;            /* addr: 0x00000120 */ 
  cs_uint32                                rsrvd73[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX2_ACK_t    CPU_1_MAILBOX2_ACK;            /* addr: 0x00000124 */ 
  cs_uint32                                rsrvd74[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX2_ACK_t    CPU_2_MAILBOX2_ACK;            /* addr: 0x00000128 */ 
  cs_uint32                                rsrvd75[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX2_ACK_t    CPU_3_MAILBOX2_ACK;            /* addr: 0x0000012c */ 
  cs_uint32                                rsrvd76[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX3_REQ_t    CPU_0_MAILBOX3_REQ;            /* addr: 0x00000130 */ 
  cs_uint32                                rsrvd77[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX3_REQ_t    CPU_1_MAILBOX3_REQ;            /* addr: 0x00000134 */ 
  cs_uint32                                rsrvd78[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX3_REQ_t    CPU_2_MAILBOX3_REQ;            /* addr: 0x00000138 */ 
  cs_uint32                                rsrvd79[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX3_REQ_t    CPU_3_MAILBOX3_REQ;            /* addr: 0x0000013c */ 
  cs_uint32                                rsrvd80[3];                   
  RECIRC_TOP_RECPU_CPU_0_MAILBOX3_ACK_t    CPU_0_MAILBOX3_ACK;            /* addr: 0x00000140 */ 
  cs_uint32                                rsrvd81[3];                   
  RECIRC_TOP_RECPU_CPU_1_MAILBOX3_ACK_t    CPU_1_MAILBOX3_ACK;            /* addr: 0x00000144 */ 
  cs_uint32                                rsrvd82[3];                   
  RECIRC_TOP_RECPU_CPU_2_MAILBOX3_ACK_t    CPU_2_MAILBOX3_ACK;            /* addr: 0x00000148 */ 
  cs_uint32                                rsrvd83[3];                   
  RECIRC_TOP_RECPU_CPU_3_MAILBOX3_ACK_t    CPU_3_MAILBOX3_ACK;            /* addr: 0x0000014c */ 
  cs_uint32                                rsrvd84[3];                   
  RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_t CPU0_MAILBOX_INTERRUPT;        /* addr: 0x00000150 */ 
  cs_uint32                                rsrvd85[3];                   
  RECIRC_TOP_RECPU_CPU0_MAILBOX_INTERRUPT_ENABLE_t CPU0_MAILBOX_INTERRUPT_ENABLE; /* addr: 0x00000154 */ 
  cs_uint32                                rsrvd86[3];                   
  RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_t CPU1_MAILBOX_INTERRUPT;        /* addr: 0x00000158 */ 
  cs_uint32                                rsrvd87[3];                   
  RECIRC_TOP_RECPU_CPU1_MAILBOX_INTERRUPT_ENABLE_t CPU1_MAILBOX_INTERRUPT_ENABLE; /* addr: 0x0000015c */ 
  cs_uint32                                rsrvd88[3];                   
  RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_t CPU2_MAILBOX_INTERRUPT;        /* addr: 0x00000160 */ 
  cs_uint32                                rsrvd89[3];                   
  RECIRC_TOP_RECPU_CPU2_MAILBOX_INTERRUPT_ENABLE_t CPU2_MAILBOX_INTERRUPT_ENABLE; /* addr: 0x00000164 */ 
  cs_uint32                                rsrvd90[3];                   
  RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_t CPU3_MAILBOX_INTERRUPT;        /* addr: 0x00000168 */ 
  cs_uint32                                rsrvd91[3];                   
  RECIRC_TOP_RECPU_CPU3_MAILBOX_INTERRUPT_ENABLE_t CPU3_MAILBOX_INTERRUPT_ENABLE; /* addr: 0x0000016c */ 
  cs_uint32                                rsrvd92[3];                   
  RECIRC_TOP_RECPU_AXI_TIMEOUT_t           AXI_TIMEOUT;                   /* addr: 0x00000170 */ 
  cs_uint32                                rsrvd93[3];                   
  RECIRC_TOP_RECPU_AXI_REG_CONFIG_t        AXI_REG_CONFIG;                /* addr: 0x00000174 */ 
  cs_uint32                                rsrvd94[3];                   
  RECIRC_TOP_RECPU_AXI_INT_t               AXI_INT;                       /* addr: 0x00000178 */ 
  cs_uint32                                rsrvd95[3];                   
  RECIRC_TOP_RECPU_AXI_IE_t                AXI_IE;                        /* addr: 0x0000017c */ 
  cs_uint32                                rsrvd96[3];                   
  RECIRC_TOP_RECPU_RCPU0_NMI_INTERRUPT_t   RCPU0_NMI_INTERRUPT;           /* addr: 0x00000180 */ 
  cs_uint32                                rsrvd97[3];                   
  RECIRC_TOP_RECPU_RCPU0_INTR_ENABLE_t     RCPU0_INTR_ENABLE;             /* addr: 0x00000184 */ 
  cs_uint32                                rsrvd98[3];                   
  RECIRC_TOP_RECPU_RCPU1_NMI_INTERRUPT_t   RCPU1_NMI_INTERRUPT;           /* addr: 0x00000188 */ 
  cs_uint32                                rsrvd99[3];                   
  RECIRC_TOP_RECPU_RCPU1_INTR_ENABLE_t     RCPU1_INTR_ENABLE;             /* addr: 0x0000018c */ 
  cs_uint32                                rsrvd100[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_t RECIRC_REG_0_INTERRUPT;        /* addr: 0x00000190 */ 
  cs_uint32                                rsrvd101[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_0_INTERRUPT_ENABLE_t RECIRC_REG_0_INTERRUPT_ENABLE; /* addr: 0x00000194 */ 
  cs_uint32                                rsrvd102[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_t RECIRC_REG_1_INTERRUPT;        /* addr: 0x00000198 */ 
  cs_uint32                                rsrvd103[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_1_INTERRUPT_ENABLE_t RECIRC_REG_1_INTERRUPT_ENABLE; /* addr: 0x0000019c */ 
  cs_uint32                                rsrvd104[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_t  RECIRC_REG_INTERRUPT;          /* addr: 0x000001a0 */ 
  cs_uint32                                rsrvd105[3];                  
  RECIRC_TOP_RECPU_RECIRC_REG_INTERRUPT_ENABLE_t RECIRC_REG_INTERRUPT_ENABLE;   /* addr: 0x000001a4 */ 
  cs_uint32                                rsrvd106[3];                  
  RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_t WAKE_ON_LAN_INTERRUPT;         /* addr: 0x000001a8 */ 
  cs_uint32                                rsrvd107[3];                  
  RECIRC_TOP_RECPU_WAKE_ON_LAN_INTERRUPT_ENABLE_t WAKE_ON_LAN_INTERRUPT_ENABLE;  /* addr: 0x000001ac */ 
  cs_uint32                                rsrvd108[3];                  
  RECIRC_TOP_RECPU_ENCAP_AXI_WR_ERR_TXN_COUNT_t ENCAP_AXI_WR_ERR_TXN_COUNT;    /* addr: 0x000001b0 */ 
  cs_uint32                                rsrvd109[3];                  
  RECIRC_TOP_RECPU_CRYPTO_AXI_WR_ERR_TXN_COUNT_t CRYPTO_AXI_WR_ERR_TXN_COUNT;   /* addr: 0x000001b4 */ 
  cs_uint32                                rsrvd110[3];                  
  RECIRC_TOP_RECPU_CFG_COUNT_MODE_t        CFG_COUNT_MODE;                /* addr: 0x000001b8 */ 
  cs_uint32                                rsrvd111[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU0_t CFG_STALL_TRIGGER_1_RCPU0;     /* addr: 0x000001bc */ 
  cs_uint32                                rsrvd112[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU0_t CFG_STALL_TRIGGER_MASK_1_RCPU0; /* addr: 0x000001c0 */ 
  cs_uint32                                rsrvd113[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU0_t CFG_STALL_TRIGGER_2_RCPU0;     /* addr: 0x000001c4 */ 
  cs_uint32                                rsrvd114[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU0_t CFG_STALL_TRIGGER_MASK_2_RCPU0; /* addr: 0x000001c8 */ 
  cs_uint32                                rsrvd115[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_1_RCPU1_t CFG_STALL_TRIGGER_1_RCPU1;     /* addr: 0x000001cc */ 
  cs_uint32                                rsrvd116[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_1_RCPU1_t CFG_STALL_TRIGGER_MASK_1_RCPU1; /* addr: 0x000001d0 */ 
  cs_uint32                                rsrvd117[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_2_RCPU1_t CFG_STALL_TRIGGER_2_RCPU1;     /* addr: 0x000001d4 */ 
  cs_uint32                                rsrvd118[3];                  
  RECIRC_TOP_RECPU_CFG_STALL_TRIGGER_MASK_2_RCPU1_t CFG_STALL_TRIGGER_MASK_2_RCPU1; /* addr: 0x000001d8 */ 
  cs_uint32                                rsrvd119[3];                  
  RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_1_t RCPU0_REG_INCR_CYCLE_COUNT_1;  /* addr: 0x000001dc */ 
  cs_uint32                                rsrvd120[3];                  
  RECIRC_TOP_RECPU_RCPU0_REG_INCR_CYCLE_COUNT_2_t RCPU0_REG_INCR_CYCLE_COUNT_2;  /* addr: 0x000001e0 */ 
  cs_uint32                                rsrvd121[3];                  
  RECIRC_TOP_RECPU_RCPU0_REG_INCR_FREE_RUN_COUNT_t RCPU0_REG_INCR_FREE_RUN_COUNT; /* addr: 0x000001e4 */ 
  cs_uint32                                rsrvd122[3];                  
  RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_1_t RCPU1_REG_INCR_CYCLE_COUNT_1;  /* addr: 0x000001e8 */ 
  cs_uint32                                rsrvd123[3];                  
  RECIRC_TOP_RECPU_RCPU1_REG_INCR_CYCLE_COUNT_2_t RCPU1_REG_INCR_CYCLE_COUNT_2;  /* addr: 0x000001ec */ 
  cs_uint32                                rsrvd124[3];                  
  RECIRC_TOP_RECPU_RCPU1_REG_INCR_FREE_RUN_COUNT_t RCPU1_REG_INCR_FREE_RUN_COUNT; /* addr: 0x000001f0 */ 
  cs_uint32                                rsrvd125[3];                  
  RECIRC_TOP_RECPU_FPGAB_ID_t              FPGAB_ID;                      /* addr: 0x000001f4 */ 
} RECIRC_TOP_RECPU_t;

  

  
  
  
/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* RECIRC_TOP */

typedef struct {
  RECIRC_TOP_RECIR_t                       RECIR;                         /* addr: 0x00000000 */ 
  cs_uint32                                rsrvd1[261335];               
  RECIRC_TOP_N_AXI_t                       N_AXI;                         /* addr: 0x00040000 */ 
  cs_uint32                                rsrvd2[223];                  
  RECIRC_TOP_RECPU_t                       RECPU;                         /* addr: 0x00040100 */ 
} RECIRC_TOP_t;



/******************************************************************
 *
 * Block declaration
 *
 ******************************************************************/

/* GoldenGate */
#if 0
typedef struct {
  cs_uint32                                rsrvd1[4026531840];           
  GLB_t                                    GLB;                           /* addr: 0xf0000000 */ 
  cs_uint32                                rsrvd2[65385];                
  NI_TOP_t                                 NI_TOP;                        /* addr: 0xf0010000 */ 
  cs_uint32                                rsrvd3[64905];                
  FETOP_t                                  FETOP;                         /* addr: 0xf0020000 */ 
  cs_uint32                                rsrvd4[57259];                
  QM_t                                     QM;                            /* addr: 0xf0030000 */ 
  cs_uint32                                rsrvd5[65283];                
  TM_t                                     TM;                            /* addr: 0xf0040000 */ 
  cs_uint32                                rsrvd6[64425];                
  FLASH_AXI_t                              FLASH_axi;                     /* addr: 0xf0050000 */ 
  cs_uint32                                rsrvd7[65257];                
  SCH_t                                    SCH;                           /* addr: 0xf0060000 */ 
  cs_uint32                                rsrvd8[65427];                
  PER_t                                    PER;                           /* addr: 0xf0070000 */ 
  cs_uint32                                rsrvd9[65177];                
  TS_t                                     TS;                            /* addr: 0xf0080000 */ 
  cs_uint32                                rsrvd10[64355];               
  DMA_t                                    DMA;                           /* addr: 0xf0090000 */ 
  cs_uint32                                rsrvd11[63699];               
  PCIE_SATA_t                              PCIE_SATA;                     /* addr: 0xf00a0000 */ 
  cs_uint32                                rsrvd12[4583261];             
  SDRAM_t                                  SDRAM;                         /* addr: 0xf0500000 */ 
  cs_uint32                                rsrvd13[1048161];             
  TRNG_t                                   TRNG;                          /* addr: 0xf0600000 */ 
  cs_uint32                                rsrvd14[70385651];            
  RTC_t                                    RTC;                           /* addr: 0xf4920000 */ 
  cs_uint32                                rsrvd15[4057];                
  CIR_PWRCTRL_t                            CIR_PWRCTRL;                   /* addr: 0xf4921000 */ 
  cs_uint32                                rsrvd16[24533];               
  SPDIF_t                                  SPDIF;                         /* addr: 0xf4927000 */ 
  cs_uint32                                rsrvd17[7214981];             
  ROMOTP_t                                 ROMOTP;                        /* addr: 0xf5008800 */ 
  cs_uint32                                rsrvd18[23033853];            
  CRYPTO_t                                 CRYPTO;                        /* addr: 0xf6600000 */ 
  cs_uint32                                rsrvd19[1310717];             
  RECIRC_TOP_t                             RECIRC_TOP;                    /* addr: 0xf6800000 */ 
} GOLDENGATE_t;
#endif

#endif
